{"accuracy": 0.91, "correct_count": 182, "total_count": 200}
{"id": "multiple_7", "model_name": "mistral-large-2411", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_7", "question": [[{"role": "user", "content": "How to assess the population growth in deer and their impact on woodland in Washington state over the past decade?"}]], "function": [{"name": "wildlife_population.assess_growth", "description": "Assesses the population growth of a specific species in a specified location over a period.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species for which the growth is to be calculated."}, "location": {"type": "string", "description": "The area where the species is present."}, "duration": {"type": "integer", "description": "The time period for which the population growth should be calculated in years."}}, "required": ["species", "location", "duration"]}}, {"name": "ecological_impact.analyze", "description": "Analyzes the impact of a species on a particular ecosystem.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species whose impact is to be calculated."}, "ecosystem": {"type": "string", "description": "The ecosystem being affected."}, "location": {"type": "string", "description": "The area where the impact is analyzed."}, "timeframe": {"type": "integer", "description": "The time period for which the impact analysis should be carried out in years.", "default": 5}}, "required": ["species", "ecosystem", "location"]}}]}, "model_result_raw": "<functions>\n<function name=\"wildlife_population.assess_growth\">\n<params>\n<param name=\"species\" value=\"deer\" type=\"string\"/>\n<param name=\"location\" value=\"Washington state\" type=\"string\"/>\n<param name=\"duration\" value=\"10\" type=\"integer\"/>\n</params>\n</function>\n<function name=\"ecological_impact.analyze\">\n<params>\n<param name=\"species\" value=\"deer\" type=\"string\"/>\n<param name=\"ecosystem\" value=\"woodland\" type=\"string\"/>\n<param name=\"location\" value=\"Washington state\" type=\"string\"/>\n<param name=\"timeframe\" value=\"10\" type=\"integer\"/>\n</params>\n</function>\n</functions>", "model_result_decoded": [{"wildlife_population.assess_growth": {"species": "deer", "location": "Washington state", "duration": 10}}, {"ecological_impact.analyze": {"species": "deer", "ecosystem": "woodland", "location": "Washington state", "timeframe": 10}}], "possible_answer": [{"wildlife_population.assess_growth": {"species": ["deer", "Deer"], "location": ["Washington state", "WA", "Washington"], "duration": [10]}}]}
{"id": "multiple_10", "model_name": "mistral-large-2411", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_10", "question": [[{"role": "user", "content": "I need to delete some columns from my employees database on personal_data table. I want to remove their email addresses and social security numbers to respect privacy."}]], "function": [{"name": "database.modify_columns", "description": "This function allows deletion or addition of columns in a database", "parameters": {"type": "dict", "properties": {"db_name": {"type": "string", "description": "The name of the database to modify."}, "table": {"type": "string", "description": "The name of the table to modify."}, "operation": {"type": "string", "description": "The operation to carry out on the table. Can be 'delete' or 'add'."}, "columns": {"type": "array", "description": "List of the columns to add or delete from the table.", "items": {"type": "string"}}}, "required": ["db_name", "table", "operation", "columns"]}}, {"name": "database.create_backup", "description": "This function creates a backup of the database before modification", "parameters": {"type": "dict", "properties": {"db_name": {"type": "string", "description": "The name of the database to create a backup of."}, "backup_location": {"type": "string", "description": "The file path where the backup should be stored."}, "timestamp": {"type": "boolean", "description": "Option to append a timestamp to the backup file name.", "default": "False"}}, "required": ["db_name", "backup_location"]}}]}, "model_result_raw": "<functions>\n<function name=\"database.create_backup\">\n<params>\n<param name=\"db_name\" value=\"employees\" type=\"string\"/>\n<param name=\"backup_location\" value=\"employees_backup\" type=\"string\"/>\n<param name=\"timestamp\" value=\"True\" type=\"boolean\"/>\n</params>\n</function>\n<function name=\"database.modify_columns\">\n<params>\n<param name=\"db_name\" value=\"employees\" type=\"string\"/>\n<param name=\"table\" value=\"personal_data\" type=\"string\"/>\n<param name=\"operation\" value=\"delete\" type=\"string\"/>\n<param name=\"columns\" value=\"['email', 'ssn']\" type=\"array\"/>\n</params>\n</function>\n</functions>", "model_result_decoded": [{"database.create_backup": {"db_name": "employees", "backup_location": "employees_backup", "timestamp": true}}, {"database.modify_columns": {"db_name": "employees", "table": "personal_data", "operation": "delete", "columns": ["email", "ssn"]}}], "possible_answer": [{"database.modify_columns": {"db_name": ["employees"], "table": ["personal_data"], "operation": ["delete"], "columns": [["email", "ssn"], ["ssn", "email"], ["email", "social_security_number"], ["social_security_number", "email"], ["email", "social security number"], ["social security number", "email"]]}}]}
{"id": "multiple_24", "model_name": "mistral-large-2411", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_24", "question": [[{"role": "user", "content": "What is the fastest route from London to Edinburgh for playing a chess championship? Also provide an estimate of the distance."}]], "function": [{"name": "route_planner.calculate_route", "description": "Determines the best route between two points.", "parameters": {"type": "dict", "properties": {"start": {"type": "string", "description": "The starting point of the journey."}, "destination": {"type": "string", "description": "The destination of the journey."}, "method": {"type": "string", "enum": ["fastest", "shortest", "balanced"], "description": "The method to use when calculating the route (default is 'fastest').", "default": "fastest"}}, "required": ["start", "destination"]}}, {"name": "chess_club_details.find", "description": "Provides details about a chess club, including location.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the chess club."}, "city": {"type": "string", "description": "The city in which the chess club is located."}, "event": {"type": "string", "description": "The event hosted by the club.", "default": "null"}}, "required": ["name", "city"]}}]}, "model_result_raw": "<functions>\n<function name=\"chess_club_details.find\">\n<params>\n<param name=\"name\" value=\"chess championship\" type=\"string\"/>\n<param name=\"city\" value=\"Edinburgh\" type=\"string\"/>\n</params>\n</function>\n<function name=\"route_planner.calculate_route\">\n<params>\n<param name=\"start\" value=\"London\" type=\"string\"/>\n<param name=\"destination\" value=\"Edinburgh\" type=\"string\"/>\n<param name=\"method\" value=\"fastest\" type=\"string\"/>\n</params>\n</function>\n</functions>", "model_result_decoded": [{"chess_club_details.find": {"name": "chess championship", "city": "Edinburgh"}}, {"route_planner.calculate_route": {"start": "London", "destination": "Edinburgh", "method": "fastest"}}], "possible_answer": [{"route_planner.calculate_route": {"start": ["London"], "destination": ["Edinburgh"], "method": ["fastest", ""]}}]}
{"id": "multiple_26", "model_name": "mistral-large-2411", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_26", "question": [[{"role": "user", "content": "Find out the rewards for playing Fortnite on Playstation platform with different missions and trophies"}]], "function": [{"name": "game_scores.get", "description": "Retrieve scores and rankings based on player\u2019s performance in a certain game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The gaming platform e.g. Xbox, Playstation, PC"}, "level": {"type": "integer", "description": "The level of the game for which you want to retrieve the scores."}, "player": {"type": "string", "description": "The name of the player for whom you want to retrieve scores. Default ''", "optional": true}}, "required": ["game", "platform", "level"]}}, {"name": "game_rewards.get", "description": "Retrieve information about different types of rewards that you can receive when playing a certain game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The gaming platform e.g. Xbox, Playstation, PC"}, "mission": {"type": "string", "description": "The mission for which you want to know the rewards. Default to ''", "optional": true}, "trophy": {"type": "string", "description": "The trophy level for which you want to know the rewards. Default to ''", "optional": true}}, "required": ["game", "platform"]}}, {"name": "game_missions.list", "description": "List all missions for a certain game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the game."}}, "required": ["game"]}}]}, "model_result_raw": "<functions>\n<function name=\"game_missions.list\">\n<params>\n<param name=\"game\" value=\"Fortnite\" type=\"string\"/>\n</params>\n</function>\n<function name=\"game_rewards.get\">\n<params>\n<param name=\"game\" value=\"Fortnite\" type=\"string\"/>\n<param name=\"platform\" value=\"Playstation\" type=\"string\"/>\n</params>\n</function>\n</functions>", "model_result_decoded": [{"game_missions.list": {"game": "Fortnite"}}, {"game_rewards.get": {"game": "Fortnite", "platform": "Playstation"}}], "possible_answer": [{"game_rewards.get": {"game": ["Fortnite"], "platform": ["Playstation", "PS"], "mission": [""], "trophy": [""]}}]}
{"id": "multiple_29", "model_name": "mistral-large-2411", "test_category": "multiple", "valid": false, "error": ["Function name 'functions.intersect' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "multiple_29", "question": [[{"role": "user", "content": "Find the intersection points of the functions y=3x+2 and y=2x+3."}]], "function": [{"name": "functions.zero", "description": "Find the zero points of a function.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "Function given as a string with x as the variable, e.g. 3x+2"}}, "required": ["function"]}}, {"name": "functions.intersect", "description": "Locate the intersection points of two functions.", "parameters": {"type": "dict", "properties": {"function1": {"type": "string", "description": "First function given as a string with x as the variable, e.g. 3x+2"}, "function2": {"type": "string", "description": "Second function given as a string with x as the variable, e.g. 2x+3"}}, "required": ["function1", "function2"]}}]}, "model_result_raw": "<functions><function name=\"intersect\"><params><param name=\"function1\" value=\"3x+2\" type=\"string\"/><param name=\"function2\" value=\"2x+3\" type=\"string\"/></params></function></functions>", "model_result_decoded": [{"intersect": {"function1": "3x+2", "function2": "2x+3"}}], "possible_answer": [{"functions.intersect": {"function1": ["3x + 2", "lambda x: 3x + 2"], "function2": ["2x + 3", "lambda x: 2x + 3"]}}]}
{"id": "multiple_53", "model_name": "mistral-large-2411", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'dependent_var': 'house_prices'. Expected one of ['house_price', 'house price']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_53", "question": [[{"role": "user", "content": "Predict the house prices for next 5 years based on interest rates and unemployment rates."}]], "function": [{"name": "linear_regression", "description": "Applies linear regression to a given set of independent variables to make a prediction.", "parameters": {"type": "dict", "properties": {"independent_var": {"type": "array", "items": {"type": "string"}, "description": "The independent variables."}, "dependent_var": {"type": "string", "description": "The dependent variable."}, "forecast_period": {"type": "integer", "description": "The number of years to forecast the prices. Default 1", "optional": true}}, "required": ["independent_var", "dependent_var"]}}, {"name": "random_forest_regression", "description": "Applies Random Forest Regression to a given set of independent variables to make a prediction.", "parameters": {"type": "dict", "properties": {"independent_var": {"type": "array", "items": {"type": "string"}, "description": "The independent variables."}, "dependent_var": {"type": "string", "description": "The dependent variable."}, "n_estimators": {"type": "integer", "description": "The number of trees in the forest. Default 1", "optional": true}, "forecast_period": {"type": "integer", "description": "The number of years to forecast the prices. Default 1", "optional": true}}, "required": ["independent_var", "dependent_var"]}}]}, "model_result_raw": "<functions><function name=\"linear_regression\"><params><param name=\"independent_var\" value=\"['interest_rates', 'unemployment_rates']\" type=\"array\"/><param name=\"dependent_var\" value=\"house_prices\" type=\"string\"/><param name=\"forecast_period\" value=\"5\" type=\"integer\"/></params></function></functions>", "model_result_decoded": [{"linear_regression": {"independent_var": ["interest_rates", "unemployment_rates"], "dependent_var": "house_prices", "forecast_period": 5}}], "possible_answer": [{"linear_regression": {"independent_var": [["interest rates", "unemployment rates"], ["interest_rate", "unemployment_rate"], ["interest rate", "unemployment rate"]], "dependent_var": ["house_price", "house price"], "forecast_period": [5]}}]}
{"id": "multiple_59", "model_name": "mistral-large-2411", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'specialization': ['criminal']. Expected one of [['Criminal Law'], ['criminal law']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "multiple_59", "question": [[{"role": "user", "content": "Find lawyers specializing in criminal law near me in New York."}]], "function": [{"name": "car_rental", "description": "Rent a car near you based on your preference.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Your location"}, "car_type": {"type": "array", "items": {"type": "string"}, "description": "Type of cars that you want to rent."}, "fuel_type": {"type": "string", "description": "Preferred fuel type of car. Gas, diesel, electric, hybrid etc. Default 'gas'"}}, "required": ["location", "car_type"]}}, {"name": "lawyer_finder", "description": "Locate lawyers near you based on their specialization.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Your location"}, "specialization": {"type": "array", "items": {"type": "string"}, "description": "Specializations of lawyer that you are looking for."}, "experience": {"type": "integer", "description": "Experience in years that lawyer has. Default 1"}}, "required": ["location", "specialization"]}}]}, "model_result_raw": "<functions><function name=\"lawyer_finder\"><params><param name=\"location\" value=\"New York\" type=\"string\"/><param name=\"specialization\" value=\"['criminal']\" type=\"array\"/></params></function></functions>", "model_result_decoded": [{"lawyer_finder": {"location": "New York", "specialization": ["criminal"]}}], "possible_answer": [{"lawyer_finder": {"location": ["New York", "New York, NY", "NY", "New York City", "NYC"], "specialization": [["Criminal Law"], ["criminal law"]], "experience": ["", 1]}}]}
{"id": "multiple_62", "model_name": "mistral-large-2411", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'features': ['camping', 'scenic views']. Expected one of [['Camping', 'Scenic View'], ['Scenic View', 'Camping']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "multiple_62", "question": [[{"role": "user", "content": "Find me the closest nature park that allows camping and has scenic views in Boston, MA."}]], "function": [{"name": "nature_park.find_nearby", "description": "Locate nearby nature parks based on specific criteria like camping availability and scenic views.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Boston, MA."}, "features": {"type": "array", "items": {"type": "string", "enum": ["Camping", "Scenic View", "Trails", "Picnic Areas"]}, "description": "Preferred features in nature park."}}, "required": ["location", "features"]}}, {"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific criteria.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Boston, MA."}, "amenities": {"type": "array", "items": {"type": "string", "enum": ["Delivery", "Outdoor Seating", "Vegetarian Options"]}, "description": "Preferred amenities in restaurant. Default empty array []"}}, "required": ["location"]}}]}, "model_result_raw": "<functions>\n<function name=\"nature_park.find_nearby\">\n<params>\n<param name=\"location\" value=\"Boston, MA\" type=\"string\"/>\n<param name=\"features\" value=\"['camping', 'scenic views']\" type=\"array\"/>\n</params>\n</function>\n</functions>", "model_result_decoded": [{"nature_park.find_nearby": {"location": "Boston, MA", "features": ["camping", "scenic views"]}}], "possible_answer": [{"nature_park.find_nearby": {"location": ["Boston, MA", "Boston"], "features": [["Camping", "Scenic View"], ["Scenic View", "Camping"]]}}]}
{"id": "multiple_65", "model_name": "mistral-large-2411", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'origin': 'New York'. Expected one of ['New York City', 'NYC']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_65", "question": [[{"role": "user", "content": "Find the distance between New York City and Los Angeles."}]], "function": [{"name": "timezones.get_difference", "description": "Find the time difference between two cities.", "parameters": {"type": "dict", "properties": {"city1": {"type": "string", "description": "The first city."}, "city2": {"type": "string", "description": "The second city."}}, "required": ["city1", "city2"]}}, {"name": "geodistance.find", "description": "Find the distance between two cities on the globe.", "parameters": {"type": "dict", "properties": {"origin": {"type": "string", "description": "The originating city for the distance calculation."}, "destination": {"type": "string", "description": "The destination city for the distance calculation."}, "unit": {"type": "string", "default": "miles", "description": "The unit of measure for the distance calculation."}}, "required": ["origin", "destination"]}}, {"name": "flights.search", "description": "Find flights between two cities.", "parameters": {"type": "dict", "properties": {"from_city": {"type": "string", "description": "The city to depart from."}, "to_city": {"type": "string", "description": "The city to arrive at."}, "date": {"type": "string", "default": "next monday", "description": "The date to fly."}}, "required": ["from_city", "to_city"]}}]}, "model_result_raw": "<functions><function name=\"geodistance.find\"><params><param name=\"origin\" value=\"New York\" type=\"string\"/><param name=\"destination\" value=\"Los Angeles\" type=\"string\"/></params></function></functions>", "model_result_decoded": [{"geodistance.find": {"origin": "New York", "destination": "Los Angeles"}}], "possible_answer": [{"geodistance.find": {"origin": ["New York City", "NYC"], "destination": ["Los Angeles", "LA"], "unit": ["miles", ""]}}]}
{"id": "multiple_78", "model_name": "mistral-large-2411", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. malformed node or string on line 1: <ast.Name object at 0x7f249216ad40>"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_78", "question": [[{"role": "user", "content": "Get me information about Natural History Museum in London including timings, exhibitions, and accessibility."}]], "function": [{"name": "tourist_spot_info", "description": "Retrieve information about a specific tourist spot.", "parameters": {"type": "dict", "properties": {"spot": {"type": "string", "description": "The name of the tourist spot you want to get information for."}, "city": {"type": "string", "description": "The city where the tourist spot is located."}, "details": {"type": "array", "items": {"type": "string", "enum": ["timing", "attractions", "tickets", "accessibility", "history"]}, "description": "Details of the tourist spot to get information on. For multiple details, separate them by comma.", "default": "timing, attractions"}}, "required": ["spot", "city"]}}, {"name": "museum_info", "description": "Retrieve information about a specific museum.", "parameters": {"type": "dict", "properties": {"museum": {"type": "string", "description": "The name of the museum you want to get information for."}, "city": {"type": "string", "description": "The city where the museum is located."}, "features": {"type": "array", "items": {"type": "string", "enum": ["timings", "exhibitions", "accessibility", "events", "history"]}, "description": "Features of the museum to get information on. For multiple features, separate them by comma.", "default": "timings, exhibitions"}}, "required": ["museum", "city"]}}]}, "model_result_raw": "<functions><function name=\"museum_info\"><params><param name=\"museum\" value=\"Natural History Museum\" type=\"string\"/><param name=\"city\" value=\"London\" type=\"string\"/><param name=\"features\" value=\"timings, exhibitions, accessibility\" type=\"array\"/></params></function></functions>", "possible_answer": [{"museum_info": {"museum": ["Natural History Museum"], "city": ["London"], "features": [["timings", "exhibitions", "accessibility"], ["exhibitions", "timings", "accessibility"], ["exhibitions", "accessibility", "timings"], ["accessibility", "timings", "exhibitions"], ["accessibility", "exhibitions", "timings"], ["timings", "accessibility", "exhibitions"]]}}]}
{"id": "multiple_80", "model_name": "mistral-large-2411", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'services': ['violin']. Expected one of [['Violin Lessons']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "multiple_80", "question": [[{"role": "user", "content": "Find a local guitar shop that also offers violin lessons in Nashville."}]], "function": [{"name": "music_shop.find_nearby", "description": "Locate nearby music shops based on specific criteria like instrument lessons availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Nashville, TN"}, "services": {"type": "array", "items": {"type": "string", "enum": ["Guitar Lessons", "Violin Lessons", "Piano Lessons", "Ukulele Lessons"]}, "description": "Types of instrument lessons offered in the shop. Default empty array"}, "instruments": {"type": "array", "items": {"type": "string", "enum": ["Guitars", "Violins", "Pianos", "Drums"]}, "description": "Types of instruments sold in the shop. Default empty array"}}, "required": ["location"]}}, {"name": "gym.find_nearby", "description": "Locate nearby gyms based on specific criteria like types of fitness classes availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Nashville, TN"}, "classes": {"type": "array", "items": {"type": "string", "enum": ["Yoga", "Spin", "Zumba", "CrossFit"]}, "description": "Types of fitness classes offered in the gym. Default empty array"}, "equipment": {"type": "array", "items": {"type": "string", "enum": ["Treadmills", "Ellipticals", "Weight Machines", "Free Weights"]}, "description": "Types of gym equipment available. Default empty array"}}, "required": ["location"]}}]}, "model_result_raw": "<functions><function name=\"music_shop.find_nearby\"><params><param name=\"location\" value=\"Nashville, TN\" type=\"string\"/><param name=\"services\" value=\"['violin']\" type=\"array\"/><param name=\"instruments\" value=\"['guitar']\" type=\"array\"/></params></function></functions>", "model_result_decoded": [{"music_shop.find_nearby": {"location": "Nashville, TN", "services": ["violin"], "instruments": ["guitar"]}}], "possible_answer": [{"music_shop.find_nearby": {"location": ["Nashville, TN", "Nashville"], "services": [["Violin Lessons"]], "instruments": [["Guitars"]]}}]}
{"id": "multiple_81", "model_name": "mistral-large-2411", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'add_ons': ['backstage']. Expected one of [['Backstage Pass']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "multiple_81", "question": [[{"role": "user", "content": "Book a ticket for the upcoming Eminem concert in New York City, I would like to get the one with backstage access."}]], "function": [{"name": "concert.book_ticket", "description": "Book a ticket for a concert at a specific location with various add-ons like backstage pass.", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "Name of the artist for the concert."}, "location": {"type": "string", "description": "City where the concert will take place."}, "add_ons": {"type": "array", "items": {"type": "string", "enum": ["Backstage Pass", "VIP Seating", "Parking Pass"]}, "description": "Add-ons for the concert. Default empty array"}}, "required": ["artist", "location"]}}, {"name": "festival.book_ticket", "description": "Book a ticket for a festival at a specific location with various add-ons like camping access.", "parameters": {"type": "dict", "properties": {"festival": {"type": "string", "description": "Name of the festival."}, "location": {"type": "string", "description": "City where the festival will take place."}, "add_ons": {"type": "array", "items": {"type": "string", "enum": ["Camping Pass", "VIP Seating", "Parking Pass"]}, "description": "Add-ons for the festival. Default empty array"}}, "required": ["festival", "location"]}}]}, "model_result_raw": "<functions><function name=\"concert.book_ticket\"><params><param name=\"artist\" value=\"Eminem\" type=\"string\"/><param name=\"location\" value=\"New York City\" type=\"string\"/><param name=\"add_ons\" value=\"['backstage']\" type=\"array\"/></params></function></functions>", "model_result_decoded": [{"concert.book_ticket": {"artist": "Eminem", "location": "New York City", "add_ons": ["backstage"]}}], "possible_answer": [{"concert.book_ticket": {"artist": ["Eminem"], "location": ["New York City", "NYC"], "add_ons": [["Backstage Pass"]]}}]}
{"id": "multiple_91", "model_name": "mistral-large-2411", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'ingredientLimit': 5. Expected one of [4]."], "error_type": "value_error:others", "prompt": {"id": "multiple_91", "question": [[{"role": "user", "content": "Can I find a good cooking recipe for apple pie using less than 5 ingredients?"}]], "function": [{"name": "restaurant.find", "description": "Locate restaurants based on specific criteria such as cuisine and price range", "parameters": {"type": "dict", "properties": {"cuisine": {"type": "string", "description": "The type of cuisine preferred."}, "price": {"type": "array", "items": {"type": "string"}, "description": "Price range of the restaurant in format ['low', 'mid', 'high']. Default ['low', 'mid', 'high']"}}, "required": ["cuisine"]}}, {"name": "recipe.find", "description": "Locate cooking recipes based on specific criteria such as main ingredient and number of ingredients", "parameters": {"type": "dict", "properties": {"mainIngredient": {"type": "string", "description": "Main ingredient for the recipe."}, "ingredientLimit": {"type": "integer", "description": "Max number of ingredients the recipe should use."}}, "required": ["mainIngredient", "ingredientLimit"]}}]}, "model_result_raw": "<functions><function name=\"recipe.find\"><params><param name=\"mainIngredient\" value=\"apple pie\" type=\"string\"/><param name=\"ingredientLimit\" value=\"5\" type=\"integer\"/></params></function></functions>", "model_result_decoded": [{"recipe.find": {"mainIngredient": "apple pie", "ingredientLimit": 5}}], "possible_answer": [{"recipe.find": {"mainIngredient": ["apple pie", "apple"], "ingredientLimit": [4]}}]}
{"id": "multiple_92", "model_name": "mistral-large-2411", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'categories': ['vegetarian', 'gluten-free']. Expected one of [['vegan', 'gluten-free'], ['gluten-free', 'vegan']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "multiple_92", "question": [[{"role": "user", "content": "Get me a list of available vegetarian and gluten-free foods at the Walmart near Denver."}]], "function": [{"name": "safeway.vegan_products", "description": "Get available vegan products at specified Safeway store", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the Safeway store is located, e.g. Denver, CO"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["vegan", "gluten-free"]}, "description": "Product categories to search within. Default empty array"}}, "required": ["location"]}}, {"name": "wholefoods.vegan_products", "description": "Get available vegan products at specified Whole Foods store", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the Whole Foods store is located, e.g. Denver, CO"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["vegan", "gluten-free"]}, "description": "Product categories to search within. Default empty array"}}, "required": ["location"]}}, {"name": "walmart.vegan_products", "description": "Get available vegan products at specified Walmart store", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the Walmart store is located, e.g. Denver, CO"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["vegan", "gluten-free"]}, "description": "Product categories to search within. Default empty array"}}, "required": ["location"]}}]}, "model_result_raw": "<functions><function name=\"walmart.vegan_products\"><params><param name=\"location\" value=\"Denver, CO\" type=\"string\"/><param name=\"categories\" value=\"['vegetarian', 'gluten-free']\" type=\"array\"/></params></function></functions>", "model_result_decoded": [{"walmart.vegan_products": {"location": "Denver, CO", "categories": ["vegetarian", "gluten-free"]}}], "possible_answer": [{"walmart.vegan_products": {"location": ["Denver, CO", "Denver"], "categories": [["vegan", "gluten-free"], ["gluten-free", "vegan"]]}}]}
{"id": "multiple_119", "model_name": "mistral-large-2411", "test_category": "multiple", "valid": false, "error": ["Nested type checking failed for parameter 'conditions'. Expected outer type array with inner type <class 'dict'>. Parameter value: ['age > 25', 'job = engineer']."], "error_type": "type_error:nested", "prompt": {"id": "multiple_119", "question": [[{"role": "user", "content": "Find records in database in user table where age is greater than 25 and job is 'engineer'."}]], "function": [{"name": "average_batting_score", "description": "Get the average batting score of a cricketer for specified past matches.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "Name of the cricket player."}, "matches": {"type": "integer", "description": "Number of past matches to consider for average calculation."}, "match_format": {"type": "string", "description": "Format of the cricket matches considered (e.g., 'T20', 'ODI', 'Test'). Default is 'T20'."}}, "required": ["player_name", "matches"]}}, {"name": "calculate_return_on_investment", "description": "Calculate the return on investment for a given stock based on its purchase price, sale price, and any dividends received.", "parameters": {"type": "dict", "properties": {"purchase_price": {"type": "float", "description": "The price the stock was bought at."}, "sale_price": {"type": "float", "description": "The price the stock was sold at."}, "dividend": {"type": "float", "description": "Any dividends received from the stock.", "default": 0}}, "required": ["purchase_price", "sale_price"]}}, {"name": "database.query", "description": "Query the database based on certain conditions.", "parameters": {"type": "dict", "properties": {"table": {"type": "string", "description": "Name of the table to query."}, "conditions": {"type": "array", "items": {"type": "dict", "properties": {"field": {"type": "string", "description": "The field to apply the condition."}, "operation": {"type": "string", "description": "The operation to be performed.", "enum": ["<", ">", "=", ">=", "<="]}, "value": {"type": "string", "description": "The value to be compared."}}, "required": ["field", "operation", "value"]}, "description": "Conditions for the query."}}, "required": ["table", "conditions"]}}, {"name": "probability_of_event", "description": "Calculates the probability of an event.", "parameters": {"type": "dict", "properties": {"success_outcomes": {"type": "integer", "description": "The number of successful outcomes."}, "total_outcomes": {"type": "integer", "description": "The total number of possible outcomes."}, "format_as_ratio": {"type": "boolean", "description": "When true, formats the output as a ratio instead of a decimal. Default is false."}}, "required": ["success_outcomes", "total_outcomes"]}}]}, "model_result_raw": "<functions>\n<function name=\"database.query\">\n<params>\n<param name=\"table\" value=\"user\" type=\"string\"/>\n<param name=\"conditions\" value=\"['age > 25', 'job = engineer']\" type=\"array\"/>\n</params>\n</function>\n</functions>", "model_result_decoded": [{"database.query": {"table": "user", "conditions": ["age > 25", "job = engineer"]}}], "possible_answer": [{"database.query": {"table": ["user"], "conditions": [[{"field": ["age"], "operation": [">"], "value": ["25"]}, {"field": ["job"], "operation": ["="], "value": ["engineer"]}]]}}]}
{"id": "multiple_131", "model_name": "mistral-large-2411", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 4, column 34"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_131", "question": [[{"role": "user", "content": "Find the market performance of the S&P 500 and the Dow Jones over the past 5 days."}]], "function": [{"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific dietary preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Los Angeles, CA"}, "dietary_preference": {"type": "array", "items": {"type": "string", "enum": ["Vegan", "Vegetarian", "Gluten-free", "Dairy-free", "Nut-free"]}, "description": "Dietary preference. Default is empty array."}}, "required": ["location"]}}, {"name": "market_performance.get_data", "description": "Retrieve the market performance data for specified indexes over a specified time period.", "parameters": {"type": "dict", "properties": {"indexes": {"type": "array", "items": {"type": "string"}, "description": "Array of stock market indexes. Supported indexes are 'S&P 500', 'Dow Jones', 'NASDAQ', 'FTSE 100', 'DAX' etc."}, "days": {"type": "integer", "description": "Number of days in the past for which the performance data is required."}, "detailed": {"type": "boolean", "description": "Whether to return detailed performance data. If set to true, returns high, low, opening, and closing prices. If false, returns only closing prices. Default is false."}}, "required": ["indexes", "days"]}}, {"name": "sports.match_results", "description": "Returns the results of a given match between two teams.", "parameters": {"type": "dict", "properties": {"team1": {"type": "string", "description": "The name of the first team."}, "team2": {"type": "string", "description": "The name of the second team."}, "season": {"type": "string", "description": "The season when the match happened. Default is the current season."}}, "required": ["team1", "team2"]}}]}, "model_result_raw": "<functions>\n<function name=\"market_performance.get_data\">\n<params>\n<param name=\"indexes\" value=\"['S&P 500', 'Dow Jones']\" type=\"array\"/>\n<param name=\"days\" value=\"5\" type=\"integer\"/>\n</params>\n</function>\n</functions>", "possible_answer": [{"market_performance.get_data": {"indexes": [["S&P 500", "Dow Jones"]], "days": [5], "detailed": ["", false]}}]}
{"id": "multiple_157", "model_name": "mistral-large-2411", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'source': 'historical record'. Expected one of ['historical records']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_157", "question": [[{"role": "user", "content": "What is the earliest reference of Jesus Christ in history from historical record?"}]], "function": [{"name": "sports_ranking.get_current", "description": "Retrieve the current ranking of a specific team in a particular league.", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "The name of the team whose ranking is sought."}, "league": {"type": "string", "description": "The league in which the team participates."}, "season": {"type": "string", "description": "The season for which the ranking is sought. Defaults to the current season if not provided."}}, "required": ["team", "league"]}}, {"name": "get_earliest_reference", "description": "Retrieve the earliest historical reference of a person.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the person."}, "source": {"type": "string", "enum": ["scriptures", "historical records"], "description": "Source to fetch the reference. Default is 'scriptures'"}}, "required": ["name"]}}]}, "model_result_raw": "<functions>\n<function name=\"get_earliest_reference\">\n  <params>\n<param name=\"name\" value=\"Jesus Christ\" type=\"string\"/>\n<param name=\"source\" value=\"historical record\" type=\"string\"/>\n  </params>\n</function>\n</functions>", "model_result_decoded": [{"get_earliest_reference": {"name": "Jesus Christ", "source": "historical record"}}], "possible_answer": [{"get_earliest_reference": {"name": ["Jesus Christ"], "source": ["historical records"]}}]}
{"id": "multiple_179", "model_name": "mistral-large-2411", "test_category": "multiple", "valid": false, "error": ["Missing required parameter: 'deck_size'."], "error_type": "simple_function_checker:missing_required", "prompt": {"id": "multiple_179", "question": [[{"role": "user", "content": "What is the probability of getting a full house in poker?"}]], "function": [{"name": "poker_probability.full_house", "description": "Calculate the probability of getting a full house in a poker game.", "parameters": {"type": "dict", "properties": {"deck_size": {"type": "integer", "description": "The size of the deck. Default is 52."}, "hand_size": {"type": "integer", "description": "The size of the hand. Default is 5."}}, "required": ["deck_size", "hand_size"]}}, {"name": "hospital.locate", "description": "Locate nearby hospitals based on location and radius. Options to include specific departments are available.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Denver, CO"}, "radius": {"type": "integer", "description": "The radius within which you want to find the hospital in kms."}, "department": {"type": "string", "description": "Specific department within the hospital. Default is ''.", "enum": ["General Medicine", "Emergency", "Pediatrics", "Cardiology", "Orthopedics"]}}, "required": ["location", "radius"]}}, {"name": "find_recipe", "description": "Find a recipe based on the dietary restrictions, recipe type, and time constraints.", "parameters": {"type": "dict", "properties": {"dietary_restrictions": {"type": "string", "description": "Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free."}, "recipe_type": {"type": "string", "description": "Type of the recipe. E.g. dessert, main course, breakfast."}, "time": {"type": "integer", "description": "Time limit in minutes to prep the meal."}}, "required": ["dietary_restrictions", "recipe_type", "time"]}}]}, "model_result_raw": "<functions><function name=\"poker_probability.full_house\"><params></params></function></functions>", "model_result_decoded": [{"poker_probability.full_house": {}}], "possible_answer": [{"poker_probability.full_house": {"deck_size": [52], "hand_size": [5]}}]}