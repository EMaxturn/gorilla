{"name": "create", "description": "Create a table with specified columns.", "parameters": {"type": "dict", "properties": {"table_name": {"type": "string", "description": "The name of the table to create."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "A list of column definitions, e.g., ['column1', 'column2']. The column inputs must be alphabetically sorted as the arguments of the function."}, "column_types": {"type": "array", "items": {"type": "string"}, "description": "A list of column types, e.g., ['INT', 'VARCHAR(255)']. If a column type is not explicitly specified by user, it defaults to VARCHAR(255)."}}, "required": ["columns", "column_types"]}, "response": {"type": "dict", "properties": {"description": "str: The constructed SQL CREATE query."}}}
{"name": "delete", "description": "Delete rows from a table based on given conditions.", "parameters": {"type": "dict", "properties": {"table_name": {"type": "string", "description": "The name of the table to delete from."},"conditions": {"type": "array", "items": {"type": "dict", "properties": {"operator": {"type": "string", "enum": ["AND", "OR"], "description": "The logical operator to use for the condition."}, "left": {"type": "string", "description": "The left side of the condition, typically a column name."}, "sign": {"type": "string", "enum": ["=", "!=", "<", ">", "<=", ">="], "description": "The comparison operator for the condition."}, "right": {"type": "string", "description": "The right side of the condition, typically a value to compare."}}, "required": ["operator", "left", "sign", "right"], "description": "A condition in the form of a dictionary with 'operator', 'left', 'sign', and 'right' keys."}, "description": "A list of conditions to filter rows in the query."}}, "required": ["table_name"]}, "response": {"type": "dict", "properties": {"description": "str: The constructed SQL DELETE query."}}}
{"name": "insert", "description": "Insert rows of data into a table with specified columns.", "parameters": {"type": "dict", "properties": {"table_name": {"type": "string", "description": "The name of the table to insert into."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "A list of column names for the INSERT operation."}, "values": {"type": "array", "items": {"type": "array", "items": {"type": "string"}}, "description": "A list of rows, where each row is a list of values to insert. "}}, "required": ["columns", "values"]}, "response": {"type": "dict", "properties": {"description": "str: The constructed SQL INSERT query."}}}
{"name": "select", "description": "Select rows from a table with specified columns and conditions.", "parameters": {"type": "dict", "properties": {"table_name": {"type": "string", "description": "The name of a table to query."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "A list of column names to select. If * is given, all columns are selected. The column names must be alphabetically sorted as the arguments of the select function. You could also wrap the columns by AVG(), MAX(), or MIN()."}, "conditions": {"type": "array", "items": {"type": "dict", "properties": {"operator": {"type": "string", "enum": ["AND", "OR"], "description": "The logical operator to use for the condition."}, "left": {"type": "string", "description": "The left side of the condition, typically a column name."}, "sign": {"type": "string", "enum": ["=", "!=", "<", ">", "<=", ">="], "description": "The comparison operator for the condition."}, "right": {"type": "string", "description": "The right side of the condition, typically a value to compare."}}, "required": ["operator", "left", "sign", "right"], "description": "A condition in the form of a dictionary with 'operator', 'left', 'sign', and 'right' keys."}, "description": "A list of conditions to filter rows in the query."}, "order_by": {"type": "array", "items": {"type": "string"}, "description": "A list of columns to order the result by.", "default": null}, "desc": {"type": "any", "description": "If order_by is specified, this flag indicates whether to sort in descending order. Default is False.", "default": false}, "limit": {"type": "any", "description": "The maximum number of rows to return.", "default": null}, "top": {"type": "any", "description": "The maximum number of rows to return.", "default": null}, "join": {"type": "any", "description": "A dictionary containing the join_type, table_name, and join_condition. Join types can be INNER, LEFT, RIGHT, FULL, CROSS, NATURAL. Join conditions are in the form: 'table1.column1 = table2.column2'.", "default": null}, "group_by": {"type": "any", "description": "The column to group the results by. - join_type (str): The type of join to perform. Can be 'INNER', 'LEFT', 'RIGHT', 'FULL', 'CROSS', 'NATURAL'. - table_name (str): The name of the table to join. - join_condition (str): The condition to join the tables on.", "default": null}}, "required": ["columns","table_name"]}, "response": {"type": "dict", "properties": {"description": "str: The constructed SQL SELECT query."}}}
{"name": "update", "description": "Update rows in a table with specified columns and values.", "parameters": {"type": "dict", "properties": {"table_name": {"type": "string", "description": "The name of the table to update."}, "columns": {"type": "array", "items": {"type": "string"}, "description": "A list of column names to update. The column inputs must be alphabetically sorted as the arguments of the function."}, "values": {"type": "array", "items": {"type": "string"}, "description": "A list of corresponding values to update."}, "conditions": {"type": "array", "items": {"type": "dict", "properties": {"operator": {"type": "string", "enum": ["AND", "OR"], "description": "The logical operator to use for the condition."}, "left": {"type": "string", "description": "The left side of the condition, typically a column name."}, "sign": {"type": "string", "enum": ["=", "!=", "<", ">", "<=", ">="], "description": "The comparison operator for the condition."}, "right": {"type": "string", "description": "The right side of the condition, typically a value to compare."}}, "required": ["operator", "left", "sign", "right"], "description": "A condition in the form of a dictionary with 'operator', 'left', 'sign', and 'right' keys."}, "description": "A list of conditions to filter rows in the query."}}, "required": ["columns", "values"]}, "response": {"type": "dict", "properties": {"description": "str: The constructed SQL UPDATE query."}}}
