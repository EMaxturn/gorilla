{"id": "simple_19", "result": "math.gcd<function name=\"math.gcd\"><param name=\"num1\" type=\"integer\" required=\"true\"/><param name=\"num2\" type=\"integer\" required=\"true\"/></function>", "input_token_count": 442, "output_token_count": 45, "latency": 0.5221283435821533}
{"id": "simple_25", "result": "calculate_final_velocity<function name=\"calculate_final_velocity\">\n  <params>\n    <param name=\"height\" type=\"integer\" required=\"true\">150</param>\n    <param name=\"initial_velocity\" type=\"integer\" required=\"false\">0</param>\n    <param name=\"gravity\" type=\"float\" required=\"false\">9.81</param>\n  </params>", "input_token_count": 543, "output_token_count": 93, "latency": 0.8771564960479736}
{"id": "simple_58", "result": "<function name=\"cell_biology.function_lookup\">\n  <desc>Look up the function of a given molecule in a specified organelle.</desc>\n  <params>\n    <param name=\"molecule\" type=\"string\" required=\"true\">\n      <desc>The molecule of interest.</desc>\n    </param>\n    <param name=\"organelle\" type=\"string\" required=\"true\">\n      <desc>The organelle of interest.</desc>\n    </param>\n    <param name=\"specific_function\" type=\"boolean\" required=\"true\">\n      <desc>If set to true, a specific function of the molecule within the organelle will be provided, if such information exists.</desc>\n    </param>\n  </params>\n</function>\n", "input_token_count": 501, "output_token_count": 171, "latency": 1.2677836418151855}
{"id": "simple_94", "result": "update_user_info<function name=\"update_user_info\"><params>\n  <param name=\"user_id\" type=\"integer\">43523</param>\n  <param name=\"update_info\" type=\"dict\">\n    {'name': 'John Doe', 'email': 'johndoe@email.com'}\n  </param>\n  <param name=\"database\" type=\"string\">your_database_name</param>\n</function>", "input_token_count": 507, "output_token_count": 105, "latency": 0.920600414276123}
{"id": "simple_96", "result": "<function name=\"database.query\">\n  <desc>Query the database based on certain conditions.</desc>\n  <params>\n    <param name=\"table\" type=\"string\" required=\"true\">user</param>\n    <param name=\"conditions\" type=\"array\" required=\"true\">\n      <desc>Conditions for the query.</desc>\n    </param>\n  </params>\n</function>", "input_token_count": 448, "output_token_count": 91, "latency": 0.8360207080841064}
{"id": "simple_105", "result": "math.power(3, 4)\n", "input_token_count": 485, "output_token_count": 11, "latency": 0.13695979118347168}
{"id": "simple_113", "result": "probability.dice_roll(desired_number=6, number_of_rolls=2)\n", "input_token_count": 523, "output_token_count": 22, "latency": 0.2699728012084961}
{"id": "simple_134", "result": "investment.predictProfit(5000, 7.0, 5)", "input_token_count": 507, "output_token_count": 19, "latency": 0.23676586151123047}
{"id": "simple_155", "result": "```xml\n<function name=\"calculate_future_value\">\n  <params>\n    <param name=\"initial_investment\" type=\"integer\">1000</param>\n    <param name=\"interest_rate\" type=\"float\">0.05</param>\n    <param name=\"duration\" type=\"integer\">2</param>\n    <param name=\"compounded\" type=\"integer\">1</param>\n  </params>\n</function>\n```", "input_token_count": 554, "output_token_count": 105, "latency": 0.8759942054748535}
{"id": "simple_165", "result": "civil_cases.retrieve(year=2020, crime_type=\"theft\", location=\"Los Angeles, California\")", "input_token_count": 493, "output_token_count": 28, "latency": 0.32289767265319824}
{"id": "simple_168", "result": "<function name=\"lawsuit_search\">\n  <desc>Search for lawsuits related to a specific company within a specific date range and location.</desc>\n  <params>\n    <param name=\"company\" type=\"string\" required=\"true\">Google</param>\n    <param name=\"start_date\" type=\"string\" required=\"true\">2021-01-01</param>\n    <param name=\"location\" type=\"string\" required=\"true\">California</param>\n    <param name=\"status\" type=\"string\" required=\"false\">ongoing</param>\n  </params>\n</function>", "input_token_count": 562, "output_token_count": 138, "latency": 1.0470221042633057}
{"id": "simple_174", "result": "<function name=\"get_top_cases\">\n  <param name=\"field_of_law\" type=\"string\" required=\"true\">constitutional law</param>\n  <param name=\"top_number\" type=\"integer\" required=\"true\">10</param>\n  <param name=\"country\" type=\"string\" required=\"false\">China</param>\n</function>", "input_token_count": 518, "output_token_count": 83, "latency": 0.7380080223083496}
{"id": "simple_179", "result": "<function name=\"find_latest_court_case\">\n  <param name=\"company1\" type=\"string\" required=\"true\">Apple</param>\n  <param name=\"company2\" type=\"string\" required=\"true\">Samsung</param>\n  <param name=\"country\" type=\"string\" required=\"true\">USA</param>\n</function>", "input_token_count": 487, "output_token_count": 79, "latency": 0.6911659240722656}
{"id": "simple_181", "result": "<function name=\"get_lawsuit_details\">\n  <desc>Retrieve details of a lawsuit based on its case number and court location.</desc>\n  <params>\n    <param name=\"case_number\" type=\"string\" required=\"true\">\n      <desc>Case number of the lawsuit.</desc>\n    </param>\n    <param name=\"court_location\" type=\"string\" required=\"true\">\n      <desc>The location of the court where the lawsuit was filed.</desc>\n    </param>\n    <param name=\"with_verdict\" type=\"boolean\" required=\"false\">\n      <desc>Flag to include verdict details if available. Default is False</desc>\n    </param>\n  </params>\n</function>", "input_token_count": 513, "output_token_count": 167, "latency": 1.1518375873565674}
{"id": "simple_208", "result": "<function name=\"map_service.get_directions\">\n  <desc>Retrieve directions from a starting location to an ending location, including options for route preferences.</desc>\n  <params>\n    <param name=\"start\" type=\"string\" required=\"true\">\n      <desc>Starting location for the route.</desc>\n    </param>\n    <param name=\"end\" type=\"string\" required=\"true\">\n      <desc>Ending location for the route.</desc>\n    </param>\n    <param name=\"avoid\" type=\"array\" required=\"false\">\n      <desc>Route features to avoid. Default is ['highways', 'ferries']</desc>\n    </param>\n  </params>\n</function>", "input_token_count": 500, "output_token_count": 163, "latency": 1.1288671493530273}
{"id": "simple_213", "result": "<function name=\"flight.book\">\n  <param name=\"departure_location\" type=\"string\" required=\"true\">San Francisco</param>\n  <param name=\"destination_location\" type=\"string\" required=\"true\">London</param>\n  <param name=\"date\" type=\"string\" required=\"true\">2022-04-27</param>\n  <param name=\"time\" type=\"string\" required=\"false\">afternoon</param>\n</function>", "input_token_count": 603, "output_token_count": 108, "latency": 0.8448734283447266}
{"id": "simple_226", "result": "<function name=\"get_zodiac_compatibility\">\n  <param name=\"sign1\" type=\"string\" required=\"true\">Aries</param>\n  <param name=\"sign2\" type=\"string\" required=\"true\">Gemini</param>\n  <param name=\"scale\" type=\"string\" required=\"false\">percentage</param>\n</function>", "input_token_count": 485, "output_token_count": 80, "latency": 0.6795673370361328}
{"id": "simple_244", "result": "publication_year.find(\"Isaac Newton\", \"Law of Universal Gravitation\")\n", "input_token_count": 491, "output_token_count": 18, "latency": 0.21802687644958496}
{"id": "simple_254", "result": "<function name=\"get_religion_history\">\n  <param name=\"religion\" type=\"string\" required=\"true\">Christianity</param>\n  <param name=\"start_year\" type=\"integer\" required=\"true\">300</param>\n  <param name=\"end_year\" type=\"integer\" required=\"true\">400</param>\n  <param name=\"event_type\" type=\"string\" required=\"false\">all</param>\n</function>", "input_token_count": 542, "output_token_count": 106, "latency": 0.8256044387817383}
{"id": "simple_281", "result": "<function name=\"get_instrument_info\">\n  <desc>Retrieve the details about a specific musical instrument based on its name, maker, and manufacturing year.</desc>\n  <params>\n    <param name=\"name\" type=\"string\" required=\"true\">\n      <desc>The name of the instrument.</desc>\n    </param>\n    <param name=\"maker\" type=\"string\" required=\"true\">\n      <desc>The name of the maker who created the instrument.</desc>\n    </param>\n    <param name=\"year\" type=\"integer\" required=\"true\">\n      <desc>The year the instrument was made.</desc>\n    </param>\n  </params>\n</function>", "input_token_count": 509, "output_token_count": 158, "latency": 1.0839450359344482}
{"id": "simple_284", "result": "<function name=\"concert_info.get\">\n  <param name=\"location\" type=\"string\" required=\"true\">New York</param>\n  <param name=\"date\" type=\"string\" required=\"true\">next month</param>\n  <param name=\"genre\" type=\"string\" required=\"true\">pop</param>\n</function>", "input_token_count": 485, "output_token_count": 77, "latency": 0.647345781326294}
{"id": "simple_295", "result": "<function name=\"get_song_lyrics\">\n  <desc>Retrieve the lyrics of a song based on the artist's name and song title.</desc>\n  <params>\n    <param name=\"song_title\" type=\"string\" required=\"true\">\n      <desc>The title of the song.</desc>\n    </param>\n    <param name=\"artist_name\" type=\"string\" required=\"true\">\n      <desc>The name of the artist who performed the song.</desc>\n    </param>\n    <param name=\"lang\" type=\"string\" required=\"false\">\n      <desc>The language of the lyrics. Default is English.</desc>\n    </param>\n  </params>\n</function>", "input_token_count": 499, "output_token_count": 163, "latency": 1.0806808471679688}
{"id": "simple_297", "result": "```xml\n<function name=\"music.theory.chordProgression\">\n  <desc>Identifies a potential key signature for the given chord progression.</desc>\n  <params>\n    <param name=\"progression\" type=\"array\" required=\"true\">\n      <desc>The chord progression in Roman numerals. Eg: ['I', 'V', 'vi', 'IV'].</desc>\n    </param>\n    <param name=\"returnAllPossibleKeys\" type=\"boolean\" required=\"false\">\n      <desc>Flag indicating if the function should return all possible key signatures that fit the chord progression. If false, the function will return the first valid key it finds. Default is false.</desc>\n    </param>\n    <param name=\"assumeMajor\" type=\"boolean\" required=\"false\">\n      <desc>Assumption if the key signature is Major. If true, the function will assume the key signature to be major and otherwise minor. Default is true.</desc>\n    </param>\n  </params>\n</function>", "input_token_count": 564, "output_token_count": 224, "latency": 1.3392000198364258}
{"id": "simple_327", "result": "<function name=\"sports_team.get_schedule\">\n  <desc>Fetches the schedule of the specified sports team for the specified number of games in the given league.</desc>\n  <params>\n    <param name=\"team_name\" type=\"string\" required=\"true\">\n      <desc>The name of the sports team.</desc>\n    </param>\n    <param name=\"num_of_games\" type=\"integer\" required=\"true\">\n      <desc>Number of games for which to fetch the schedule.</desc>\n    </param>\n    <param name=\"league\" type=\"string\" required=\"true\">\n      <desc>The name of the sports league. If not provided, the function will fetch the schedule for all games, regardless of the league.</desc>\n    </param>\n    <param name=\"location\" type=\"string\" required=\"false\">\n      <desc>Optional. The city or venue where games are to be held. If not provided, default that all venues will be considered.</desc>\n    </param>\n  </params>\n</function>", "input_token_count": 578, "output_token_count": 240, "latency": 1.3936407566070557}
{"id": "simple_328", "result": "<function name=\"boardgame.get_info\">\n  <desc>Retrieve detailed information of a board game.</desc>\n  <params>\n    <param name=\"name\" type=\"string\" required=\"true\">\n      <desc>Name of the board game.</desc>\n    </param>\n    <param name=\"parameters\" type=\"array\" required=\"true\">\n      <desc>Game characteristics interested.</desc>\n    </param>\n    <param name=\"language\" type=\"string\" required=\"false\">\n      <desc>The preferred language for the game information, default is English</desc>\n    </param>\n  </params>\n</function>\n", "input_token_count": 483, "output_token_count": 148, "latency": 0.9877569675445557}
{"id": "simple_335", "result": "<function name=\"find_card_in_deck\">\n  <desc>Locate a particular card in a deck based on rank and suit.</desc>\n  <params>\n    <param name=\"rank\" type=\"string\" required=\"true\">\n      <desc>Rank of the card (e.g. Ace, Two, King).</desc>\n    </param>\n    <param name=\"suit\" type=\"string\" required=\"true\">\n      <desc>Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs).</desc>\n    </param>\n    <param name=\"deck\" type=\"array\" required=\"false\">\n      <desc>Deck of cards. If not provided, the deck will be a standard 52 card deck</desc>\n    </param>\n  </params>\n</function>", "input_token_count": 523, "output_token_count": 185, "latency": 1.1482725143432617}
{"id": "simple_360", "result": "<function name=\"find_recipe\">\n  <desc>Locate a recipe based on name and its calorie content</desc>\n  <params>\n    <param name=\"recipeName\" type=\"string\" required=\"true\">pasta carbonara</param>\n    <param name=\"maxCalories\" type=\"integer\" required=\"false\">500</param>\n  </params>\n</function>", "input_token_count": 453, "output_token_count": 88, "latency": 0.6684811115264893}
{"id": "simple_380", "result": "<function name=\"hotel_booking\">\n  <parameters>\n    <param name=\"location\" type=\"string\">Manhattan, New York</param>\n    <param name=\"room_type\" type=\"string\">single</param>\n    <param name=\"duration\" type=\"integer\">3</param>\n    <param name=\"start_date\" type=\"string\">2023-03-10</param>\n    <param name=\"preferences\" type=\"array\">\n      <param name=\"options\" type=\"string\">{'pet-friendly': True, 'near_manhattan': True}</param>\n    </param>\n  </parameters>\n</function>", "input_token_count": 610, "output_token_count": 150, "latency": 0.9816265106201172}
{"id": "simple_390", "result": "<function name=\"currency_conversion.convert\">\n  <param name=\"amount\" type=\"integer\">150</param>\n  <param name=\"from_currency\" type=\"string\">Euros</param>\n  <param name=\"to_currency\" type=\"string\">Canadian Dollars</param>\n</function>", "input_token_count": 478, "output_token_count": 71, "latency": 0.5666260719299316}
{"id": "simple_393", "result": "convert_currency<function name=\"convert_currency\"><param name=\"base_currency\" type=\"string\">Japanese Yen</param><param name=\"target_currency\" type=\"string\">US Dollar</param><param name=\"amount\" type=\"integer\">20000</param></function>", "input_token_count": 495, "output_token_count": 64, "latency": 0.5149102210998535}
