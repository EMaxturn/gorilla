{"accuracy": 0.7333333333333333, "correct_count": 22, "total_count": 30}
{"id": "simple_58", "model_name": "gemini-2.5-pro-preview-05-06", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_58", "question": [[{"role": "user", "content": "What is the function of ATP synthase in mitochondria?"}]], "function": [{"name": "cell_biology.function_lookup", "description": "Look up the function of a given molecule in a specified organelle.", "parameters": {"type": "dict", "properties": {"molecule": {"type": "string", "description": "The molecule of interest."}, "organelle": {"type": "string", "description": "The organelle of interest."}, "specific_function": {"type": "boolean", "description": "If set to true, a specific function of the molecule within the organelle will be provided, if such information exists."}}, "required": ["molecule", "organelle", "specific_function"]}}]}, "model_result_raw": "<TOOLCALL>['cell_biology.function_lookup(molecule=\"ATP synthase\", organelle=\"mitochondria\", specific_function=True)']</TOOLCALL>", "possible_answer": [{"cell_biology.function_lookup": {"molecule": ["ATP synthase"], "organelle": ["mitochondria"], "specific_function": [true]}}]}
{"id": "simple_96", "model_name": "gemini-2.5-pro-preview-05-06", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'conditions'. Expected outer type array with inner type <class 'dict'>. Parameter value: ['age > 25', \"job = 'engineer'\"]."], "error_type": "type_error:nested", "prompt": {"id": "simple_96", "question": [[{"role": "user", "content": "Find records in database in user table where age is greater than 25 and job is 'engineer'."}]], "function": [{"name": "database.query", "description": "Query the database based on certain conditions.", "parameters": {"type": "dict", "properties": {"table": {"type": "string", "description": "Name of the table to query."}, "conditions": {"type": "array", "items": {"type": "dict", "properties": {"field": {"type": "string", "description": "The field to apply the condition."}, "operation": {"type": "string", "description": "The operation to be performed.", "enum": ["<", ">", "=", ">=", "<="]}, "value": {"type": "string", "description": "The value to be compared."}}, "required": ["field", "operation", "value"]}, "description": "Conditions for the query."}}, "required": ["table", "conditions"]}}]}, "model_result_raw": "<TOOLCALL>\n[database.query(table='user', conditions=['age > 25', \"job = 'engineer'\"])]\n</TOOLCALL>", "model_result_decoded": [{"database.query": {"table": "user", "conditions": ["age > 25", "job = 'engineer'"]}}], "possible_answer": [{"database.query": {"table": ["user"], "conditions": [[{"field": ["age"], "operation": [">"], "value": ["25"]}, {"field": ["job"], "operation": ["="], "value": ["engineer"]}]]}}]}
{"id": "simple_105", "model_name": "gemini-2.5-pro-preview-05-06", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'mod': 1000. Expected one of ['', 1]."], "error_type": "value_error:others", "prompt": {"id": "simple_105", "question": [[{"role": "user", "content": "Calculate the power of 3 raised to the power 4."}]], "function": [{"name": "math.power", "description": "Calculate the power of one number raised to another.", "parameters": {"type": "dict", "properties": {"base": {"type": "integer", "description": "The base number."}, "exponent": {"type": "integer", "description": "The exponent."}, "mod": {"type": "integer", "description": "The modulus. Default is 1. Calculates pow(base, exponent) % mod when provided."}}, "required": ["base", "exponent"]}}]}, "model_result_raw": "<TOOLCALL>math.power(base=3, exponent=4, mod=1000)</TOOLCALL>", "model_result_decoded": [{"math.power": {"base": 3, "exponent": 4, "mod": 1000}}], "possible_answer": [{"math.power": {"base": [3], "exponent": [4], "mod": ["", 1]}}]}
{"id": "simple_165", "model_name": "gemini-2.5-pro-preview-05-06", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'crime_type': 'theft crimes'. Expected one of ['theft']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_165", "question": [[{"role": "user", "content": "Retrieve cases from 2020 about theft crimes in Los Angeles, California"}]], "function": [{"name": "civil_cases.retrieve", "description": "Retrieve civil cases based on given parameters, including year, crime type, and location.", "parameters": {"type": "dict", "properties": {"year": {"type": "integer", "description": "Year of the cases"}, "crime_type": {"type": "string", "description": "Type of the crime."}, "location": {"type": "string", "description": "Location of the case in the format of city name."}}, "required": ["year", "crime_type", "location"]}}]}, "model_result_raw": "<TOOLCALL>civil_cases.retrieve(year=2020, crime_type='theft crimes', location='Los Angeles')</TOOLCALL>", "model_result_decoded": [{"civil_cases.retrieve": {"year": 2020, "crime_type": "theft crimes", "location": "Los Angeles"}}], "possible_answer": [{"civil_cases.retrieve": {"year": [2020], "crime_type": ["theft"], "location": ["Los Angeles", "Los Angeles, California"]}}]}
{"id": "simple_168", "model_name": "gemini-2.5-pro-preview-05-06", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_168", "question": [[{"role": "user", "content": "Search for ongoing lawsuits related to the company 'Google' filed after January 1, 2021 in California."}]], "function": [{"name": "lawsuit_search", "description": "Search for lawsuits related to a specific company within a specific date range and location.", "parameters": {"type": "dict", "properties": {"company": {"type": "string", "description": "The company related to the lawsuit."}, "start_date": {"type": "string", "description": "Start of the date range for when the lawsuit was filed in the format of MM-DD-YYY."}, "location": {"type": "string", "description": "Location where the lawsuit was filed in the format of full state name."}, "status": {"type": "string", "enum": ["ongoing", "settled", "dismissed"], "description": "The status of the lawsuit. Default is 'ongoing'."}}, "required": ["company", "start_date", "location"]}}]}, "model_result_raw": "<TOOLCALL>['lawsuit_search(company=\\'Google\\', start_date=\\'01-01-2021\\', location=\\'California\\', status=\\'ongoing\\')']</TOOLCALL>", "possible_answer": [{"lawsuit_search": {"company": ["Google", "GOOG"], "start_date": ["01-01-2021", "January 1, 2021"], "location": ["California"], "status": ["ongoing", ""]}}]}
{"id": "simple_208", "model_name": "gemini-2.5-pro-preview-05-06", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'avoid': ['highways', 'toll roads']. Expected one of [['highways', 'tolls'], ['tolls', 'highways']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_208", "question": [[{"role": "user", "content": "Get me the directions from New York to Los Angeles avoiding highways and toll roads."}]], "function": [{"name": "map_service.get_directions", "description": "Retrieve directions from a starting location to an ending location, including options for route preferences.", "parameters": {"type": "dict", "properties": {"start": {"type": "string", "description": "Starting location for the route."}, "end": {"type": "string", "description": "Ending location for the route."}, "avoid": {"type": "array", "items": {"type": "string", "enum": ["tolls", "highways", "ferries"]}, "description": "Route features to avoid. Default is ['highways', 'ferries']"}}, "required": ["start", "end"]}}]}, "model_result_raw": "<TOOLCALL>map_service.get_directions(start=\"New York\", end=\"Los Angeles\", avoid=['highways', 'toll roads'])</TOOLCALL>", "model_result_decoded": [{"map_service.get_directions": {"start": "New York", "end": "Los Angeles", "avoid": ["highways", "toll roads"]}}], "possible_answer": [{"map_service.get_directions": {"start": ["New York", "NYC"], "end": ["Los Angeles", "LA"], "avoid": [["highways", "tolls"], ["tolls", "highways"]]}}]}
{"id": "simple_254", "model_name": "gemini-2.5-pro-preview-05-06", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_254", "question": [[{"role": "user", "content": "Retrieve the historic dates and facts related to Christianity between year 300 and 400."}]], "function": [{"name": "get_religion_history", "description": "Retrieves historic events and facts related to a specified religion for a given period.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "The name of the religion."}, "start_year": {"type": "integer", "description": "The starting year of the period."}, "end_year": {"type": "integer", "description": "The end year of the period."}, "event_type": {"type": "string", "enum": ["all", "crusade", "schism", "reform"], "description": "Optional parameter specifying the type of event. Default is 'all'."}}, "required": ["religion", "start_year", "end_year"]}}]}, "model_result_raw": "<TOOLCALL>['get_religion_history(religion=\"Christianity\", start_year=300, end_year=400)']</TOOLCALL>", "possible_answer": [{"get_religion_history": {"religion": ["Christianity"], "start_year": [300], "end_year": [400], "event_type": ["all", ""]}}]}
{"id": "simple_393", "model_name": "gemini-2.5-pro-preview-05-06", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'base_currency': 'Japanese Yen'. Expected one of ['JPY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_393", "question": [[{"role": "user", "content": "How much will 20000 Japanese Yen be in United States Dollar?"}]], "function": [{"name": "convert_currency", "description": "Converts an amount from a particular currency to another currency.", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The base currency in which the original amount is present."}, "target_currency": {"type": "string", "description": "The currency to which you want to convert."}, "amount": {"type": "integer", "description": "The amount you want to convert."}}, "required": ["base_currency", "target_currency", "amount"]}}]}, "model_result_raw": "<TOOLCALL>convert_currency(base_currency='Japanese Yen', target_currency='United States Dollar', amount=20000)</TOOLCALL>", "model_result_decoded": [{"convert_currency": {"base_currency": "Japanese Yen", "target_currency": "United States Dollar", "amount": 20000}}], "possible_answer": [{"convert_currency": {"base_currency": ["JPY"], "target_currency": ["USD"], "amount": [20000]}}]}