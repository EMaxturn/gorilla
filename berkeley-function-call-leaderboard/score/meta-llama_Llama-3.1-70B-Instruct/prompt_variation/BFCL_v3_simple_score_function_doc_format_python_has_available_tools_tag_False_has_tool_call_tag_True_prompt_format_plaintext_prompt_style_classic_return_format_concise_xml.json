{"accuracy": 0.7666666666666667, "correct_count": 23, "total_count": 30}
{"id": "simple_19", "model_name": "meta-llama_Llama-3.1-70B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'num1'. Expected type integer, got str. Parameter value: '40'."], "error_type": "type_error:simple", "prompt": {"id": "simple_19", "question": [[{"role": "user", "content": "Calculate the greatest common divisor of two numbers: 40 and 50"}]], "function": [{"name": "math.gcd", "description": "Compute the greatest common divisor of two numbers", "parameters": {"type": "dict", "properties": {"num1": {"type": "integer", "description": "The first number."}, "num2": {"type": "integer", "description": "The second number."}}, "required": ["num1", "num2"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"math.gcd\"><param name=\"num1\" type=\"int\">40</param><param name=\"num2\" type=\"int\">50</param></function></functions></TOOLCALL>", "model_result_decoded": [{"math.gcd": {"num1": "40", "num2": "50"}}], "possible_answer": [{"math.gcd": {"num1": [40], "num2": [50]}}]}
{"id": "simple_25", "model_name": "meta-llama_Llama-3.1-70B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'height'. Expected type integer, got str. Parameter value: '150'."], "error_type": "type_error:simple", "prompt": {"id": "simple_25", "question": [[{"role": "user", "content": "Calculate the final velocity of an object falling from a 150 meter building, assuming initial velocity is zero."}]], "function": [{"name": "calculate_final_velocity", "description": "Calculate the final velocity of a free falling object given the height it's dropped from, the initial velocity and acceleration due to gravity. Ignore air resistance.", "parameters": {"type": "dict", "properties": {"height": {"type": "integer", "description": "The height the object is dropped from, in meters."}, "initial_velocity": {"type": "integer", "description": "The initial velocity of the object in m/s. Default is zero."}, "gravity": {"type": "float", "description": "Acceleration due to gravity. Default value is 9.81 m/s^2, earth's gravity."}}, "required": ["height"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"calculate_final_velocity\"><param name=\"height\" type=\"int\">150</param><param name=\"initial_velocity\" type=\"int\">0</param><param name=\"gravity\" type=\"float\">9.81</param></function></functions></TOOLCALL>", "model_result_decoded": [{"calculate_final_velocity": {"height": "150", "initial_velocity": "0", "gravity": 9.81}}], "possible_answer": [{"calculate_final_velocity": {"height": [150], "initial_velocity": [0, ""], "gravity": [9.81, ""]}}]}
{"id": "simple_96", "model_name": "meta-llama_Llama-3.1-70B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'conditions'. Expected type array, got str. Parameter value: \"[{'column': 'age', 'operator': '>', 'value': 25}, {'column': 'job', 'operator': '=', 'value': 'engineer'}]\"."], "error_type": "type_error:simple", "prompt": {"id": "simple_96", "question": [[{"role": "user", "content": "Find records in database in user table where age is greater than 25 and job is 'engineer'."}]], "function": [{"name": "database.query", "description": "Query the database based on certain conditions.", "parameters": {"type": "dict", "properties": {"table": {"type": "string", "description": "Name of the table to query."}, "conditions": {"type": "array", "items": {"type": "dict", "properties": {"field": {"type": "string", "description": "The field to apply the condition."}, "operation": {"type": "string", "description": "The operation to be performed.", "enum": ["<", ">", "=", ">=", "<="]}, "value": {"type": "string", "description": "The value to be compared."}}, "required": ["field", "operation", "value"]}, "description": "Conditions for the query."}}, "required": ["table", "conditions"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"database.query\"><param name=\"table\" type=\"string\">user</param><param name=\"conditions\" type=\"list\">[{'column': 'age', 'operator': '>', 'value': 25}, {'column': 'job', 'operator': '=', 'value': 'engineer'}]</param></function></functions></TOOLCALL>", "model_result_decoded": [{"database.query": {"table": "user", "conditions": "[{'column': 'age', 'operator': '>', 'value': 25}, {'column': 'job', 'operator': '=', 'value': 'engineer'}]"}}], "possible_answer": [{"database.query": {"table": ["user"], "conditions": [[{"field": ["age"], "operation": [">"], "value": ["25"]}, {"field": ["job"], "operation": ["="], "value": ["engineer"]}]]}}]}
{"id": "simple_208", "model_name": "meta-llama_Llama-3.1-70B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'avoid'. Expected type array, got str. Parameter value: \"['highways', 'toll roads']\"."], "error_type": "type_error:simple", "prompt": {"id": "simple_208", "question": [[{"role": "user", "content": "Get me the directions from New York to Los Angeles avoiding highways and toll roads."}]], "function": [{"name": "map_service.get_directions", "description": "Retrieve directions from a starting location to an ending location, including options for route preferences.", "parameters": {"type": "dict", "properties": {"start": {"type": "string", "description": "Starting location for the route."}, "end": {"type": "string", "description": "Ending location for the route."}, "avoid": {"type": "array", "items": {"type": "string", "enum": ["tolls", "highways", "ferries"]}, "description": "Route features to avoid. Default is ['highways', 'ferries']"}}, "required": ["start", "end"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"map_service.get_directions\"><param name=\"start\" type=\"string\">New York</param><param name=\"end\" type=\"string\">Los Angeles</param><param name=\"avoid\" type=\"list\">['highways', 'toll roads']</param></function></functions></TOOLCALL>", "model_result_decoded": [{"map_service.get_directions": {"start": "New York", "end": "Los Angeles", "avoid": "['highways', 'toll roads']"}}], "possible_answer": [{"map_service.get_directions": {"start": ["New York", "NYC"], "end": ["Los Angeles", "LA"], "avoid": [["highways", "tolls"], ["tolls", "highways"]]}}]}
{"id": "simple_297", "model_name": "meta-llama_Llama-3.1-70B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'progression'. Expected type array, got str. Parameter value: \"['I', 'V', 'vi', 'IV']\"."], "error_type": "type_error:simple", "prompt": {"id": "simple_297", "question": [[{"role": "user", "content": "music.theory.chordProgression(progression=['I', 'V', 'vi', 'IV'])"}]], "function": [{"name": "music.theory.chordProgression", "description": "Identifies a potential key signature for the given chord progression.", "parameters": {"type": "dict", "properties": {"progression": {"type": "array", "items": {"type": "string"}, "description": "The chord progression in Roman numerals. Eg: ['I', 'V', 'vi', 'IV']."}, "returnAllPossibleKeys": {"type": "boolean", "description": "Flag indicating if the function should return all possible key signatures that fit the chord progression. If false, the function will return the first valid key it finds. Default is false."}, "assumeMajor": {"type": "boolean", "description": "Assumption if the key signature is Major. If true, the function will assume the key signature to be major and otherwise minor. Default is true."}}, "required": ["progression"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"music.theory.chordProgression\"><param name=\"progression\" type=\"list\">['I', 'V', 'vi', 'IV']</param><param name=\"returnAllPossibleKeys\" type=\"boolean\">False</param><param name=\"assumeMajor\" type=\"boolean\">True</param></function></functions></TOOLCALL>", "model_result_decoded": [{"music.theory.chordProgression": {"progression": "['I', 'V', 'vi', 'IV']", "returnAllPossibleKeys": false, "assumeMajor": true}}], "possible_answer": [{"music.theory.chordProgression": {"progression": [["I", "V", "vi", "IV"]], "returnAllPossibleKeys": [true, false, ""], "assumeMajor": [true, false, ""]}}]}
{"id": "simple_328", "model_name": "meta-llama_Llama-3.1-70B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'parameters'. Expected type array, got str. Parameter value: \"['rating', 'player_count']\"."], "error_type": "type_error:simple", "prompt": {"id": "simple_328", "question": [[{"role": "user", "content": "Find the rating and player count of the board game 'Ticket to Ride'."}]], "function": [{"name": "boardgame.get_info", "description": "Retrieve detailed information of a board game.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "Name of the board game."}, "parameters": {"type": "array", "items": {"type": "string", "enum": ["player count", "playing time", "age", "mechanics", "rating"]}, "description": "Game characteristics interested."}, "language": {"type": "string", "description": "The preferred language for the game information, default is English"}}, "required": ["name", "parameters"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"boardgame.get_info\"><param name=\"name\" type=\"string\">Ticket to Ride</param><param name=\"parameters\" type=\"list\">['rating', 'player_count']</param></function></functions></TOOLCALL>", "model_result_decoded": [{"boardgame.get_info": {"name": "Ticket to Ride", "parameters": "['rating', 'player_count']"}}], "possible_answer": [{"boardgame.get_info": {"name": ["Ticket to Ride"], "parameters": [["rating", "player count"], ["player count", "rating"]], "language": ["", "English"]}}]}
{"id": "simple_380", "model_name": "meta-llama_Llama-3.1-70B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York'. Expected one of ['Manhattan, New York', 'Manhattan, NY', 'NYC', 'New York City']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_380", "question": [[{"role": "user", "content": "Book a single room at a pet friendly hotel near Manhattan, New York for 3 nights starting from March 10th, 2023."}]], "function": [{"name": "hotel_booking", "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you want to book the hotel."}, "room_type": {"type": "string", "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."}, "duration": {"type": "integer", "description": "The number of nights you want to book the hotel for."}, "start_date": {"type": "string", "description": "The date when your stay begins."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["pet_friendly", "gym", "swimming_pool", "free_breakfast", "parking"]}, "description": "Optional preferences of stay at the hotel. Default to use all if not specified."}}, "required": ["location", "room_type", "duration", "start_date"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"hotel_booking\"><param name=\"location\" type=\"string\">New York</param><param name=\"room_type\" type=\"string\">single</param><param name=\"duration\" type=\"integer\">3</param><param name=\"start_date\" type=\"string\">2023-03-10</param><param name=\"preferences\" type=\"list\">['pet friendly', 'near Manhattan']</param></function></functions></TOOLCALL>", "model_result_decoded": [{"hotel_booking": {"location": "New York", "room_type": "single", "duration": 3, "start_date": "2023-03-10", "preferences": "['pet friendly', 'near Manhattan']"}}], "possible_answer": [{"hotel_booking": {"location": ["Manhattan, New York", "Manhattan, NY", "NYC", "New York City"], "room_type": ["single"], "duration": [3], "start_date": ["2023-03-10", "03/10/2023", "Mar.10,2023", "March 10th, 2023", "March 10th,2023", "March10th, 2023", "March10th,2023"], "preferences": [["pet_friendly"]]}}]}