{"id": "multiple_4", "result": "<TOOLCALL>[kinematics.calculate_displacement(initial_speed=20, acceleration=10, time=5)]</TOOLCALL><|repo_name|>jameskyle/ember-cli-leaflet<|file_sep|>/tests/dummy/app/templates/application.hbs\n{{#leaflet-map lat=lat lng=lng zoom=zoom}}\n  {{#leaflet-tile-layer url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\" attribution=\"&copy; <a href='http://osm.org/copyright'>OpenStreetMap</a> contributors\"}}\n  {{/leaflet-tile-layer}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet", "input_token_count": 1790, "output_token_count": 4096, "latency": 446.98119282722473}
{"id": "multiple_25", "result": "<TOOLCALL>[video_games.store_price(game_title='Assassins Creed Valhalla', platform='PlayStation', region='United States'), video_games.on_sale(game_title='Assassins Creed Valhalla', platform='PlayStation', region='United States')]</TOOLCALL>", "input_token_count": 1917, "output_token_count": 61, "latency": 162.40679597854614}
{"id": "multiple_31", "result": "<TOOLCALL>[geometry_rectangle.calculate(width=7, length=10)]</TOOLCALL>", "input_token_count": 1439, "output_token_count": 22, "latency": 160.61179161071777}
{"id": "multiple_36", "result": "<TOOLCALL>[kinematics.calculate_speed_from_rest(distance=20, time=4)]</TOOLCALL>", "input_token_count": 1597, "output_token_count": 25, "latency": 160.7493929862976}
{"id": "multiple_42", "result": "<TOOLCALL>[calculate_final_temperature(quantity1=2, temperature1=300, quantity2=3, temperature2=400)]</TOOLCALL>", "input_token_count": 1494, "output_token_count": 34, "latency": 161.1516993045807}
{"id": "multiple_46", "result": "<TOOLCALL>[sort_list(elements=['Sam', 'Alice', 'Jack'], order='asc')]</TOOLCALL>", "input_token_count": 1559, "output_token_count": 27, "latency": 161.08350157737732}
{"id": "multiple_51", "result": "<TOOLCALL>[dice_roll_probability(desired_sum=7, sides_per_die=6)]</TOOLCALL>", "input_token_count": 1738, "output_token_count": 26, "latency": 159.78169345855713}
{"id": "multiple_54", "result": "<TOOLCALL>[corporate_finance.dividend_data(company='Apple Inc', years=5)]</TOOLCALL>", "input_token_count": 1434, "output_token_count": 27, "latency": 159.43872094154358}
{"id": "multiple_71", "result": "<TOOLCALL>[get_population(year=1954, category='veterans')]</TOOLCALL>", "input_token_count": 1621, "output_token_count": 24, "latency": 159.6147346496582}
{"id": "multiple_75", "result": "<TOOLCALL>[paint_color.trends(room='Living room')]</TOOLCALL>", "input_token_count": 1679, "output_token_count": 20, "latency": 158.26440262794495}
{"id": "multiple_102", "result": "<TOOLCALL>[calculate_displacement(initial_velocity=10, time=5, acceleration=9.8)]</TOOLCALL><|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport { User } from '../models/user.model';\nimport { UserService } from '../services/user.service';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n  user: User;\n  user$: Observable<User>;\n\n  constructor(\n    private authService: AuthService,\n    private userService: UserService,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n    this.user$ = this.authService.user$.pipe(\n      map(user => {\n        if (user) {\n          return this.userService.getUser(user.uid);\n        }\n      })\n    );\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/']);\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../services/auth.service';\nimport { Router } from '@angular/router';\nimport { User } from '../models/user.model';\nimport { UserService } from '../services/user.service';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  user: User;\n  user$: Observable<User>;\n\n  constructor(\n    private authService: AuthService,\n    private userService: UserService,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n    this.user$ = this.authService.user$.pipe(\n      map(user => {\n        if (user) {\n          return this.userService.getUser(user.uid);\n        }\n      })\n    );\n  }\n\n  login() {\n    this.authService.login();\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/']);\n  }\n\n}\n<|repo_name|>josephmccarthy/angular-firebase<|file_sep|>/src/app/services/user.service.ts\nimport { Injectable } from '@angular/core';\nimport { AngularFirestore, AngularFirestoreCollection } from '@angular/fire/firestore';\nimport { User } from '../models/user.model';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private usersCollection: AngularFirestoreCollection<User>;\n\n  constructor(private afs: AngularFirestore) {\n    this.usersCollection = this.afs.collection<User>('users');\n  }\n\n  getUser(uid: string): Observable<User> {\n    return this.afs.doc<User>(`users/${uid}`).valueChanges();\n  }\n\n  createUser(user: User) {\n    return this.usersCollection.add(user);\n  }\n\n  updateUser(user: User) {\n    return this.afs.doc(`users/${user.uid}`).update(user);\n  }\n\n  deleteUser(user: User) {\n    return this.afs.doc(`users/${user.uid}`).delete();\n  }\n}\n<|repo_name|>josephmccarthy/angular-firebase<|file_sep|>/src/app/services/auth.service.ts\nimport { Injectable } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { AngularFirestore, AngularFirestoreDocument } from '@angular/fire/firestore';\nimport { User } from '../models/user.model';\nimport { Router } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  user$: Observable<User>;\n\n  constructor(\n    private afAuth: AngularFireAuth,\n    private afs: AngularFirestore,\n    private router: Router\n  ) {\n    this.user$ = this.afAuth.authState.pipe(\n      switchMap(user => {\n        if (user) {\n          return this.afs.doc<User>(`users/${user.uid}`).valueChanges();\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  login() {\n    this.afAuth.auth.signInWithRedirect(new firebase.auth.GoogleAuthProvider());\n  }\n\n  logout() {\n    this.afAuth.auth.signOut();\n    this.router.navigate(['/']);\n  }\n}\n<|repo_name|>josephmccarthy/angular-firebase<|file_sep|>/src/app/app.module.ts\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { LoginComponent } from './login/login.component';\nimport { ProfileComponent } from './profile/profile.component';\nimport { AngularFireModule } from '@angular/fire';\nimport { environment } from '../environments/environment';\nimport { AngularFirestoreModule } from '@angular/fire/firestore';\nimport { AngularFireAuthModule } from '@angular/fire/auth';\nimport { FormsModule } from '@angular/forms';\nimport { UserService } from './services/user.service';\nimport { AuthService } from './services/auth.service';\nimport { HomeComponent } from './home/home.component';\nimport { AuthGuard } from './auth.guard';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    ProfileComponent,\n    HomeComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    AngularFireModule.initializeApp(environment.firebase),\n    AngularFirestoreModule,\n    AngularFireAuthModule,\n    FormsModule\n  ],\n  providers: [\n    UserService,\n    AuthService,\n    AuthGuard\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../services/auth.service';\nimport { User } from '../models/user.model';\nimport { UserService } from '../services/user.service';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n  user: User;\n  user$: Observable<User>;\n\n  constructor(\n    private authService: AuthService,\n    private userService: UserService\n  ) { }\n\n  ngOnInit() {\n    this.user$ = this.authService.user$.pipe(\n      map(user => {\n        if (user) {\n          return this.userService.getUser(user.uid);\n        }\n      })\n    );\n  }\n\n}\n<|repo_name|>josephmccarthy/angular-firebase<|file_sep|>/src/app/auth.guard.ts\nimport { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map, take, tap } from 'rxjs/operators';\nimport { AuthService } from './services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) { }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> {\n    return this.authService.user$.pipe(\n      take(1),\n      map(user => !!user),\n      tap(loggedIn => {\n        if (!loggedIn) {\n          console.log('access denied');\n          this.router.navigate(['/']);\n        }\n      })\n    );\n  }\n}\n<|repo_name|>jamesmccaffrey/CS-445-Project<|file_sep|>/src/edu/ncsu/csc316/assignment4/Assignment4.java\npackage edu.ncsu.csc316.assignment4;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\nimport edu.ncsu.csc316.assignment4.datastructures.BinarySearchTree;\nimport edu.ncsu.csc316.assignment4.datastructures.BinaryTree;\nimport edu.ncsu.csc316.assignment4.datastructures.Node;\nimport edu.ncsu.csc316.assignment4.datastructures.Queue;\nimport edu.ncsu.csc316.assignment4.datastructures.Stack;\n\npublic class Assignment4 {\n\n\tpublic static void main(String[] args) throws FileNotFoundException, IOException {\n\t\t// TODO Auto-generated method stub\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO: Implement the following methods\n\t\t// TODO", "input_token_count": 1843, "output_token_count": 4096, "latency": 468.0738649368286}
{"id": "multiple_132", "result": "<TOOLCALL>[finance.calculate_future_value(initial_investment=20000, rate_of_return=0.08, years=5)]</TOOLCALL>", "input_token_count": 1926, "output_token_count": 34, "latency": 158.74305629730225}
{"id": "multiple_159", "result": "<TOOLCALL>[calculate_paint_needed(coverage_rate=400, length=30, height=12)]</TOOLCALL><|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  email: string;\n  password: string;\n  errorMessage: string;\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  login() {\n    this.authService.login(this.email, this.password).subscribe(\n      (user: User) => {\n        this.authService.setLoggedInUser(user);\n        this.router.navigate(['/']);\n      },\n      (error) => {\n        this.errorMessage = error.error.message;\n      }\n    );\n  }\n}\n<|repo_name|>sahilsharma-1999/recipe-app<|file_sep|>/src/app/recipes/recipe.service.ts\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Recipe } from './recipe.model';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RecipeService {\n  recipesChanged = new Subject<Recipe[]>();\n  private recipes: Recipe[] = [];\n  constructor(private http: HttpClient) { }\n\n  getRecipes() {\n    return this.http.get<{ message: string, recipes: any }>(`${environment.apiUrl}/recipes`).pipe(\n      map((recipeData) => {\n        return recipeData.recipes.map(recipe => {\n          return {\n            id: recipe._id,\n            title: recipe.title,\n            imageUrl: recipe.imageUrl,\n            ingredients: recipe.ingredients,\n            steps: recipe.steps,\n            time: recipe.time,\n            servings: recipe.servings,\n            userId: recipe.userId\n          };\n        });\n      })\n    );\n  }\n\n  getRecipe(id: string) {\n    return this.http.get<{ message: string, recipe: any }>(`${environment.apiUrl}/recipes/${id}`).pipe(\n      map((recipeData) => {\n        return {\n          id: recipeData.recipe._id,\n          title: recipeData.recipe.title,\n          imageUrl: recipeData.recipe.imageUrl,\n          ingredients: recipeData.recipe.ingredients,\n          steps: recipeData.recipe.steps,\n          time: recipeData.recipe.time,\n          servings: recipeData.recipe.servings,\n          userId: recipeData.recipe.userId\n        };\n      })\n    );\n  }\n\n  addRecipe(recipe: Recipe) {\n    this.http.post<{ message: string, recipeId: string }>(`${environment.apiUrl}/recipes`, recipe).subscribe(\n      (responseData) => {\n        const newRecipe: Recipe = {\n          id: responseData.recipeId,\n          title: recipe.title,\n          imageUrl: recipe.imageUrl,\n          ingredients: recipe.ingredients,\n          steps: recipe.steps,\n          time: recipe.time,\n          servings: recipe.servings,\n          userId: recipe.userId\n        };\n        this.recipes.push(newRecipe);\n        this.recipesChanged.next([...this.recipes]);\n      }\n    );\n  }\n\n  updateRecipe(id: string, recipe: Recipe) {\n    this.http.put(`${environment.apiUrl}/recipes/${id}`, recipe).subscribe(\n      () => {\n        const updatedRecipes = this.recipes.map((recipeItem) => {\n          if (recipeItem.id === id) {\n            return {\n              ...recipeItem,\n              ...recipe\n            };\n          }\n          return recipeItem;\n        });\n        this.recipes = updatedRecipes;\n        this.recipesChanged.next([...this.recipes]);\n      }\n    );\n  }\n\n  deleteRecipe(id: string) {\n    this.http.delete(`${environment.apiUrl}/recipes/${id}`).subscribe(\n      () => {\n        const updatedRecipes = this.recipes.filter((recipe) => recipe.id !== id);\n        this.recipes = updatedRecipes;\n        this.recipesChanged.next([...this.recipes]);\n      }\n    );\n  }\n}\n<|repo_name|>sahilsharma-1999/recipe-app<|file_sep|>/src/app/recipes/recipe.model.ts\nexport interface Recipe {\n  id: string;\n  title: string;\n  imageUrl: string;\n  ingredients: string[];\n  steps: string[];\n  time: number;\n  servings: number;\n  userId: string;\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { Recipe } from '../recipe.model';\nimport { RecipeService } from '../recipe.service';\n\n@Component({\n  selector: 'app-recipe-detail',\n  templateUrl: './recipe-detail.component.html',\n  styleUrls: ['./recipe-detail.component.css']\n})\nexport class RecipeDetailComponent implements OnInit {\n  recipe: Recipe;\n  constructor(private recipeService: RecipeService, private route: ActivatedRoute, private router: Router) { }\n\n  ngOnInit(): void {\n    this.route.params.subscribe(\n      (params: Params) => {\n        this.recipeService.getRecipe(params['id']).subscribe(\n          (recipe) => {\n            this.recipe = recipe;\n          }\n        );\n      }\n    );\n  }\n\n  onEditRecipe() {\n    this.router.navigate(['edit'], { relativeTo: this.route });\n  }\n\n  onDeleteRecipe() {\n    this.recipeService.deleteRecipe(this.recipe.id);\n    this.router.navigate(['/']);\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { Recipe } from '../recipe.model';\nimport { RecipeService } from '../recipe.service';\n\n@Component({\n  selector: 'app-recipe-edit',\n  templateUrl: './recipe-edit.component.html',\n  styleUrls: ['./recipe-edit.component.css']\n})\nexport class RecipeEditComponent implements OnInit {\n  id: string;\n  editMode = false;\n  recipe: Recipe;\n  constructor(private recipeService: RecipeService, private route: ActivatedRoute, private router: Router) { }\n\n  ngOnInit(): void {\n    this.route.params.subscribe(\n      (params: Params) => {\n        this.id = params['id'];\n        this.editMode = params['id'] != null;\n        if (this.editMode) {\n          this.recipeService.getRecipe(this.id).subscribe(\n            (recipe) => {\n              this.recipe = recipe;\n            }\n          );\n        } else {\n          this.recipe = {\n            id: null,\n            title: '',\n            imageUrl: '',\n            ingredients: [],\n            steps: [],\n            time: 0,\n            servings: 0,\n            userId: null\n          };\n        }\n      }\n    );\n  }\n\n  onSaveRecipe() {\n    if (this.editMode) {\n      this.recipeService.updateRecipe(this.id, this.recipe);\n    } else {\n      this.recipeService.addRecipe(this.recipe);\n    }\n    this.router.navigate(['../'], { relativeTo: this.route });\n  }\n\n  onCancel() {\n    this.router.navigate(['../'], { relativeTo: this.route });\n  }\n}\n<|repo_name|>sahilsharma-1999/recipe-app<|file_sep|>/src/app/recipes/recipe-list/recipe-list.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Recipe } from '../recipe.model';\nimport { RecipeService } from '../recipe.service';\n\n@Component({\n  selector: 'app-recipe-list',\n  templateUrl: './recipe-list.component.html',\n  styleUrls: ['./recipe-list.component.css']\n})\nexport class RecipeListComponent implements OnInit {\n  recipes: Recipe[] = [];\n  constructor(private recipeService: RecipeService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.recipeService.getRecipes().subscribe(\n      (recipes) => {\n        this.recipes = recipes;\n      }\n    );\n    this.recipeService.recipesChanged.subscribe(\n      (recipes: Recipe[]) => {\n        this.recipes = recipes;\n      }\n    );\n  }\n\n  onNewRecipe() {\n    this.router.navigate(['new']);\n  }\n\n  onRecipeSelected(recipe: Recipe) {\n    this.router.navigate(['detail', recipe.id]);\n  }\n}\n<|repo_name|>sahilsharma-1999/recipe-app<|file_sep|>/src/app/auth.service.ts\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { User } from './user.model';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  userLoggedIn = new Subject<boolean>();\n  private loggedInUser: User;\n  constructor(private http: HttpClient) { }\n\n  login(email: string, password: string) {\n    return this.http.post<{ message: string, token: string, user: any }>(`${environment.apiUrl}/users/login`, { email, password }).pipe(\n      map((userData) => {\n        return {\n          id: userData.user._id,\n          email: userData.user.email,\n          token: userData.token\n        };\n      })\n    );\n  }\n\n  register(email: string, password: string) {\n    return this.http.post<{ message: string, token: string, user: any }>(`${environment.apiUrl}/users/register`, { email, password }).pipe(\n      map((userData) => {\n        return {\n          id: userData.user._id,\n          email: userData.user.email,\n          token: userData.token\n        };\n      })\n    );\n  }\n\n  setLoggedInUser(user: User) {\n    this.loggedInUser = user;\n    localStorage.setItem('token', user.token);\n    this.userLoggedIn.next(true);\n  }\n\n  logout() {\n    this.loggedInUser = null;\n    localStorage.removeItem('token');\n    this.userLoggedIn.next(false);\n  }\n\n  get isLoggedIn() {\n    return this.loggedInUser != null;\n  }\n\n  get loggedInUserId() {\n    return this.loggedInUser ? this.loggedInUser.id : null;\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  onLogout() {\n    this.authService.logout();\n    this.router.navigate(['/']);\n  }\n}\n<|repo_name|>sahilsharma-1999/recipe-app<|file_sep|>/src/app/recipes/recipe.model.spec.ts\nimport { Recipe } from './recipe.model';\n\ndescribe('Recipe', () => {\n  it('should create an instance', () => {\n    expect(new Recipe()).toBeTruthy();\n  });\n});\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../auth.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n  email: string;\n  password: string;\n  errorMessage: string;\n  constructor(private authService: AuthService) { }\n\n  ngOnInit(): void {\n  }\n\n  register() {\n    this.authService.register(this.email, this.password).subscribe(\n      (user) => {\n        this.authService.setLoggedInUser(user);\n      },\n      (error) => {\n        this.errorMessage = error.error.message;\n      }\n    );\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-user-profile',\n  templateUrl: './user-profile.component.html',\n  styleUrls: ['./user-profile.component.css']\n})\nexport class UserProfileComponent implements OnInit {\n  user: User;\n  constructor(private authService: AuthService) { }\n\n  ngOnInit(): void {\n    this.user = this.authService.loggedInUser;\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../auth.service';\nimport { Recipe } from '../recipes/recipe.model';\nimport { RecipeService } from '../recipes/recipe.service';\n\n@Component({\n  selector: 'app-user-recipes',\n  templateUrl: './user-recipes.component.html',\n  styleUrls: ['./user-recipes.component.css']\n})\nexport class UserRecipesComponent implements OnInit {\n  recipes: Recipe[] = [];\n  constructor(private recipeService: RecipeService, private authService: AuthService) { }\n\n  ngOnInit(): void {\n    this.recipeService.getRecipes().subscribe(\n      (recipes) => {\n        this.recipes = recipes.filter((recipe) => recipe.userId === this.authService.loggedInUserId);\n      }\n    );\n    this.recipeService.recipesChanged.subscribe(\n      (recipes: Recipe[]) => {\n        this.recipes = recipes.filter((recipe) => recipe.userId === this.authService.loggedInUserId);\n      }\n    );\n  }\n\n}\n<|repo_name|>sahilsharma-1999/recipe-app<|file_sep|>/src/app/app-routing.module.ts\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthGuard } from './auth.guard';\nimport { HomeComponent } from './home/home.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { RecipeDetailComponent } from './recipes/recipe-detail/recipe-detail.component';\nimport { RecipeEditComponent } from './recipes/recipe-edit/recipe-edit.component';\nimport { RecipeListComponent } from './recipes/recipe-list/recipe-list.component';\nimport { UserProfileComponent } from './user-profile/user-profile.component';\nimport { UserRecipesComponent } from './user-recipes/user-recipes.component';\n\nconst routes: Routes = [\n  { path: '', component: HomeComponent },\n  { path: 'recipes', component: RecipeListComponent, canActivate: [AuthGuard] },\n  { path: 'recipes/new', component: RecipeEditComponent, canActivate: [AuthGuard] },\n  { path: 'recipes/:id', component: RecipeDetailComponent, canActivate: [AuthGuard] },\n  { path: 'recipes/:id/edit', component: RecipeEditComponent, canActivate: [AuthGuard] },\n  { path: 'user-recipes', component: UserRecipesComponent, canActivate: [AuthGuard] },\n  { path: 'user-profile', component: UserProfileComponent, canActivate: [AuthGuard] },\n  { path: 'login', component: LoginComponent },\n  { path: 'register', component: RegisterComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n<|repo_name|>sahilsharma-1999/recipe-app<|file_sep|>/src/app/recipes/recipe.service.spec.ts\nimport { TestBed } from '@angular/core/testing';\n\nimport { RecipeService } from './recipe.service';\n\ndescribe('RecipeService', () => {\n  let service: RecipeService;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({});\n    service = TestBed.inject(RecipeService);\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n});\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../auth.service';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n  constructor(private authService: AuthService) { }\n\n  ngOnInit(): void {\n  }\n\n  onLogin() {\n    this.authService.userLoggedIn.subscribe(\n      (isLoggedIn) => {\n        if (isLoggedIn) {\n          window.location.reload();\n        }\n      }\n    );\n  }\n}\n<|file_sep|>import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) { }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    if (!this.authService.isLoggedIn) {\n      this.router.navigate(['/login']);\n    }\n    return this.authService.isLoggedIn;\n  }\n}\n<|repo_name|>jamesmccaffrey/CS-1.1<|file_sep|input_token_count": 1828, "output_token_count": 4096, "latency": 485.92515444755554}
{"id": "multiple_161", "result": "<TOOLCALL>[find_exhibition(location='New York, NY', art_form='sculpture', month='upcoming', user_ratings='high')]</TOOLCALL>", "input_token_count": 2053, "output_token_count": 38, "latency": 158.9414038658142}
{"id": "multiple_191", "result": "<TOOLCALL>[book_hotel(hotel_name='Hotel Paradise', location='Las Vegas', room_type='luxury', start_date='05-12-2022', stay_duration=3, view='city view')]</TOOLCALL><|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\nimport { UserService } from '../user.service';\n\n@Component({\n  selector: 'app-user-profile',\n  templateUrl: './user-profile.component.html',\n  styleUrls: ['./user-profile.component.css']\n})\nexport class UserProfileComponent implements OnInit {\n  user: User;\n  constructor(private authService: AuthService, private userService: UserService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.user = this.authService.getUser();\n    if (!this.user) {\n      this.router.navigate(['/login']);\n    }\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n\n  updateProfile() {\n    this.userService.updateUser(this.user).subscribe(\n      (res) => {\n        console.log(res);\n      },\n      (err) => {\n        console.log(err);\n      }\n    );\n  }\n\n}\n<|repo_name|>siddharth-krishna/food-delivery-app<|file_sep|>/src/app/restaurant/restaurant.service.ts\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Restaurant } from './restaurant.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RestaurantService {\n\n  constructor(private http: HttpClient) { }\n\n  getRestaurants(): Observable<Restaurant[]> {\n    return this.http.get<Restaurant[]>('http://localhost:3000/restaurants');\n  }\n\n  getRestaurant(id: string): Observable<Restaurant> {\n    return this.http.get<Restaurant>(`http://localhost:3000/restaurants/${id}`);\n  }\n\n  addRestaurant(restaurant: Restaurant): Observable<Restaurant> {\n    return this.http.post<Restaurant>('http://localhost:3000/restaurants', restaurant);\n  }\n\n  updateRestaurant(restaurant: Restaurant): Observable<Restaurant> {\n    return this.http.put<Restaurant>(`http://localhost:3000/restaurants/${restaurant._id}`, restaurant);\n  }\n\n  deleteRestaurant(id: string): Observable<Restaurant> {\n    return this.http.delete<Restaurant>(`http://localhost:3000/restaurants/${id}`);\n  }\n}\n<|repo_name|>siddharth-krishna/food-delivery-app<|file_sep|>/src/app/restaurant/restaurant.model.ts\nexport interface Restaurant {\n  _id: string;\n  name: string;\n  address: string;\n  city: string;\n  state: string;\n  zip: string;\n  phone: string;\n  email: string;\n  website: string;\n  description: string;\n  menu: string[];\n  image: string;\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\nimport { UserService } from '../user.service';\n\n@Component({\n  selector: 'app-user-login',\n  templateUrl: './user-login.component.html',\n  styleUrls: ['./user-login.component.css']\n})\nexport class UserLoginComponent implements OnInit {\n  user: User;\n  constructor(private authService: AuthService, private userService: UserService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.user = this.authService.getUser();\n    if (this.user) {\n      this.router.navigate(['/user-profile']);\n    }\n  }\n\n  login() {\n    this.userService.login(this.user).subscribe(\n      (res) => {\n        this.authService.setUser(res);\n        this.router.navigate(['/user-profile']);\n      },\n      (err) => {\n        console.log(err);\n      }\n    );\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\nimport { UserService } from '../user.service';\n\n@Component({\n  selector: 'app-user-register',\n  templateUrl: './user-register.component.html',\n  styleUrls: ['./user-register.component.css']\n})\nexport class UserRegisterComponent implements OnInit {\n  user: User;\n  constructor(private authService: AuthService, private userService: UserService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.user = this.authService.getUser();\n    if (this.user) {\n      this.router.navigate(['/user-profile']);\n    }\n  }\n\n  register() {\n    this.userService.register(this.user).subscribe(\n      (res) => {\n        this.authService.setUser(res);\n        this.router.navigate(['/user-profile']);\n      },\n      (err) => {\n        console.log(err);\n      }\n    );\n  }\n\n}\n<|repo_name|>siddharth-krishna/food-delivery-app<|file_sep|>/src/app/restaurant/restaurant-list/restaurant-list.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Restaurant } from '../restaurant.model';\nimport { RestaurantService } from '../restaurant.service';\n\n@Component({\n  selector: 'app-restaurant-list',\n  templateUrl: './restaurant-list.component.html',\n  styleUrls: ['./restaurant-list.component.css']\n})\nexport class RestaurantListComponent implements OnInit {\n  restaurants: Restaurant[];\n  constructor(private restaurantService: RestaurantService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.restaurantService.getRestaurants().subscribe(\n      (res) => {\n        this.restaurants = res;\n      },\n      (err) => {\n        console.log(err);\n      }\n    );\n  }\n\n  addRestaurant() {\n    this.router.navigate(['/add-restaurant']);\n  }\n\n  editRestaurant(id: string) {\n    this.router.navigate([`edit-restaurant/${id}`]);\n  }\n\n  deleteRestaurant(id: string) {\n    this.restaurantService.deleteRestaurant(id).subscribe(\n      (res) => {\n        this.restaurantService.getRestaurants().subscribe(\n          (res) => {\n            this.restaurants = res;\n          },\n          (err) => {\n            console.log(err);\n          }\n        );\n      },\n      (err) => {\n        console.log(err);\n      }\n    );\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Restaurant } from '../restaurant.model';\nimport { RestaurantService } from '../restaurant.service';\n\n@Component({\n  selector: 'app-add-restaurant',\n  templateUrl: './add-restaurant.component.html',\n  styleUrls: ['./add-restaurant.component.css']\n})\nexport class AddRestaurantComponent implements OnInit {\n  restaurant: Restaurant;\n  constructor(private restaurantService: RestaurantService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.restaurant = {\n      _id: '',\n      name: '',\n      address: '',\n      city: '',\n      state: '',\n      zip: '',\n      phone: '',\n      email: '',\n      website: '',\n      description: '',\n      menu: [],\n      image: ''\n    };\n  }\n\n  addRestaurant() {\n    this.restaurantService.addRestaurant(this.restaurant).subscribe(\n      (res) => {\n        this.router.navigate(['/restaurant-list']);\n      },\n      (err) => {\n        console.log(err);\n      }\n    );\n  }\n\n}\n<|repo_name|>siddharth-krishna/food-delivery-app<|file_sep|>/src/app/restaurant/restaurant-edit/restaurant-edit.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Restaurant } from '../restaurant.model';\nimport { RestaurantService } from '../restaurant.service';\n\n@Component({\n  selector: 'app-restaurant-edit',\n  templateUrl: './restaurant-edit.component.html',\n  styleUrls: ['./restaurant-edit.component.css']\n})\nexport class RestaurantEditComponent implements OnInit {\n  restaurant: Restaurant;\n  constructor(private restaurantService: RestaurantService, private router: Router, private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.restaurant = {\n      _id: '',\n      name: '',\n      address: '',\n      city: '',\n      state: '',\n      zip: '',\n      phone: '',\n      email: '',\n      website: '',\n      description: '',\n      menu: [],\n      image: ''\n    };\n    this.route.params.subscribe(\n      (params) => {\n        this.restaurantService.getRestaurant(params.id).subscribe(\n          (res) => {\n            this.restaurant = res;\n          },\n          (err) => {\n            console.log(err);\n          }\n        );\n      }\n    );\n  }\n\n  updateRestaurant() {\n    this.restaurantService.updateRestaurant(this.restaurant).subscribe(\n      (res) => {\n        this.router.navigate(['/restaurant-list']);\n      },\n      (err) => {\n        console.log(err);\n      }\n    );\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\nimport { UserService } from '../user.service';\n\n@Component({\n  selector: 'app-user-home',\n  templateUrl: './user-home.component.html',\n  styleUrls: ['./user-home.component.css']\n})\nexport class UserHomeComponent implements OnInit {\n  user: User;\n  constructor(private authService: AuthService, private userService: UserService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.user = this.authService.getUser();\n    if (!this.user) {\n      this.router.navigate(['/login']);\n    }\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n\n}\n<|repo_name|>siddharth-krishna/food-delivery-app<|file_sep|>/src/app/user/user.service.ts\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { User } from './user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private http: HttpClient) { }\n\n  register(user: User): Observable<User> {\n    return this.http.post<User>('http://localhost:3000/users/register', user);\n  }\n\n  login(user: User): Observable<User> {\n    return this.http.post<User>('http://localhost:3000/users/login', user);\n  }\n\n  updateUser(user: User): Observable<User> {\n    return this.http.put<User>(`http://localhost:3000/users/${user._id}`, user);\n  }\n}\n<|repo_name|>siddharth-krishna/food-delivery-app<|file_sep|>/src/app/restaurant/restaurant.module.ts\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RestaurantListComponent } from './restaurant-list/restaurant-list.component';\nimport { RestaurantRoutingModule } from './restaurant-routing.module';\nimport { AddRestaurantComponent } from './add-restaurant/add-restaurant.component';\nimport { RestaurantEditComponent } from './restaurant-edit/restaurant-edit.component';\nimport { FormsModule } from '@angular/forms';\n\n\n@NgModule({\n  declarations: [\n    RestaurantListComponent,\n    AddRestaurantComponent,\n    RestaurantEditComponent\n  ],\n  imports: [\n    CommonModule,\n    RestaurantRoutingModule,\n    FormsModule\n  ]\n})\nexport class RestaurantModule { }\n<|repo_name|>siddharth-krishna/food-delivery-app<|file_sep|>/src/app/user/user.model.ts\nexport interface User {\n  _id: string;\n  name: string;\n  email: string;\n  password: string;\n  phone: string;\n  address: string;\n  city: string;\n  state: string;\n  zip: string;\n}\n<|repo_name|>siddharth-krishna/food-delivery-app<|file_sep|>/src/app/restaurant/restaurant-routing.module.ts\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AddRestaurantComponent } from './add-restaurant/add-restaurant.component';\nimport { RestaurantEditComponent } from './restaurant-edit/restaurant-edit.component';\nimport { RestaurantListComponent } from './restaurant-list/restaurant-list.component';\n\nconst routes: Routes = [\n  { path: 'restaurant-list', component: RestaurantListComponent },\n  { path: 'add-restaurant', component: AddRestaurantComponent },\n  { path: 'edit-restaurant/:id', component: RestaurantEditComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class RestaurantRoutingModule { }\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\nimport { UserService } from '../user.service';\n\n@Component({\n  selector: 'app-user-home',\n  templateUrl: './user-home.component.html',\n  styleUrls: ['./user-home.component.css']\n})\nexport class UserHomeComponent implements OnInit {\n  user: User;\n  constructor(private authService: AuthService, private userService: UserService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.user = this.authService.getUser();\n    if (!this.user) {\n      this.router.navigate(['/login']);\n    }\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n\n}\n<|file_sep|>import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AdminHomeComponent } from './admin/admin-home/admin-home.component';\nimport { AdminLoginComponent } from './admin/admin-login/admin-login.component';\nimport { AdminRegisterComponent } from './admin/admin-register/admin-register.component';\nimport { AdminRestaurantListComponent } from './admin/admin-restaurant-list/admin-restaurant-list.component';\nimport { AdminRestaurantOrderListComponent } from './admin/admin-restaurant-order-list/admin-restaurant-order-list.component';\nimport { AdminRestaurantOrderViewComponent } from './admin/admin-restaurant-order-view/admin-restaurant-order-view.component';\nimport { AdminUserListComponent } from './admin/admin-user-list/admin-user-list.component';\nimport { AdminUserOrderListComponent } from './admin/admin-user-order-list/admin-user-order-list.component';\nimport { AdminUserOrderViewComponent } from './admin/admin-user-order-view/admin-user-order-view.component';\nimport { AuthGuard } from './auth.guard';\nimport { UserHomeComponent } from './user/user-home/user-home.component';\nimport { UserLoginComponent } from './user/user-login/user-login.component';\nimport { UserRegisterComponent } from './user/user-register/user-register.component';\nimport { UserProfileComponent } from './user/user-profile/user-profile.component';\n\nconst routes: Routes = [\n  { path: 'login', component: UserLoginComponent },\n  { path: 'register', component: UserRegisterComponent },\n  { path: 'user-profile', component: UserProfileComponent, canActivate: [AuthGuard] },\n  { path: 'user-home', component: UserHomeComponent, canActivate: [AuthGuard] },\n  { path: 'admin-login', component: AdminLoginComponent },\n  { path: 'admin-register', component: AdminRegisterComponent },\n  { path: 'admin-home', component: AdminHomeComponent, canActivate: [AuthGuard] },\n  { path: 'admin-restaurant-list', component: AdminRestaurantListComponent, canActivate: [AuthGuard] },\n  { path: 'admin-restaurant-order-list', component: AdminRestaurantOrderListComponent, canActivate: [AuthGuard] },\n  { path: 'admin-restaurant-order-view/:id', component: AdminRestaurantOrderViewComponent, canActivate: [AuthGuard] },\n  { path: 'admin-user-list', component: AdminUserListComponent, canActivate: [AuthGuard] },\n  { path: 'admin-user-order-list', component: AdminUserOrderListComponent, canActivate: [AuthGuard] },\n  { path: 'admin-user-order-view/:id', component: AdminUserOrderViewComponent, canActivate: [AuthGuard] },\n  { path: '', redirectTo: '/login', pathMatch: 'full' }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\nimport { UserService } from '../user.service';\n\n@Component({\n  selector: 'app-admin-register',\n  templateUrl: './admin-register.component.html',\n  styleUrls: ['./admin-register.component.css']\n})\nexport class AdminRegisterComponent implements OnInit {\n  user: User;\n  constructor(private authService: AuthService, private userService: UserService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.user = this.authService.getUser();\n    if (this.user) {\n      this.router.navigate(['/admin-home']);\n    }\n  }\n\n  register() {\n    this.userService.register(this.user).subscribe(\n      (res) => {\n        this.authService.setUser(res);\n        this.router.navigate(['/admin-home']);\n      },\n      (err) => {\n        console.log(err);\n      }\n    );\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\nimport { UserService } from '../user.service';\n\n@Component({\n  selector: 'app-admin-login',\n  templateUrl: './admin-login.component.html',\n  styleUrls: ['./admin-login.component.css']\n})\nexport class AdminLoginComponent implements OnInit {\n  user: User;\n  constructor(private authService: AuthService, private userService: UserService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.user = this.authService.getUser();\n    if (this.user) {\n      this.router.navigate(['/admin-home']);\n    }\n  }\n\n  login() {\n    this.userService.login(this.user).subscribe(\n      (res) => {\n        this.authService.setUser(res);\n        this.router.navigate(['/admin-home']);\n      },\n      (err) => {\n        console.log(err);\n      }\n    );\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\nimport { UserService } from '../user.service';\n\n@Component({\n  selector: 'app-admin-home',\n  templateUrl: './admin-home.component.html',\n  styleUrls: ['./admin-home.component.css']\n})\nexport class AdminHomeComponent implements OnInit {\n  user: User;\n  constructor(private authService: AuthService, private userService: UserService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.user = this.authService.getUser();\n    if (!this.user) {\n      this.router.navigate(['/login']);\n    }\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\nimport { UserService } from '../user.service';\n\n@Component({\n  selector: 'app-admin-user-list',\n  templateUrl: './admin-user-list.component.html',\n  styleUrls: ['./admin-user-list.component.css']\n})\nexport class AdminUserListComponent implements OnInit {\n  user: User;\n  users: User[];\n  constructor(private authService: AuthService, private userService: UserService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.user = this.authService.getUser();\n    if (!this.user) {\n      this.router.navigate(['/login']);\n    }\n    this.userService.getUsers().subscribe(\n      (res) => {\n        this.users = res;\n      },\n      (err) => {\n", "input_token_count": 2347, "output_token_count": 4096, "latency": 500.5596809387207}
