{"accuracy": 0.79, "correct_count": 316, "total_count": 400}
{"id": "simple_13", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 143"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_13", "question": [[{"role": "user", "content": "Calculate the area under the curve y=x^2 from x=1 to x=3."}]], "function": [{"name": "calculate_area_under_curve", "description": "Calculate the area under a mathematical function within a given interval.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The mathematical function as a string."}, "interval": {"type": "array", "items": {"type": "float"}, "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."}, "method": {"type": "string", "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, "required": ["function", "interval"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"calculate_area_under_curve\"><params><param name=\"function\" value=\"x**2\" type=\"string\"/><param name=\"interval\" value=[1.0, 3.0] type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"calculate_area_under_curve": {"function": ["x**2", "lambda x: x**2", "y=x**2"], "interval": [[1.0, 3.0]], "method": ["", "trapezoidal"]}}]}
{"id": "simple_15", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 124"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_15", "question": [[{"role": "user", "content": "Calculate the area under the curve from x = -2 to x = 3 for the function y = x^3 using simpson method."}]], "function": [{"name": "integrate", "description": "Calculate the area under a curve for a specified function between two x values.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The function to integrate, represented as a string. For example, 'x^3'"}, "start_x": {"type": "integer", "description": "The starting x-value to integrate over."}, "end_x": {"type": "integer", "description": "The ending x-value to integrate over."}, "method": {"type": "string", "description": "The method of numerical integration to use. Choices are 'trapezoid' or 'simpson'. Default is 'trapezoid'."}}, "required": ["function", "start_x", "end_x"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"integrate\"><params><param name=\"function\" value=\"x^3\" type=\"string\"/><param name=\"start_x\" value=-2 type=\"integer\"/><param name=\"end_x\" value=3 type=\"integer\"/><param name=\"method\" value=\"simpson\" type=\"string\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"integrate": {"function": ["x**3", "lambda x: x**3"], "start_x": [-2], "end_x": [3], "method": ["simpson"]}}]}
{"id": "simple_37", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 210"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_37", "question": [[{"role": "user", "content": "Find the estimated travel time by car from San Francisco to Los Angeles with stops at Santa Barbara and Monterey."}]], "function": [{"name": "route.estimate_time", "description": "Estimate the travel time for a specific route with optional stops.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting point for the journey. It should be format as city name such as Boston."}, "end_location": {"type": "string", "description": "The destination for the journey. It should be format as city name such as Boston."}, "stops": {"type": "array", "items": {"type": "string"}, "description": "Additional cities or points of interest to stop at during the journey. Default is an empty list."}}, "required": ["start_location", "end_location"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"route.estimate_time\"><params><param name=\"start_location\" value=\"San Francisco\" type=\"string\"/><param name=\"end_location\" value=\"Los Angeles\" type=\"string\"/><param name=\"stops\" value=[\"Santa Barbara\", \"Monterey\"] type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"route.estimate_time": {"start_location": ["San Francisco"], "end_location": ["Los Angeles"], "stops": [["Santa Barbara", "Monterey"], ["Monterey", "Santa Barbara"]]}}]}
{"id": "simple_47", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 146"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_47", "question": [[{"role": "user", "content": "Find the boiling point and melting point of water under the sea level of 5000m."}]], "function": [{"name": "get_boiling_melting_points", "description": "Retrieve the boiling point and melting point of a substance based on its name and the sea level.", "parameters": {"type": "dict", "properties": {"substance": {"type": "string", "description": "The name of the substance."}, "sea_level": {"type": "integer", "description": "The sea level in meters."}}, "required": ["substance", "sea_level"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"get_boiling_melting_points\"><params><param name=\"substance\" value=\"water\" type=\"string\"/><param name=\"sea_level\" value=5000 type=\"integer\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"get_boiling_melting_points": {"substance": ["water"], "sea_level": [5000]}}]}
{"id": "simple_50", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 137"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_50", "question": [[{"role": "user", "content": "What is the change in entropy in Joules per Kelvin of a 1kg ice block at 0\u00b0C if it is heated to 100\u00b0C under 1 atmosphere of pressure?"}]], "function": [{"name": "entropy_change.calculate", "description": "Calculate the change in entropy for a mass of a specific substance under set initial and final conditions.", "parameters": {"type": "dict", "properties": {"substance": {"type": "string", "description": "The substance for which the change in entropy is calculated."}, "mass": {"type": "integer", "description": "The mass of the substance in kg."}, "initial_temperature": {"type": "integer", "description": "The initial temperature of the substance in degree Celsius."}, "final_temperature": {"type": "integer", "description": "The final temperature of the substance in degree Celsius."}, "pressure": {"type": "integer", "default": 1, "description": "The pressure the substance is under in atmospheres."}}, "required": ["substance", "mass", "initial_temperature", "final_temperature"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"entropy_change.calculate\"><params><param name=\"substance\" value=\"ice\" type=\"string\"/><param name=\"mass\" value=1 type=\"integer\"/><param name=\"initial_temperature\" value=0 type=\"integer\"/><param name=\"final_temperature\" value=100 type=\"integer\"/><param name=\"pressure\" value=1 type=\"integer\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"entropy_change.calculate": {"substance": ["ice"], "mass": [1], "initial_temperature": [0], "final_temperature": [100], "pressure": ["", 1]}}]}
{"id": "simple_55", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'cell_type': 'human cell'. Expected one of ['human']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_55", "question": [[{"role": "user", "content": "Find me detailed information about the structure of human cell"}]], "function": [{"name": "biology.get_cell_info", "description": "Retrieve information about the structure and functioning of a specified type of cell", "parameters": {"type": "dict", "properties": {"cell_type": {"type": "string", "description": "Type of cell you want information about"}, "detailed": {"type": "boolean", "description": "Indicate if you want a detailed description of the cell", "default": "false"}}, "required": ["cell_type"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"biology.get_cell_info\"><params><param name=\"cell_type\" value=\"human cell\" type=\"string\"/><param name=\"detailed\" value=\"true\" type=\"boolean\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"biology.get_cell_info": {"cell_type": "human cell", "detailed": true}}], "possible_answer": [{"biology.get_cell_info": {"cell_type": ["human"], "detailed": [true]}}]}
{"id": "simple_65", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 184"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_65", "question": [[{"role": "user", "content": "Calculate the Population Density for Brazil in 2022 if the population is 213 million and the land area is 8.5 million square kilometers."}]], "function": [{"name": "calculate_density", "description": "Calculate the population density of a specific country in a specific year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country for which the density needs to be calculated."}, "year": {"type": "string", "description": "The year in which the density is to be calculated."}, "population": {"type": "integer", "description": "The population of the country."}, "land_area": {"type": "integer", "description": "The land area of the country in square kilometers."}}, "required": ["country", "year", "population", "land_area"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"calculate_density\"><params><param name=\"country\" value=\"Brazil\" type=\"string\"/><param name=\"year\" value=\"2022\" type=\"string\"/><param name=\"population\" value=213000000 type=\"integer\"/><param name=\"land_area\" value=8500000 type=\"integer\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"calculate_density": {"country": ["Brazil"], "year": ["2022"], "population": [213000000], "land_area": [8500000]}}]}
{"id": "simple_77", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 160"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_77", "question": [[{"role": "user", "content": "Find a nearby restaurant that serves vegan food in Los Angeles."}]], "function": [{"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific dietary preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Los Angeles, CA"}, "dietary_preference": {"type": "array", "items": {"type": "string", "enum": ["Vegan", "Vegetarian", "Gluten-free", "Dairy-free", "Nut-free"]}, "description": "Dietary preference. Default is empty list."}}, "required": ["location"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"restaurant.find_nearby\"><params><param name=\"location\" value=\"Los Angeles, CA\" type=\"string\"/><param name=\"dietary_preference\" value=['Vegan'] type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"restaurant.find_nearby": {"location": ["Los Angeles, CA"], "dietary_preference": [["Vegan"]]}}]}
{"id": "simple_80", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. malformed node or string on line 1: <ast.Name object at 0x7f7b1b147e50>"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_80", "question": [[{"role": "user", "content": "I want to find 5 restaurants nearby my location, Manhattan, offering Thai food and a vegan menu."}]], "function": [{"name": "find_restaurants", "description": "Locate nearby restaurants based on location and food preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The specific location or area. The location should be in the format of District, City."}, "food_type": {"type": "string", "description": "The type of food preferred."}, "number": {"type": "integer", "description": "Number of results to return."}, "dietary_requirements": {"type": "array", "items": {"type": "string"}, "description": "Special dietary requirements, e.g. vegan, gluten-free. Default is empty list."}}, "required": ["location", "food_type", "number"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"find_restaurants\"><params><param name=\"location\" value=\"Manhattan\" type=\"string\"/><param name=\"food_type\" value=\"Thai\" type=\"string\"/><param name=\"number\" value=\"5\" type=\"integer\"/><param name=\"dietary_requirements\" value=\"vegan\" type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"find_restaurants": {"location": ["Manhattan, New York City", "Manhattan", "Manhattan, New York", "Manhattan, NY", "Manhattan, NYC"], "food_type": ["Thai"], "number": [5], "dietary_requirements": [["vegan"], ["Vegan"]]}}]}
{"id": "simple_87", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'list'. Expected outer type array with inner type <class 'float'>. Parameter value: [5, 3, 4, 1, 2]."], "error_type": "type_error:nested", "prompt": {"id": "simple_87", "question": [[{"role": "user", "content": "Sort the list [5, 3, 4, 1, 2] in ascending order."}]], "function": [{"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "dict", "properties": {"list": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting."}}, "required": ["list", "order"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"array_sort\"><params><param name=\"list\" value=\"[5, 3, 4, 1, 2]\" type=\"array\"/><param name=\"order\" value=\"ascending\" type=\"string\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"array_sort": {"list": [5, 3, 4, 1, 2], "order": "ascending"}}], "possible_answer": [{"array_sort": {"list": [[5.0, 3.0, 4.0, 1.0, 2.0]], "order": ["ascending"]}}]}
{"id": "simple_89", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 202"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_89", "question": [[{"role": "user", "content": "Fetch all records for students studying Science in 'Bluebird High School' from the StudentDB."}]], "function": [{"name": "db_fetch_records", "description": "Fetch records from a specified database table based on certain conditions.", "parameters": {"type": "dict", "properties": {"database_name": {"type": "string", "description": "The name of the database."}, "table_name": {"type": "string", "description": "The name of the table from which records need to be fetched."}, "conditions": {"type": "dict", "properties": {"department": {"type": "string", "description": "The name of the department of students."}, "school": {"type": "string", "description": "The name of the school students are enrolled in."}}, "description": "The conditions based on which records are to be fetched."}, "fetch_limit": {"type": "integer", "description": "Limits the number of records to be fetched. Default is 0, which means no limit."}}, "required": ["database_name", "table_name", "conditions"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"db_fetch_records\"><params><param name=\"database_name\" value=\"StudentDB\" type=\"string\"/><param name=\"table_name\" value=\"students\" type=\"string\"/><param name=\"conditions\" value={'department': 'Science', 'school': 'Bluebird High School'} type=\"dict\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"db_fetch_records": {"database_name": ["StudentDB"], "table_name": ["students"], "conditions": [{"department": ["Science"], "school": ["Bluebird High School", "Bluebird HS"]}], "fetch_limit": ["", 0]}}]}
{"id": "simple_96", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 130"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_96", "question": [[{"role": "user", "content": "Find records in database in user table where age is greater than 25 and job is 'engineer'."}]], "function": [{"name": "database.query", "description": "Query the database based on certain conditions.", "parameters": {"type": "dict", "properties": {"table": {"type": "string", "description": "Name of the table to query."}, "conditions": {"type": "array", "items": {"type": "dict", "properties": {"field": {"type": "string", "description": "The field to apply the condition."}, "operation": {"type": "string", "description": "The operation to be performed.", "enum": ["<", ">", "=", ">=", "<="]}, "value": {"type": "string", "description": "The value to be compared."}}, "required": ["field", "operation", "value"]}, "description": "Conditions for the query."}}, "required": ["table", "conditions"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"database.query\"><params><param name=\"table\" value=\"user\" type=\"string\"/><param name=\"conditions\" value=[{\"field\": \"age\", \"operation\": \">\", \"value\": \"25\"}, {\"field\": \"job\", \"operation\": \"=\", \"value\": \"engineer\"}] type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"database.query": {"table": ["user"], "conditions": [[{"field": ["age"], "operation": [">"], "value": ["25"]}, {"field": ["job"], "operation": ["="], "value": ["engineer"]}]]}}]}
{"id": "simple_98", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'hours': 18. Expected one of [6]."], "error_type": "value_error:others", "prompt": {"id": "simple_98", "question": [[{"role": "user", "content": "What will be the angle between the hour and minute hands of a clock at 6:30 PM?"}]], "function": [{"name": "calculate_clock_angle", "description": "Calculate the angle between the hour and minute hands of a clock at a given time.", "parameters": {"type": "dict", "properties": {"hours": {"type": "integer", "description": "The hour on the clock face."}, "minutes": {"type": "integer", "description": "The minutes on the clock face."}, "round_to": {"type": "integer", "description": "The number of decimal places to round the result to, default is 2."}}, "required": ["hours", "minutes"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"calculate_clock_angle\"><params><param name=\"hours\" value=\"18\" type=\"integer\"/><param name=\"minutes\" value=\"30\" type=\"integer\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"calculate_clock_angle": {"hours": 18, "minutes": 30}}], "possible_answer": [{"calculate_clock_angle": {"hours": [6], "minutes": [30], "round_to": ["", 2]}}]}
{"id": "simple_108", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 89"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_108", "question": [[{"role": "user", "content": "Run a linear regression model with predictor variables 'Age', 'Income' and 'Education' and a target variable 'Purchase_Amount'. Also apply standardization."}]], "function": [{"name": "run_linear_regression", "description": "Build a linear regression model using given predictor variables and a target variable.", "parameters": {"type": "dict", "properties": {"predictors": {"type": "array", "items": {"type": "string"}, "description": "Array containing the names of predictor variables."}, "target": {"type": "string", "description": "The name of target variable."}, "standardize": {"type": "boolean", "description": "Option to apply standardization on the predictors. Defaults to False."}}, "required": ["predictors", "target"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"run_linear_regression\"><params><param name=\"predictors\" value=['Age', 'Income', 'Education'] type=\"array\"/><param name=\"target\" value=\"Purchase_Amount\" type=\"string\"/><param name=\"standardize\" value=True type=\"boolean\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"run_linear_regression": {"predictors": [["Age", "Income", "Education"]], "target": ["Purchase_Amount"], "standardize": [true]}}]}
{"id": "simple_113", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_113", "question": [[{"role": "user", "content": "What's the probability of rolling a six on a six-sided die twice in a row?"}]], "function": [{"name": "probability.dice_roll", "description": "Calculate the probability of rolling a certain number on a six-sided die a certain number of times in a row.", "parameters": {"type": "dict", "properties": {"desired_number": {"type": "integer", "description": "The number you want to roll."}, "number_of_rolls": {"type": "integer", "description": "How many times you want to roll that number in a row."}, "die_sides": {"type": "integer", "description": "The number of sides on the die (optional; default is 6)."}}, "required": ["desired_number", "number_of_rolls"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"probability.dice_roll\"><params><param name=\"desired_number\" value=\"6\" type=\"integer\"/><param name=\"number_of_rolls\" value=\"2\" type=\"integer\"/></params></function></TOOLCALL>", "model_result_decoded": [], "possible_answer": [{"probability.dice_roll": {"desired_number": [6], "number_of_rolls": [2], "die_sides": [6, ""]}}]}
{"id": "simple_126", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 177"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_126", "question": [[{"role": "user", "content": "What is the coefficient of determination (R-squared) for a model using engine size and fuel economy variables to predict car_price with a dataset in path C:/data/cars.csv?"}]], "function": [{"name": "linear_regression.get_r_squared", "description": "Calculate the coefficient of determination of a regression model.", "parameters": {"type": "dict", "properties": {"dataset_path": {"type": "string", "description": "Path to the CSV dataset file."}, "independent_variables": {"type": "array", "items": {"type": "string"}, "description": "The independent variables to use in the regression model."}, "dependent_variable": {"type": "string", "description": "The dependent variable to predict in the regression model."}}, "required": ["dataset_path", "independent_variables", "dependent_variable"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"linear_regression.get_r_squared\"><params><param name=\"dataset_path\" value=\"C:/data/cars.csv\" type=\"string\"/><param name=\"independent_variables\" value=['engine_size', 'fuel_economy'] type=\"array\"/><param name=\"dependent_variable\" value=\"car_price\" type=\"string\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"linear_regression.get_r_squared": {"dataset_path": ["C:/data/cars.csv"], "independent_variables": [["engine_size", "fuel_economy"]], "dependent_variable": ["car_price"]}}]}
{"id": "simple_144", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 92"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_144", "question": [[{"role": "user", "content": "Find the market performance of the S&P 500 and the Dow Jones over the past 5 days."}]], "function": [{"name": "market_performance.get_data", "description": "Retrieve the market performance data for specified indexes over a specified time period.", "parameters": {"type": "dict", "properties": {"indexes": {"type": "array", "items": {"type": "string"}, "description": "Array of stock market indexes. Supported indexes are 'S&P 500', 'Dow Jones', 'NASDAQ', 'FTSE 100', 'DAX' etc."}, "days": {"type": "integer", "description": "Number of days in the past for which the performance data is required."}, "detailed": {"type": "boolean", "description": "Whether to return detailed performance data. If set to true, returns high, low, opening, and closing prices. If false, returns only closing prices. Default is false."}}, "required": ["indexes", "days"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"market_performance.get_data\"><params><param name=\"indexes\" value=['S&P 500', 'Dow Jones'] type=\"array\"/><param name=\"days\" value=5 type=\"integer\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"market_performance.get_data": {"indexes": [["S&P 500", "Dow Jones"]], "days": [5], "detailed": ["", true, false]}}]}
{"id": "simple_147", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 83"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_147", "question": [[{"role": "user", "content": "Retrieve stock prices of Microsoft and Google for the last 2 weeks."}]], "function": [{"name": "get_stock_prices", "description": "Retrieves stock prices for specified companies and duration.", "parameters": {"type": "dict", "properties": {"companies": {"type": "array", "items": {"type": "string"}, "description": "List of companies to retrieve stock prices for."}, "duration": {"type": "string", "description": "Time duration to retrieve stock prices for. E.g., '1 week', '2 weeks', '1 month', etc."}}, "required": ["companies", "duration"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"get_stock_prices\"><params><param name=\"companies\" value=[\"Microsoft\", \"Google\"] type=\"array\"/><param name=\"duration\" value=\"2 weeks\" type=\"string\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"get_stock_prices": {"companies": [["Microsoft", "Google"]], "duration": ["2 weeks"]}}]}
{"id": "simple_149", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 86"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_149", "question": [[{"role": "user", "content": "What's the current stock price of Apple and Microsoft?"}]], "function": [{"name": "get_stock_price", "description": "Retrieves the current stock price of the specified companies", "parameters": {"type": "dict", "properties": {"company_names": {"type": "array", "items": {"type": "string"}, "description": "The list of companies for which to retrieve the stock price."}}, "required": ["company_names"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"get_stock_price\"><params><param name=\"company_names\" value=[\"Apple\", \"Microsoft\"] type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"get_stock_price": {"company_names": [["Apple", "Microsoft"], [["Apple"], ["Microsoft"]], ["AAPL", "MSFT"]]}}]}
{"id": "simple_158", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 194"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_158", "question": [[{"role": "user", "content": "Find the information of criminal cases of Mr. X in New York between 2012 and 2015."}]], "function": [{"name": "get_criminal_records", "description": "Retrieve the criminal records of a specific person in a specific area during a certain time period.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the person."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY"}, "from_year": {"type": "integer", "description": "The start year of the time frame."}, "to_year": {"type": "integer", "description": "The end year of the time frame."}}, "required": ["name", "location", "from_year", "to_year"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"get_criminal_records\"><params><param name=\"name\" value=\"Mr. X\" type=\"string\"/><param name=\"location\" value=\"New York, NY\" type=\"string\"/><param name=\"from_year\" value=2012 type=\"integer\"/><param name=\"to_year\" value=2015 type=\"integer\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"get_criminal_records": {"name": ["Mr. X"], "location": ["New York, NY"], "from_year": [2012], "to_year": [2015]}}]}
{"id": "simple_159", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 160"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_159", "question": [[{"role": "user", "content": "Give me the details of Criminal Law Amendment Act of 2013."}]], "function": [{"name": "get_act_details", "description": "Retrieve the details of a particular legal act based on its name and year of amendment if any.", "parameters": {"type": "dict", "properties": {"act_name": {"type": "string", "description": "The name of the act."}, "amendment_year": {"type": "integer", "description": "Year of amendment if any. If not provided, the latest amendment year will be considered."}}, "required": ["act_name", "amendment_year"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"get_act_details\"><params><param name=\"act_name\" value=\"Criminal Law Amendment Act\" type=\"string\"/><param name=\"amendment_year\" value=2013 type=\"integer\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"get_act_details": {"act_name": ["Criminal Law Amendment Act", "Criminal Law Amendment"], "amendment_year": [2013]}}]}
{"id": "simple_162", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. malformed node or string on line 1: <ast.Name object at 0x7f7b1851bac0>"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_162", "question": [[{"role": "user", "content": "Generate a customized law contract between John and Alice for rental agreement in California."}]], "function": [{"name": "generate_law_contract", "description": "Generates a customized law contract given involved parties, contract type and location.", "parameters": {"type": "dict", "properties": {"parties": {"type": "array", "items": {"type": "string"}, "description": "Parties involved in the contract."}, "contract_type": {"type": "string", "description": "Type of the contract."}, "location": {"type": "string", "description": "Location where the contract will be in effect."}}, "required": ["parties", "contract_type", "location"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"generate_law_contract\"><params><param name=\"parties\" value=\"John, Alice\" type=\"array\"/><param name=\"contract_type\" value=\"rental agreement\" type=\"string\"/><param name=\"location\" value=\"California\" type=\"string\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"generate_law_contract": {"parties": [["John", "Alice"], ["John", "Alice"]], "contract_type": ["Rental Agreement", "rental agreement"], "location": ["California", "CA"]}}]}
{"id": "simple_164", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 236"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_164", "question": [[{"role": "user", "content": "Provide me the official crime rate of violent crime in San Francisco in 2020."}]], "function": [{"name": "get_crime_rate", "description": "Retrieve the official crime rate of a city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The name of the city."}, "state": {"type": "string", "description": "The state where the city is located."}, "type": {"type": "string", "description": "Optional. The type of crime. Default is 'violent'"}, "year": {"type": "integer", "description": "Optional. The year for the crime rate data. Default is year 2001."}}, "required": ["city", "state"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"get_crime_rate\"><params><param name=\"city\" value=\"San Francisco\" type=\"string\"/><param name=\"state\" value=\"California\" type=\"string\"/><param name=\"type\" value=\"violent\" type=\"string\"/><param name=\"year\" value=2020 type=\"integer\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"get_crime_rate": {"city": ["San Francisco"], "state": ["California", "CA"], "type": ["violent", ""], "year": [2020]}}]}
{"id": "simple_166", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 187"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_166", "question": [[{"role": "user", "content": "Find a lawyer specializing in divorce cases and charge fee less than 400 dollars per hour in Chicago."}]], "function": [{"name": "lawyer.find_nearby", "description": "Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city and state, e.g. Chicago, IL."}, "specialty": {"type": "array", "items": {"type": "string", "enum": ["Civil", "Divorce", "Immigration", "Business", "Criminal"]}, "description": "Specialization of the lawyer."}, "fee": {"type": "integer", "description": "Hourly fee charged by lawyer"}}, "required": ["city", "specialty", "fee"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"lawyer.find_nearby\"><params><param name=\"city\" value=\"Chicago, IL\" type=\"string\"/><param name=\"specialty\" value=\"Divorce\" type=\"array\"/><param name=\"fee\" value=400 type=\"integer\"/></function></functions></TOOLCALL>", "possible_answer": [{"lawyer.find_nearby": {"city": ["Chicago, IL.", "Chicago, IL"], "specialty": [["Divorce"]], "fee": [400]}}]}
{"id": "simple_168", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_168", "question": [[{"role": "user", "content": "Search for ongoing lawsuits related to the company 'Google' filed after January 1, 2021 in California."}]], "function": [{"name": "lawsuit_search", "description": "Search for lawsuits related to a specific company within a specific date range and location.", "parameters": {"type": "dict", "properties": {"company": {"type": "string", "description": "The company related to the lawsuit."}, "start_date": {"type": "string", "description": "Start of the date range for when the lawsuit was filed in the format of MM-DD-YYY."}, "location": {"type": "string", "description": "Location where the lawsuit was filed in the format of full state name."}, "status": {"type": "string", "enum": ["ongoing", "settled", "dismissed"], "description": "The status of the lawsuit. Default is 'ongoing'."}}, "required": ["company", "start_date", "location"]}}]}, "model_result_raw": "<TOOLCALL><lawsuit_search><params><param name=\"company\" value=\"Google\" type=\"string\"/><param name=\"start_date\" value=\"01-01-2021\" type=\"string\"/><param name=\"location\" value=\"California\" type=\"string\"/><param name=\"status\" value=\"ongoing\" type=\"string\"/></params></lawsuit_search></TOOLCALL>", "model_result_decoded": [], "possible_answer": [{"lawsuit_search": {"company": ["Google", "GOOG"], "start_date": ["01-01-2021", "January 1, 2021"], "location": ["California"], "status": ["ongoing", ""]}}]}
{"id": "simple_170", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 149"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_170", "question": [[{"role": "user", "content": "Find a historical law case about fraud from 2010 to 2015."}]], "function": [{"name": "law_case_search.find_historical", "description": "Search for a historical law case based on specific criteria like the subject and year.", "parameters": {"type": "dict", "properties": {"subject": {"type": "string", "description": "The subject matter of the case, e.g., 'fraud'"}, "from_year": {"type": "integer", "description": "The start year for the range of the case. The case should happen after this year."}, "to_year": {"type": "integer", "description": "The end year for the range of the case. The case should happen before this year."}}, "required": ["subject", "from_year", "to_year"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"law_case_search.find_historical\"><params><param name=\"subject\" value=\"fraud\" type=\"string\"/><param name=\"from_year\" value=2010 type=\"integer\"/><param name=\"to_year\" value=2015 type=\"integer\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"law_case_search.find_historical": {"subject": ["fraud"], "from_year": [2010], "to_year": [2015]}}]}
{"id": "simple_172", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_172", "question": [[{"role": "user", "content": "How to obtain the detailed case information of the 'R vs Adams' legal case?"}]], "function": [{"name": "legal_case.fetch", "description": "Fetch detailed legal case information from database.", "parameters": {"type": "dict", "properties": {"case_id": {"type": "string", "description": "The ID of the legal case."}, "details": {"type": "boolean", "description": "True if need the detail info. "}}, "required": ["case_id", "details"]}}]}, "model_result_raw": "The query does not provide the case ID for the 'R vs Adams' legal case. The function `legal_case.fetch` requires both the `case_id` and the `details` parameter to fetch detailed legal case information. Please provide the case ID for 'R vs Adams'.", "model_result_decoded": [], "possible_answer": [{"legal_case.fetch": {"case_id": ["R vs Adams"], "details": [true]}}]}
{"id": "simple_173", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 140"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_173", "question": [[{"role": "user", "content": "Find state law cases related to land disputes in the past 5 years from 2015 to 2021 in New York."}]], "function": [{"name": "law_case_search", "description": "Search and retrieve law cases based on the topic, timeline, and location.", "parameters": {"type": "dict", "properties": {"topic": {"type": "string", "description": "The subject matter of the case."}, "year_range": {"type": "array", "items": {"type": "integer"}, "description": "The start and end year for searching cases."}, "location": {"type": "string", "description": "The location where the case is being heard."}, "judicial_system": {"type": "string", "description": "The specific judicial system in which to search (e.g. 'federal', 'state').", "default": "all"}}, "required": ["topic", "year_range", "location"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"law_case_search\"><params><param name=\"topic\" value=\"land disputes\" type=\"string\"/><param name=\"year_range\" value=[2015, 2021] type=\"array\"/><param name=\"location\" value=\"New York\" type=\"string\"/><param name=\"judicial_system\" value=\"state\" type=\"string\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"law_case_search": {"topic": ["land disputes"], "year_range": [[2015, 2021]], "location": ["New York"], "judicial_system": ["state"]}}]}
{"id": "simple_177", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_177", "question": [[{"role": "user", "content": "Find all Patent lawsuit cases of Facebook in 2018."}]], "function": [{"name": "get_lawsuit_cases", "description": "Retrieve all lawsuit cases related to a specific company during a particular year.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "year": {"type": "integer", "description": "The specific year to search for lawsuit cases."}, "status": {"type": "string", "enum": ["open", "closed", "all"], "description": "The status of the lawsuit cases to retrieve. If not specified, defaults to 'all'."}}, "required": ["company_name", "year"]}}]}, "model_result_raw": "The provided function \"get_lawsuit_cases\" can retrieve lawsuit cases related to a specific company during a particular year, but it does not specifically filter by the type of lawsuit (e.g., patent). Therefore, it cannot directly fulfill the request for patent lawsuit cases.", "model_result_decoded": [], "possible_answer": [{"get_lawsuit_cases": {"company_name": ["Facebook"], "year": [2018], "status": ["all", ""]}}]}
{"id": "simple_182", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_182", "question": [[{"role": "user", "content": "Retrieve all the lawsuit details for case number XYZ123."}]], "function": [{"name": "lawsuit_info", "description": "Retrieves details of a lawsuit given a case number", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "The unique identifier of the lawsuit case"}, "year": {"type": "integer", "description": "The year in which the lawsuit case was initiated. Default is 2023 if not specified.", "optional": true, "default": 2023}, "location": {"type": "string", "description": "The location or court jurisdiction where the case was filed. Default is 'all'.", "optional": true}}, "required": ["case_number"]}}]}, "model_result_raw": "<TOOLCALL><lawsuit_info><params><param name=\"case_number\" value=\"XYZ123\" type=\"string\"/></params></lawsuit_info></TOOLCALL>", "model_result_decoded": [], "possible_answer": [{"lawsuit_info": {"case_number": ["XYZ123"], "year": ["", 2023], "location": ["", "all"]}}]}
{"id": "simple_183", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_183", "question": [[{"role": "user", "content": "Search for current lawsuits filed against Apple in Santa Clara County."}]], "function": [{"name": "lawsuit_search", "description": "Retrieve all lawsuits involving a particular entity from specified jurisdiction.", "parameters": {"type": "dict", "properties": {"entity": {"type": "string", "description": "The entity involved in lawsuits."}, "county": {"type": "string", "description": "The jurisdiction for the lawsuit search for example Alameda county."}, "state": {"type": "string", "description": "The state for the lawsuit search. Default is California."}}, "required": ["entity", "county"]}}]}, "model_result_raw": "<TOOLCALL><lawsuit_search><params><param name=\"entity\" value=\"Apple\" type=\"string\"/><param name=\"county\" value=\"Santa Clara\" type=\"string\"/></params></lawsuit_search></TOOLCALL>", "model_result_decoded": [], "possible_answer": [{"lawsuit_search": {"entity": ["Apple"], "county": ["Santa Clara County", "Santa Clara"], "state": ["California", ""]}}]}
{"id": "simple_190", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 158"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_190", "question": [[{"role": "user", "content": "What's the elevation and area of Yellowstone National Park?"}]], "function": [{"name": "park_information", "description": "Retrieve the basic information such as elevation and area of a national park.", "parameters": {"type": "dict", "properties": {"park_name": {"type": "string", "description": "The name of the national park."}, "information": {"type": "array", "items": {"type": "string", "enum": ["Elevation", "Area", "Location", "Established Year"]}, "description": "The type of information you want about the park."}}, "required": ["park_name", "information"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"park_information\"><params><param name=\"park_name\" value=\"Yellowstone National Park\" type=\"string\"/><param name=\"information\" value=['Elevation', 'Area'] type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"park_information": {"park_name": ["Yellowstone", "Yellowstone National Park"], "information": [["Elevation", "Area"], ["Area", "Elevation"]]}}]}
{"id": "simple_193", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 141"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_193", "question": [[{"role": "user", "content": "Find the best local nurseries in Toronto with a good variety of annual plants."}]], "function": [{"name": "local_nursery.find", "description": "Locate local nurseries based on location and plant types availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city or locality where the nursery needs to be located."}, "plant_types": {"type": "array", "items": {"type": "string", "enum": ["Annual", "Perennial", "Shrub", "Tree", "Herbs", "Fruits"]}, "description": "Type of plants the nursery should provide."}}, "required": ["location", "plant_types"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"local_nursery.find\"><params><param name=\"location\" value=\"Toronto\" type=\"string\"/><param name=\"plant_types\" value=[\"Annual\"] type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"local_nursery.find": {"location": ["Toronto"], "plant_types": [["Annual"]]}}]}
{"id": "simple_203", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Optional parameter 'detail' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_203", "question": [[{"role": "user", "content": "Can you find me the latest information about air quality index and pollution data for Chicago?"}]], "function": [{"name": "get_air_quality", "description": "Retrieve real-time air quality and pollution data for a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality data for."}, "detail": {"type": "boolean", "description": "If true, additional data like PM2.5, PM10, ozone levels, and pollution sources will be retrieved. Default is false."}}, "required": ["location"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"get_air_quality\"><params><param name=\"location\" value=\"Chicago\" type=\"string\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"get_air_quality": {"location": "Chicago"}}], "possible_answer": [{"get_air_quality": {"location": ["Chicago"], "detail": [true]}}]}
{"id": "simple_206", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 141"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_206", "question": [[{"role": "user", "content": "Find the nearest park with a tennis court in London."}]], "function": [{"name": "parks.find_nearby", "description": "Locate nearby parks based on specific criteria like tennis court availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. London, UK"}, "amenities": {"type": "array", "items": {"type": "string", "enum": ["Tennis Court", "Picnic Area", "Playground", "Running Track"]}, "description": "Preferred amenities in park. Default is ['Running Track']"}}, "required": ["location"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"parks.find_nearby\"><params><param name=\"location\" value=\"London, UK\" type=\"string\"/><param name=\"amenities\" value=['Tennis Court'] type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"parks.find_nearby": {"location": ["London", "London, UK"], "amenities": [["Tennis Court"]]}}]}
{"id": "simple_208", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 194"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_208", "question": [[{"role": "user", "content": "Get me the directions from New York to Los Angeles avoiding highways and toll roads."}]], "function": [{"name": "map_service.get_directions", "description": "Retrieve directions from a starting location to an ending location, including options for route preferences.", "parameters": {"type": "dict", "properties": {"start": {"type": "string", "description": "Starting location for the route."}, "end": {"type": "string", "description": "Ending location for the route."}, "avoid": {"type": "array", "items": {"type": "string", "enum": ["tolls", "highways", "ferries"]}, "description": "Route features to avoid. Default is ['highways', 'ferries']"}}, "required": ["start", "end"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"map_service.get_directions\"><params><param name=\"start\" value=\"New York\" type=\"string\"/><param name=\"end\" value=\"Los Angeles\" type=\"string\"/><param name=\"avoid\" value=['highways', 'tolls'] type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"map_service.get_directions": {"start": ["New York", "NYC"], "end": ["Los Angeles", "LA"], "avoid": [["highways", "tolls"], ["tolls", "highways"]]}}]}
{"id": "simple_209", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 151"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_209", "question": [[{"role": "user", "content": "Locate the nearest public library in Boston, Massachusetts with English fiction section and free Wi-Fi."}]], "function": [{"name": "public_library.find_nearby", "description": "Locate nearby public libraries based on specific criteria like English fiction availability and Wi-Fi.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Boston, MA"}, "facilities": {"type": "array", "items": {"type": "string", "enum": ["Wi-Fi", "Reading Room", "Fiction", "Children Section", "Cafe"]}, "description": "Facilities and sections in public library."}}, "required": ["location", "facilities"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"public_library.find_nearby\"><params><param name=\"location\" value=\"Boston, MA\" type=\"string\"/><param name=\"facilities\" value=['English Fiction', 'Wi-Fi'] type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"public_library.find_nearby": {"location": ["Boston, MA", "Boston, Massachusetts"], "facilities": [["Fiction", "Wi-Fi"], ["Wi-Fi", "Fiction"]]}}]}
{"id": "simple_214", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 201"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_214", "question": [[{"role": "user", "content": "Search for upcoming month rock concerts in New York."}]], "function": [{"name": "event_finder.find_upcoming", "description": "Find upcoming events of a specific genre in a given location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state where the search will take place, e.g. New York, NY."}, "genre": {"type": "string", "description": "The genre of events."}, "days_ahead": {"type": "integer", "description": "The number of days from now to include in the search.", "default": 7}}, "required": ["location", "genre"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"event_finder.find_upcoming\"><params><param name=\"location\" value=\"New York, NY\" type=\"string\"/><param name=\"genre\" value=\"rock\" type=\"string\"/><param name=\"days_ahead\" value=30 type=\"integer\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"event_finder.find_upcoming": {"location": ["New York", "New York, NY", "NYC"], "genre": ["Rock", "rock"], "days_ahead": [30]}}]}
{"id": "simple_224", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 158"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_224", "question": [[{"role": "user", "content": "Find the most followed person on twitter who tweets about psychology related to behaviour and group dynamics."}]], "function": [{"name": "social_media_analytics.most_followed", "description": "Find the most followed Twitter user related to certain topics.", "parameters": {"type": "dict", "properties": {"topic": {"type": "string", "description": "The main topic of interest."}, "sub_topics": {"type": "array", "items": {"type": "string"}, "description": "Sub-topics related to main topic. Default is empty."}, "region": {"type": "string", "description": "Region of interest for twitter search. Default is 'all'."}}, "required": ["topic"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"social_media_analytics.most_followed\"><params><param name=\"topic\" value=\"psychology\" type=\"string\"/><param name=\"sub_topics\" value=[\"behaviour\", \"group dynamics\"] type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"social_media_analytics.most_followed": {"topic": ["psychology"], "sub_topics": [["behaviour", "group dynamics"]], "region": ["", "all"]}}]}
{"id": "simple_227", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 133"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_227", "question": [[{"role": "user", "content": "Get me strength and weakness traits for ENFJ personality type."}]], "function": [{"name": "get_personality_traits", "description": "Retrieve the personality traits for a specific personality type, including their strengths and weaknesses.", "parameters": {"type": "dict", "properties": {"type": {"type": "string", "description": "The personality type."}, "traits": {"type": "array", "items": {"type": "string", "enum": ["strengths", "weaknesses"]}, "description": "List of traits to be retrieved, default is ['strengths']."}}, "required": ["type"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"get_personality_traits\"><params><param name=\"type\" value=\"ENFJ\" type=\"string\"/><param name=\"traits\" value=['strengths', 'weaknesses'] type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"get_personality_traits": {"type": ["ENFJ"], "traits": [["strengths", "weaknesses"]]}}]}
{"id": "simple_229", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 91"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_229", "question": [[{"role": "user", "content": "What's my Big Five Personality trait scores given that I am efficient, organized, easy going and compassionate?"}]], "function": [{"name": "get_bigfive_scores", "description": "Retrieve Big Five Personality trait scores based on individual's behavioural characteristics.", "parameters": {"type": "dict", "properties": {"characteristics": {"type": "array", "items": {"type": "string"}, "description": "List of user's behavioural characteristics."}, "scale": {"type": "string", "enum": ["high", "medium", "low"], "description": "The scoring scale of traits (default is medium)."}}, "required": ["characteristics"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"get_bigfive_scores\"><params><param name=\"characteristics\" value=['efficient', 'organized', 'easy going', 'compassionate'] type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"get_bigfive_scores": {"characteristics": [["efficient", "organized", "easy going", "compassionate"]], "scale": ["medium", ""]}}]}
{"id": "simple_231", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 143"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_231", "question": [[{"role": "user", "content": "Provide key war events in German history from 1871 to 1945."}]], "function": [{"name": "history.get_key_events", "description": "Retrieve key historical events within a specific period for a certain country.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The name of the country for which history is queried."}, "start_year": {"type": "integer", "description": "Start year of the period for which history is queried."}, "end_year": {"type": "integer", "description": "End year of the period for which history is queried."}, "event_type": {"type": "array", "items": {"type": "string", "enum": ["War", "Revolutions", "Diplomacy", "Economy"]}, "description": "Types of event. Default to 'all', which all types will be considered."}}, "required": ["country", "start_year", "end_year"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"history.get_key_events\"><params><param name=\"country\" value=\"Germany\" type=\"string\"/><param name=\"start_year\" value=1871 type=\"integer\"/><param name=\"end_year\" value=1945 type=\"integer\"/><param name=\"event_type\" value=['War'] type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"history.get_key_events": {"country": ["Germany", "DE"], "start_year": [1871], "end_year": [1945], "event_type": [["War"]]}}]}
{"id": "simple_237", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 145"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_237", "question": [[{"role": "user", "content": "Get historical GDP data for United States from 1960 to 2000."}]], "function": [{"name": "get_historical_GDP", "description": "Retrieve historical GDP data for a specific country and time range.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country for which the historical GDP data is required."}, "start_year": {"type": "integer", "description": "Starting year of the period for which GDP data is required."}, "end_year": {"type": "integer", "description": "Ending year of the period for which GDP data is required."}}, "required": ["country", "start_year", "end_year"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"get_historical_GDP\"><params><param name=\"country\" value=\"United States\" type=\"string\"/><param name=\"start_year\" value=1960 type=\"integer\"/><param name=\"end_year\" value=2000 type=\"integer\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"get_historical_GDP": {"country": ["United States", "US"], "start_year": [1960], "end_year": [2000]}}]}
{"id": "simple_238", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 148"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_238", "question": [[{"role": "user", "content": "Who was the president of the United States during the American Civil War?"}]], "function": [{"name": "us_history.get_president", "description": "Retrieve the U.S. president during a specific event in American history.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The event in U.S. history."}, "year": {"type": "integer", "description": "The specific year of the event."}}, "required": ["event", "year"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"us_history.get_president\"><params><param name=\"event\" value=\"American Civil War\" type=\"string\"/><param name=\"year\" value=1861 type=\"integer\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"us_history.get_president": {"event": ["American Civil War"], "year": [1861, 1862, 1863, 1864, 1865]}}]}
{"id": "simple_248", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 169"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_248", "question": [[{"role": "user", "content": "Who invented the theory of relativity and in which year?"}]], "function": [{"name": "science_history.get_invention", "description": "Retrieve the inventor and year of invention based on the invention's name.", "parameters": {"type": "dict", "properties": {"invention_name": {"type": "string", "description": "The name of the invention."}, "want_year": {"type": "boolean", "default": false, "description": "Return the year of invention if set to true."}}, "required": ["invention_name", "want_year"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"science_history.get_invention\"><params><param name=\"invention_name\" value=\"theory of relativity\" type=\"string\"/><param name=\"want_year\" value=True type=\"boolean\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"science_history.get_invention": {"invention_name": ["theory of relativity", "Theory of Relativity"], "want_year": [true]}}]}
{"id": "simple_254", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 147"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_254", "question": [[{"role": "user", "content": "Retrieve the historic dates and facts related to Christianity between year 300 and 400."}]], "function": [{"name": "get_religion_history", "description": "Retrieves historic events and facts related to a specified religion for a given period.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "The name of the religion."}, "start_year": {"type": "integer", "description": "The starting year of the period."}, "end_year": {"type": "integer", "description": "The end year of the period."}, "event_type": {"type": "string", "enum": ["all", "crusade", "schism", "reform"], "description": "Optional parameter specifying the type of event. Default is 'all'."}}, "required": ["religion", "start_year", "end_year"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"get_religion_history\"><params><param name=\"religion\" value=\"Christianity\" type=\"string\"/><param name=\"start_year\" value=300 type=\"integer\"/><param name=\"end_year\" value=400 type=\"integer\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"get_religion_history": {"religion": ["Christianity"], "start_year": [300], "end_year": [400], "event_type": ["all", ""]}}]}
{"id": "simple_255", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 177"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_255", "question": [[{"role": "user", "content": "Get the biography and main contributions of Pope Innocent III."}]], "function": [{"name": "religious_history.get_papal_biography", "description": "Retrieve the biography and main religious and historical contributions of a Pope based on his papal name.", "parameters": {"type": "dict", "properties": {"papal_name": {"type": "string", "description": "The papal name of the Pope."}, "include_contributions": {"type": "boolean", "default": false, "description": "Include main contributions of the Pope in the response if true."}}, "required": ["papal_name", "include_contributions"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"religious_history.get_papal_biography\"><params><param name=\"papal_name\" value=\"Innocent III\" type=\"string\"/><param name=\"include_contributions\" value=True type=\"boolean\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"religious_history.get_papal_biography": {"papal_name": ["Innocent III", "Pope Innocent III"], "include_contributions": [true]}}]}
{"id": "simple_260", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 89"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_260", "question": [[{"role": "user", "content": "Calculate how many gallons of paint is required to paint a wall with width of 20ft and height of 12ft, assuming 1 gallon covers approximately 350 sq.ft. Don't include window area of 15 sq.ft."}]], "function": [{"name": "paint_requirement.calculate", "description": "Calculate the amount of paint required to paint a given area. Account for coverage efficiency of the paint and exclusions (like windows).", "parameters": {"type": "dict", "properties": {"area": {"type": "dict", "properties": {"width": {"type": "integer", "description": "The width of the area to be painted in feet."}, "height": {"type": "integer", "description": "The height of the area to be painted in feet."}}, "description": "The area to be painted."}, "paint_coverage": {"type": "integer", "description": "Coverage area per gallon of the paint in square feet.", "default": 350}, "exclusion": {"type": "dict", "properties": {"type": {"type": "string", "description": "The type of the exclusion e.g window, door etc."}, "area": {"type": "integer", "description": "The area of the exclusion in square feet."}}, "description": "Area not to be painted. Default to not use any exclusion if not specified."}}, "required": ["area", "paint_coverage"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"paint_requirement.calculate\"><params><param name=\"area\" value={'width': 20, 'height': 12} type=\"dict\"/><param name=\"paint_coverage\" value=350 type=\"integer\"/><param name=\"exclusion\" value={'type': 'window', 'area': 15} type=\"dict\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"paint_requirement.calculate": {"area": [{"width": [20], "height": [12]}], "paint_coverage": [350], "exclusion": [{"type": ["window"], "area": [15]}]}}]}
{"id": "simple_267", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'month': 'upcoming'. Expected one of ['']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_267", "question": [[{"role": "user", "content": "Find the top rated modern sculpture exhibition happening in New York in the upcoming month."}]], "function": [{"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state where the exhibition is held, e.g., New York City, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events if not specified."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold. Default is 'low'"}}, "required": ["location", "art_form"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"find_exhibition\"><params><param name=\"location\" value=\"New York City, NY\" type=\"string\"/><param name=\"art_form\" value=\"sculpture\" type=\"string\"/><param name=\"month\" value=\"upcoming\" type=\"string\"/><param name=\"user_ratings\" value=\"high\" type=\"string\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"find_exhibition": {"location": "New York City, NY", "art_form": "sculpture", "month": "upcoming", "user_ratings": "high"}}], "possible_answer": [{"find_exhibition": {"location": ["New York City, NY"], "art_form": ["sculpture", "modern sculpture"], "month": [""], "user_ratings": ["high"]}}]}
{"id": "simple_277", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 196"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_277", "question": [[{"role": "user", "content": "Find the working hours and ticket price of The British Museum for this weekend, Jun.20,2023."}]], "function": [{"name": "museum_info", "description": "Get information about a museum including its opening hours and ticket prices for a specific date range.", "parameters": {"type": "dict", "properties": {"museum": {"type": "string", "description": "The name of the museum."}, "date": {"type": "string", "description": "The specific date for which information is needed, in the format of YYYY-MM-DD such as '2022-12-01'."}, "information": {"type": "array", "items": {"type": "string", "enum": ["opening_hours", "ticket_price", "address"]}, "description": "The type of information needed from the museum. This is optional and defaults to 'all' if not specified.", "default": "all"}}, "required": ["museum", "date"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"museum_info\"><params><param name=\"museum\" value=\"The British Museum\" type=\"string\"/><param name=\"date\" value=\"2023-06-20\" type=\"string\"/><param name=\"information\" value=['opening_hours', 'ticket_price'] type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"museum_info": {"museum": ["The British Museum"], "date": ["2023-06-20"], "information": [["opening_hours", "ticket_price"], ["ticket_price", "opening_hours"]]}}]}
{"id": "simple_278", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 199"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_278", "question": [[{"role": "user", "content": "Find me the average price and ratings of piano from Yamaha."}]], "function": [{"name": "get_instrument_details", "description": "Retrieve the average price and ratings of an instrument from a particular manufacturer.", "parameters": {"type": "dict", "properties": {"instrument": {"type": "string", "description": "The name of the instrument."}, "manufacturer": {"type": "string", "description": "The manufacturer of the instrument."}, "features": {"type": "array", "items": {"type": "string", "enum": ["price", "rating"]}, "description": "The features to retrieve about the instrument. Default is 'price'"}}, "required": ["instrument", "manufacturer"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"get_instrument_details\"><params><param name=\"instrument\" value=\"piano\" type=\"string\"/><param name=\"manufacturer\" value=\"Yamaha\" type=\"string\"/><param name=\"features\" value=['price', 'rating'] type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"get_instrument_details": {"instrument": ["piano"], "manufacturer": ["Yamaha"], "features": [["price", "rating"]]}}]}
{"id": "simple_282", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 123"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_282", "question": [[{"role": "user", "content": "Find a Yamaha flute with the specifications of open hole, C foot, and silver headjoint available for sale."}]], "function": [{"name": "find_flute", "description": "Locate a flute for sale based on specific requirements.", "parameters": {"type": "dict", "properties": {"brand": {"type": "string", "description": "The brand of the flute. Example, 'Yamaha'"}, "specs": {"type": "array", "items": {"type": "string", "enum": ["open hole", "C foot", "silver headjoint"]}, "description": "The specifications of the flute desired."}}, "required": ["brand", "specs"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"find_flute\"><params><param name=\"brand\" value=\"Yamaha\" type=\"string\"/><param name=\"specs\" value=['open hole', 'C foot', 'silver headjoint'] type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"find_flute": {"brand": ["Yamaha"], "specs": [["open hole", "C foot", "silver headjoint"]]}}]}
{"id": "simple_297", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_297", "question": [[{"role": "user", "content": "music.theory.chordProgression(progression=['I', 'V', 'vi', 'IV'])"}]], "function": [{"name": "music.theory.chordProgression", "description": "Identifies a potential key signature for the given chord progression.", "parameters": {"type": "dict", "properties": {"progression": {"type": "array", "items": {"type": "string"}, "description": "The chord progression in Roman numerals. Eg: ['I', 'V', 'vi', 'IV']."}, "returnAllPossibleKeys": {"type": "boolean", "description": "Flag indicating if the function should return all possible key signatures that fit the chord progression. If false, the function will return the first valid key it finds. Default is false."}, "assumeMajor": {"type": "boolean", "description": "Assumption if the key signature is Major. If true, the function will assume the key signature to be major and otherwise minor. Default is true."}}, "required": ["progression"]}}]}, "model_result_raw": "<No Need to Ask>", "model_result_decoded": [], "possible_answer": [{"music.theory.chordProgression": {"progression": [["I", "V", "vi", "IV"]], "returnAllPossibleKeys": [true, false, ""], "assumeMajor": [true, false, ""]}}]}
{"id": "simple_304", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 212"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_304", "question": [[{"role": "user", "content": "Get point and rebound stats for player 'LeBron James' from last basketball game"}]], "function": [{"name": "player_stats.getLastGame", "description": "Get last game statistics for a specific player in basketball", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The name of the basketball player."}, "team": {"type": "string", "description": "The team that player currently plays for."}, "metrics": {"type": "array", "items": {"type": "string", "enum": ["Points", "Rebounds", "Assists", "Blocks"]}, "description": "Specific metrics to retrieve. If no value is specified, all available metrics will be returned by default."}}, "required": ["player_name", "team"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"player_stats.getLastGame\"><params><param name=\"player_name\" value=\"LeBron James\" type=\"string\"/><param name=\"team\" value=\"Los Angeles Lakers\" type=\"string\"/><param name=\"metrics\" value=['Points', 'Rebounds'] type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"player_stats.getLastGame": {"player_name": ["LeBron James"], "team": ["Los Angeles Lakers", "LAL", "Lakers"], "metrics": [["Points", "Rebounds"]]}}]}
{"id": "simple_305", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_305", "question": [[{"role": "user", "content": "Calculate the overall goal and assist of soccer player Messi in La Liga 2020-2021 season"}]], "function": [{"name": "sports_stats.get_performance", "description": "Compute the performance score of a soccer player given his game stats for a specific tournament in a season.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "Name of the player."}, "tournament": {"type": "string", "description": "Name of the soccer tournament."}, "season": {"type": "string", "description": "Specific season in format 'YYYY-YYYY'."}, "performance_indicator": {"type": "array", "items": {"type": "string", "enum": ["Goals Scored", "Assists Made", "Saves Made", "Cards Received"]}, "description": "Array of performance indicators. Use as much as possible. Default to use all if not specified."}}, "required": ["player_name", "tournament", "season"]}}]}, "model_result_raw": "<TOOLCALL><sports_stats.get_performance><params><player_name>Messi</player_name><tournament>La Liga</tournament><season>2020-2021</season><performance_indicator>['Goals Scored', 'Assists Made']</performance_indicator></params></sports_stats.get_performance></TOOLCALL>", "model_result_decoded": [], "possible_answer": [{"sports_stats.get_performance": {"player_name": ["Messi", "Lionel Messi"], "tournament": ["La Liga"], "season": ["2020-2021"], "performance_indicator": [["Goals Scored", "Assists Made"]]}}]}
{"id": "simple_307", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 85"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_307", "question": [[{"role": "user", "content": "Who won the basketball game between Lakers and Clippers on Jan 28, 2021?"}]], "function": [{"name": "game_result.get_winner", "description": "Get the winner of a specific basketball game.", "parameters": {"type": "dict", "properties": {"teams": {"type": "array", "items": {"type": "string"}, "description": "List of two teams who played the game."}, "date": {"type": "string", "description": "The date of the game, formatted as YYYY-MM-DD."}, "venue": {"type": "string", "optional": true, "description": "Optional: The venue of the game. Default is 'home'."}}, "required": ["teams", "date"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"game_result.get_winner\"><params><param name=\"teams\" value=['Lakers', 'Clippers'] type=\"array\"/><param name=\"date\" value=\"2021-01-28\" type=\"string\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"game_result.get_winner": {"teams": [["Lakers", "Clippers"], ["Clippers", "Lakers"]], "date": ["2021-01-28", "01/28/2021", "Jan.28,2021"], "venue": ["", true]}}]}
{"id": "simple_309", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 150"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_309", "question": [[{"role": "user", "content": "Find me the record of Tom Brady in the 2020 NFL season."}]], "function": [{"name": "nfl_data.player_record", "description": "Retrieve the record of an NFL player in a specified season.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The name of the NFL player."}, "season_year": {"type": "integer", "description": "The year of the NFL season."}, "team": {"type": "string", "description": "The NFL team that the player played for in that season. Default is all teams if not specified."}}, "required": ["player_name", "season_year"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"nfl_data.player_record\"><params><param name=\"player_name\" value=\"Tom Brady\" type=\"string\"/><param name=\"season_year\" value=2020 type=\"integer\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"nfl_data.player_record": {"player_name": ["Tom Brady"], "season_year": [2020], "team": ["", "Tampa Bay Buccaneers"]}}]}
{"id": "simple_312", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 135"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_312", "question": [[{"role": "user", "content": "What are the statistics of Ronaldo's matches in 2021?"}]], "function": [{"name": "player_statistic", "description": "Retrieves detailed player's statistics for a specific year.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The player's name."}, "year": {"type": "integer", "description": "Year for which the statistics will be displayed."}, "team_name": {"type": "string", "description": "The name of the team(optional). Default to not use it if not specified."}}, "required": ["player_name", "year"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"player_statistic\"><params><param name=\"player_name\" value=\"Ronaldo\" type=\"string\"/><param name=\"year\" value=2021 type=\"integer\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"player_statistic": {"player_name": ["Ronaldo", "Cristiano Ronaldo"], "year": [2021], "team_name": [""]}}]}
{"id": "simple_318", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 133"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_318", "question": [[{"role": "user", "content": "What is the FIFA ranking of Germany's men soccer team for the year 2021?"}]], "function": [{"name": "get_team_ranking", "description": "Retrieve the FIFA ranking of a specific soccer team for a certain year.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the soccer team."}, "year": {"type": "integer", "description": "The year for which the ranking is to be retrieved."}, "gender": {"type": "string", "description": "The gender of the team. It can be either 'men' or 'women'. Default is 'men'."}}, "required": ["team_name", "year"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"get_team_ranking\"><params><param name=\"team_name\" value=\"Germany\" type=\"string\"/><param name=\"year\" value=2021 type=\"integer\"/><param name=\"gender\" value=\"men\" type=\"string\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"get_team_ranking": {"team_name": ["Germany"], "year": [2021], "gender": ["men", ""]}}]}
{"id": "simple_320", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 216"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_320", "question": [[{"role": "user", "content": "Fetch the basketball league standings, where Golden State Warriors stand in current 2022-2023 season with details"}]], "function": [{"name": "sports_ranking.get_team_position", "description": "Retrieve a team's position and stats in the basketball league for a given season.", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "The name of the team."}, "season": {"type": "string", "description": "The season for which data should be fetched."}, "detailed": {"type": "boolean", "description": "Flag to retrieve detailed stats or just the position.", "default": false}}, "required": ["team", "season"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"sports_ranking.get_team_position\"><params><param name=\"team\" value=\"Golden State Warriors\" type=\"string\"/><param name=\"season\" value=\"2022-2023\" type=\"string\"/><param name=\"detailed\" value=True type=\"boolean\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"sports_ranking.get_team_position": {"team": ["Golden State Warriors", "GSW"], "season": ["2022-2023"], "detailed": [true]}}]}
{"id": "simple_328", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 143"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_328", "question": [[{"role": "user", "content": "Find the rating and player count of the board game 'Ticket to Ride'."}]], "function": [{"name": "boardgame.get_info", "description": "Retrieve detailed information of a board game.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "Name of the board game."}, "parameters": {"type": "array", "items": {"type": "string", "enum": ["player count", "playing time", "age", "mechanics", "rating"]}, "description": "Game characteristics interested."}, "language": {"type": "string", "description": "The preferred language for the game information, default is English"}}, "required": ["name", "parameters"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"boardgame.get_info\"><params><param name=\"name\" value=\"Ticket to Ride\" type=\"string\"/><param name=\"parameters\" value=['rating', 'player count'] type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"boardgame.get_info": {"name": ["Ticket to Ride"], "parameters": [["rating", "player count"], ["player count", "rating"]], "language": ["", "English"]}}]}
{"id": "simple_330", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 139"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_330", "question": [[{"role": "user", "content": "What's the average review rating and the age range for the board game 'Catan'?"}]], "function": [{"name": "board_game_info", "description": "Get the information about a board game from a database. ", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "Name of the board game."}, "info_required": {"type": "array", "items": {"type": "string", "enum": ["average_review_rating", "age_range", "number_of_players", "playing_time", "genre"]}, "description": "Array of information requested for the game."}}, "required": ["game_name", "info_required"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"board_game_info\"><params><param name=\"game_name\" value=\"Catan\" type=\"string\"/><param name=\"info_required\" value=['average_review_rating', 'age_range'] type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"board_game_info": {"game_name": ["Catan"], "info_required": [["average_review_rating", "age_range"]]}}]}
{"id": "simple_331", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 159"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_331", "question": [[{"role": "user", "content": "Find the top chess players in New York with a rating above 2300."}]], "function": [{"name": "board_game.chess.get_top_players", "description": "Find top chess players in a location based on rating.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city you want to find the players from."}, "minimum_rating": {"type": "integer", "description": "Minimum rating to filter the players."}, "number_of_players": {"type": "integer", "default": 10, "description": "Number of players you want to retrieve, default value is 10"}}, "required": ["location", "minimum_rating"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"board_game.chess.get_top_players\"><params><param name=\"location\" value=\"New York\" type=\"string\"/><param name=\"minimum_rating\" value=2300 type=\"integer\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"board_game.chess.get_top_players": {"location": ["New York", "New York City", "New York City, NY", "NYC"], "minimum_rating": [2300], "number_of_players": ["", 10]}}]}
{"id": "simple_334", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 92"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_334", "question": [[{"role": "user", "content": "Check who is the winner in a game of blackjack given player having A and 10, dealer having 10 and 9. The Ace is considered 1."}]], "function": [{"name": "blackjack.check_winner", "description": "Checks and determines the winner in a game of blackjack.", "parameters": {"type": "dict", "properties": {"player_cards": {"type": "array", "items": {"type": "string"}, "description": "Cards held by the player."}, "dealer_cards": {"type": "array", "items": {"type": "string"}, "description": "Cards held by the dealer."}, "ace_value": {"type": "integer", "description": "The value considered for the ace card, can be either 1 or 11.", "default": 11}}, "required": ["player_cards", "dealer_cards"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"blackjack.check_winner\"><params><param name=\"player_cards\" value=['A', '10'] type=\"array\"/><param name=\"dealer_cards\" value=['10', '9'] type=\"array\"/><param name=\"ace_value\" value=1 type=\"integer\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"blackjack.check_winner": {"player_cards": [["A", "10"]], "dealer_cards": [["10", "9"]], "ace_value": [1]}}]}
{"id": "simple_340", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 146"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_340", "question": [[{"role": "user", "content": "Determine the winner in a Poker game with John having a Hand of 8\u2665, 10\u2665, J\u2665, Q\u2665, K\u2665 and Mike having 9\u2660, J\u2660, 10\u2660, Q\u2660, K\u2660."}]], "function": [{"name": "card_games.poker_determine_winner", "description": "Determines the winner in a game of Poker based on the cards in each players' hands.", "parameters": {"type": "dict", "properties": {"player1": {"type": "string", "description": "The first player's name."}, "hand1": {"type": "array", "items": {"type": "string"}, "description": "The list of cards (as strings) in first player's hand. E.g ['10\u2660', 'J\u2660']"}, "player2": {"type": "string", "description": "The second player's name."}, "hand2": {"type": "array", "items": {"type": "string"}, "description": "The list of cards (as strings) in second player's hand. E.g ['9\u2665', '10\u2665']"}}, "required": ["player1", "hand1", "player2", "hand2"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"card_games.poker_determine_winner\"><params><param name=\"player1\" value=\"John\" type=\"string\"/><param name=\"hand1\" value=['8\u2665', '10\u2665', 'J\u2665', 'Q\u2665', 'K\u2665'] type=\"array\"/><param name=\"player2\" value=\"Mike\" type=\"string\"/><param name=\"hand2\" value=['9\u2660', 'J\u2660', '10\u2660', 'Q\u2660', 'K\u2660'] type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"card_games.poker_determine_winner": {"player1": ["John"], "hand1": [["8\u2665", "10\u2665", "J\u2665", "Q\u2665", "K\u2665"]], "player2": ["Mike"], "hand2": [["9\u2660", "J\u2660", "10\u2660", "Q\u2660", "K\u2660"]]}}]}
{"id": "simple_345", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 149"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_345", "question": [[{"role": "user", "content": "Find the value of a vintage Super Mario Bros. game from 1985 like new."}]], "function": [{"name": "game_valuation", "description": "Get the current market value of a vintage video game.", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "The name of the game."}, "release_year": {"type": "integer", "description": "The year the game was released."}, "condition": {"type": "string", "enum": ["New", "Like New", "Used", "Fair", "Poor"], "description": "The condition of the game. Default is 'Used'."}}, "required": ["game_name", "release_year"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"game_valuation\"><params><param name=\"game_name\" value=\"Super Mario Bros.\" type=\"string\"/><param name=\"release_year\" value=1985 type=\"integer\"/><param name=\"condition\" value=\"Like New\" type=\"string\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"game_valuation": {"game_name": ["Super Mario Bros."], "release_year": [1985], "condition": ["Like New", "New"]}}]}
{"id": "simple_351", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 144"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_351", "question": [[{"role": "user", "content": "Find me a multiplayer game with rating above 4.5 and compatible with Windows 10."}]], "function": [{"name": "multiplayer_game_finder", "description": "Locate multiplayer games that match specific criteria such as rating, platform compatibility, genre, etc.", "parameters": {"type": "dict", "properties": {"platform": {"type": "string", "description": "The platform you want the game to be compatible with, e.g. Windows 10, PS5."}, "rating": {"type": "float", "description": "Desired minimum game rating on a 5.0 scale."}, "genre": {"type": "string", "description": "Desired game genre, e.g. Action, Adventure, Racing. Default is 'Action'.", "enum": ["Action", "Adventure", "Racing", "Strategy", "Simulation"]}}, "required": ["platform", "rating"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"multiplayer_game_finder\"><params><param name=\"platform\" value=\"Windows 10\" type=\"string\"/><param name=\"rating\" value=4.5 type=\"float\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"multiplayer_game_finder": {"platform": ["Windows 10"], "rating": [4.5], "genre": ["", "Action"]}}]}
{"id": "simple_352", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_352", "question": [[{"role": "user", "content": "Get the average user score for the game 'The Legend of Zelda: Breath of the Wild' from GameSpot."}]], "function": [{"name": "gamespot.getAverageUserScore", "description": "Retrieve the average user score of a game from GameSpot.", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The platform the game was released on (e.g., Nintendo Switch, PS5, etc.)", "default": "all platforms"}}, "required": ["game_name", "platform"]}}]}, "model_result_raw": "<TOOLCALL><gamespot.getAverageUserScore><params><param name=\"game_name\" value=\"The Legend of Zelda: Breath of the Wild\" type=\"string\"/><param name=\"platform\" value=\"all platforms\" type=\"string\"/></params></gamespot.getAverageUserScore></TOOLCALL>", "model_result_decoded": [], "possible_answer": [{"gamespot.getAverageUserScore": {"game_name": ["The Legend of Zelda: Breath of the Wild"], "platform": ["Nintendo Switch", "all platforms"]}}]}
{"id": "simple_355", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'recipe': 'Beef Lasagna Recipe'. Expected one of ['Beef Lasagna']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_355", "question": [[{"role": "user", "content": "How many calories in the Beef Lasagna Recipe from Foodnetwork.com?"}]], "function": [{"name": "recipe_info.get_calories", "description": "Retrieve the amount of calories from a specific recipe in a food website.", "parameters": {"type": "dict", "properties": {"website": {"type": "string", "description": "The food website that has the recipe."}, "recipe": {"type": "string", "description": "Name of the recipe."}, "optional_meal_time": {"type": "string", "description": "Specific meal time of the day for the recipe (optional, could be 'Breakfast', 'Lunch', 'Dinner'). Default is all if not specified."}}, "required": ["website", "recipe"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"recipe_info.get_calories\"><params><param name=\"website\" value=\"Foodnetwork.com\" type=\"string\"/><param name=\"recipe\" value=\"Beef Lasagna Recipe\" type=\"string\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"recipe_info.get_calories": {"website": "Foodnetwork.com", "recipe": "Beef Lasagna Recipe"}}], "possible_answer": [{"recipe_info.get_calories": {"website": ["Foodnetwork.com"], "recipe": ["Beef Lasagna"], "optional_meal_time": [""]}}]}
{"id": "simple_358", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 183"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_358", "question": [[{"role": "user", "content": "Find a gluten-free cookie recipe that takes less than 30 minutes to prepare."}]], "function": [{"name": "recipe_search", "description": "Search for a cooking recipe based on specific dietary needs and time constraint.", "parameters": {"type": "dict", "properties": {"diet": {"type": "array", "items": {"type": "string", "enum": ["Gluten Free", "Dairy Free", "Vegan", "Vegetarian"]}, "description": "Specific dietary need."}, "time_limit": {"type": "integer", "description": "The maximum time to prepare the recipe in minutes. Default is 60 minutes."}, "dish": {"type": "string", "description": "The name of the dish to search for. Default is not use if not specified."}}, "required": ["dish", "diet"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"recipe_search\"><params><param name=\"dish\" value=\"cookie\" type=\"string\"/><param name=\"diet\" value=\"Gluten Free\" type=\"array\"/><param name=\"time_limit\" value=30 type=\"integer\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"recipe_search": {"diet": [["Gluten Free"], ["GF"], ["gluten free"]], "time_limit": [30], "dish": ["cookie"]}}]}
{"id": "simple_359", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 150"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_359", "question": [[{"role": "user", "content": "Give me a recipe for a vegetarian pasta with cheese for 2 servings."}]], "function": [{"name": "recipe_search", "description": "Search for a recipe given dietary restriction, ingredients, and number of servings.", "parameters": {"type": "dict", "properties": {"dietary_restriction": {"type": "string", "description": "The dietary restriction, e.g., 'Vegetarian'."}, "ingredients": {"type": "array", "items": {"type": "string"}, "description": "The list of ingredients."}, "servings": {"type": "integer", "description": "The number of servings the recipe should make"}}, "required": ["dietary_restriction", "ingredients", "servings"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"recipe_search\"><params><param name=\"dietary_restriction\" value=\"Vegetarian\" type=\"string\"/><param name=\"ingredients\" value=[\"pasta\", \"cheese\"] type=\"array\"/><param name=\"servings\" value=2 type=\"integer\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"recipe_search": {"dietary_restriction": ["Vegetarian"], "ingredients": [["pasta", "cheese"]], "servings": [2]}}]}
{"id": "simple_360", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 144"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_360", "question": [[{"role": "user", "content": "Find a recipe for pasta carbonara which contains only less than 500 calories."}]], "function": [{"name": "find_recipe", "description": "Locate a recipe based on name and its calorie content", "parameters": {"type": "dict", "properties": {"recipeName": {"type": "string", "description": "The recipe's name."}, "maxCalories": {"type": "integer", "description": "The maximum calorie content of the recipe.", "default": 1000}}, "required": ["recipeName"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"find_recipe\"><params><param name=\"recipeName\" value=\"pasta carbonara\" type=\"string\"/><param name=\"maxCalories\" value=500 type=\"integer\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"find_recipe": {"recipeName": ["pasta carbonara"], "maxCalories": [500]}}]}
{"id": "simple_363", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 201"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_363", "question": [[{"role": "user", "content": "Find the closest sushi restaurant with a patio in Boston."}]], "function": [{"name": "restaurant_search.find_closest", "description": "Locate the closest sushi restaurant based on certain criteria, such as the presence of a patio.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city, for instance Boston, MA"}, "cuisine": {"type": "string", "description": "Type of food like Sushi."}, "amenities": {"type": "array", "items": {"type": "string", "enum": ["Patio", "Wi-Fi", "Happy Hour", "Wheelchair Accessible"]}, "description": "Preferred amenities in the restaurant. Default 'Wi-Fi'."}}, "required": ["location", "cuisine"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"restaurant_search.find_closest\"><params><param name=\"location\" value=\"Boston\" type=\"string\"/><param name=\"cuisine\" value=\"Sushi\" type=\"string\"/><param name=\"amenities\" value=['Patio'] type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"find_closest": {"location": ["Boston", "Boston, MA"], "cuisine": ["Sushi", "sushi"], "amenities": [["Patio"]]}}]}
{"id": "simple_367", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'recipe_type': 'brownies'. Expected one of ['dessert']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_367", "question": [[{"role": "user", "content": "Find me a vegan recipe for brownies which prep time is under 30 minutes."}]], "function": [{"name": "find_recipe", "description": "Find a recipe based on the dietary restrictions, recipe type, and time constraints.", "parameters": {"type": "dict", "properties": {"dietary_restrictions": {"type": "string", "description": "Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free."}, "recipe_type": {"type": "string", "description": "Type of the recipe. E.g. dessert, main course, breakfast."}, "time": {"type": "integer", "description": "Time limit in minutes to prep the meal."}}, "required": ["dietary_restrictions", "recipe_type", "time"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"find_recipe\"><params><param name=\"dietary_restrictions\" value=\"vegan\" type=\"string\"/><param name=\"recipe_type\" value=\"brownies\" type=\"string\"/><param name=\"time\" value=\"30\" type=\"integer\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"find_recipe": {"dietary_restrictions": "vegan", "recipe_type": "brownies", "time": 30}}], "possible_answer": [{"find_recipe": {"dietary_restrictions": ["vegan"], "recipe_type": ["dessert"], "time": [30]}}]}
{"id": "simple_369", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 151"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_369", "question": [[{"role": "user", "content": "Find a grocery store near me with organic fruits and vegetables in Houston."}]], "function": [{"name": "grocery_store.find_nearby", "description": "Locate nearby grocery stores based on specific criteria like organic fruits and vegetables.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Houston, TX"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["Organic", "Vegetables", "Fruits", "Dairy", "Seafood", "Bakery"]}, "description": "Categories of items to be found in the grocery store. Default is all if not specified."}}, "required": ["location"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"grocery_store.find_nearby\"><params><param name=\"location\" value=\"Houston, TX\" type=\"string\"/><param name=\"categories\" value=['Organic', 'Fruits', 'Vegetables'] type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"grocery_store.find_nearby": {"location": ["Houston", "Houston, TX"], "categories": [["Organic", "Vegetables", "Fruits"], ["Organic", "Fruits", "Vegetables"], ["Vegetables", "Fruits", "Organic"], ["Fruits", "Vegetables", "Organic"], ["Fruits", "Organic", "Vegetables"], ["Vegetables", "Organic", "Fruits"]]}}]}
{"id": "simple_370", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 136"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_370", "question": [[{"role": "user", "content": "Order three bottles of olive oil and a five pound bag of rice from Safeway in Palo Alto."}]], "function": [{"name": "safeway.order", "description": "Order specified items from a Safeway location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location of the Safeway store, e.g. Palo Alto, CA."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order."}, "quantity": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item in the order list."}}, "required": ["location", "items", "quantity"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"safeway.order\"><params><param name=\"location\" value=\"Palo Alto, CA\" type=\"string\"/><param name=\"items\" value=[\"olive oil\", \"rice\"] type=\"array\"/><param name=\"quantity\" value=[3, 1] type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"safeway.order": {"location": ["Palo Alto", "Palo Alto, CA"], "items": [["olive oil", "rice"], ["olive oil", "bag of rice"]], "quantity": [[3, 1]]}}]}
{"id": "simple_371", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 144"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_371", "question": [[{"role": "user", "content": "Check the price of tomatoes and lettuce at the Whole Foods in Los Angeles."}]], "function": [{"name": "whole_foods.check_price", "description": "Check the price of items at a specific Whole Foods location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Location of the Whole Foods store."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items for which the price needs to be checked."}}, "required": ["location", "items"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"whole_foods.check_price\"><params><param name=\"location\" value=\"Los Angeles\" type=\"string\"/><param name=\"items\" value=[\"tomatoes\", \"lettuce\"] type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"whole_foods.check_price": {"location": ["Los Angeles", "LA"], "items": [["tomatoes", "lettuce"]]}}]}
{"id": "simple_373", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 136"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_373", "question": [[{"role": "user", "content": "I want to buy apples, rice, and 12 pack of bottled water from a Walmart near San Jose. Show me the product information and stock availability."}]], "function": [{"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified."}}, "required": ["loc", "product_list"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"walmart.purchase\"><params><param name=\"loc\" value=\"San Jose\" type=\"string\"/><param name=\"product_list\" value=['apples', 'rice', 'bottled water'] type=\"array\"/><param name=\"pack_size\" value=[1, 1, 12] type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"walmart.purchase": {"loc": ["San Jose", "San Jose, CA"], "product_list": [["apples", "rice", "bottled water"], ["apples", "rice", "water"]], "pack_size": [[1, 1, 12]]}}]}
{"id": "simple_374", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 199"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_374", "question": [[{"role": "user", "content": "Check the amount of protein, calories and carbs in an avocado from Walmart."}]], "function": [{"name": "grocery_info.nutritional_info", "description": "Retrieve nutritional information for a given food item from a particular store", "parameters": {"type": "dict", "properties": {"store": {"type": "string", "description": "The store where the item is available"}, "food": {"type": "string", "description": "Food item for which information is needed."}, "information": {"type": "array", "items": {"type": "string", "enum": ["Protein", "Calories", "Carbohydrates", "Fat", "Fiber"]}, "description": "Nutritional details required."}}, "required": ["store", "food", "information"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"grocery_info.nutritional_info\"><params><param name=\"store\" value=\"Walmart\" type=\"string\"/><param name=\"food\" value=\"avocado\" type=\"string\"/><param name=\"information\" value=['Protein', 'Calories', 'Carbohydrates'] type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"grocery_info.nutritional_info": {"store": ["Walmart"], "food": ["avocado", "Avocado"], "information": [["Protein", "Calories", "Carbohydrates"]]}}]}
{"id": "simple_375", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 82"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_375", "question": [[{"role": "user", "content": "Check the total price for three pumpkins and two dozen eggs at Walmart."}]], "function": [{"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "dict", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional). Default to all if not specified."}}, "required": ["items", "quantities"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"walmart.check_price\"><params><param name=\"items\" value=['pumpkin', 'eggs'] type=\"array\"/><param name=\"quantities\" value=[3, 24] type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"walmart.check_price": {"items": [["pumpkins", "eggs"], ["pumpkin", "dozen eggs"]], "quantities": [[3, 24], [3, 2]], "store_location": [""]}}]}
{"id": "simple_380", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. malformed node or string on line 1: <ast.Name object at 0x7f7b1851bcd0>"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_380", "question": [[{"role": "user", "content": "Book a single room at a pet friendly hotel near Manhattan, New York for 3 nights starting from March 10th, 2023."}]], "function": [{"name": "hotel_booking", "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you want to book the hotel."}, "room_type": {"type": "string", "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."}, "duration": {"type": "integer", "description": "The number of nights you want to book the hotel for."}, "start_date": {"type": "string", "description": "The date when your stay begins."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["pet_friendly", "gym", "swimming_pool", "free_breakfast", "parking"]}, "description": "Optional preferences of stay at the hotel. Default to use all if not specified."}}, "required": ["location", "room_type", "duration", "start_date"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"hotel_booking\"><params><param name=\"location\" value=\"Manhattan, New York\" type=\"string\"/><param name=\"room_type\" value=\"single\" type=\"string\"/><param name=\"duration\" value=\"3\" type=\"integer\"/><param name=\"start_date\" value=\"2023-03-10\" type=\"string\"/><param name=\"preferences\" value=\"pet_friendly\" type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"hotel_booking": {"location": ["Manhattan, New York", "Manhattan, NY", "NYC", "New York City"], "room_type": ["single"], "duration": [3], "start_date": ["2023-03-10", "03/10/2023", "Mar.10,2023", "March 10th, 2023", "March 10th,2023", "March10th, 2023", "March10th,2023"], "preferences": [["pet_friendly"]]}}]}
{"id": "simple_387", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York'. Expected one of ['New York City, NY', 'New York, NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_387", "question": [[{"role": "user", "content": "Book a hotel room at the Plaza Hotel in New York for 3 nights starting from 1st June 2022"}]], "function": [{"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"hotel_booking\"><params><param name=\"hotel_name\" value=\"Plaza Hotel\" type=\"string\"/><param name=\"location\" value=\"New York\" type=\"string\"/><param name=\"start_date\" value=\"2022-06-01\" type=\"string\"/><param name=\"end_date\" value=\"2022-06-04\" type=\"string\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"hotel_booking": {"hotel_name": "Plaza Hotel", "location": "New York", "start_date": "2022-06-01", "end_date": "2022-06-04"}}], "possible_answer": [{"hotel_booking": {"hotel_name": ["Plaza Hotel"], "location": ["New York City, NY", "New York, NY"], "start_date": ["2022-06-01", "06/01/2022", "Jun.1,2022"], "end_date": ["2022-06-04", "06/04/2022", "Jun.4,2022"], "rooms": [1, ""]}}]}
{"id": "simple_389", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_389", "question": [[{"role": "user", "content": "Calculate the current cost in British Pounds if I need to convert 200 US dollars."}]], "function": [{"name": "currency_converter", "description": "Calculates the current cost in target currency given the amount in base currency and exchange rate", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The currency to convert from."}, "target_currency": {"type": "string", "description": "The currency to convert to."}, "amount": {"type": "float", "description": "The amount in base currency"}}, "required": ["base_currency", "target_currency", "amount"]}}]}, "model_result_raw": "<No Need to Ask>", "model_result_decoded": [], "possible_answer": [{"currency_converter": {"base_currency": ["USD"], "target_currency": ["GBP"], "amount": [200.0]}}]}
{"id": "simple_391", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 199"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_391", "question": [[{"role": "user", "content": "Get the exchange rate from British pounds to Japanese yen with the fee 0.02 included."}]], "function": [{"name": "get_exchange_rate_with_fee", "description": "Retrieve the exchange rate between two currencies including transaction fee.", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The base currency."}, "target_currency": {"type": "string", "description": "The target currency."}, "fee": {"type": "float", "description": "The transaction fee in percentage. Default is 0%."}}, "required": ["base_currency", "target_currency", "fee"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"get_exchange_rate_with_fee\"><params><param name=\"base_currency\" value=\"GBP\" type=\"string\"/><param name=\"target_currency\" value=\"JPY\" type=\"string\"/><param name=\"fee\" value=0.02 type=\"float\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"get_exchange_rate_with_fee": {"base_currency": ["GBP"], "target_currency": ["JPY"], "fee": [0.02]}}]}