{"accuracy": 0.36666666666666664, "correct_count": 11, "total_count": 30}
{"id": "simple_19", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'num1'. Expected type integer, got str. Parameter value: '40'."], "error_type": "type_error:simple", "prompt": {"id": "simple_19", "question": [[{"role": "user", "content": "Calculate the greatest common divisor of two numbers: 40 and 50"}]], "function": [{"name": "math.gcd", "description": "Compute the greatest common divisor of two numbers", "parameters": {"type": "dict", "properties": {"num1": {"type": "integer", "description": "The first number."}, "num2": {"type": "integer", "description": "The second number."}}, "required": ["num1", "num2"]}}]}, "model_result_raw": "<functions><function name=\"math.gcd\"><params><param name=\"num1\" value=\"40\" type=\"int\"/><param name=\"num2\" value=\"50\" type=\"int\"/></params></function></functions>", "model_result_decoded": [{"math.gcd": {"num1": "40", "num2": "50"}}], "possible_answer": [{"math.gcd": {"num1": [40], "num2": [50]}}]}
{"id": "simple_25", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'height'. Expected type integer, got str. Parameter value: '150'."], "error_type": "type_error:simple", "prompt": {"id": "simple_25", "question": [[{"role": "user", "content": "Calculate the final velocity of an object falling from a 150 meter building, assuming initial velocity is zero."}]], "function": [{"name": "calculate_final_velocity", "description": "Calculate the final velocity of a free falling object given the height it's dropped from, the initial velocity and acceleration due to gravity. Ignore air resistance.", "parameters": {"type": "dict", "properties": {"height": {"type": "integer", "description": "The height the object is dropped from, in meters."}, "initial_velocity": {"type": "integer", "description": "The initial velocity of the object in m/s. Default is zero."}, "gravity": {"type": "float", "description": "Acceleration due to gravity. Default value is 9.81 m/s^2, earth's gravity."}}, "required": ["height"]}}]}, "model_result_raw": "<functions><function name=\"calculate_final_velocity\"><params><param name=\"height\" value=\"150\" type=\"int\"/><param name=\"initial_velocity\" value=\"0\" type=\"int\"/></params></function></functions>", "model_result_decoded": [{"calculate_final_velocity": {"height": "150", "initial_velocity": "0"}}], "possible_answer": [{"calculate_final_velocity": {"height": [150], "initial_velocity": [0, ""], "gravity": [9.81, ""]}}]}
{"id": "simple_58", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Missing required parameter: 'specific_function'."], "error_type": "simple_function_checker:missing_required", "prompt": {"id": "simple_58", "question": [[{"role": "user", "content": "What is the function of ATP synthase in mitochondria?"}]], "function": [{"name": "cell_biology.function_lookup", "description": "Look up the function of a given molecule in a specified organelle.", "parameters": {"type": "dict", "properties": {"molecule": {"type": "string", "description": "The molecule of interest."}, "organelle": {"type": "string", "description": "The organelle of interest."}, "specific_function": {"type": "boolean", "description": "If set to true, a specific function of the molecule within the organelle will be provided, if such information exists."}}, "required": ["molecule", "organelle", "specific_function"]}}]}, "model_result_raw": "<functions><function name=\"cell_biology.function_lookup\"><params><param name=\"molecule\" value=\"ATP synthase\" type=\"string\"/><param name=\"organelle\" value=\"mitochondria\" type=\"string\"/></params></function></functions>", "model_result_decoded": [{"cell_biology.function_lookup": {"molecule": "ATP synthase", "organelle": "mitochondria"}}], "possible_answer": [{"cell_biology.function_lookup": {"molecule": ["ATP synthase"], "organelle": ["mitochondria"], "specific_function": [true]}}]}
{"id": "simple_94", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 137"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_94", "question": [[{"role": "user", "content": "Update my customer information with user id 43523 'name':'John Doe', 'email':'johndoe@email.com' in the database."}]], "function": [{"name": "update_user_info", "description": "Update user information in the database.", "parameters": {"type": "dict", "properties": {"user_id": {"type": "integer", "description": "The user ID of the customer."}, "update_info": {"type": "dict", "properties": {"name": {"type": "string", "description": "The customer's updated name."}, "email": {"type": "string", "description": "The customer's updated email."}}, "description": "The new information to update."}, "database": {"type": "string", "description": "The database where the user's information is stored.", "default": "CustomerInfo"}}, "required": ["user_id", "update_info"]}}]}, "model_result_raw": "<functions><function name=\"update_user_info\"><params><param name=\"user_id\" value=\"43523\" type=\"int\"/><param name=\"update_info\" value=\"{\\\"name\\\": \\\"John Doe\\\", \\\"email\\\": \\\"johndoe@email.com\\\"}\" type=\"dict\"/></params></function></functions>", "possible_answer": [{"update_user_info": {"user_id": [43523], "update_info": [{"name": ["John Doe"], "email": ["johndoe@email.com"]}], "database": ["CustomerInfo", ""]}}]}
{"id": "simple_96", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 130"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_96", "question": [[{"role": "user", "content": "Find records in database in user table where age is greater than 25 and job is 'engineer'."}]], "function": [{"name": "database.query", "description": "Query the database based on certain conditions.", "parameters": {"type": "dict", "properties": {"table": {"type": "string", "description": "Name of the table to query."}, "conditions": {"type": "array", "items": {"type": "dict", "properties": {"field": {"type": "string", "description": "The field to apply the condition."}, "operation": {"type": "string", "description": "The operation to be performed.", "enum": ["<", ">", "=", ">=", "<="]}, "value": {"type": "string", "description": "The value to be compared."}}, "required": ["field", "operation", "value"]}, "description": "Conditions for the query."}}, "required": ["table", "conditions"]}}]}, "model_result_raw": "<functions><function name=\"database.query\"><params><param name=\"table\" value=\"user\" type=\"string\"/><param name=\"conditions\" value=[{\"column\": \"age\", \"operator\": \">\", \"value\": 25}, {\"column\": \"job\", \"operator\": \"=\", \"value\": \"engineer\"}] type=\"list\"/></params></function></functions>", "possible_answer": [{"database.query": {"table": ["user"], "conditions": [[{"field": ["age"], "operation": [">"], "value": ["25"]}, {"field": ["job"], "operation": ["="], "value": ["engineer"]}]]}}]}
{"id": "simple_105", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'base'. Expected type integer, got str. Parameter value: '3'."], "error_type": "type_error:simple", "prompt": {"id": "simple_105", "question": [[{"role": "user", "content": "Calculate the power of 3 raised to the power 4."}]], "function": [{"name": "math.power", "description": "Calculate the power of one number raised to another.", "parameters": {"type": "dict", "properties": {"base": {"type": "integer", "description": "The base number."}, "exponent": {"type": "integer", "description": "The exponent."}, "mod": {"type": "integer", "description": "The modulus. Default is 1. Calculates pow(base, exponent) % mod when provided."}}, "required": ["base", "exponent"]}}]}, "model_result_raw": "<functions><function name=\"math.power\"><params><param name=\"base\" value=\"3\" type=\"int\"/><param name=\"exponent\" value=\"4\" type=\"int\"/></params></function></functions>", "model_result_decoded": [{"math.power": {"base": "3", "exponent": "4"}}], "possible_answer": [{"math.power": {"base": [3], "exponent": [4], "mod": ["", 1]}}]}
{"id": "simple_113", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'desired_number'. Expected type integer, got str. Parameter value: '6'."], "error_type": "type_error:simple", "prompt": {"id": "simple_113", "question": [[{"role": "user", "content": "What's the probability of rolling a six on a six-sided die twice in a row?"}]], "function": [{"name": "probability.dice_roll", "description": "Calculate the probability of rolling a certain number on a six-sided die a certain number of times in a row.", "parameters": {"type": "dict", "properties": {"desired_number": {"type": "integer", "description": "The number you want to roll."}, "number_of_rolls": {"type": "integer", "description": "How many times you want to roll that number in a row."}, "die_sides": {"type": "integer", "description": "The number of sides on the die (optional; default is 6)."}}, "required": ["desired_number", "number_of_rolls"]}}]}, "model_result_raw": "<functions><function name=\"probability.dice_roll\"><params><param name=\"desired_number\" value=\"6\" type=\"int\"/><param name=\"number_of_rolls\" value=\"2\" type=\"int\"/></params></function></functions>", "model_result_decoded": [{"probability.dice_roll": {"desired_number": "6", "number_of_rolls": "2"}}], "possible_answer": [{"probability.dice_roll": {"desired_number": [6], "number_of_rolls": [2], "die_sides": [6, ""]}}]}
{"id": "simple_134", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'investment_amount'. Expected type integer, got str. Parameter value: '5000'."], "error_type": "type_error:simple", "prompt": {"id": "simple_134", "question": [[{"role": "user", "content": "Predict the total expected profit of stocks XYZ in 5 years given I have invested $5000 and annual return rate is 7%."}]], "function": [{"name": "investment.predictProfit", "description": "Predict the profit for given investment after specified number of years.", "parameters": {"type": "dict", "properties": {"investment_amount": {"type": "integer", "description": "The amount invested in dollars."}, "annual_return": {"type": "float", "description": "The annual return rate of the investment."}, "years": {"type": "integer", "description": "The time period in years for which the investment is made."}}, "required": ["investment_amount", "annual_return", "years"]}}]}, "model_result_raw": "<functions><function name=\"investment.predictProfit\"><params><param name=\"investment_amount\" value=\"5000\" type=\"int\"/><param name=\"annual_return\" value=\"0.07\" type=\"float\"/><param name=\"years\" value=\"5\" type=\"int\"/></params></function></functions>", "model_result_decoded": [{"investment.predictProfit": {"investment_amount": "5000", "annual_return": 0.07, "years": "5"}}], "possible_answer": [{"investment.predictProfit": {"investment_amount": [5000], "annual_return": [0.07], "years": [5]}}]}
{"id": "simple_155", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'initial_investment'. Expected type integer, got str. Parameter value: '1000'."], "error_type": "type_error:simple", "prompt": {"id": "simple_155", "question": [[{"role": "user", "content": "Calculate the future value of my investment of $1000 with an annual interest rate of 5% over 2 years."}]], "function": [{"name": "calculate_future_value", "description": "Calculate the future value of an investment given the initial amount, interest rate, and investment duration.", "parameters": {"type": "dict", "properties": {"initial_investment": {"type": "integer", "description": "The initial investment amount."}, "interest_rate": {"type": "float", "description": "The annual interest rate in decimal form."}, "duration": {"type": "integer", "description": "The investment duration in years."}, "compounded": {"type": "integer", "description": "The number of times the interest is compounded per year. Default is 1 (annual compounding)."}}, "required": ["initial_investment", "interest_rate", "duration"]}}]}, "model_result_raw": "<functions><function name=\"calculate_future_value\"><params><param name=\"initial_investment\" value=\"1000\" type=\"int\"/><param name=\"interest_rate\" value=\"0.05\" type=\"float\"/><param name=\"duration\" value=\"2\" type=\"int\"/></params></function></functions>", "model_result_decoded": [{"calculate_future_value": {"initial_investment": "1000", "interest_rate": 0.05, "duration": "2"}}], "possible_answer": [{"calculate_future_value": {"initial_investment": [1000], "interest_rate": [0.05], "duration": [2], "compounded": ["", 1]}}]}
{"id": "simple_165", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_165", "question": [[{"role": "user", "content": "Retrieve cases from 2020 about theft crimes in Los Angeles, California"}]], "function": [{"name": "civil_cases.retrieve", "description": "Retrieve civil cases based on given parameters, including year, crime type, and location.", "parameters": {"type": "dict", "properties": {"year": {"type": "integer", "description": "Year of the cases"}, "crime_type": {"type": "string", "description": "Type of the crime."}, "location": {"type": "string", "description": "Location of the case in the format of city name."}}, "required": ["year", "crime_type", "location"]}}]}, "model_result_raw": "<civil_cases.retrieve><params><param name=\"year\" value=\"2020\" type=\"integer\"/><param name=\"crime_type\" value=\"theft\" type=\"string\"/><param name=\"location\" value=\"Los Angeles\" type=\"string\"/></params></civil_cases.retrieve>", "model_result_decoded": [], "possible_answer": [{"civil_cases.retrieve": {"year": [2020], "crime_type": ["theft"], "location": ["Los Angeles", "Los Angeles, California"]}}]}
{"id": "simple_168", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_168", "question": [[{"role": "user", "content": "Search for ongoing lawsuits related to the company 'Google' filed after January 1, 2021 in California."}]], "function": [{"name": "lawsuit_search", "description": "Search for lawsuits related to a specific company within a specific date range and location.", "parameters": {"type": "dict", "properties": {"company": {"type": "string", "description": "The company related to the lawsuit."}, "start_date": {"type": "string", "description": "Start of the date range for when the lawsuit was filed in the format of MM-DD-YYY."}, "location": {"type": "string", "description": "Location where the lawsuit was filed in the format of full state name."}, "status": {"type": "string", "enum": ["ongoing", "settled", "dismissed"], "description": "The status of the lawsuit. Default is 'ongoing'."}}, "required": ["company", "start_date", "location"]}}]}, "model_result_raw": "<lawsuit_search><params><param name=\"company\" value=\"Google\" type=\"string\"/><param name=\"start_date\" value=\"01-01-2021\" type=\"string\"/><param name=\"location\" value=\"California\" type=\"string\"/></params></lawsuit_search>", "model_result_decoded": [], "possible_answer": [{"lawsuit_search": {"company": ["Google", "GOOG"], "start_date": ["01-01-2021", "January 1, 2021"], "location": ["California"], "status": ["ongoing", ""]}}]}
{"id": "simple_174", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_174", "question": [[{"role": "user", "content": "Get me the top 10 landmark cases in constitutional law in China."}]], "function": [{"name": "get_top_cases", "description": "Retrieve a list of the most influential or landmark cases in a specific field of law.", "parameters": {"type": "dict", "properties": {"field_of_law": {"type": "string", "description": "The specific field of law e.g., constitutional law, criminal law, etc."}, "top_number": {"type": "integer", "description": "The number of top cases to retrieve."}, "country": {"type": "string", "description": "The country where the law cases should be retrieved from. Default is United States of America."}}, "required": ["field_of_law", "top_number"]}}]}, "model_result_raw": "<functions><get_top_cases><params><param name=\"field_of_law\" value=\"constitutional law\" type=\"string\"/><param name=\"top_number\" value=\"10\" type=\"integer\"/><param name=\"country\" value=\"China\" type=\"string\"/></params></get_top_cases></functions>", "model_result_decoded": [], "possible_answer": [{"get_top_cases": {"field_of_law": ["constitutional law", "constitutional"], "top_number": [10], "country": ["China", "CN"]}}]}
{"id": "simple_208", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 194"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_208", "question": [[{"role": "user", "content": "Get me the directions from New York to Los Angeles avoiding highways and toll roads."}]], "function": [{"name": "map_service.get_directions", "description": "Retrieve directions from a starting location to an ending location, including options for route preferences.", "parameters": {"type": "dict", "properties": {"start": {"type": "string", "description": "Starting location for the route."}, "end": {"type": "string", "description": "Ending location for the route."}, "avoid": {"type": "array", "items": {"type": "string", "enum": ["tolls", "highways", "ferries"]}, "description": "Route features to avoid. Default is ['highways', 'ferries']"}}, "required": ["start", "end"]}}]}, "model_result_raw": "<functions><function name=\"map_service.get_directions\"><params><param name=\"start\" value=\"New York\" type=\"string\"/><param name=\"end\" value=\"Los Angeles\" type=\"string\"/><param name=\"avoid\" value=[\"highways\", \"toll roads\"] type=\"list\"/></params></function></functions>", "possible_answer": [{"map_service.get_directions": {"start": ["New York", "NYC"], "end": ["Los Angeles", "LA"], "avoid": [["highways", "tolls"], ["tolls", "highways"]]}}]}
{"id": "simple_254", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 147"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_254", "question": [[{"role": "user", "content": "Retrieve the historic dates and facts related to Christianity between year 300 and 400."}]], "function": [{"name": "get_religion_history", "description": "Retrieves historic events and facts related to a specified religion for a given period.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "The name of the religion."}, "start_year": {"type": "integer", "description": "The starting year of the period."}, "end_year": {"type": "integer", "description": "The end year of the period."}, "event_type": {"type": "string", "enum": ["all", "crusade", "schism", "reform"], "description": "Optional parameter specifying the type of event. Default is 'all'."}}, "required": ["religion", "start_year", "end_year"]}}]}, "model_result_raw": "<functions><function name=\"get_religion_history\"><params><param name=\"religion\" value=\"Christianity\" type=\"string\"/><param name=\"start_year\" value=300 type=\"integer\"/><param name=\"end_year\" value=400 type=\"integer\"/></params></function></functions>", "possible_answer": [{"get_religion_history": {"religion": ["Christianity"], "start_year": [300], "end_year": [400], "event_type": ["all", ""]}}]}
{"id": "simple_297", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_297", "question": [[{"role": "user", "content": "music.theory.chordProgression(progression=['I', 'V', 'vi', 'IV'])"}]], "function": [{"name": "music.theory.chordProgression", "description": "Identifies a potential key signature for the given chord progression.", "parameters": {"type": "dict", "properties": {"progression": {"type": "array", "items": {"type": "string"}, "description": "The chord progression in Roman numerals. Eg: ['I', 'V', 'vi', 'IV']."}, "returnAllPossibleKeys": {"type": "boolean", "description": "Flag indicating if the function should return all possible key signatures that fit the chord progression. If false, the function will return the first valid key it finds. Default is false."}, "assumeMajor": {"type": "boolean", "description": "Assumption if the key signature is Major. If true, the function will assume the key signature to be major and otherwise minor. Default is true."}}, "required": ["progression"]}}]}, "model_result_raw": "<music.theory.chordProgression><progression>['I', 'V', 'vi', 'IV']</progression><returnAllPossibleKeys>false</returnAllPossibleKeys><assumeMajor>true</assumeMajor></music.theory.chordProgression>", "model_result_decoded": [], "possible_answer": [{"music.theory.chordProgression": {"progression": [["I", "V", "vi", "IV"]], "returnAllPossibleKeys": [true, false, ""], "assumeMajor": [true, false, ""]}}]}
{"id": "simple_327", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_327", "question": [[{"role": "user", "content": "Give me the schedule of Manchester United for the next 6 games in Premier League."}]], "function": [{"name": "sports_team.get_schedule", "description": "Fetches the schedule of the specified sports team for the specified number of games in the given league.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "num_of_games": {"type": "integer", "description": "Number of games for which to fetch the schedule."}, "league": {"type": "string", "description": "The name of the sports league. If not provided, the function will fetch the schedule for all games, regardless of the league."}, "location": {"type": "string", "description": "Optional. The city or venue where games are to be held. If not provided, default that all venues will be considered."}}, "required": ["team_name", "num_of_games", "league"]}}]}, "model_result_raw": "<sports_team.get_schedule><params><param name=\"team_name\" value=\"Manchester United\" type=\"string\"/><param name=\"num_of_games\" value=\"6\" type=\"integer\"/><param name=\"league\" value=\"Premier League\" type=\"string\"/></params></sports_team.get_schedule>", "model_result_decoded": [], "possible_answer": [{"sports_team.get_schedule": {"team_name": ["Manchester United", "Man United", "Man U", "MUFC"], "num_of_games": [6], "league": ["Premier League"], "location": [""]}}]}
{"id": "simple_328", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 143"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_328", "question": [[{"role": "user", "content": "Find the rating and player count of the board game 'Ticket to Ride'."}]], "function": [{"name": "boardgame.get_info", "description": "Retrieve detailed information of a board game.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "Name of the board game."}, "parameters": {"type": "array", "items": {"type": "string", "enum": ["player count", "playing time", "age", "mechanics", "rating"]}, "description": "Game characteristics interested."}, "language": {"type": "string", "description": "The preferred language for the game information, default is English"}}, "required": ["name", "parameters"]}}]}, "model_result_raw": "<functions><function name=\"boardgame.get_info\"><params><param name=\"name\" value=\"Ticket to Ride\" type=\"string\"/><param name=\"parameters\" value=[\"rating\", \"player count\"] type=\"list\"/></params></function></functions>", "possible_answer": [{"boardgame.get_info": {"name": ["Ticket to Ride"], "parameters": [["rating", "player count"], ["player count", "rating"]], "language": ["", "English"]}}]}
{"id": "simple_360", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 144"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_360", "question": [[{"role": "user", "content": "Find a recipe for pasta carbonara which contains only less than 500 calories."}]], "function": [{"name": "find_recipe", "description": "Locate a recipe based on name and its calorie content", "parameters": {"type": "dict", "properties": {"recipeName": {"type": "string", "description": "The recipe's name."}, "maxCalories": {"type": "integer", "description": "The maximum calorie content of the recipe.", "default": 1000}}, "required": ["recipeName"]}}]}, "model_result_raw": "<functions><function name=\"find_recipe\"><params><param name=\"recipeName\" value=\"pasta carbonara\" type=\"string\"/><param name=\"maxCalories\" value=500 type=\"integer\"/></params></function></functions>", "possible_answer": [{"find_recipe": {"recipeName": ["pasta carbonara"], "maxCalories": [500]}}]}
{"id": "simple_380", "model_name": "watt-ai_watt-tool-70B", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_380", "question": [[{"role": "user", "content": "Book a single room at a pet friendly hotel near Manhattan, New York for 3 nights starting from March 10th, 2023."}]], "function": [{"name": "hotel_booking", "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you want to book the hotel."}, "room_type": {"type": "string", "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."}, "duration": {"type": "integer", "description": "The number of nights you want to book the hotel for."}, "start_date": {"type": "string", "description": "The date when your stay begins."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["pet_friendly", "gym", "swimming_pool", "free_breakfast", "parking"]}, "description": "Optional preferences of stay at the hotel. Default to use all if not specified."}}, "required": ["location", "room_type", "duration", "start_date"]}}]}, "model_result_raw": "<hotel_booking><params><param name=\"location\" value=\"Manhattan, New York\" type=\"string\"/><param name=\"room_type\" value=\"single\" type=\"string\"/><param name=\"duration\" value=\"3\" type=\"integer\"/><param name=\"start_date\" value=\"2023-03-10\" type=\"string\"/><param name=\"preferences\" value=\"pet friendly\" type=\"list\"/></params></hotel_booking>", "model_result_decoded": [], "possible_answer": [{"hotel_booking": {"location": ["Manhattan, New York", "Manhattan, NY", "NYC", "New York City"], "room_type": ["single"], "duration": [3], "start_date": ["2023-03-10", "03/10/2023", "Mar.10,2023", "March 10th, 2023", "March 10th,2023", "March10th, 2023", "March10th,2023"], "preferences": [["pet_friendly"]]}}]}