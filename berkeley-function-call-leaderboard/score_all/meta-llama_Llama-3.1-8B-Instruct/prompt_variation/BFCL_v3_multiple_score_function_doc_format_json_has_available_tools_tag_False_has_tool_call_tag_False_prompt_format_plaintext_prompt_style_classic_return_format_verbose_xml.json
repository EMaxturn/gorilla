{"accuracy": 0.44, "correct_count": 88, "total_count": 200}
{"id": "multiple_0", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 363"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_0", "question": [[{"role": "user", "content": "Can I find the dimensions and properties of a triangle, if I know its three sides are 5 units, 4 units and 3 units long?"}]], "function": [{"name": "triangle_properties.get", "description": "Retrieve the dimensions, such as area and perimeter, of a triangle if lengths of three sides are given.", "parameters": {"type": "dict", "properties": {"side1": {"type": "integer", "description": "The length of first side of the triangle."}, "side2": {"type": "integer", "description": "The length of second side of the triangle."}, "side3": {"type": "integer", "description": "The length of third side of the triangle."}, "get_area": {"type": "boolean", "description": "A flag to determine whether to calculate the area of triangle. Default is true.", "default": true, "optional": true}, "get_perimeter": {"type": "boolean", "description": "A flag to determine whether to calculate the perimeter of triangle. Default is true.", "default": true, "optional": true}, "get_angles": {"type": "boolean", "description": "A flag to determine whether to calculate the internal angles of triangle. Default is true.", "default": true, "optional": true}}, "required": ["side1", "side2", "side3"]}}, {"name": "circle_properties.get", "description": "Retrieve the dimensions, such as area and circumference, of a circle if radius is given.", "parameters": {"type": "dict", "properties": {"radius": {"type": "float", "description": "The length of radius of the circle."}, "get_area": {"type": "boolean", "description": "A flag to determine whether to calculate the area of circle. Default is true.", "default": true, "optional": true}, "get_circumference": {"type": "boolean", "description": "A flag to determine whether to calculate the circumference of circle. Default is true.", "default": true, "optional": true}}, "required": ["radius"]}}]}, "model_result_raw": "<functions><function name=\"triangle_properties.get\"><params><param name=\"side1\" value=\"5\" type=\"integer\"/><param name=\"side2\" value=\"4\" type=\"integer\"/><param name=\"side3\" value=\"3\" type=\"integer\"/><param name=\"get_area\" value=\"true\" type=\"boolean\"/><param name=\"get_perimeter\" value=\"true\" type=\"boolean\"/><param name=\"get_angles\" value=\"true\" type=\"boolean\"/></function></functions>", "possible_answer": [{"triangle_properties.get": {"side1": [5], "side2": [4], "side3": [3], "get_area": ["", true], "get_perimeter": ["", true], "get_angles": ["", true]}}]}
{"id": "multiple_1", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 201"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_1", "question": [[{"role": "user", "content": "Calculate the area of a triangle, given the lengths of its three sides: 3, 4, and 5."}]], "function": [{"name": "math.triangle_area_heron", "description": "Calculates the area of a triangle using Heron's formula, given the lengths of its three sides.", "parameters": {"type": "dict", "properties": {"side1": {"type": "integer", "description": "Length of the first side of the triangle."}, "side2": {"type": "integer", "description": "Length of the second side of the triangle."}, "side3": {"type": "integer", "description": "Length of the third side of the triangle."}}, "required": ["side1", "side2", "side3"]}}, {"name": "math.circle_area", "description": "Calculates the area of a circle given its radius.", "parameters": {"type": "dict", "properties": {"radius": {"type": "float", "description": "The radius of the circle."}}, "required": ["radius"]}}, {"name": "math.triangle_area_base_height", "description": "Calculates the area of a triangle using the formula (1/2)base*height.", "parameters": {"type": "dict", "properties": {"base": {"type": "float", "description": "The base length of the triangle."}, "height": {"type": "float", "description": "The height of the triangle."}}, "required": ["base", "height"]}}]}, "model_result_raw": "<functions><function name=\"math.triangle_area_heron\"><params><param name=\"side1\" value=\"3\" type=\"integer\"/><param name=\"side2\" value=\"4\" type=\"integer\"/><param name=\"side3\" value=\"5\" type=\"integer\"/></function></functions>", "possible_answer": [{"math.triangle_area_heron": {"side1": [3], "side2": [4], "side3": [5]}}]}
{"id": "multiple_3", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 164"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_3", "question": [[{"role": "user", "content": "Compute the Euclidean distance between two points A(3,4) and B(1,2)."}]], "function": [{"name": "EuclideanDistance.calculate", "description": "Calculate the Euclidean distance between two points.", "parameters": {"type": "dict", "properties": {"pointA": {"type": "array", "items": {"type": "integer"}, "description": "Coordinates for Point A."}, "pointB": {"type": "array", "items": {"type": "integer"}, "description": "Coordinates for Point B."}, "rounding": {"type": "integer", "description": "Optional: The number of decimals to round off the result. Default 0"}}, "required": ["pointA", "pointB"]}}, {"name": "angleToXAxis.calculate", "description": "Calculate the angle between two points with respect to x-axis.", "parameters": {"type": "dict", "properties": {"pointA": {"type": "array", "items": {"type": "integer"}, "description": "Coordinates for Point A."}, "pointB": {"type": "array", "items": {"type": "integer"}, "description": "Coordinates for Point B."}, "rounding": {"type": "integer", "description": "Optional: The number of decimals to round off the result. Default 0"}}, "required": ["pointA", "pointB"]}}]}, "model_result_raw": "<functions><function name=\"EuclideanDistance.calculate\"><params><param name=\"pointA\" value=\"[3,4]\" type=\"array\"/><param name=\"pointB\" value=\"[1,2]\" type=\"array\"/></function></functions>", "possible_answer": [{"EuclideanDistance.calculate": {"pointA": [[3, 4]], "pointB": [[1, 2]], "rounding": ["", 0]}}]}
{"id": "multiple_7", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 235"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_7", "question": [[{"role": "user", "content": "How to assess the population growth in deer and their impact on woodland in Washington state over the past decade?"}]], "function": [{"name": "wildlife_population.assess_growth", "description": "Assesses the population growth of a specific species in a specified location over a period.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species for which the growth is to be calculated."}, "location": {"type": "string", "description": "The area where the species is present."}, "duration": {"type": "integer", "description": "The time period for which the population growth should be calculated in years."}}, "required": ["species", "location", "duration"]}}, {"name": "ecological_impact.analyze", "description": "Analyzes the impact of a species on a particular ecosystem.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species whose impact is to be calculated."}, "ecosystem": {"type": "string", "description": "The ecosystem being affected."}, "location": {"type": "string", "description": "The area where the impact is analyzed."}, "timeframe": {"type": "integer", "description": "The time period for which the impact analysis should be carried out in years.", "default": 5}}, "required": ["species", "ecosystem", "location"]}}]}, "model_result_raw": "<functions><function name=\"wildlife_population.assess_growth\"><params><param name=\"species\" value=\"deer\" type=\"string\"/><param name=\"location\" value=\"Washington state\" type=\"string\"/><param name=\"duration\" value=\"10\" type=\"integer\"/></param></function><function name=\"ecological_impact.analyze\"><params><param name=\"species\" value=\"deer\" type=\"string\"/><param name=\"ecosystem\" value=\"woodland\" type=\"string\"/><param name=\"location\" value=\"Washington state\" type=\"string\"/><param name=\"timeframe\" value=\"10\" type=\"integer\"/></param></function></functions>", "possible_answer": [{"wildlife_population.assess_growth": {"species": ["deer", "Deer"], "location": ["Washington state", "WA", "Washington"], "duration": [10]}}]}
{"id": "multiple_8", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Incorrect type for parameter 'budget'. Expected type dict, got str. Parameter value: ''."], "error_type": "type_error:simple", "prompt": {"id": "multiple_8", "question": [[{"role": "user", "content": "Find a 3 bedroom villa for sale within $300,000 to $400,000 budget in San Diego."}]], "function": [{"name": "property_valuation.get", "description": "Get estimated value of a property based on location, specifications and age", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the property is located, e.g. San Diego, CA."}, "propertyType": {"type": "string", "description": "Type of property such as villa, condo, apartment, etc."}, "bedrooms": {"type": "integer", "description": "Number of bedrooms required in the property."}, "age": {"type": "integer", "description": "Age of the property in years."}}, "required": ["location", "propertyType", "bedrooms", "age"]}}, {"name": "realestate.find_properties", "description": "Find properties based on location, budget, and specifications", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the property is located, e.g. San Diego, CA."}, "propertyType": {"type": "string", "description": "Type of property such as villa, condo, apartment, etc."}, "bedrooms": {"type": "integer", "description": "Number of bedrooms required in the property."}, "budget": {"type": "dict", "properties": {"min": {"type": "float", "description": "Minimum budget limit."}, "max": {"type": "float", "description": "Maximum budget limit."}}, "description": "Budget range for the property."}}, "required": ["location", "propertyType", "bedrooms", "budget"]}}]}, "model_result_raw": "<functions><function name=\"realestate.find_properties\"><params><param name=\"location\" value=\"San Diego\" type=\"string\"/><param name=\"propertyType\" value=\"villa\" type=\"string\"/><param name=\"bedrooms\" value=\"3\" type=\"integer\"/><param name=\"budget\"><param name=\"min\" value=\"300000\" type=\"float\"/><param name=\"max\" value=\"400000\" type=\"float\"/></param></params></function></functions>", "model_result_decoded": [{"realestate.find_properties": {"location": "San Diego", "propertyType": "villa", "bedrooms": 3, "budget": ""}}], "possible_answer": [{"realestate.find_properties": {"location": ["SD", "San Diego", "San Diego, CA", "CA"], "propertyType": ["villa"], "bedrooms": [3], "budget": [{"min": [300000], "max": [400000]}]}}]}
{"id": "multiple_9", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 153"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_9", "question": [[{"role": "user", "content": "Calculate the average grade for student John who has these scores {'math':90, 'science':75, 'history':82, 'music':89} across different subjects."}]], "function": [{"name": "calculate_standard_deviation", "description": "This function calculates the standard deviation across different scores for a specific student.", "parameters": {"type": "dict", "properties": {"gradeDict": {"type": "dict", "description": "A dictionary where keys represent subjects and values represent scores"}}, "required": ["gradeDict"]}}, {"name": "calculate_average", "description": "This function calculates the average grade across different subjects for a specific student.", "parameters": {"type": "dict", "properties": {"gradeDict": {"type": "dict", "description": "A dictionary where keys represent subjects and values represent scores"}}, "required": ["gradeDict"]}}, {"name": "highest_grade", "description": "This function finds the subject where the student got the highest score.", "parameters": {"type": "dict", "properties": {"gradeDict": {"type": "dict", "description": "A dictionary where keys represent subjects and values represent scores"}}, "required": ["gradeDict"]}}]}, "model_result_raw": "<functions><function name=\"calculate_average\"><params><param name=\"gradeDict\" value=\"{'math':90, 'science':75, 'history':82, 'music':89}\" type=\"dict\"/></function></functions>", "possible_answer": [{"calculate_average": {"gradeDict": [{"math": [90], "science": [75], "history": [82], "music": [89]}]}}]}
{"id": "multiple_10", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 334"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_10", "question": [[{"role": "user", "content": "I need to delete some columns from my employees database on personal_data table. I want to remove their email addresses and social security numbers to respect privacy."}]], "function": [{"name": "database.modify_columns", "description": "This function allows deletion or addition of columns in a database", "parameters": {"type": "dict", "properties": {"db_name": {"type": "string", "description": "The name of the database to modify."}, "table": {"type": "string", "description": "The name of the table to modify."}, "operation": {"type": "string", "description": "The operation to carry out on the table. Can be 'delete' or 'add'."}, "columns": {"type": "array", "description": "List of the columns to add or delete from the table.", "items": {"type": "string"}}}, "required": ["db_name", "table", "operation", "columns"]}}, {"name": "database.create_backup", "description": "This function creates a backup of the database before modification", "parameters": {"type": "dict", "properties": {"db_name": {"type": "string", "description": "The name of the database to create a backup of."}, "backup_location": {"type": "string", "description": "The file path where the backup should be stored."}, "timestamp": {"type": "boolean", "description": "Option to append a timestamp to the backup file name.", "default": "False"}}, "required": ["db_name", "backup_location"]}}]}, "model_result_raw": "<functions><function name=\"database.modify_columns\"><params><param name=\"db_name\" value=\"employees\" type=\"string\"/><param name=\"table\" value=\"personal_data\" type=\"string\"/><param name=\"operation\" value=\"delete\" type=\"string\"/><param name=\"columns\"><array><string>email</string><string>social_security_number</string></array></param></function></functions>", "possible_answer": [{"database.modify_columns": {"db_name": ["employees"], "table": ["personal_data"], "operation": ["delete"], "columns": [["email", "ssn"], ["ssn", "email"], ["email", "social_security_number"], ["social_security_number", "email"], ["email", "social security number"], ["social security number", "email"]]}}]}
{"id": "multiple_11", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 188"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_11", "question": [[{"role": "user", "content": "Calculate the roots of a quadratic equation with coefficients 5, 20, and -25"}]], "function": [{"name": "math_roots.quadratic", "description": "Calculate the roots of a quadratic equation.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "Coefficient of the second-degree term."}, "b": {"type": "integer", "description": "Coefficient of the first-degree term."}, "c": {"type": "integer", "description": "Constant term."}}, "required": ["a", "b", "c"]}}, {"name": "math.roots.cubic", "description": "Calculate the roots of a cubic equation.", "parameters": {"type": "dict", "properties": {"a": {"type": "float", "description": "Coefficient of the third-degree term."}, "b": {"type": "float", "description": "Coefficient of the second-degree term."}, "c": {"type": "float", "description": "Coefficient of the first-degree term."}, "d": {"type": "float", "description": "Constant term."}}, "required": ["a", "b", "c", "d"]}}, {"name": "math.roots.polynomial", "description": "Calculate the roots of a polynomial equation.", "parameters": {"type": "dict", "properties": {"coefficients": {"type": "array", "items": {"type": "float"}, "description": "Array of coefficients of the polynomial equation starting from highest degree term."}, "degree": {"type": "integer", "description": "Degree of the polynomial equation. Default 0"}}, "required": ["coefficients"]}}]}, "model_result_raw": "<functions><function name=\"math_roots.quadratic\"><params><param name=\"a\" value=\"5\" type=\"integer\"/><param name=\"b\" value=\"20\" type=\"integer\"/><param name=\"c\" value=\"-25\" type=\"integer\"/></function></functions>", "possible_answer": [{"math_roots.quadratic": {"a": [5], "b": [20], "c": [-25]}}]}
{"id": "multiple_13", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 166"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_13", "question": [[{"role": "user", "content": "How much revenue would company XYZ generate if we increase the sales units of product A by 10% while keeping the price the same?"}]], "function": [{"name": "corporate_finance.product_price", "description": "Fetch the current selling price of the product.", "parameters": {"type": "dict", "properties": {"company": {"type": "string", "description": "The company that sells the product."}, "product": {"type": "string", "description": "The product whose price we want to fetch."}}, "required": ["company", "product"]}}, {"name": "corporate_finance.revenue_forecast", "description": "Estimate the revenue of a company by multiplying the sales units of the product with its selling price.", "parameters": {"type": "dict", "properties": {"company": {"type": "string", "description": "The company that you want to calculate the revenue for."}, "product": {"type": "string", "description": "The product sold by the company."}, "sales_units_increase_percentage": {"type": "integer", "description": "Percentage increase in the sales units. This value is optional and defaults to zero if not provided."}}, "required": ["company", "product"]}}]}, "model_result_raw": "<functions><function name=\"corporate_finance.product_price\"><params><param name=\"company\" value=\"XYZ\" type=\"string\"/><param name=\"product\" value=\"A\" type=\"string\"/></param></function><function name=\"corporate_finance.revenue_forecast\"><params><param name=\"company\" value=\"XYZ\" type=\"string\"/><param name=\"product\" value=\"A\" type=\"string\"/><param name=\"sales_units_increase_percentage\" value=\"10\" type=\"integer\"/></param></function></functions>", "possible_answer": [{"corporate_finance.revenue_forecast": {"company": ["XYZ"], "product": ["A", "Product A"], "sales_units_increase_percentage": [10]}}]}
{"id": "multiple_15", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 236"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_15", "question": [[{"role": "user", "content": "How much is the potential of the Solar farm at location with coordinates [43.653225, -79.383186] in December, given that it has a total solar panel area of 80000 sq ft?"}]], "function": [{"name": "solarFarm.potential", "description": "Estimate the energy output of a solar farm given its location and panel area for a particular month.", "parameters": {"type": "dict", "properties": {"coordinates": {"type": "array", "items": {"type": "float"}, "description": "The geographic coordinates of the location of the solar farm."}, "panelArea": {"type": "integer", "description": "The total solar panel area in square feet at the location."}, "month": {"type": "string", "description": "The month for which to calculate the potential energy output. Default to January", "optional": true}}, "required": ["coordinates", "panelArea"]}}, {"name": "windFarm.potential", "description": "Estimate the energy output of a wind farm given its location and turbine count for a particular month.", "parameters": {"type": "dict", "properties": {"coordinates": {"type": "array", "items": {"type": "float"}, "description": "The geographic coordinates of the location of the wind farm."}, "turbineCount": {"type": "integer", "description": "The total number of wind turbines at the location."}, "month": {"type": "string", "description": "The month for which to calculate the potential energy output. Default to January", "optional": true}}, "required": ["coordinates", "turbineCount"]}}]}, "model_result_raw": "<functions><function name=\"solarFarm.potential\"><params><param name=\"coordinates\" value=\"[43.653225, -79.383186]\" type=\"array\"/><param name=\"panelArea\" value=\"80000\" type=\"integer\"/><param name=\"month\" value=\"December\" type=\"string\"/></function></functions>", "possible_answer": [{"solarFarm.potential": {"coordinates": [[43.653225, -79.383186]], "panelArea": [80000], "month": ["December", "Dec"]}}]}
{"id": "multiple_17", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 228"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_17", "question": [[{"role": "user", "content": "Find the conversion rate from Euro to Dollar at January 1, 2022"}]], "function": [{"name": "currency_conversion.convert", "description": "Converts a specified amount of money from one currency to another at the latest rate.", "parameters": {"type": "dict", "properties": {"from_currency": {"type": "string", "description": "The currency that you want to convert from."}, "to_currency": {"type": "string", "description": "The currency that you want to convert to."}, "amount": {"type": "float", "description": "The amount of money that you want to convert."}}, "required": ["from_currency", "to_currency", "amount"]}}, {"name": "currency_conversion.get_latest_rate", "description": "Get the latest currency conversion rate from one currency to another.", "parameters": {"type": "dict", "properties": {"from_currency": {"type": "string", "description": "The currency that you want to convert from."}, "to_currency": {"type": "string", "description": "The currency that you want to convert to."}}, "required": ["from_currency", "to_currency"]}}, {"name": "currency_conversion.get_rate", "description": "Get the currency conversion rate from one currency to another at a specified date.", "parameters": {"type": "dict", "properties": {"from_currency": {"type": "string", "description": "The currency that you want to convert from."}, "to_currency": {"type": "string", "description": "The currency that you want to convert to."}, "date": {"type": "string", "description": "The date at which the conversion rate applies. Default is the current date.", "default": "today"}}, "required": ["from_currency", "to_currency"]}}]}, "model_result_raw": "<functions><function name=\"currency_conversion.get_rate\"><params><param name=\"from_currency\" value=\"EUR\" type=\"string\"/><param name=\"to_currency\" value=\"USD\" type=\"string\"/><param name=\"date\" value=\"2022-01-01\" type=\"string\"/></function></functions>", "possible_answer": [{"currency_conversion.get_rate": {"from_currency": ["EUR", "Euro"], "to_currency": ["Dollar", "USD"], "date": ["2022-01-01", "01/01/2022", "1/1/2022", "Jan.1,2022", "January 1, 2022", "2022-1-1"]}}]}
{"id": "multiple_18", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 135"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_18", "question": [[{"role": "user", "content": "Who were the main participants and what was the location of the Battle of Stalingrad?"}]], "function": [{"name": "european_history.war_details", "description": "Get details of a specific historical European war.", "parameters": {"type": "dict", "properties": {"war": {"type": "string", "description": "Name of the war"}}, "required": ["war"]}}, {"name": "european_history.leader_info", "description": "Get information about a specific historical leader in European history.", "parameters": {"type": "dict", "properties": {"leader": {"type": "string", "description": "Name of the leader"}}, "required": ["leader"]}}, {"name": "european_history.battle_details", "description": "Get details of a specific historical European battle.", "parameters": {"type": "dict", "properties": {"battle": {"type": "string", "description": "Name of the battle"}}, "required": ["battle"]}}]}, "model_result_raw": "<functions><function name=\"european_history.battle_details\"><params><param name=\"battle\" value=\"Battle of Stalingrad\" type=\"string\"/></function></functions>", "possible_answer": [{"european_history.battle_details": {"battle": ["Battle of Stalingrad", "Stalingrad"]}}]}
{"id": "multiple_20", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 162"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_20", "question": [[{"role": "user", "content": "What is the price to commission a sculpture made of marble with a size of 3 feet?"}]], "function": [{"name": "sculptor_info.get", "description": "Get information about a specific sculptor.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the sculptor."}}, "required": ["name"]}}, {"name": "sculpture_price.calculate", "description": "Calculate the estimated price to commission a sculpture based on the material and size.", "parameters": {"type": "dict", "properties": {"material": {"type": "string", "description": "The material used for the sculpture."}, "size": {"type": "integer", "description": "The size of the sculpture in feet."}, "complexity": {"type": "string", "enum": ["low", "medium", "high"], "description": "The complexity level of the sculpture. Default is 'medium'.", "default": "medium"}}, "required": ["material", "size"]}}, {"name": "sculpture_availability.check", "description": "Check the availability of a specific sculpture in the inventory.", "parameters": {"type": "dict", "properties": {"sculpture_name": {"type": "string", "description": "The name of the sculpture."}, "material": {"type": "string", "description": "The material of the sculpture."}}, "required": ["sculpture_name", "material"]}}]}, "model_result_raw": "<functions><function name=\"sculpture_price.calculate\"><params><param name=\"material\" value=\"marble\" type=\"string\"/><param name=\"size\" value=\"3\" type=\"integer\"/></function></functions>", "possible_answer": [{"sculpture_price.calculate": {"material": ["marble"], "size": [3], "complexity": ["medium", ""]}}]}
{"id": "multiple_21", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 211"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_21", "question": [[{"role": "user", "content": "I want to generate a sound of 440Hz frequency for 5 seconds. What is the function and how can I use it?"}]], "function": [{"name": "play_sound_wave", "description": "This function is for playing a sound wave file.", "parameters": {"type": "dict", "properties": {"wave_file": {"type": "string", "description": "The filename of the sound wave file to be played."}, "volume": {"type": "float", "description": "The volume level at which the sound is to be played (1 is 100%).", "default": 1}}, "required": ["wave_file"]}}, {"name": "generate_sound_wave", "description": "This function is for generating a sinusoidal sound wave file of a certain frequency for a specific duration and save it to a WAV file.", "parameters": {"type": "dict", "properties": {"frequency": {"type": "integer", "description": "The frequency of the sound wave in Hz."}, "duration": {"type": "integer", "description": "The duration of the sound in seconds."}, "wave_type": {"type": "string", "enum": ["sine", "square", "sawtooth"], "description": "The waveform to be used to generate the sound.", "default": "sine"}}, "required": ["frequency", "duration"]}}]}, "model_result_raw": "<functions><function name=\"generate_sound_wave\"><params><param name=\"frequency\" value=\"440\" type=\"integer\"/><param name=\"duration\" value=\"5\" type=\"integer\"/><param name=\"wave_type\" value=\"sine\" type=\"string\"/></function></functions>", "possible_answer": [{"generate_sound_wave": {"frequency": [440], "duration": [5], "wave_type": ["sine", ""]}}]}
{"id": "multiple_23", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 210"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_23", "question": [[{"role": "user", "content": "What are the current stats for basketball player LeBron James including points per game, assists, and minutes per game."}]], "function": [{"name": "basketball.player_stats.get", "description": "Get current statistics for a specified basketball player", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The name of the player."}, "stats_fields": {"type": "array", "description": "List of statistical categories to be fetched, including points, assists, rebounds, minutes.", "items": {"type": "string"}}}, "required": ["player_name", "stats_fields"]}}, {"name": "basketball.game_stats.get", "description": "Get the detailed statistical data from a specific basketball game", "parameters": {"type": "dict", "properties": {"team1": {"type": "string", "description": "One of the competing teams in the game."}, "team2": {"type": "string", "description": "One of the competing teams in the game."}, "date": {"type": "string", "description": "The date when the game occurred."}, "stats_fields": {"type": "array", "description": "List of statistical categories to be fetched, including total points, total assists, total rebounds, turnovers. Default to empty list", "items": {"type": "string"}}}, "required": ["team1", "team2", "date"]}}, {"name": "basketball.team_stats.get", "description": "Get current statistics for a specific basketball team", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the team."}, "stats_fields": {"type": "array", "description": "List of statistical categories to be fetched, including total points, total assists, total rebounds, win rate.", "items": {"type": "string"}}}, "required": ["team_name", "stats_fields"]}}]}, "model_result_raw": "<functions><function name=\"basketball.player_stats.get\"><params><param name=\"player_name\" value=\"LeBron James\" type=\"string\"/><param name=\"stats_fields\" value=\"['points', 'assists', 'minutes']\" type=\"array\"/></function></functions>", "possible_answer": [{"basketball.player_stats.get": {"player_name": ["LeBron James"], "stats_fields": [["points per game", "assists", "minutes per game"], ["points per game", "minutes per game", "assists"], ["assists", "points per game", "minutes per game"], ["assists", "minutes per game", "points per game"], ["minutes per game", "points per game", "assists"], ["minutes per game", "assists", "points per game"], ["points", "assists", "minutes"], ["points", "minutes", "assists"], ["assists", "points", "minutes"], ["assists", "minutes", "points"], ["minutes", "points", "assists"], ["minutes", "assists", "points"], ["points_per_game", "assists", "minutes_per_game"], ["points_per_game", "minutes_per_game", "assists"], ["assists", "points_per_game", "minutes_per_game"], ["assists", "minutes_per_game", "points_per_game"], ["minutes_per_game", "points_per_game", "assists"], ["minutes_per_game", "assists", "points_per_game"]]}}]}
{"id": "multiple_24", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 229"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_24", "question": [[{"role": "user", "content": "What is the fastest route from London to Edinburgh for playing a chess championship? Also provide an estimate of the distance."}]], "function": [{"name": "route_planner.calculate_route", "description": "Determines the best route between two points.", "parameters": {"type": "dict", "properties": {"start": {"type": "string", "description": "The starting point of the journey."}, "destination": {"type": "string", "description": "The destination of the journey."}, "method": {"type": "string", "enum": ["fastest", "shortest", "balanced"], "description": "The method to use when calculating the route (default is 'fastest').", "default": "fastest"}}, "required": ["start", "destination"]}}, {"name": "chess_club_details.find", "description": "Provides details about a chess club, including location.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the chess club."}, "city": {"type": "string", "description": "The city in which the chess club is located."}, "event": {"type": "string", "description": "The event hosted by the club.", "default": "null"}}, "required": ["name", "city"]}}]}, "model_result_raw": "<functions><function name=\"route_planner.calculate_route\"><params><param name=\"start\" value=\"London\" type=\"string\"/><param name=\"destination\" value=\"Edinburgh\" type=\"string\"/><param name=\"method\" value=\"fastest\" type=\"string\"/></function></functions><functions><function name=\"chess_club_details.find\"><params><param name=\"name\" value=\"chess championship\" type=\"string\"/><param name=\"city\" value=\"Edinburgh\" type=\"string\"/></function></functions>", "possible_answer": [{"route_planner.calculate_route": {"start": ["London"], "destination": ["Edinburgh"], "method": ["fastest", ""]}}]}
{"id": "multiple_26", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 218"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_26", "question": [[{"role": "user", "content": "Find out the rewards for playing Fortnite on Playstation platform with different missions and trophies"}]], "function": [{"name": "game_scores.get", "description": "Retrieve scores and rankings based on player\u2019s performance in a certain game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The gaming platform e.g. Xbox, Playstation, PC"}, "level": {"type": "integer", "description": "The level of the game for which you want to retrieve the scores."}, "player": {"type": "string", "description": "The name of the player for whom you want to retrieve scores. Default ''", "optional": true}}, "required": ["game", "platform", "level"]}}, {"name": "game_rewards.get", "description": "Retrieve information about different types of rewards that you can receive when playing a certain game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The gaming platform e.g. Xbox, Playstation, PC"}, "mission": {"type": "string", "description": "The mission for which you want to know the rewards. Default to ''", "optional": true}, "trophy": {"type": "string", "description": "The trophy level for which you want to know the rewards. Default to ''", "optional": true}}, "required": ["game", "platform"]}}, {"name": "game_missions.list", "description": "List all missions for a certain game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the game."}}, "required": ["game"]}}]}, "model_result_raw": "<functions><function name=\"game_rewards.get\"><params><param name=\"game\" value=\"Fortnite\" type=\"string\"/><param name=\"platform\" value=\"Playstation\" type=\"string\"/><param name=\"mission\" value=\"mission1\" type=\"string\"/></function><function name=\"game_rewards.get\"><params><param name=\"game\" value=\"Fortnite\" type=\"string\"/><param name=\"platform\" value=\"Playstation\" type=\"string\"/><param name=\"trophy\" value=\"trophy1\" type=\"string\"/></function></functions>", "possible_answer": [{"game_rewards.get": {"game": ["Fortnite"], "platform": ["Playstation", "PS"], "mission": [""], "trophy": [""]}}]}
{"id": "multiple_27", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 235"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_27", "question": [[{"role": "user", "content": "What is the shortest path from Paris, France to Rome, Italy by using a public transportation?"}]], "function": [{"name": "maps.route_times", "description": "Estimates the time it will take to travel from one location to another by a specific mode of transportation.", "parameters": {"type": "dict", "properties": {"route": {"type": "string", "description": "The string representation of the route."}, "mode": {"type": "string", "description": "The mode of transportation (walk, bike, transit, drive).", "default": "walk"}}, "required": ["route"]}}, {"name": "maps.shortest_path", "description": "Find the shortest path from one location to another by using a specific mode of transportation.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The name or coordinates of the start location."}, "end_location": {"type": "string", "description": "The name or coordinates of the end location."}, "mode": {"type": "string", "description": "The mode of transportation (walk, bike, transit, drive).", "default": "walk"}}, "required": ["start_location", "end_location"]}}]}, "model_result_raw": "<functions><function name=\"maps.shortest_path\"><params><param name=\"start_location\" value=\"Paris, France\" type=\"string\"/><param name=\"end_location\" value=\"Rome, Italy\" type=\"string\"/><param name=\"mode\" value=\"transit\" type=\"string\"/></function></functions>", "possible_answer": [{"maps.shortest_path": {"start_location": ["Paris, France", "Paris"], "end_location": ["Rome, Italy", "Rome"], "mode": ["transit"]}}]}
{"id": "multiple_28", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 190"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_28", "question": [[{"role": "user", "content": "What's the root of quadratic equation with coefficients 2, 3 and -4?"}]], "function": [{"name": "solve.quadratic_equation", "description": "Solve a quadratic equation with given coefficients a, b, and c.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "Coefficient of x^2."}, "b": {"type": "integer", "description": "Coefficient of x."}, "c": {"type": "integer", "description": "Constant term."}}, "required": ["a", "b", "c"]}}, {"name": "convert.rgb_to_hex", "description": "Converts RGB values to Hexadecimal color code.", "parameters": {"type": "dict", "properties": {"r": {"type": "integer", "description": "The Red component."}, "g": {"type": "integer", "description": "The Green component."}, "b": {"type": "integer", "description": "The Blue component."}}, "required": ["r", "g", "b"]}}, {"name": "perform.string_reverse", "description": "Reverses a given string.", "parameters": {"type": "dict", "properties": {"input_string": {"type": "string", "description": "The string to be reversed."}}, "required": ["input_string"]}}]}, "model_result_raw": "<functions><function name=\"solve.quadratic_equation\"><params><param name=\"a\" value=\"2\" type=\"integer\"/><param name=\"b\" value=\"3\" type=\"integer\"/><param name=\"c\" value=\"-4\" type=\"integer\"/></function></functions>", "possible_answer": [{"solve.quadratic_equation": {"a": [2], "b": [3], "c": [-4]}}]}
{"id": "multiple_32", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 213"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_32", "question": [[{"role": "user", "content": "Calculate the volume of a cone with radius 4 and height 7."}]], "function": [{"name": "geometry.calculate_cone_volume", "description": "Calculate the volume of a cone given the radius and height.", "parameters": {"type": "dict", "properties": {"radius": {"type": "integer", "description": "Radius of the cone base."}, "height": {"type": "integer", "description": "Height of the cone."}, "round_off": {"type": "integer", "description": "Number of decimal places to round off the answer. Default 0"}}, "required": ["radius", "height"]}}, {"name": "physics.calculate_cone_mass", "description": "Calculate the mass of a cone given the radius, height, and density.", "parameters": {"type": "dict", "properties": {"radius": {"type": "float", "description": "Radius of the cone base."}, "height": {"type": "float", "description": "Height of the cone."}, "density": {"type": "float", "description": "Density of the material the cone is made of."}}, "required": ["radius", "height", "density"]}}]}, "model_result_raw": "<functions><function name=\"geometry.calculate_cone_volume\"><params><param name=\"radius\" value=\"4\" type=\"integer\"/><param name=\"height\" value=\"7\" type=\"integer\"/><param name=\"round_off\" value=\"0\" type=\"integer\"/></function></functions>", "possible_answer": [{"geometry.calculate_cone_volume": {"radius": [4], "height": [7], "round_off": ["", 0]}}]}
{"id": "multiple_35", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 203"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_35", "question": [[{"role": "user", "content": "Calculate the greatest common divisor between 128 and 256."}]], "function": [{"name": "calculate_lcm", "description": "Calculate the least common multiple (lcm) between two integers.", "parameters": {"type": "dict", "properties": {"num1": {"type": "integer", "description": "First number to calculate lcm for."}, "num2": {"type": "integer", "description": "Second number to calculate lcm for."}, "method": {"type": "string", "description": "The specific method to use in the calculation. Supported values: 'standard', 'reduced'. Default 'standard'"}}, "required": ["num1", "num2"]}}, {"name": "calculate_gcd", "description": "Calculate the greatest common divisor (gcd) between two integers.", "parameters": {"type": "dict", "properties": {"num1": {"type": "integer", "description": "First number to calculate gcd for."}, "num2": {"type": "integer", "description": "Second number to calculate gcd for."}, "algorithm": {"type": "string", "description": "The specific algorithm to use in the calculation. Supported values: 'euclidean', 'binary'. Default 'euclidean'", "enum": ["euclidean", "binary"]}}, "required": ["num1", "num2"]}}]}, "model_result_raw": "<functions><function name=\"calculate_gcd\"><params><param name=\"num1\" value=\"128\" type=\"integer\"/><param name=\"num2\" value=\"256\" type=\"integer\"/><param name=\"algorithm\" value=\"euclidean\" type=\"string\"/></function></functions>", "possible_answer": [{"calculate_gcd": {"num1": [128], "num2": [256], "algorithm": ["euclidean", ""]}}]}
{"id": "multiple_37", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'acceleration': 9.81. Expected one of [-9.81, '']."], "error_type": "value_error:others", "prompt": {"id": "multiple_37", "question": [[{"role": "user", "content": "Find the final velocity of an object thrown up at 40 m/s after 6 seconds."}]], "function": [{"name": "physics.wave_velocity", "description": "Calculate the velocity of a wave based on its frequency and wavelength.", "parameters": {"type": "dict", "properties": {"frequency": {"type": "float", "description": "The frequency of the wave in Hz."}, "wavelength": {"type": "float", "description": "The wavelength of the wave in m."}}, "required": ["frequency", "wavelength"]}}, {"name": "kinematics.final_velocity", "description": "Find the final velocity of an object moving under constant acceleration.", "parameters": {"type": "dict", "properties": {"initial_velocity": {"type": "integer", "description": "The initial velocity of the object in m/s."}, "time": {"type": "integer", "description": "The time in seconds the object has been moving."}, "acceleration": {"type": "float", "description": "The acceleration of the object in m/s^2. Default value is -9.81 (Earth's gravity)"}}, "required": ["initial_velocity", "time"]}}, {"name": "kinematics.distance", "description": "Find the distance traveled by an object moving under constant acceleration.", "parameters": {"type": "dict", "properties": {"initial_velocity": {"type": "float", "description": "The initial velocity of the object in m/s."}, "time": {"type": "integer", "description": "The time in seconds the object has been moving."}, "acceleration": {"type": "float", "description": "The acceleration of the object in m/s^2. Default value is -9.81 (Earth's gravity)"}}, "required": ["initial_velocity", "time"]}}]}, "model_result_raw": "<functions><function name=\"kinematics.final_velocity\"><params><param name=\"initial_velocity\" value=\"40\" type=\"integer\"/><param name=\"time\" value=\"6\" type=\"integer\"/><param name=\"acceleration\" value=\"9.81\" type=\"float\"/></params></function></functions>", "model_result_decoded": [{"kinematics.final_velocity": {"initial_velocity": 40, "time": 6, "acceleration": 9.81}}], "possible_answer": [{"kinematics.final_velocity": {"initial_velocity": [40], "time": [6], "acceleration": [-9.81, ""]}}]}
{"id": "multiple_38", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 170"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_38", "question": [[{"role": "user", "content": "Find a book 'The Alchemist' in the library branches within New York city."}]], "function": [{"name": "library.reserve_book", "description": "Reserves a book in the library if available.", "parameters": {"type": "dict", "properties": {"book_id": {"type": "string", "description": "The id of the book to reserve."}, "branch_id": {"type": "string", "description": "The id of the library branch to reserve from."}, "return_date": {"type": "string", "description": "The date the book is to be returned (optional). Default is ''"}}, "required": ["book_id", "branch_id"]}}, {"name": "library.search_book", "description": "Searches for a book in the library within the specified city.", "parameters": {"type": "dict", "properties": {"book_name": {"type": "string", "description": "The name of the book to search for."}, "city": {"type": "string", "description": "The city to search within."}, "availability": {"type": "boolean", "description": "If true, search for available copies. If false or omitted, search for any copy regardless of availability. Default is false"}, "genre": {"type": "string", "description": "The genre of the book to filter search (optional). Default is ''"}}, "required": ["book_name", "city"]}}]}, "model_result_raw": "<functions><function name=\"library.search_book\"><params><param name=\"book_name\" value=\"The Alchemist\" type=\"string\"/><param name=\"city\" value=\"New York\" type=\"string\"/></function></functions>", "possible_answer": [{"library.search_book": {"book_name": ["The Alchemist"], "city": ["New York", "New York, NY", "New York City", "NYC", "NY"], "availability": ["", false], "genre": [""]}}]}
{"id": "multiple_40", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 169"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_40", "question": [[{"role": "user", "content": "Calculate the strength of magnetic field given distance is 8 meters and current is 12 Amperes?"}]], "function": [{"name": "electromagnetism.ampere_law", "description": "Calculate magnetic field strength using Ampere's Circuital Law. Input the current enclosed by a circular path and the distance from the center of the circle. Can be applied to a cylindrical or spherical symmetry of consistent magnetic field. ", "parameters": {"type": "dict", "properties": {"enclosed_current": {"type": "float", "description": "The total current enclosed by the loop. In Amperes."}, "radius": {"type": "float", "description": "The radius of the circle or the distance from the center of the circular path. In meters."}, "mu0": {"type": "float", "description": "Permeability of free space. Its value is default approximated to be 0.000001256 H/m. Optional"}}, "required": ["enclosed_current", "radius"]}}, {"name": "electromagnetism.biot_savart_law", "description": "Calculate magnetic field strength using Biot-Savart law. Input the current in Ampere and the distance in meters.", "parameters": {"type": "dict", "properties": {"current": {"type": "integer", "description": "The current in the conductor, in Amperes."}, "distance": {"type": "integer", "description": "Distance from the current carrying conductor, in meters."}, "mu0": {"type": "float", "description": "Permeability of free space. Its value is default approximated to be 0.000001256 H/m. Optional"}}, "required": ["current", "distance"]}}]}, "model_result_raw": "<functions><function name=\"electromagnetism.biot_savart_law\"><params><param name=\"current\" value=\"12\" type=\"integer\"/><param name=\"distance\" value=\"8\" type=\"integer\"/></function></functions>", "possible_answer": [{"electromagnetism.biot_savart_law": {"current": [12], "distance": [8], "mu0": [1.256e-06, 1.256e-06, ""]}}]}
{"id": "multiple_43", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 219"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_43", "question": [[{"role": "user", "content": "What is the energy produced by 5 mol of glucose (C6H12O6)?"}]], "function": [{"name": "biological.calc_biomass", "description": "Calculate the biomass from the energy given the energy conversion efficiency.", "parameters": {"type": "dict", "properties": {"energy": {"type": "float", "description": "The total energy produced."}, "efficiency": {"type": "float", "description": "The conversion efficiency, default value is 10%.", "default": 0.1}}, "required": ["energy"]}}, {"name": "biological.calc_energy", "description": "Calculate energy from amount of substance based on its molecular composition.", "parameters": {"type": "dict", "properties": {"mols": {"type": "integer", "description": "Amount of substance in moles."}, "substance": {"type": "string", "description": "The chemical formula of the substance."}, "joules_per_mol": {"type": "integer", "description": "The energy produced or required for the reaction, default value for glucose is 2800 kJ/mol", "default": 2800}}, "required": ["mols", "substance"]}}, {"name": "physical.calc_work", "description": "Calculate the work from energy.", "parameters": {"type": "dict", "properties": {"energy": {"type": "float", "description": "The total energy produced."}, "distance": {"type": "float", "description": "The distance over which the work is done."}}, "required": ["energy", "distance"]}}]}, "model_result_raw": "<functions><function name=\"biological.calc_energy\"><params><param name=\"mols\" value=\"5\" type=\"integer\"/><param name=\"substance\" value=\"C6H12O6\" type=\"string\"/><param name=\"joules_per_mol\" value=\"2800\" type=\"integer\"/></function></functions>", "possible_answer": [{"biological.calc_energy": {"mols": [5], "substance": ["C6H12O6"], "joules_per_mol": [2800, ""]}}]}
{"id": "multiple_45", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 171"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_45", "question": [[{"role": "user", "content": "Calculate how many years ago was the Ice age?"}]], "function": [{"name": "geology.get_era", "description": "Get the estimated date of a geological era.", "parameters": {"type": "dict", "properties": {"era_name": {"type": "string", "description": "The name of the geological era. e.g Ice age"}, "calculate_years_ago": {"type": "boolean", "description": "True if years ago is to be calculated. False by default"}}, "required": ["era_name"]}}, {"name": "history.get_event_date", "description": "Get the date of an historical event.", "parameters": {"type": "dict", "properties": {"event_name": {"type": "string", "description": "The name of the event."}, "calculate_years_ago": {"type": "boolean", "description": "True if years ago is to be calculated. False by default"}}, "required": ["event_name"]}}]}, "model_result_raw": "<functions><function name=\"geology.get_era\"><params><param name=\"era_name\" value=\"Ice age\" type=\"string\"/><param name=\"calculate_years_ago\" value=\"true\" type=\"boolean\"/></function></functions>", "possible_answer": [{"geology.get_era": {"era_name": ["Ice age"], "calculate_years_ago": [true]}}]}
{"id": "multiple_46", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 165"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_46", "question": [[{"role": "user", "content": "Sort this list of names in ascending order: ['Sam', 'Alice', 'Jack']"}]], "function": [{"name": "filter_list", "description": "Filters elements of a list based on a given condition", "parameters": {"type": "dict", "properties": {"elements": {"type": "array", "items": {"type": "string"}, "description": "The list of elements to filter."}, "condition": {"type": "string", "description": "The condition to filter the elements on."}}, "required": ["elements", "condition"]}}, {"name": "sum_elements", "description": "Add all elements of a numeric list", "parameters": {"type": "dict", "properties": {"elements": {"type": "array", "items": {"type": "integer"}, "description": "The list of numeric elements to add."}}, "required": ["elements"]}}, {"name": "sort_list", "description": "Sort the elements of a list in ascending or descending order", "parameters": {"type": "dict", "properties": {"elements": {"type": "array", "items": {"type": "string"}, "description": "The list of elements to sort."}, "order": {"type": "string", "description": "The order in which to sort the elements. This can be 'asc' for ascending order, or 'desc' for descending order.", "default": "asc"}}, "required": ["elements"]}}]}, "model_result_raw": "<functions><function name=\"sort_list\"><params><param name=\"elements\" value=\"['Sam', 'Alice', 'Jack']\" type=\"array\"/><param name=\"order\" value=\"asc\" type=\"string\"/></function></functions>", "possible_answer": [{"sort_list": {"elements": [["Sam", "Alice", "Jack"]], "order": ["asc", ""]}}]}
{"id": "multiple_47", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 223"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_47", "question": [[{"role": "user", "content": "Calculate the cosine similarity between vector A [3, 2, 1] and vector B [1, 2, 3]."}]], "function": [{"name": "cosine_similarity.calculate", "description": "Calculate the cosine similarity between two vectors.", "parameters": {"type": "dict", "properties": {"vector1": {"type": "array", "items": {"type": "integer"}, "description": "The first vector for calculating cosine similarity."}, "vector2": {"type": "array", "items": {"type": "integer"}, "description": "The second vector for calculating cosine similarity."}, "rounding": {"type": "integer", "description": "Optional: The number of decimals to round off the result. Default 0"}}, "required": ["vector1", "vector2"]}}, {"name": "correlation.calculate", "description": "Calculate the correlation coefficient between two arrays of numbers.", "parameters": {"type": "dict", "properties": {"array1": {"type": "array", "items": {"type": "integer"}, "description": "The first array of numbers."}, "array2": {"type": "array", "items": {"type": "integer"}, "description": "The second array of numbers."}, "type": {"type": "string", "enum": ["pearson", "spearman"], "description": "Optional: The type of correlation coefficient to calculate. Default is 'pearson'."}}, "required": ["array1", "array2"]}}]}, "model_result_raw": "<functions><function name=\"cosine_similarity.calculate\"><params><param name=\"vector1\" value=\"[3, 2, 1]\" type=\"array\"/><param name=\"vector2\" value=\"[1, 2, 3]\" type=\"array\"/><param name=\"rounding\" value=\"0\" type=\"integer\"/></function></functions>", "possible_answer": [{"cosine_similarity.calculate": {"vector1": [[3, 2, 1]], "vector2": [[1, 2, 3]], "rounding": ["", 0]}}]}
{"id": "multiple_48", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 202"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_48", "question": [[{"role": "user", "content": "Find me a pet-friendly library with facilities for disabled people in New York City."}]], "function": [{"name": "store.find_nearby", "description": "Locate nearby stores based on specific preferences such as being pet-friendly and having disabled access facilities.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city, for example, New York City, NY"}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["Pet-friendly", "Disabled Access", "24 hours", "Cafe Inside"]}, "description": "Your preferences for the store."}}, "required": ["location", "preferences"]}}, {"name": "library.find_nearby", "description": "Locate nearby libraries based on specific preferences such as being pet-friendly and having disabled access facilities.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city, for example, New York City, NY"}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["Pet-friendly", "Disabled Access", "24 hours", "Cafe Inside"]}, "description": "Your preferences for the library."}}, "required": ["location", "preferences"]}}]}, "model_result_raw": "<functions><function name=\"library.find_nearby\"><params><param name=\"location\" value=\"New York City\" type=\"string\"/><param name=\"preferences\" value=\"['Pet-friendly', 'Disabled Access']\" type=\"array\"/></function></functions>", "possible_answer": [{"library.find_nearby": {"location": ["New York City", "NYC", "New York City, NY"], "preferences": [["Pet-friendly", "Disabled Access"], ["Disabled Access", "Pet-friendly"]]}}]}
{"id": "multiple_49", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 276"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_49", "question": [[{"role": "user", "content": "Calculate the compound interest for an amount of 1500 for a duration of 2 years with an annual interest rate of 2.5%."}]], "function": [{"name": "calc_Compound_Interest", "description": "Compute compound interest.", "parameters": {"type": "dict", "properties": {"principle_amount": {"type": "integer", "description": "The principle amount that is invested."}, "duration": {"type": "integer", "description": "Duration of time period in years."}, "annual_rate": {"type": "float", "description": "Interest rate in percentage."}, "compound_freq": {"type": "integer", "default": 1, "description": "The number of times that interest is compounded per unit time."}}, "required": ["principle_amount", "duration", "annual_rate"]}}, {"name": "future_value", "description": "Calculates the future value of an investment given an interest rate and time period.", "parameters": {"type": "dict", "properties": {"initial_investment": {"type": "float", "description": "The initial investment amount."}, "interest_rate": {"type": "float", "description": "The annual interest rate (as a decimal)."}, "time": {"type": "integer", "description": "The number of time periods the money is invested for."}, "num_compoundings": {"type": "integer", "default": 1, "description": "The number of times that interest is compounded per time period."}}, "required": ["initial_investment", "interest_rate", "time"]}}, {"name": "calc_Simple_Interest", "description": "Compute simple interest.", "parameters": {"type": "dict", "properties": {"principle_amount": {"type": "float", "description": "The principle amount that is invested."}, "duration": {"type": "float", "description": "Duration of time period in years."}, "annual_rate": {"type": "float", "description": "Interest rate in percentage."}}, "required": ["principle_amount", "duration", "annual_rate"]}}]}, "model_result_raw": "<functions><function name=\"calc_Compound_Interest\"><params><param name=\"principle_amount\" value=\"1500\" type=\"integer\"/><param name=\"duration\" value=\"2\" type=\"integer\"/><param name=\"annual_rate\" value=\"2.5\" type=\"float\"/><param name=\"compound_freq\" value=\"1\" type=\"integer\"/></function></functions>", "possible_answer": [{"calc_Compound_Interest": {"principle_amount": [1500], "duration": [2], "annual_rate": [2.5], "compound_freq": ["", 1]}}]}
{"id": "multiple_50", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 196"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_50", "question": [[{"role": "user", "content": "Predict the house prices for the next month in New York."}]], "function": [{"name": "house_price_forecast", "description": "Predict the house prices for a specific location and time frame.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the house price prediction for."}, "months": {"type": "integer", "description": "Number of future months for the prediction."}, "features": {"type": "array", "items": {"type": "string", "enum": ["SqFt", "Bedrooms", "Bathrooms", "Location"]}, "description": "Additional features considered for prediction. Not required. Default empty array", "optional": true}}, "required": ["location", "months"]}}, {"name": "weather_forecast", "description": "Retrieve a weather forecast for a specific location and time frame.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}}, "required": ["location", "days"]}}, {"name": "stock_market_forecast", "description": "Predict the stock prices for a specific company and time frame.", "parameters": {"type": "dict", "properties": {"company": {"type": "string", "description": "The company that you want to get the stock price prediction for."}, "days": {"type": "integer", "description": "Number of future days for the prediction."}}, "required": ["company", "days"]}}]}, "model_result_raw": "<functions><function name=\"house_price_forecast\"><params><param name=\"location\" value=\"New York\" type=\"string\"/><param name=\"months\" value=\"1\" type=\"integer\"/><param name=\"features\" value=\"[]\"/></function></functions>", "possible_answer": [{"house_price_forecast": {"location": ["New York", "New York, NY", "NYC", "New York City"], "months": [1], "features": [[], ""]}}]}
{"id": "multiple_51", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 166"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_51", "question": [[{"role": "user", "content": "Calculate the probability of rolling a sum of 7 on a roll of two dice."}]], "function": [{"name": "dice_roll_probability", "description": "Calculate the probability of a specific sum appearing from rolling two dice.", "parameters": {"type": "dict", "properties": {"desired_sum": {"type": "integer", "description": "The sum for which to calculate the probability."}, "n_rolls": {"type": "integer", "description": "Number of dice to be rolled. Default is 1", "optional": true}, "sides_per_die": {"type": "integer", "description": "Number of sides on each die."}}, "required": ["desired_sum", "sides_per_die"]}}, {"name": "flip_coin_probability", "description": "Calculate the probability of a specific outcome appearing from flipping a coin.", "parameters": {"type": "dict", "properties": {"desired_outcome": {"type": "string", "description": "The outcome for which to calculate the probability."}, "n_flips": {"type": "integer", "description": "Number of coins to be flipped. Default 1", "optional": true}}, "required": ["desired_outcome"]}}, {"name": "shuffle_card_probability", "description": "Calculate the probability of a specific card appearing from a shuffled deck.", "parameters": {"type": "dict", "properties": {"desired_card": {"type": "string", "description": "The card for which to calculate the probability."}, "n_decks": {"type": "integer", "description": "Number of decks to shuffle. Default 1", "optional": true}}, "required": ["desired_card"]}}]}, "model_result_raw": "<functions><function name=\"dice_roll_probability\"><params><param name=\"desired_sum\" value=\"7\" type=\"integer\"/><param name=\"sides_per_die\" value=\"6\" type=\"integer\"/></function></functions>", "possible_answer": [{"dice_roll_probability": {"desired_sum": [7], "sides_per_die": [6], "n_rolls": [2]}}]}
{"id": "multiple_53", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 269"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_53", "question": [[{"role": "user", "content": "Predict the house prices for next 5 years based on interest rates and unemployment rates."}]], "function": [{"name": "linear_regression", "description": "Applies linear regression to a given set of independent variables to make a prediction.", "parameters": {"type": "dict", "properties": {"independent_var": {"type": "array", "items": {"type": "string"}, "description": "The independent variables."}, "dependent_var": {"type": "string", "description": "The dependent variable."}, "forecast_period": {"type": "integer", "description": "The number of years to forecast the prices. Default 1", "optional": true}}, "required": ["independent_var", "dependent_var"]}}, {"name": "random_forest_regression", "description": "Applies Random Forest Regression to a given set of independent variables to make a prediction.", "parameters": {"type": "dict", "properties": {"independent_var": {"type": "array", "items": {"type": "string"}, "description": "The independent variables."}, "dependent_var": {"type": "string", "description": "The dependent variable."}, "n_estimators": {"type": "integer", "description": "The number of trees in the forest. Default 1", "optional": true}, "forecast_period": {"type": "integer", "description": "The number of years to forecast the prices. Default 1", "optional": true}}, "required": ["independent_var", "dependent_var"]}}]}, "model_result_raw": "<functions><function name=\"linear_regression\"><params><param name=\"independent_var\" value=\"['interest_rates', 'unemployment_rates']\" type=\"array\"/><param name=\"dependent_var\" value=\"house_prices\" type=\"string\"/><param name=\"forecast_period\" value=\"5\" type=\"integer\"/></function></functions>", "possible_answer": [{"linear_regression": {"independent_var": [["interest rates", "unemployment rates"], ["interest_rate", "unemployment_rate"], ["interest rate", "unemployment rate"]], "dependent_var": ["house_price", "house price"], "forecast_period": [5]}}]}
{"id": "multiple_54", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 227"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_54", "question": [[{"role": "user", "content": "Find out the historical dividend payments of Apple Inc for last five years."}]], "function": [{"name": "corporate_finance.dividend_data", "description": "Get historical dividend data of a specific company within a particular duration.", "parameters": {"type": "dict", "properties": {"company": {"type": "string", "description": "The company that you want to get the dividend data for."}, "years": {"type": "integer", "description": "Number of past years for which to retrieve the data."}, "frequency": {"type": "string", "enum": ["quarterly", "annually"], "description": "The frequency of the dividend payment. Default annually"}}, "required": ["company", "years"]}}, {"name": "stock_market_data", "description": "Retrieve stock market data for a specific company and time frame.", "parameters": {"type": "dict", "properties": {"company": {"type": "string", "description": "The company that you want to get the stock market data for."}, "days": {"type": "integer", "description": "Number of past days for which to retrieve the data."}}, "required": ["company", "days"]}}]}, "model_result_raw": "<functions><function name=\"corporate_finance.dividend_data\"><params><param name=\"company\" value=\"Apple Inc\" type=\"string\"/><param name=\"years\" value=\"5\" type=\"integer\"/><param name=\"frequency\" value=\"annually\" type=\"string\"/></function></functions>", "possible_answer": [{"corporate_finance.dividend_data": {"company": ["Apple Inc", "Apple", "Apple Inc."], "years": [5], "frequency": ["", "annually"]}}]}
{"id": "multiple_55", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 204"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_55", "question": [[{"role": "user", "content": "Predict the stock price for Google for the next 3 days."}]], "function": [{"name": "stock_forecast", "description": "Predict the future stock price for a specific company and time frame.", "parameters": {"type": "dict", "properties": {"company": {"type": "string", "description": "The company that you want to get the stock price prediction for."}, "days": {"type": "integer", "description": "Number of future days for which to predict the stock price."}, "model": {"type": "string", "description": "The model to use for prediction. Default 'regression'"}}, "required": ["company", "days"]}}, {"name": "weather_forecast", "description": "Retrieve a weather forecast for a specific location and time frame.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}}, "required": ["location", "days"]}}]}, "model_result_raw": "<functions><function name=\"stock_forecast\"><params><param name=\"company\" value=\"Google\" type=\"string\"/><param name=\"days\" value=\"3\" type=\"integer\"/><param name=\"model\" value=\"regression\" type=\"string\"/></function></functions>", "possible_answer": [{"stock_forecast": {"company": ["Google", "GOOG"], "days": [3], "model": ["", "regression"]}}]}
{"id": "multiple_57", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 243"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_57", "question": [[{"role": "user", "content": "Can you please calculate the compound interest for a principle of $1000, annual rate of 5% over 10 years with 4 compound per year."}]], "function": [{"name": "financial.compound_interest", "description": "Calculates compound interest.", "parameters": {"type": "dict", "properties": {"principle": {"type": "integer", "description": "The initial amount of money that is being compounded."}, "rate": {"type": "float", "description": "The annual interest rate, as a decimal. E.g., an annual interest rate of 5% would be represented as 0.05."}, "time": {"type": "integer", "description": "The amount of time, in years, that the money is to be compounded for."}, "n": {"type": "integer", "description": "The number of times interest applied per time period."}}, "required": ["principle", "rate", "time", "n"]}}, {"name": "financial.simple_interest", "description": "Calculates simple interest.", "parameters": {"type": "dict", "properties": {"principle": {"type": "float", "description": "The initial amount of money that interest is being calculated for."}, "rate": {"type": "float", "description": "The annual interest rate, as a decimal. E.g., an annual interest rate of 5% would be represented as 0.05."}, "time": {"type": "integer", "description": "The amount of time, in years, that the money is to be compounded for."}}, "required": ["principle", "rate", "time"]}}]}, "model_result_raw": "<functions><function name=\"compound_interest\"><params><param name=\"principle\" value=\"1000\" type=\"integer\"/><param name=\"rate\" value=\"0.05\" type=\"float\"/><param name=\"time\" value=\"10\" type=\"integer\"/><param name=\"n\" value=\"4\" type=\"integer\"/></function></functions>", "possible_answer": [{"financial.compound_interest": {"principle": [1000], "rate": [0.05], "time": [10], "n": [4]}}]}
{"id": "multiple_58", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 169"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_58", "question": [[{"role": "user", "content": "Search for divorce law specialists in Los Angeles"}]], "function": [{"name": "doctor.search", "description": "Search for a doctor based on area of expertise and location", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Los Angeles, CA"}, "specialization": {"type": "string", "description": "Medical specialization. For example, 'Cardiology', 'Orthopedics', 'Gynecology'."}}, "required": ["location", "specialization"]}}, {"name": "lawyer.search", "description": "Search for a lawyer based on area of expertise and location", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Los Angeles, CA"}, "expertise": {"type": "string", "description": "Area of legal expertise. For example, 'Marriage', 'Criminal', 'Business'."}}, "required": ["location", "expertise"]}}]}, "model_result_raw": "<functions><function name=\"lawyer.search\"><params><param name=\"location\" value=\"Los Angeles, CA\" type=\"string\"/><param name=\"expertise\" value=\"Divorce\" type=\"string\"/></function></functions>", "possible_answer": [{"lawyer.search": {"location": ["Los Angeles", "Los Angeles, CA", "LA"], "expertise": ["Divorce"]}}]}
{"id": "multiple_59", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 223"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_59", "question": [[{"role": "user", "content": "Find lawyers specializing in criminal law near me in New York."}]], "function": [{"name": "car_rental", "description": "Rent a car near you based on your preference.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Your location"}, "car_type": {"type": "array", "items": {"type": "string"}, "description": "Type of cars that you want to rent."}, "fuel_type": {"type": "string", "description": "Preferred fuel type of car. Gas, diesel, electric, hybrid etc. Default 'gas'"}}, "required": ["location", "car_type"]}}, {"name": "lawyer_finder", "description": "Locate lawyers near you based on their specialization.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Your location"}, "specialization": {"type": "array", "items": {"type": "string"}, "description": "Specializations of lawyer that you are looking for."}, "experience": {"type": "integer", "description": "Experience in years that lawyer has. Default 1"}}, "required": ["location", "specialization"]}}]}, "model_result_raw": "<functions><function name=\"lawyer_finder\"><params><param name=\"location\" value=\"New York\" type=\"string\"/><param name=\"specialization\" value=\"criminal law\" type=\"string\"/><param name=\"experience\" value=\"1\" type=\"integer\"/></function></functions>", "possible_answer": [{"lawyer_finder": {"location": ["New York", "New York, NY", "NY", "New York City", "NYC"], "specialization": [["Criminal Law"], ["criminal law"]], "experience": ["", 1]}}]}
{"id": "multiple_61", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 263"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_61", "question": [[{"role": "user", "content": "Find a Landscape Architect who is experienced 5 years in small space garden design in Portland"}]], "function": [{"name": "home_renovation_expert.find_specialty", "description": "Search for a home renovation expert based on the location and specialization", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the professional is based, e.g. Portland, OR."}, "specialization": {"type": "string", "description": "A specific area of expertise, such as kitchen or bathroom renovation."}, "years_experience": {"type": "integer", "description": "Number of years the professional has been practicing in their field. (optional)", "default": 0}}, "required": ["location", "specialization"]}}, {"name": "landscape_architect.find_specialty", "description": "Search for a landscape architect based on the location and specialization", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the professional is based, e.g. Portland, OR."}, "specialization": {"type": "string", "description": "A specific area of expertise. Common areas include residential design, commercial design, urban design, and park design."}, "years_experience": {"type": "integer", "description": "Number of years the professional has been practicing in their field. (optional)", "default": 0}}, "required": ["location", "specialization"]}}]}, "model_result_raw": "<functions><function name=\"landscape_architect.find_specialty\"><params><param name=\"location\" value=\"Portland\" type=\"string\"/><param name=\"specialization\" value=\"small space garden design\" type=\"string\"/><param name=\"years_experience\" value=\"5\" type=\"integer\"/></function></functions>", "possible_answer": [{"landscape_architect.find_specialty": {"location": ["Portland", "Portland, OR"], "specialization": ["small space garden design"], "years_experience": [5]}}]}
{"id": "multiple_62", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 191"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_62", "question": [[{"role": "user", "content": "Find me the closest nature park that allows camping and has scenic views in Boston, MA."}]], "function": [{"name": "nature_park.find_nearby", "description": "Locate nearby nature parks based on specific criteria like camping availability and scenic views.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Boston, MA."}, "features": {"type": "array", "items": {"type": "string", "enum": ["Camping", "Scenic View", "Trails", "Picnic Areas"]}, "description": "Preferred features in nature park."}}, "required": ["location", "features"]}}, {"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific criteria.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Boston, MA."}, "amenities": {"type": "array", "items": {"type": "string", "enum": ["Delivery", "Outdoor Seating", "Vegetarian Options"]}, "description": "Preferred amenities in restaurant. Default empty array []"}}, "required": ["location"]}}]}, "model_result_raw": "<functions><function name=\"nature_park.find_nearby\"><params><param name=\"location\" value=\"Boston, MA\" type=\"string\"/><param name=\"features\" value=\"['Camping', 'Scenic View']\" type=\"array\"/></function></functions>", "possible_answer": [{"nature_park.find_nearby": {"location": ["Boston, MA", "Boston"], "features": [["Camping", "Scenic View"], ["Scenic View", "Camping"]]}}]}
{"id": "multiple_63", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 159"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_63", "question": [[{"role": "user", "content": "What will be the air quality index of New York for the next week?"}]], "function": [{"name": "air_quality_forecast", "description": "Retrieve an air quality forecast for a specific location and time frame.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality forecast for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}}, "required": ["location", "days"]}}, {"name": "weather_forecast", "description": "Retrieve a weather forecast for a specific location and time frame.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}}, "required": ["location", "days"]}}, {"name": "news", "description": "Retrieve news articles for a specific topic.", "parameters": {"type": "dict", "properties": {"topic": {"type": "string", "description": "The topic that you want to get the news for."}, "days": {"type": "integer", "description": "Number of past days for which to retrieve the news."}}, "required": ["topic", "days"]}}]}, "model_result_raw": "<functions><function name=\"air_quality_forecast\"><params><param name=\"location\" value=\"New York\" type=\"string\"/><param name=\"days\" value=\"7\" type=\"integer\"/></param></function></functions>", "possible_answer": [{"air_quality_forecast": {"location": ["New York", "New York, NY", "New York City", "NYC"], "days": [7]}}]}
{"id": "multiple_66", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 236"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_66", "question": [[{"role": "user", "content": "How much traffic should I expect from Las Vegas to Los Angeles this weekend?"}]], "function": [{"name": "calculate_distance", "description": "Calculate distance between two locations.", "parameters": {"type": "dict", "properties": {"start_point": {"type": "string", "description": "Starting point of the journey."}, "end_point": {"type": "string", "description": "Ending point of the journey."}}, "required": ["start_point", "end_point"]}}, {"name": "traffic_estimate", "description": "Estimate traffic from one location to another for a specific time period.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "Starting location for the journey."}, "end_location": {"type": "string", "description": "Ending location for the journey."}, "time_period": {"type": "string", "description": "Specify a time frame to estimate the traffic, 'now' for current, 'weekend' for the coming weekend. Default 'now'"}}, "required": ["start_location", "end_location"]}}, {"name": "weather_forecast", "description": "Retrieve a weather forecast for a specific location and time frame.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}}, "required": ["location", "days"]}}]}, "model_result_raw": "<functions><function name=\"traffic_estimate\"><params><param name=\"start_location\" value=\"Las Vegas\" type=\"string\"/><param name=\"end_location\" value=\"Los Angeles\" type=\"string\"/><param name=\"time_period\" value=\"weekend\" type=\"string\"/></function></functions>", "possible_answer": [{"traffic_estimate": {"start_location": ["Las Vegas"], "end_location": ["Los Angeles"], "time_period": ["weekend"]}}]}
{"id": "multiple_67", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 231"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_67", "question": [[{"role": "user", "content": "Translate Hello, how are you? from English to French."}]], "function": [{"name": "translate", "description": "Translate text from a specified source language to a specified target language.", "parameters": {"type": "dict", "properties": {"text": {"type": "string", "description": "The text to be translated."}, "source_language": {"type": "string", "description": "The language the text is currently in."}, "target_language": {"type": "string", "description": "The language the text will be translated to."}}, "required": ["text", "source_language", "target_language"]}}, {"name": "sentiment_analysis", "description": "Analyze the sentiment of a specified text.", "parameters": {"type": "dict", "properties": {"text": {"type": "string", "description": "The text whose sentiment is to be analyzed."}}, "required": ["text"]}}, {"name": "word_count", "description": "Count the number of words in the given text.", "parameters": {"type": "dict", "properties": {"text": {"type": "string", "description": "The text that the number of words is to be calculated."}}, "required": ["text"]}}]}, "model_result_raw": "<functions><function name=\"translate\"><params><param name=\"text\" value=\"Hello, how are you?\" type=\"string\"/><param name=\"source_language\" value=\"English\" type=\"string\"/><param name=\"target_language\" value=\"French\" type=\"string\"/></function></functions>", "possible_answer": [{"translate": {"text": ["Hello, how are you?"], "source_language": ["English"], "target_language": ["French"]}}]}
{"id": "multiple_68", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 191"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_68", "question": [[{"role": "user", "content": "Can I find a historical fiction book at the New York public library?"}]], "function": [{"name": "library.search_books", "description": "Search for a book in a given library with optional parameters", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Name or city of library"}, "genre": {"type": "string", "description": "Genre of the book"}, "title": {"type": "string", "description": "Title of the book. Default ''"}}, "required": ["location", "genre"]}}, {"name": "google.books_search", "description": "Search for a book in the Google Books library with optional parameters", "parameters": {"type": "dict", "properties": {"genre": {"type": "string", "description": "Genre of the book"}, "title": {"type": "string", "description": "Title of the book. Default ''"}}, "required": ["genre"]}}, {"name": "openlibrary.books_search", "description": "Search for a book in the Open Library with optional parameters", "parameters": {"type": "dict", "properties": {"genre": {"type": "string", "description": "Genre of the book"}, "title": {"type": "string", "description": "Title of the book. Default ''"}}, "required": ["genre"]}}]}, "model_result_raw": "<functions><function name=\"library.search_books\"><params><param name=\"location\" value=\"New York public library\" type=\"string\"/><param name=\"genre\" value=\"historical fiction\" type=\"string\"/></function></functions>", "possible_answer": [{"library.search_books": {"location": ["New York", "New York, NY", "New York City", "New York City, NY", "NYC", "New York public library"], "genre": ["Historical Fiction", "historical fiction"], "title": [""]}}]}
{"id": "multiple_71", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 156"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_71", "question": [[{"role": "user", "content": "How many veterans were there in the United States in the year 1954?"}]], "function": [{"name": "get_bureau_statistics", "description": "Retrieve statistical data for a specific year and statistical category", "parameters": {"type": "dict", "properties": {"year": {"type": "integer", "description": "The year for which to retrieve the statistical data"}, "category": {"type": "string", "description": "The statistical category (e.g., employment, crime, health)"}}, "required": ["year", "category"]}}, {"name": "get_population", "description": "Retrieve population data for a specific year and population category", "parameters": {"type": "dict", "properties": {"year": {"type": "integer", "description": "The year for which to retrieve the population data"}, "category": {"type": "string", "description": "The population category (e.g., total, veterans, women)"}}, "required": ["year", "category"]}}, {"name": "get_demographics", "description": "Retrieve demographic data for a specific year and demographic category", "parameters": {"type": "dict", "properties": {"year": {"type": "integer", "description": "The year for which to retrieve the demographic data"}, "category": {"type": "string", "description": "The demographic category (e.g., gender, race, age)"}}, "required": ["year", "category"]}}]}, "model_result_raw": "<functions><function name=\"get_population\"><params><param name=\"year\" value=\"1954\" type=\"integer\"/><param name=\"category\" value=\"veterans\" type=\"string\"/></function></functions>", "possible_answer": [{"get_population": {"year": [1954], "category": ["veterans"]}}]}
{"id": "multiple_74", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 236"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_74", "question": [[{"role": "user", "content": "Find the price of Van Gogh's painting 'Starry Night' on all auction platforms."}]], "function": [{"name": "art_auction.fetch_artwork_price", "description": "Fetch the price of a specific artwork on the auction platform.", "parameters": {"type": "dict", "properties": {"artwork_name": {"type": "string", "description": "The name of the artwork to be searched."}, "artist": {"type": "string", "description": "The artist's name to ensure the precise artwork is fetched."}, "platform": {"type": "string", "description": "The platform where the artwork's price should be fetched from.", "default": "all"}}, "required": ["artwork_name", "artist"]}}, {"name": "library.search_book", "description": "Search for a specific book in the library.", "parameters": {"type": "dict", "properties": {"title": {"type": "string", "description": "The title of the book to be searched."}, "author": {"type": "string", "description": "The author of the book to ensure the precise book is fetched."}, "platform": {"type": "string", "description": "The library where the book should be fetched from.", "default": "all"}}, "required": ["title", "author"]}}]}, "model_result_raw": "<functions><function name=\"art_auction.fetch_artwork_price\"><params><param name=\"artwork_name\" value=\"Starry Night\" type=\"string\"/><param name=\"artist\" value=\"Van Gogh\" type=\"string\"/><param name=\"platform\" value=\"all\" type=\"string\"/></param></function></functions>", "possible_answer": [{"art_auction.fetch_artwork_price": {"artwork_name": ["Starry Night"], "artist": ["Van Gogh"], "platform": ["all", ""]}}]}
{"id": "multiple_76", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 163"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_76", "question": [[{"role": "user", "content": "I want to order a custom bronze sculpture of a horse. What material options are available?"}]], "function": [{"name": "painting.create_custom", "description": "Order a custom painting with your preferred color.", "parameters": {"type": "dict", "properties": {"subject": {"type": "string", "description": "The subject of the painting, e.g. horse"}, "color": {"type": "string", "enum": ["Red", "Blue", "Green", "Yellow", "Black"], "description": "Preferred main color for the painting."}, "size": {"type": "integer", "description": "The desired size for the painting in inches. This parameter is optional. Default 12"}}, "required": ["subject", "color"]}}, {"name": "sculpture.create_custom", "description": "Order a custom sculpture with your preferred material.", "parameters": {"type": "dict", "properties": {"item": {"type": "string", "description": "The subject of the sculpture, e.g. horse"}, "material": {"type": "string", "enum": ["Bronze", "Marble", "Terracotta", "Wood", "Stone"], "description": "Preferred material for the sculpture."}, "size": {"type": "integer", "description": "The desired size for the sculpture in inches. This parameter is optional. Default 12"}}, "required": ["item", "material"]}}]}, "model_result_raw": "<functions><function name=\"sculpture.create_custom\"><params><param name=\"item\" value=\"horse\" type=\"string\"/><param name=\"material\" value=\"Bronze\" type=\"string\"/></function></functions>", "possible_answer": [{"sculpture.create_custom": {"item": ["horse", "Horse"], "material": ["Bronze", "bronze"], "size": ["", 12]}}]}
{"id": "multiple_77", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 219"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_77", "question": [[{"role": "user", "content": "Search for famous contemporary sculptures in New York."}]], "function": [{"name": "tourist_attraction.find", "description": "Search for tourist attractions based on type and location.", "parameters": {"type": "dict", "properties": {"attractionType": {"type": "string", "description": "Type of the attraction. E.g., monument, museum, park."}, "location": {"type": "string", "description": "Location or city where the attraction is."}}, "required": ["attractionType", "location"]}}, {"name": "artwork_search.find", "description": "Search for artworks based on type and location.", "parameters": {"type": "dict", "properties": {"type": {"type": "string", "description": "Type of the artwork. E.g., painting, sculpture, installation."}, "location": {"type": "string", "description": "Location or city where the artwork is."}, "era": {"type": "string", "description": "Time period of the artwork, can be 'contemporary', 'modern', 'renaissance', etc. Default 'contemporary'", "optional": "True"}}, "required": ["type", "location"]}}, {"name": "park_search.find", "description": "Search for parks based on facilities and location.", "parameters": {"type": "dict", "properties": {"facilities": {"type": "array", "items": {"type": "string"}, "description": "List of facilities in the park."}, "location": {"type": "string", "description": "Location or city where the park is."}}, "required": ["facilities", "location"]}}]}, "model_result_raw": "<functions><function name=\"artwork_search.find\"><params><param name=\"type\" value=\"sculpture\" type=\"string\"/><param name=\"location\" value=\"New York\" type=\"string\"/><param name=\"era\" value=\"contemporary\" type=\"string\"/></function></functions>", "possible_answer": [{"artwork_search.find": {"type": ["sculpture"], "location": ["New York", "New York, NY", "New York City", "NYC"], "era": ["contemporary", ""]}}]}
{"id": "multiple_78", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Incorrect type for parameter 'features'. Expected type array, got str. Parameter value: 'timings,exhibitions,accessibility'."], "error_type": "type_error:simple", "prompt": {"id": "multiple_78", "question": [[{"role": "user", "content": "Get me information about Natural History Museum in London including timings, exhibitions, and accessibility."}]], "function": [{"name": "tourist_spot_info", "description": "Retrieve information about a specific tourist spot.", "parameters": {"type": "dict", "properties": {"spot": {"type": "string", "description": "The name of the tourist spot you want to get information for."}, "city": {"type": "string", "description": "The city where the tourist spot is located."}, "details": {"type": "array", "items": {"type": "string", "enum": ["timing", "attractions", "tickets", "accessibility", "history"]}, "description": "Details of the tourist spot to get information on. For multiple details, separate them by comma.", "default": "timing, attractions"}}, "required": ["spot", "city"]}}, {"name": "museum_info", "description": "Retrieve information about a specific museum.", "parameters": {"type": "dict", "properties": {"museum": {"type": "string", "description": "The name of the museum you want to get information for."}, "city": {"type": "string", "description": "The city where the museum is located."}, "features": {"type": "array", "items": {"type": "string", "enum": ["timings", "exhibitions", "accessibility", "events", "history"]}, "description": "Features of the museum to get information on. For multiple features, separate them by comma.", "default": "timings, exhibitions"}}, "required": ["museum", "city"]}}]}, "model_result_raw": "<functions><function name=\"museum_info\"><params><param name=\"museum\" value=\"Natural History Museum\" type=\"string\"/><param name=\"city\" value=\"London\" type=\"string\"/><param name=\"features\" value=\"timings,exhibitions,accessibility\" type=\"string\"/></params></function></functions>", "model_result_decoded": [{"museum_info": {"museum": "Natural History Museum", "city": "London", "features": "timings,exhibitions,accessibility"}}], "possible_answer": [{"museum_info": {"museum": ["Natural History Museum"], "city": ["London"], "features": [["timings", "exhibitions", "accessibility"], ["exhibitions", "timings", "accessibility"], ["exhibitions", "accessibility", "timings"], ["accessibility", "timings", "exhibitions"], ["accessibility", "exhibitions", "timings"], ["timings", "accessibility", "exhibitions"]]}}]}
{"id": "multiple_79", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 180"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_79", "question": [[{"role": "user", "content": "Find art exhibitions for the upcoming month in the Museum of Modern Art, New York."}]], "function": [{"name": "restaurant_info", "description": "Get restaurant information for a specific area.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Location for which to find restaurants."}, "food_type": {"type": "string", "description": "Type of cuisine for which to find restaurants. Default 'any'", "enum": ["Italian", "Chinese", "Mexican", "American"]}}, "required": ["location"]}}, {"name": "exhibition_info", "description": "Get exhibition information for a specific museum.", "parameters": {"type": "dict", "properties": {"museum_name": {"type": "string", "description": "Name of the museum for which to find exhibitions."}, "month": {"type": "integer", "description": "Number of upcoming months for which to retrieve exhibition details. Default 1"}}, "required": ["museum_name"]}}]}, "model_result_raw": "<functions><function name=\"exhibition_info\"><params><param name=\"museum_name\" value=\"Museum of Modern Art, New York\" type=\"string\"/><param name=\"month\" value=\"1\" type=\"integer\"/></function></functions>", "possible_answer": [{"exhibition_info": {"museum_name": ["Museum of Modern Art", "MOMA", "Museum of Modern Art, New York"], "month": ["", 1]}}]}
{"id": "multiple_80", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 199"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_80", "question": [[{"role": "user", "content": "Find a local guitar shop that also offers violin lessons in Nashville."}]], "function": [{"name": "music_shop.find_nearby", "description": "Locate nearby music shops based on specific criteria like instrument lessons availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Nashville, TN"}, "services": {"type": "array", "items": {"type": "string", "enum": ["Guitar Lessons", "Violin Lessons", "Piano Lessons", "Ukulele Lessons"]}, "description": "Types of instrument lessons offered in the shop. Default empty array"}, "instruments": {"type": "array", "items": {"type": "string", "enum": ["Guitars", "Violins", "Pianos", "Drums"]}, "description": "Types of instruments sold in the shop. Default empty array"}}, "required": ["location"]}}, {"name": "gym.find_nearby", "description": "Locate nearby gyms based on specific criteria like types of fitness classes availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Nashville, TN"}, "classes": {"type": "array", "items": {"type": "string", "enum": ["Yoga", "Spin", "Zumba", "CrossFit"]}, "description": "Types of fitness classes offered in the gym. Default empty array"}, "equipment": {"type": "array", "items": {"type": "string", "enum": ["Treadmills", "Ellipticals", "Weight Machines", "Free Weights"]}, "description": "Types of gym equipment available. Default empty array"}}, "required": ["location"]}}]}, "model_result_raw": "<functions><function name=\"music_shop.find_nearby\"><params><param name=\"location\" value=\"Nashville, TN\" type=\"string\"/><param name=\"services\" value=\"[Guitar Lessons, Violin Lessons]\" type=\"array\"/></function></functions>", "possible_answer": [{"music_shop.find_nearby": {"location": ["Nashville, TN", "Nashville"], "services": [["Violin Lessons"]], "instruments": [["Guitars"]]}}]}
{"id": "multiple_81", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 232"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_81", "question": [[{"role": "user", "content": "Book a ticket for the upcoming Eminem concert in New York City, I would like to get the one with backstage access."}]], "function": [{"name": "concert.book_ticket", "description": "Book a ticket for a concert at a specific location with various add-ons like backstage pass.", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "Name of the artist for the concert."}, "location": {"type": "string", "description": "City where the concert will take place."}, "add_ons": {"type": "array", "items": {"type": "string", "enum": ["Backstage Pass", "VIP Seating", "Parking Pass"]}, "description": "Add-ons for the concert. Default empty array"}}, "required": ["artist", "location"]}}, {"name": "festival.book_ticket", "description": "Book a ticket for a festival at a specific location with various add-ons like camping access.", "parameters": {"type": "dict", "properties": {"festival": {"type": "string", "description": "Name of the festival."}, "location": {"type": "string", "description": "City where the festival will take place."}, "add_ons": {"type": "array", "items": {"type": "string", "enum": ["Camping Pass", "VIP Seating", "Parking Pass"]}, "description": "Add-ons for the festival. Default empty array"}}, "required": ["festival", "location"]}}]}, "model_result_raw": "<functions><function name=\"concert.book_ticket\"><params><param name=\"artist\" value=\"Eminem\" type=\"string\"/><param name=\"location\" value=\"New York City\" type=\"string\"/><param name=\"add_ons\" value=\"['Backstage Pass']\" type=\"array\"/></function></functions>", "possible_answer": [{"concert.book_ticket": {"artist": ["Eminem"], "location": ["New York City", "NYC"], "add_ons": [["Backstage Pass"]]}}]}
{"id": "multiple_82", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_82", "question": [[{"role": "user", "content": "Play a song in C Major key at tempo 120 bpm."}]], "function": [{"name": "music.generate", "description": "Generate a piece of music given a key, tempo, and time signature.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The key of the piece, e.g., C Major."}, "tempo": {"type": "integer", "description": "Tempo of the piece in beats per minute."}, "time_signature": {"type": "string", "description": "Time signature of the piece, e.g., 4/4. Default '4/4'", "optional": true}}, "required": ["key", "tempo"]}}, {"name": "audio.generate", "description": "Generate an audio signal given a frequency, amplitude, and duration.", "parameters": {"type": "dict", "properties": {"frequency": {"type": "float", "description": "Frequency of the audio signal in Hz."}, "amplitude": {"type": "float", "description": "Amplitude of the audio signal."}, "duration": {"type": "integer", "description": "Duration of the audio signal in seconds. Default 1", "optional": true}}, "required": ["frequency", "amplitude"]}}]}, "model_result_raw": "<music.generate><param name=\"key\" value=\"C Major\" type=\"string\"/><param name=\"tempo\" value=\"120\" type=\"integer\"/><param name=\"time_signature\" value=\"4/4\" type=\"string\"/></music.generate>", "model_result_decoded": [], "possible_answer": [{"music.generate": {"key": ["C Major"], "tempo": [120], "time_signature": ["", "4/4"]}}]}
{"id": "multiple_86", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 229"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_86", "question": [[{"role": "user", "content": "What are some recommended board games for 2 players and strategy based from store BoardGameGeek?"}]], "function": [{"name": "BoardGameGeek.recommend", "description": "Generate game recommendation from BoardGameGeek store based on number of players and category.", "parameters": {"type": "dict", "properties": {"numPlayers": {"type": "integer", "description": "The number of players who will play the game."}, "category": {"type": "string", "description": "The preferred category of board game. E.g. strategy, family, party etc."}, "difficulty": {"type": "string", "description": "Preferred difficulty level. E.g. beginner, intermediate, advanced etc. This is an optional parameter. Default 'beginner'"}}, "required": ["numPlayers", "category"]}}, {"name": "AmazonGameStore.recommend", "description": "Generate game recommendation from Amazon Game Store based on number of players and category.", "parameters": {"type": "dict", "properties": {"numOfPlayers": {"type": "integer", "description": "The number of players who will play the game."}, "category": {"type": "string", "description": "The preferred category of board game. E.g. strategy, family, party etc."}, "priceRange": {"type": "string", "description": "The price range you are willing to pay for the board game. E.g. $10-$20, $20-$30 etc. This is an optional parameter. Default ''"}}, "required": ["numOfPlayers", "category"]}}]}, "model_result_raw": "<functions><function name=\"BoardGameGeek.recommend\"><params><param name=\"numPlayers\" value=\"2\" type=\"integer\"/><param name=\"category\" value=\"strategy\" type=\"string\"/><param name=\"difficulty\" value=\"intermediate\" type=\"string\"/></function></functions>", "possible_answer": [{"BoardGameGeek.recommend": {"numPlayers": [2], "category": ["strategy"], "difficulty": ["", "beginner"]}}]}
{"id": "multiple_89", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 244"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_89", "question": [[{"role": "user", "content": "Find a healthy lunch recipe under 500 calories that uses chicken and mushrooms."}]], "function": [{"name": "restaurant_search", "description": "Searches for restaurants based on a list of preferred ingredients and maximum calorie count.", "parameters": {"type": "dict", "properties": {"ingredients": {"type": "array", "items": {"type": "string"}, "description": "A list of ingredients you prefer in the restaurant's dishes."}, "calories": {"type": "integer", "description": "The maximum calorie count you prefer for the restaurant's dishes."}, "meal": {"type": "string", "description": "Type of the meal for the restaurant's dishes, it's optional and could be breakfast, lunch or dinner. Default 'lunch'"}}, "required": ["ingredients", "calories"]}}, {"name": "ingredient_replace", "description": "Replaces an ingredient in a recipe with a substitute, keeping the calories below a certain number.", "parameters": {"type": "dict", "properties": {"original_ingredient": {"type": "string", "description": "The ingredient in the recipe to replace."}, "replacement_ingredient": {"type": "string", "description": "The substitute ingredient to replace the original one."}, "calories": {"type": "integer", "description": "The maximum number of calories for the recipe after replacement."}}, "required": ["original_ingredient", "replacement_ingredient", "calories"]}}, {"name": "recipe_search", "description": "Searches for recipes based on a list of ingredients and a maximum caloric value.", "parameters": {"type": "dict", "properties": {"ingredients": {"type": "array", "items": {"type": "string"}, "description": "A list of ingredients you want to use in the recipe."}, "calories": {"type": "integer", "description": "The maximum number of calories for the recipe."}, "meal": {"type": "string", "description": "Type of the meal for the recipe, it's optional and could be breakfast, lunch or dinner. Default 'lunch'"}}, "required": ["ingredients", "calories"]}}]}, "model_result_raw": "<functions><function name=\"recipe_search\"><params><param name=\"ingredients\" value=\"[&quot;chicken&quot;, &quot;mushrooms&quot;]\" type=\"array\"/><param name=\"calories\" value=\"500\" type=\"integer\"/><param name=\"meal\" value=\"lunch\" type=\"string\"/></function></functions>", "possible_answer": [{"recipe_search": {"ingredients": [["chicken", "mushrooms"], ["mushrooms", "chicken"]], "calories": [500], "meal": ["lunch", ""]}}]}
{"id": "multiple_90", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Incorrect type for parameter 'cuisine'. Expected type array, got str. Parameter value: 'Seafood'."], "error_type": "type_error:simple", "prompt": {"id": "multiple_90", "question": [[{"role": "user", "content": "I want a seafood restaurant in Seattle that can accommodate a group of 5."}]], "function": [{"name": "events.find_event", "description": "Find events suitable for groups based on specified criteria such as location and event type.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Seattle, WA"}, "event_type": {"type": "array", "items": {"type": "string", "enum": ["Concert", "Sports", "Exhibition", "Festival"]}, "description": "Type of event. Default empty array"}, "group_size": {"type": "integer", "description": "Size of the group that the event should accommodate."}}, "required": ["location", "group_size"]}}, {"name": "restaurant.find_group", "description": "Find restaurants suitable for groups based on specified criteria such as location and cuisine.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Seattle, WA"}, "cuisine": {"type": "array", "items": {"type": "string", "enum": ["Seafood", "Italian", "Indian", "Chinese"]}, "description": "Preferred cuisine at the restaurant. Default empty array"}, "group_size": {"type": "integer", "description": "Size of the group that the restaurant should accommodate."}}, "required": ["location", "group_size"]}}]}, "model_result_raw": "<functions><function name=\"restaurant.find_group\"><params><param name=\"location\" value=\"Seattle, WA\" type=\"string\"/><param name=\"cuisine\" value=\"Seafood\" type=\"string\"/><param name=\"group_size\" value=\"5\" type=\"integer\"/></params></function></functions>", "model_result_decoded": [{"restaurant.find_group": {"location": "Seattle, WA", "cuisine": "Seafood", "group_size": 5}}], "possible_answer": [{"restaurant.find_group": {"location": ["Seattle", "Seattle, WA"], "cuisine": [["Seafood"]], "group_size": [5]}}]}
{"id": "multiple_91", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 164"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_91", "question": [[{"role": "user", "content": "Can I find a good cooking recipe for apple pie using less than 5 ingredients?"}]], "function": [{"name": "restaurant.find", "description": "Locate restaurants based on specific criteria such as cuisine and price range", "parameters": {"type": "dict", "properties": {"cuisine": {"type": "string", "description": "The type of cuisine preferred."}, "price": {"type": "array", "items": {"type": "string"}, "description": "Price range of the restaurant in format ['low', 'mid', 'high']. Default ['low', 'mid', 'high']"}}, "required": ["cuisine"]}}, {"name": "recipe.find", "description": "Locate cooking recipes based on specific criteria such as main ingredient and number of ingredients", "parameters": {"type": "dict", "properties": {"mainIngredient": {"type": "string", "description": "Main ingredient for the recipe."}, "ingredientLimit": {"type": "integer", "description": "Max number of ingredients the recipe should use."}}, "required": ["mainIngredient", "ingredientLimit"]}}]}, "model_result_raw": "<functions><function name=\"recipe.find\"><params><param name=\"mainIngredient\" value=\"apple\" type=\"string\"/><param name=\"ingredientLimit\" value=\"4\" type=\"integer\"/></function></functions>", "possible_answer": [{"recipe.find": {"mainIngredient": ["apple pie", "apple"], "ingredientLimit": [4]}}]}
{"id": "multiple_92", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 195"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_92", "question": [[{"role": "user", "content": "Get me a list of available vegetarian and gluten-free foods at the Walmart near Denver."}]], "function": [{"name": "safeway.vegan_products", "description": "Get available vegan products at specified Safeway store", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the Safeway store is located, e.g. Denver, CO"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["vegan", "gluten-free"]}, "description": "Product categories to search within. Default empty array"}}, "required": ["location"]}}, {"name": "wholefoods.vegan_products", "description": "Get available vegan products at specified Whole Foods store", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the Whole Foods store is located, e.g. Denver, CO"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["vegan", "gluten-free"]}, "description": "Product categories to search within. Default empty array"}}, "required": ["location"]}}, {"name": "walmart.vegan_products", "description": "Get available vegan products at specified Walmart store", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the Walmart store is located, e.g. Denver, CO"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["vegan", "gluten-free"]}, "description": "Product categories to search within. Default empty array"}}, "required": ["location"]}}]}, "model_result_raw": "<functions><function name=\"walmart.vegan_products\"><params><param name=\"location\" value=\"Denver, CO\" type=\"string\"/><param name=\"categories\" value=\"['vegetarian', 'gluten-free']\" type=\"array\"/></function></functions>", "possible_answer": [{"walmart.vegan_products": {"location": ["Denver, CO", "Denver"], "categories": [["vegan", "gluten-free"], ["gluten-free", "vegan"]]}}]}
{"id": "multiple_93", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 272"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_93", "question": [[{"role": "user", "content": "Book a deluxe room for 2 nights at the Marriott hotel in New York and add breakfast as an extra service"}]], "function": [{"name": "car.rental", "description": "Rent a car at the specified location for a specific number of days", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Location of the car rental."}, "days": {"type": "integer", "description": "Number of days for which to rent the car."}, "car_type": {"type": "string", "description": "Type of the car to rent."}, "pick_up": {"type": "string", "description": "Location of where to pick up the car. Default ''"}}, "required": ["location", "days", "car_type"]}}, {"name": "hotel.book", "description": "Book a hotel room given the location, room type, and number of nights and additional services", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Location of the hotel."}, "roomType": {"type": "string", "description": "Type of the room to be booked."}, "nights": {"type": "integer", "description": "Number of nights to book the room for."}, "additional_services": {"type": "array", "items": {"type": "string", "description": "Additonal services that can be booked.", "enum": ["breakfast", "parking", "spa"]}, "description": "Additional services to be added. Default empty array"}}, "required": ["location", "roomType", "nights"]}}]}, "model_result_raw": "<functions><function name=\"hotel.book\"><params><param name=\"location\" value=\"New York\" type=\"string\"/><param name=\"roomType\" value=\"deluxe\" type=\"string\"/><param name=\"nights\" value=\"2\" type=\"integer\"/><param name=\"additional_services\" value=\"[breakfast]\" type=\"array\"/></function></functions>", "possible_answer": [{"hotel.book": {"location": ["New York", "New York, NY", "NYC"], "roomType": ["deluxe", "Deluxe"], "nights": [2], "additional_services": [["breakfast"]]}}]}
{"id": "multiple_95", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 280"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_95", "question": [[{"role": "user", "content": "Convert 200 euros to US dollars using current exchange rate."}]], "function": [{"name": "currency_exchange.convert", "description": "Converts a value from one currency to another using the latest exchange rate.", "parameters": {"type": "dict", "properties": {"amount": {"type": "integer", "description": "The amount of money to be converted."}, "from_currency": {"type": "string", "description": "The currency to convert from."}, "to_currency": {"type": "string", "description": "The currency to convert to."}, "live_conversion": {"type": "boolean", "description": "If true, use the latest exchange rate for conversion, else use the last known rate. Default false"}}, "required": ["amount", "from_currency", "to_currency"]}}, {"name": "unit_conversion.convert", "description": "Converts a value from one unit to another.", "parameters": {"type": "dict", "properties": {"value": {"type": "integer", "description": "The value to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from."}, "to_unit": {"type": "string", "description": "The unit to convert to."}}, "required": ["value", "from_unit", "to_unit"]}}]}, "model_result_raw": "<functions><function name=\"currency_exchange.convert\"><params><param name=\"amount\" value=\"200\" type=\"integer\"/><param name=\"from_currency\" value=\"EUR\" type=\"string\"/><param name=\"to_currency\" value=\"USD\" type=\"string\"/><param name=\"live_conversion\" value=\"true\" type=\"boolean\"/></function></functions>", "possible_answer": [{"currency_exchange.convert": {"amount": [200], "from_currency": ["EUR"], "to_currency": ["USD"], "live_conversion": [true]}}]}
{"id": "multiple_97", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_97", "question": [[{"role": "user", "content": "What's the area of a circle with a radius of 10?"}]], "function": [{"name": "geometry.area_circle", "description": "Calculate the area of a circle given the radius.", "parameters": {"type": "dict", "properties": {"radius": {"type": "integer", "description": "The radius of the circle."}, "units": {"type": "string", "description": "The units in which the radius is measured (defaults to meters).", "default": "meters"}}, "required": ["radius"]}}, {"name": "plot_sine_wave", "description": "Plot a sine wave for a given frequency in a given range.", "parameters": {"type": "dict", "properties": {"start_range": {"type": "float", "description": "Start of the range in radians."}, "end_range": {"type": "float", "description": "End of the range in radians."}, "frequency": {"type": "float", "description": "Frequency of the sine wave in Hz."}, "amplitude": {"type": "float", "description": "Amplitude of the sine wave. Default is 1."}, "phase_shift": {"type": "float", "description": "Phase shift of the sine wave in radians. Default is 0."}}, "required": ["start_range", "end_range", "frequency"]}}]}, "model_result_raw": "<function name=\"geometry.area_circle\"><param name=\"radius\" value=\"10\" type=\"integer\"/><param name=\"units\" value=\"meters\" type=\"string\"/></function>", "model_result_decoded": [], "possible_answer": [{"geometry.area_circle": {"radius": [10], "units": ["", "meters"]}}]}
{"id": "multiple_98", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_98", "question": [[{"role": "user", "content": "Calculate the circumference of a circle with radius 3"}]], "function": [{"name": "get_earliest_reference", "description": "Retrieve the earliest historical reference of a person.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the person."}, "source": {"type": "string", "enum": ["scriptures", "historical records"], "description": "Source to fetch the reference. Default is 'scriptures'"}}, "required": ["name"]}}, {"name": "get_current_time", "description": "Retrieve the current time for a specified city and country.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city for which the current time is to be retrieved."}, "country": {"type": "string", "description": "The country where the city is located."}, "format": {"type": "string", "description": "The format in which the time is to be displayed, optional (defaults to 'HH:MM:SS')."}}, "required": ["city", "country"]}}, {"name": "music_generator.generate_melody", "description": "Generate a melody based on certain musical parameters.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The key of the melody. E.g., 'C' for C major."}, "start_note": {"type": "string", "description": "The first note of the melody, specified in scientific pitch notation. E.g., 'C4'."}, "length": {"type": "integer", "description": "The number of measures in the melody."}, "tempo": {"type": "integer", "description": "The tempo of the melody, in beats per minute. Optional parameter. If not specified, defaults to 120."}}, "required": ["key", "start_note", "length"]}}, {"name": "geometry.circumference", "description": "Calculate the circumference of a circle given the radius.", "parameters": {"type": "dict", "properties": {"radius": {"type": "integer", "description": "The radius of the circle."}, "units": {"type": "string", "description": "Units for the output circumference measurement. Default is 'cm'."}}, "required": ["radius"]}}]}, "model_result_raw": "<function name=\"geometry.circumference\"><param name=\"radius\" value=\"3\" type=\"integer\"/><param name=\"units\" value=\"cm\" type=\"string\"/></function>", "model_result_decoded": [], "possible_answer": [{"geometry.circumference": {"radius": [3], "units": ["cm", ""]}}]}
{"id": "multiple_99", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 214"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_99", "question": [[{"role": "user", "content": "Calculate the derivative of the function 2x^2 at x = 1."}]], "function": [{"name": "calculus.derivative", "description": "Compute the derivative of a function at a specific value.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The function to calculate the derivative of."}, "value": {"type": "integer", "description": "The value where the derivative needs to be calculated at."}, "function_variable": {"type": "string", "description": "The variable present in the function, for instance x or y, etc. Default is 'x'"}}, "required": ["function", "value"]}}, {"name": "get_personality_traits", "description": "Retrieve the personality traits for a specific personality type, including their strengths and weaknesses.", "parameters": {"type": "dict", "properties": {"type": {"type": "string", "description": "The personality type."}, "traits": {"type": "array", "items": {"type": "string", "enum": ["strengths", "weaknesses"]}, "description": "List of traits to be retrieved, default is ['strengths', 'weaknesses']."}}, "required": ["type"]}}]}, "model_result_raw": "<functions><function name=\"calculus.derivative\"><params><param name=\"function\" value=\"2*x**2\" type=\"string\"/><param name=\"value\" value=\"1\" type=\"integer\"/><param name=\"function_variable\" value=\"x\" type=\"string\"/></function></functions>", "possible_answer": [{"calculus.derivative": {"function": ["2x**2", "lambda x: 2x**2"], "value": [1], "function_variable": ["x", ""]}}]}
{"id": "multiple_106", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_106", "question": [[{"role": "user", "content": "Calculate the electric field strength 4 meters away from a charge of 0.01 Coulombs."}]], "function": [{"name": "mix_paint_color", "description": "Combine two primary paint colors and adjust the resulting color's lightness level.", "parameters": {"type": "dict", "properties": {"color1": {"type": "string", "description": "The first primary color to be mixed."}, "color2": {"type": "string", "description": "The second primary color to be mixed."}, "lightness": {"type": "integer", "description": "The desired lightness level of the resulting color in percentage. The default level is set to 50%."}}, "required": ["color1", "color2"]}}, {"name": "cooking_conversion.convert", "description": "Convert cooking measurements from one unit to another.", "parameters": {"type": "dict", "properties": {"quantity": {"type": "integer", "description": "The quantity to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from."}, "to_unit": {"type": "string", "description": "The unit to convert to."}, "item": {"type": "string", "description": "The item to be converted."}}, "required": ["quantity", "from_unit", "to_unit", "item"]}}, {"name": "group_dynamics.pattern", "description": "Examine the social dynamics and interactions within a group based on the personality traits and group size.", "parameters": {"type": "dict", "properties": {"total": {"type": "integer", "description": "The total group size."}, "extroverts": {"type": "integer", "description": "The number of extroverted members in the group."}, "introverts": {"type": "integer", "description": "The number of introverted members in the group."}}, "required": ["total", "extroverts", "introverts"]}}, {"name": "calculate_electric_field_strength", "description": "Calculate the electric field strength at a certain distance from a point charge.", "parameters": {"type": "dict", "properties": {"charge": {"type": "float", "description": "The charge in Coulombs."}, "distance": {"type": "integer", "description": "The distance from the charge in meters."}, "medium": {"type": "string", "description": "The medium in which the charge and the point of calculation is located. Default is 'vacuum'."}}, "required": ["charge", "distance"]}}]}, "model_result_raw": "<function name=\"calculate_electric_field_strength\"><param name=\"charge\" value=\"0.01\" type=\"float\"/><param name=\"distance\" value=\"4\" type=\"integer\"/><param name=\"medium\" value=\"vacuum\" type=\"string\"/></function>", "model_result_decoded": [], "possible_answer": [{"calculate_electric_field_strength": {"charge": [0.01], "distance": [4], "medium": ["", "vacuum"]}}]}
{"id": "multiple_107", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_107", "question": [[{"role": "user", "content": "What is the density of a substance with a mass of 45 kg and a volume of 15 m\u00b3?"}]], "function": [{"name": "mix_paint_color", "description": "Combine two primary paint colors and adjust the resulting color's lightness level.", "parameters": {"type": "dict", "properties": {"color1": {"type": "string", "description": "The first primary color to be mixed."}, "color2": {"type": "string", "description": "The second primary color to be mixed."}, "lightness": {"type": "integer", "description": "The desired lightness level of the resulting color in percentage. The default level is set to 50%."}}, "required": ["color1", "color2"]}}, {"name": "calculate_density", "description": "Calculate the density of a substance based on its mass and volume.", "parameters": {"type": "dict", "properties": {"mass": {"type": "integer", "description": "The mass of the substance in kilograms."}, "volume": {"type": "integer", "description": "The volume of the substance in cubic meters."}, "unit": {"type": "string", "description": "The unit of density. Default is kg/m\u00b3"}}, "required": ["mass", "volume"]}}]}, "model_result_raw": "<function name=\"calculate_density\"><param name=\"mass\" value=\"45\" type=\"integer\"/><param name=\"volume\" value=\"15\" type=\"integer\"/></function>", "model_result_decoded": [], "possible_answer": [{"calculate_density": {"mass": [45], "volume": [15], "unit": ["kg/m\u00b3", ""]}}]}
{"id": "multiple_110", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_110", "question": [[{"role": "user", "content": "Find the type of gene mutation based on SNP (Single Nucleotide Polymorphism) ID rs6034464."}]], "function": [{"name": "get_collectables_in_season", "description": "Retrieve a list of collectable items in a specific game during a specified season.", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "Name of the game."}, "season": {"type": "string", "description": "The season for which to retrieve the collectable items."}, "item_type": {"type": "string", "description": "The type of item to search for. Default is 'all'. Possible values: 'all', 'bug', 'fish', 'sea creatures', etc."}}, "required": ["game_name", "season"]}}, {"name": "mutation_type.find", "description": "Finds the type of a genetic mutation based on its SNP (Single Nucleotide Polymorphism) ID.", "parameters": {"type": "dict", "properties": {"snp_id": {"type": "string", "description": "The ID of the Single Nucleotide Polymorphism (SNP) mutation."}, "species": {"type": "string", "description": "Species in which the SNP occurs, default is 'Homo sapiens' (Humans)."}}, "required": ["snp_id"]}}]}, "model_result_raw": "<function name=\"mutation_type.find\"><param name=\"snp_id\" value=\"rs6034464\" type=\"string\"/><param name=\"species\" value=\"Homo sapiens\" type=\"string\"/></function>", "model_result_decoded": [], "possible_answer": [{"mutation_type.find": {"snp_id": ["rs6034464"], "species": ["Homo sapiens", ""]}}]}
{"id": "multiple_113", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 183"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_113", "question": [[{"role": "user", "content": "Calculate the expected evolutionary fitness of a creature, with trait A contributing to 40% of the fitness and trait B contributing 60%, if trait A has a value of 0.8 and trait B a value of 0.7."}]], "function": [{"name": "chess.rating", "description": "Fetches the current chess rating of a given player", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The full name of the chess player."}, "variant": {"type": "string", "description": "The variant of chess for which rating is requested (e.g., 'classical', 'blitz', 'bullet'). Default is 'classical'."}}, "required": ["player_name"]}}, {"name": "calculate_fitness", "description": "Calculate the expected evolutionary fitness of a creature based on the individual values and contributions of its traits.", "parameters": {"type": "dict", "properties": {"trait_values": {"type": "array", "items": {"type": "float"}, "description": "List of trait values, which are decimal numbers between 0 and 1, where 1 represents the trait maximally contributing to fitness."}, "trait_contributions": {"type": "array", "items": {"type": "float"}, "description": "List of the percentage contributions of each trait to the overall fitness, which must sum to 1."}}, "required": ["trait_values", "trait_contributions"]}}, {"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is empty array."}}, "required": ["loc", "product_list"]}}, {"name": "lawyer.find_nearby", "description": "Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city and state, e.g. Chicago, IL."}, "specialty": {"type": "array", "items": {"type": "string", "enum": ["Civil", "Divorce", "Immigration", "Business", "Criminal"]}, "description": "Specialization of the lawyer."}, "fee": {"type": "integer", "description": "Hourly fee charged by lawyer", "maximum": 400}}, "required": ["city", "specialty", "fee"]}}]}, "model_result_raw": "<functions><function name=\"calculate_fitness\"><params><param name=\"trait_values\" value=\"[0.8, 0.7]\" type=\"array\"/><param name=\"trait_contributions\" value=\"[0.4, 0.6]\" type=\"array\"/></function></functions>", "possible_answer": [{"calculate_fitness": {"trait_values": [[0.8, 0.7]], "trait_contributions": [[0.4, 0.6]]}}]}
{"id": "multiple_115", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 277"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_115", "question": [[{"role": "user", "content": "I want to find 5 restaurants nearby my location, Manhattan, offering Thai food and a vegan menu."}]], "function": [{"name": "find_instrument", "description": "Search for a musical instrument within specified budget and of specific type.", "parameters": {"type": "dict", "properties": {"budget": {"type": "float", "description": "Your budget for the instrument."}, "type": {"type": "string", "description": "Type of the instrument"}, "make": {"type": "string", "description": "Maker of the instrument, Optional parameter. Default is 'all'"}}, "required": ["budget", "type"]}}, {"name": "get_stock_info", "description": "Retrieves information about a specific stock based on company's name.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "detail_level": {"type": "string", "description": "Level of detail for stock information. Can be 'summary' or 'detailed'."}, "market": {"type": "string", "description": "The stock market of interest. Default is 'NASDAQ'"}}, "required": ["company_name", "detail_level"]}}, {"name": "find_restaurants", "description": "Locate nearby restaurants based on location and food preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The specific location or area."}, "food_type": {"type": "string", "description": "The type of food preferred."}, "number": {"type": "integer", "description": "Number of results to return."}, "dietary_requirements": {"type": "array", "items": {"type": "string"}, "description": "Special dietary requirements, e.g. vegan, gluten-free.", "default": "None"}}, "required": ["location", "food_type", "number"]}}, {"name": "sports.match_schedule", "description": "Retrieve the match schedule for a specific sports team.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "num_matches": {"type": "integer", "description": "The number of upcoming matches you want to get."}, "league": {"type": "string", "description": "The sports league of the team. This is an optional parameter. Default 'all'"}}, "required": ["team_name", "num_matches"]}}]}, "model_result_raw": "<functions><function name=\"find_restaurants\"><params><param name=\"location\" value=\"Manhattan\" type=\"string\"/><param name=\"food_type\" value=\"Thai\" type=\"string\"/><param name=\"number\" value=\"5\" type=\"integer\"/><param name=\"dietary_requirements\" value=\"['vegan']\" type=\"array\"/></function></functions>", "possible_answer": [{"find_restaurants": {"location": ["Manhattan"], "food_type": ["Thai"], "number": [5], "dietary_requirements": [["vegan"]]}}]}
{"id": "multiple_116", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 198"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_116", "question": [[{"role": "user", "content": "Calculate the Body Mass Index (BMI) of a person with a weight of 85 kilograms and height of 180 cm."}]], "function": [{"name": "calculate_bmi", "description": "Calculate the Body Mass Index (BMI) of a person.", "parameters": {"type": "dict", "properties": {"weight": {"type": "integer", "description": "Weight of the person in kilograms."}, "height": {"type": "integer", "description": "Height of the person in centimeters."}, "unit": {"type": "string", "description": "Optional parameter to choose between 'imperial' and 'metric' systems. Default is 'metric'."}}, "required": ["weight", "height"]}}, {"name": "celebrity_net_worth.get", "description": "Get the total net worth of a sports celebrity based on most recent data.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The full name of the sports celebrity."}, "currency": {"type": "string", "description": "The currency in which the net worth will be returned. Default is 'USD'."}}, "required": ["name", "currency"]}}]}, "model_result_raw": "<functions><function name=\"calculate_bmi\"><params><param name=\"weight\" value=\"85\" type=\"integer\"/><param name=\"height\" value=\"180\" type=\"integer\"/><param name=\"unit\" value=\"metric\" type=\"string\"/></function></functions>", "possible_answer": [{"calculate_bmi": {"weight": [85], "height": [180], "unit": ["", "metric"]}}]}
{"id": "multiple_118", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 228"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_118", "question": [[{"role": "user", "content": "Find all movies starring Leonardo DiCaprio in the year 2010 from IMDB database."}]], "function": [{"name": "flight.book", "description": "Book a direct flight for a specific date and time from departure location to destination location.", "parameters": {"type": "dict", "properties": {"departure_location": {"type": "string", "description": "The location you are departing from."}, "destination_location": {"type": "string", "description": "The location you are flying to."}, "date": {"type": "string", "description": "The date of the flight. Accepts standard date format e.g., 2022-04-28."}, "time": {"type": "string", "description": "Preferred time of flight. Default is 'anytime'."}, "direct_flight": {"type": "boolean", "description": "If set to true, only direct flights will be searched. Default is false"}}, "required": ["departure_location", "destination_location", "date"]}}, {"name": "lawsuits_search", "description": "Search for lawsuits against a specific company within a specific time and location.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "location": {"type": "string", "description": "The location where the lawsuit was filed."}, "year": {"type": "integer", "description": "The year when the lawsuit was filed."}, "case_type": {"type": "string", "description": "The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. If not specified, search for 'all' types by default."}}, "required": ["company_name", "location", "year"]}}, {"name": "imdb.find_movies_by_actor", "description": "Searches the database to find all movies by a specific actor within a certain year.", "parameters": {"type": "dict", "properties": {"actor_name": {"type": "string", "description": "The name of the actor."}, "year": {"type": "integer", "description": "The specific year to search in."}, "category": {"type": "string", "description": "The category of the film (e.g. Drama, Comedy, etc). This parameter is optional. Default is 'all'."}}, "required": ["actor_name", "year"]}}]}, "model_result_raw": "<functions><function name=\"imdb.find_movies_by_actor\"><params><param name=\"actor_name\" value=\"Leonardo DiCaprio\" type=\"string\"/><param name=\"year\" value=\"2010\" type=\"integer\"/><param name=\"category\" value=\"all\" type=\"string\"/></function></functions>", "possible_answer": [{"imdb.find_movies_by_actor": {"actor_name": ["Leonardo DiCaprio"], "year": [2010], "category": ["", "all"]}}]}
{"id": "multiple_119", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 466"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_119", "question": [[{"role": "user", "content": "Find records in database in user table where age is greater than 25 and job is 'engineer'."}]], "function": [{"name": "average_batting_score", "description": "Get the average batting score of a cricketer for specified past matches.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "Name of the cricket player."}, "matches": {"type": "integer", "description": "Number of past matches to consider for average calculation."}, "match_format": {"type": "string", "description": "Format of the cricket matches considered (e.g., 'T20', 'ODI', 'Test'). Default is 'T20'."}}, "required": ["player_name", "matches"]}}, {"name": "calculate_return_on_investment", "description": "Calculate the return on investment for a given stock based on its purchase price, sale price, and any dividends received.", "parameters": {"type": "dict", "properties": {"purchase_price": {"type": "float", "description": "The price the stock was bought at."}, "sale_price": {"type": "float", "description": "The price the stock was sold at."}, "dividend": {"type": "float", "description": "Any dividends received from the stock.", "default": 0}}, "required": ["purchase_price", "sale_price"]}}, {"name": "database.query", "description": "Query the database based on certain conditions.", "parameters": {"type": "dict", "properties": {"table": {"type": "string", "description": "Name of the table to query."}, "conditions": {"type": "array", "items": {"type": "dict", "properties": {"field": {"type": "string", "description": "The field to apply the condition."}, "operation": {"type": "string", "description": "The operation to be performed.", "enum": ["<", ">", "=", ">=", "<="]}, "value": {"type": "string", "description": "The value to be compared."}}, "required": ["field", "operation", "value"]}, "description": "Conditions for the query."}}, "required": ["table", "conditions"]}}, {"name": "probability_of_event", "description": "Calculates the probability of an event.", "parameters": {"type": "dict", "properties": {"success_outcomes": {"type": "integer", "description": "The number of successful outcomes."}, "total_outcomes": {"type": "integer", "description": "The total number of possible outcomes."}, "format_as_ratio": {"type": "boolean", "description": "When true, formats the output as a ratio instead of a decimal. Default is false."}}, "required": ["success_outcomes", "total_outcomes"]}}]}, "model_result_raw": "<functions><function name=\"database.query\"><params><param name=\"table\" value=\"user\" type=\"string\"/><param name=\"conditions\"><array><dict><param name=\"field\" value=\"age\" type=\"string\"/><param name=\"operation\" value=\">\" type=\"string\"/><param name=\"value\" value=\"25\" type=\"integer\"/></dict><dict><param name=\"field\" value=\"job\" type=\"string\"/><param name=\"operation\" value=\"=\" type=\"string\"/><param name=\"value\" value=\"engineer\" type=\"string\"/></dict></array></param></function></functions>", "possible_answer": [{"database.query": {"table": ["user"], "conditions": [[{"field": ["age"], "operation": [">"], "value": ["25"]}, {"field": ["job"], "operation": ["="], "value": ["engineer"]}]]}}]}
{"id": "multiple_121", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_121", "question": [[{"role": "user", "content": "Calculate the area of a triangle with base 6 and height 10."}]], "function": [{"name": "map_service.get_directions", "description": "Retrieve directions from a starting location to an ending location, including options for route preferences.", "parameters": {"type": "dict", "properties": {"start": {"type": "string", "description": "Starting location for the route."}, "end": {"type": "string", "description": "Ending location for the route."}, "avoid": {"type": "array", "items": {"type": "string", "enum": ["tolls", "highways", "ferries"]}, "description": "Route features to avoid. Default is empty array."}}, "required": ["start", "end"]}}, {"name": "science_history.get_invention", "description": "Retrieve the inventor and year of invention based on the invention's name.", "parameters": {"type": "dict", "properties": {"invention_name": {"type": "string", "description": "The name of the invention."}, "want_year": {"type": "boolean", "default": false, "description": "Return the year of invention if set to true."}}, "required": ["invention_name", "want_year"]}}, {"name": "geometry.area_triangle", "description": "Calculate the area of a triangle.", "parameters": {"type": "dict", "properties": {"base": {"type": "integer", "description": "The length of the base of the triangle."}, "height": {"type": "integer", "description": "The height of the triangle from the base."}, "unit": {"type": "string", "description": "The measurement unit for the area. Defaults to square meters."}}, "required": ["base", "height"]}}]}, "model_result_raw": "<function name=\"geometry.area_triangle\"><param name=\"base\" value=\"6\" type=\"integer\"/><param name=\"height\" value=\"10\" type=\"integer\"/></function>", "model_result_decoded": [], "possible_answer": [{"geometry.area_triangle": {"base": [6], "height": [10], "unit": ["", "square meters"]}}]}
{"id": "multiple_122", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 253"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_122", "question": [[{"role": "user", "content": "Run a linear regression model with predictor variables 'Age', 'Income' and 'Education' and a target variable 'Purchase_Amount'. Also apply standardization."}]], "function": [{"name": "cooking_conversion.convert", "description": "Convert cooking measurements from one unit to another.", "parameters": {"type": "dict", "properties": {"quantity": {"type": "integer", "description": "The quantity to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from."}, "to_unit": {"type": "string", "description": "The unit to convert to."}, "item": {"type": "string", "description": "The item to be converted."}}, "required": ["quantity", "from_unit", "to_unit", "item"]}}, {"name": "run_linear_regression", "description": "Build a linear regression model using given predictor variables and a target variable.", "parameters": {"type": "dict", "properties": {"predictors": {"type": "array", "items": {"type": "string"}, "description": "Array containing the names of predictor variables."}, "target": {"type": "string", "description": "The name of target variable."}, "standardize": {"type": "boolean", "description": "Option to apply standardization on the predictors. Defaults to False."}}, "required": ["predictors", "target"]}}, {"name": "find_recipe", "description": "Locate a recipe based on name and its calorie content", "parameters": {"type": "dict", "properties": {"recipeName": {"type": "string", "description": "The recipe's name."}, "maxCalories": {"type": "integer", "description": "The maximum calorie content of the recipe.", "default": 1000}}, "required": ["recipeName"]}}, {"name": "travel_itinerary_generator", "description": "Generate a travel itinerary based on specific destination, duration and daily budget, with preferred exploration type.", "parameters": {"type": "dict", "properties": {"destination": {"type": "string", "description": "Destination city of the trip."}, "days": {"type": "integer", "description": "Number of days for the trip."}, "daily_budget": {"type": "float", "description": "The maximum daily budget for the trip."}, "exploration_type": {"type": "string", "enum": ["nature", "urban", "history", "culture"], "description": "The preferred exploration type.", "default": "urban"}}, "required": ["destination", "days", "daily_budget"]}}]}, "model_result_raw": "<functions><function name=\"run_linear_regression\"><params><param name=\"predictors\" value=\"['Age', 'Income', 'Education']\" type=\"array\"/><param name=\"target\" value=\"Purchase_Amount\" type=\"string\"/><param name=\"standardize\" value=\"true\" type=\"boolean\"/></function></functions>", "possible_answer": [{"run_linear_regression": {"predictors": [["Age", "Income", "Education"], ["Age", "Education", "Income"], ["Income", "Age", "Education"], ["Income", "Education", "Age"], ["Education", "Age", "Income"], ["Education", "Income", "Age"]], "target": ["Purchase_Amount"], "standardize": [true]}}]}
{"id": "multiple_123", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 224"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_123", "question": [[{"role": "user", "content": "Calculate the probability of drawing a king from a deck of cards."}]], "function": [{"name": "calculate_probability", "description": "Calculate the probability of an event.", "parameters": {"type": "dict", "properties": {"total_outcomes": {"type": "integer", "description": "Total number of possible outcomes."}, "favorable_outcomes": {"type": "integer", "description": "Number of outcomes considered as 'successful'."}, "round_to": {"type": "integer", "description": "Number of decimal places to round the result to.", "default": 2}}, "required": ["total_outcomes", "favorable_outcomes"]}}, {"name": "lawsuit_search", "description": "Retrieve all lawsuits involving a particular entity from specified jurisdiction.", "parameters": {"type": "dict", "properties": {"entity": {"type": "string", "description": "The entity involved in lawsuits."}, "county": {"type": "string", "description": "The jurisdiction for the lawsuit search."}, "state": {"type": "string", "description": "The state for the lawsuit search. Default is California."}}, "required": ["entity", "county"]}}, {"name": "predict_house_price", "description": "Predict house price based on area, number of rooms and year of construction.", "parameters": {"type": "dict", "properties": {"area": {"type": "integer", "description": "Area of the house in square feet."}, "rooms": {"type": "integer", "description": "Number of rooms in the house."}, "year": {"type": "integer", "description": "Year when the house was constructed."}, "location": {"type": "string", "description": "The location or city of the house."}}, "required": ["area", "rooms", "year", "location"]}}]}, "model_result_raw": "<functions><function name=\"calculate_probability\"><params><param name=\"total_outcomes\" value=\"52\" type=\"integer\"/><param name=\"favorable_outcomes\" value=\"4\" type=\"integer\"/><param name=\"round_to\" value=\"0\" type=\"integer\"/></function></functions>", "possible_answer": [{"calculate_probability": {"total_outcomes": [52], "favorable_outcomes": [4], "round_to": ["", 2]}}]}
{"id": "multiple_125", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 235"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_125", "question": [[{"role": "user", "content": "Run a two sample T-test to compare the average of Group A [3, 4, 5, 6, 4] and Group B [7, 8, 9, 8, 7] assuming equal variance."}]], "function": [{"name": "restaurant_search.find_closest", "description": "Locate the closest sushi restaurant based on certain criteria, such as the presence of a patio.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city, for instance Boston, MA"}, "cuisine": {"type": "string", "description": "Type of food like Sushi."}, "amenities": {"type": "array", "items": {"type": "string", "enum": ["Patio", "Wi-Fi", "Happy Hour", "Wheelchair Accessible"]}, "description": "Preferred amenities in the restaurant. Default is empty array."}}, "required": ["location", "cuisine"]}}, {"name": "run_two_sample_ttest", "description": "Runs a two sample t-test for two given data groups.", "parameters": {"type": "dict", "properties": {"group1": {"type": "array", "items": {"type": "integer"}, "description": "First group of data points."}, "group2": {"type": "array", "items": {"type": "integer"}, "description": "Second group of data points."}, "equal_variance": {"type": "boolean", "description": "Assumption about whether the two samples have equal variance.", "default": true}}, "required": ["group1", "group2"]}}, {"name": "get_personality_traits", "description": "Retrieve the common personality traits of people based on their hobbies or activities.", "parameters": {"type": "dict", "properties": {"hobby": {"type": "string", "description": "The hobby or activity of interest."}, "trait_count": {"type": "integer", "description": "The number of top traits to return, default is 5"}}, "required": ["hobby"]}}]}, "model_result_raw": "<functions><function name=\"run_two_sample_ttest\"><params><param name=\"group1\" value=\"[3, 4, 5, 6, 4]\" type=\"array\"/><param name=\"group2\" value=\"[7, 8, 9, 8, 7]\" type=\"array\"/><param name=\"equal_variance\" value=\"True\" type=\"boolean\"/></function></functions>", "possible_answer": [{"run_two_sample_ttest": {"group1": [[3, 4, 5, 6, 4]], "group2": [[7, 8, 9, 8, 7]], "equal_variance": [true, ""]}}]}
{"id": "multiple_126", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 210"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_126", "question": [[{"role": "user", "content": "Find the statistical significance between two set of variables, dataset_A with the values 12, 24, 36 and dataset_B with the values 15, 30, 45."}]], "function": [{"name": "event_finder.find_upcoming", "description": "Find upcoming events of a specific genre in a given location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state where the search will take place, e.g. New York, NY."}, "genre": {"type": "string", "description": "The genre of events."}, "days_ahead": {"type": "integer", "description": "The number of days from now to include in the search.", "default": 7}}, "required": ["location", "genre"]}}, {"name": "t_test", "description": "Perform a statistical t-test to check if the means of two independent datasets are statistically different.", "parameters": {"type": "dict", "properties": {"dataset_A": {"type": "array", "items": {"type": "integer"}, "description": "Dataset A for comparison."}, "dataset_B": {"type": "array", "items": {"type": "integer"}, "description": "Dataset B for comparison."}, "alpha": {"type": "float", "description": "Significance level for the test. Default is 0.05."}}, "required": ["dataset_A", "dataset_B"]}}, {"name": "geometry.area_triangle", "description": "Calculate the area of a triangle.", "parameters": {"type": "dict", "properties": {"base": {"type": "float", "description": "The length of the base of the triangle."}, "height": {"type": "float", "description": "The height of the triangle from the base."}, "unit": {"type": "string", "description": "The measurement unit for the area. Defaults to square meters."}}, "required": ["base", "height"]}}]}, "model_result_raw": "<functions><function name=\"t_test\"><params><param name=\"dataset_A\" value=\"[12, 24, 36]\" type=\"array\"/><param name=\"dataset_B\" value=\"[15, 30, 45]\" type=\"array\"/><param name=\"alpha\" value=\"0.05\" type=\"float\"/></function></functions>", "possible_answer": [{"t_test": {"dataset_A": [[12, 24, 36]], "dataset_B": [[15, 30, 45]], "alpha": ["", 0.05]}}]}
{"id": "multiple_131", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 98"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_131", "question": [[{"role": "user", "content": "Find the market performance of the S&P 500 and the Dow Jones over the past 5 days."}]], "function": [{"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific dietary preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Los Angeles, CA"}, "dietary_preference": {"type": "array", "items": {"type": "string", "enum": ["Vegan", "Vegetarian", "Gluten-free", "Dairy-free", "Nut-free"]}, "description": "Dietary preference. Default is empty array."}}, "required": ["location"]}}, {"name": "market_performance.get_data", "description": "Retrieve the market performance data for specified indexes over a specified time period.", "parameters": {"type": "dict", "properties": {"indexes": {"type": "array", "items": {"type": "string"}, "description": "Array of stock market indexes. Supported indexes are 'S&P 500', 'Dow Jones', 'NASDAQ', 'FTSE 100', 'DAX' etc."}, "days": {"type": "integer", "description": "Number of days in the past for which the performance data is required."}, "detailed": {"type": "boolean", "description": "Whether to return detailed performance data. If set to true, returns high, low, opening, and closing prices. If false, returns only closing prices. Default is false."}}, "required": ["indexes", "days"]}}, {"name": "sports.match_results", "description": "Returns the results of a given match between two teams.", "parameters": {"type": "dict", "properties": {"team1": {"type": "string", "description": "The name of the first team."}, "team2": {"type": "string", "description": "The name of the second team."}, "season": {"type": "string", "description": "The season when the match happened. Default is the current season."}}, "required": ["team1", "team2"]}}]}, "model_result_raw": "<functions><function name=\"market_performance.get_data\"><params><param name=\"indexes\" value=\"['S&P 500', 'Dow Jones']\" type=\"array\"/><param name=\"days\" value=\"5\" type=\"integer\"/><param name=\"detailed\" value=\"false\" type=\"boolean\"/></params></function></functions>", "possible_answer": [{"market_performance.get_data": {"indexes": [["S&P 500", "Dow Jones"]], "days": [5], "detailed": ["", false]}}]}
{"id": "multiple_133", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 230"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_133", "question": [[{"role": "user", "content": "Calculate the balance of a mutual fund given a total investment of $50000 with a 5% annual yield after 3 years."}]], "function": [{"name": "calculate_mutual_fund_balance", "description": "Calculate the final balance of a mutual fund investment based on the total initial investment, annual yield rate and the time period.", "parameters": {"type": "dict", "properties": {"investment_amount": {"type": "integer", "description": "The initial total amount invested in the fund."}, "annual_yield": {"type": "float", "description": "The annual yield rate of the fund."}, "years": {"type": "integer", "description": "The period of time for the fund to mature."}}, "required": ["investment_amount", "annual_yield", "years"]}}, {"name": "geometry.calculate_area_circle", "description": "Calculate the area of a circle given its radius.", "parameters": {"type": "dict", "properties": {"radius": {"type": "float", "description": "The radius of the circle."}, "unit": {"type": "string", "description": "The measurement unit of the radius (optional parameter, default is 'units')."}}, "required": ["radius"]}}]}, "model_result_raw": "<functions><function name=\"calculate_mutual_fund_balance\"><params><param name=\"investment_amount\" value=\"50000\" type=\"integer\"/><param name=\"annual_yield\" value=\"0.05\" type=\"float\"/><param name=\"years\" value=\"3\" type=\"integer\"/></function></functions>", "possible_answer": [{"calculate_mutual_fund_balance": {"investment_amount": [50000], "annual_yield": [0.05], "years": [3]}}]}
{"id": "multiple_134", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 232"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_134", "question": [[{"role": "user", "content": "Look up details of a felony crime record for case number CA123456 in San Diego County"}]], "function": [{"name": "calculate_density", "description": "Calculate the population density of a specific country in a specific year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country for which the density needs to be calculated."}, "year": {"type": "string", "description": "The year in which the density is to be calculated."}, "population": {"type": "integer", "description": "The population of the country."}, "land_area": {"type": "float", "description": "The land area of the country in square kilometers."}}, "required": ["country", "year", "population", "land_area"]}}, {"name": "crime_record.get_record", "description": "Retrieve detailed felony crime records using a specific case number and location.", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "The case number related to the crime."}, "county": {"type": "string", "description": "The county in which the crime occurred."}, "details": {"type": "boolean", "description": "To get a detailed report, set as true. Defaults to false."}}, "required": ["case_number", "county"]}}, {"name": "get_highest_scoring_player", "description": "Retrieve the highest scoring player in a specific game and season.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The game in which you want to find the highest scoring player."}, "season": {"type": "string", "description": "The season during which the high score was achieved."}, "region": {"type": "string", "description": "The geographical region in which the game is being played (Optional). Defaults to 'USA'"}}, "required": ["game", "season"]}}, {"name": "calculate_compound_interest", "description": "Calculates the compound interest of an investment over a given time period.", "parameters": {"type": "dict", "properties": {"principle": {"type": "float", "description": "The initial amount of the investment."}, "interest_rate": {"type": "float", "description": "The yearly interest rate of the investment."}, "time": {"type": "integer", "description": "The time, in years, the money is invested or borrowed for."}, "compounds_per_year": {"type": "integer", "description": "The number of times the interest is compounded per year. Default is 1 (interest is compounded yearly)."}}, "required": ["principle", "interest_rate", "time"]}}]}, "model_result_raw": "<functions><function name=\"crime_record.get_record\"><params><param name=\"case_number\" value=\"CA123456\" type=\"string\"/><param name=\"county\" value=\"San Diego County\" type=\"string\"/><param name=\"details\" value=\"true\" type=\"boolean\"/></function></functions>", "possible_answer": [{"crime_record.get_record": {"case_number": ["CA123456"], "county": ["San Diego", "San Diego County"], "details": [true]}}]}
{"id": "multiple_135", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 216"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_135", "question": [[{"role": "user", "content": "Who was the victim in the case docket numbered 2022/AL2562 in California?"}]], "function": [{"name": "get_case_info", "description": "Retrieve case details using a specific case docket number and court location.", "parameters": {"type": "dict", "properties": {"docket": {"type": "string", "description": "Docket number for the specific court case."}, "court": {"type": "string", "description": "Court in which the case was heard."}, "info_type": {"type": "string", "description": "Specify the information type needed for the case. i.e., victim, accused, verdict etc."}}, "required": ["docket", "court", "info_type"]}}, {"name": "calculate_triangle_area", "description": "Calculate the area of a triangle given its base and height.", "parameters": {"type": "dict", "properties": {"base": {"type": "float", "description": "The base of the triangle."}, "height": {"type": "float", "description": "The height of the triangle."}, "unit": {"type": "string", "description": "The unit of measure (defaults to 'units' if not specified)"}}, "required": ["base", "height"]}}]}, "model_result_raw": "<functions><function name=\"get_case_info\"><params><param name=\"docket\" value=\"2022/AL2562\" type=\"string\"/><param name=\"court\" value=\"California\" type=\"string\"/><param name=\"info_type\" value=\"victim\" type=\"string\"/></function></functions>", "possible_answer": [{"get_case_info": {"docket": ["2022/AL2562"], "court": ["California", "CA"], "info_type": ["victim"]}}]}
{"id": "multiple_136", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 267"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_136", "question": [[{"role": "user", "content": "Provide me the official crime rate of violent crime in San Francisco in 2020."}]], "function": [{"name": "get_crime_rate", "description": "Retrieve the official crime rate of a city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The name of the city."}, "state": {"type": "string", "description": "The state where the city is located."}, "type": {"type": "string", "description": "Optional. The type of crime. Default ''"}, "year": {"type": "integer", "description": "Optional. The year for the crime rate data. Defaults to 2024."}}, "required": ["city", "state"]}}, {"name": "poker_game_winner", "description": "Identify the winner in a poker game based on the cards.", "parameters": {"type": "dict", "properties": {"players": {"type": "array", "items": {"type": "string"}, "description": "Names of the players in a list."}, "cards": {"type": "dict", "description": "An object containing the player name as key and the cards as values in a list."}, "type": {"type": "string", "description": "Type of poker game. Defaults to 'Texas Holdem'"}}, "required": ["players", "cards"]}}]}, "model_result_raw": "<functions><function name=\"get_crime_rate\"><params><param name=\"city\" value=\"San Francisco\" type=\"string\"/><param name=\"state\" value=\"California\" type=\"string\"/><param name=\"type\" value=\"violent crime\" type=\"string\"/><param name=\"year\" value=\"2020\" type=\"integer\"/></function></functions>", "possible_answer": [{"get_crime_rate": {"city": ["San Francisco", "San Francisco, CA", "SF"], "state": ["California", "CA"], "type": ["violent", "Violent"], "year": [2020]}}]}
{"id": "multiple_137", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 273"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_137", "question": [[{"role": "user", "content": "Search for ongoing lawsuits related to the company 'Google' filed after January 1, 2021 in California."}]], "function": [{"name": "lawsuit_search", "description": "Search for lawsuits related to a specific company within a specific date range and location.", "parameters": {"type": "dict", "properties": {"company": {"type": "string", "description": "The company related to the lawsuit."}, "start_date": {"type": "string", "description": "Start of the date range for when the lawsuit was filed."}, "location": {"type": "string", "description": "Location where the lawsuit was filed."}, "status": {"type": "string", "enum": ["ongoing", "settled", "dismissed"], "description": "The status of the lawsuit. Default is 'ongoing'."}}, "required": ["company", "start_date", "location"]}}, {"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "dict", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional). Default is 'USA'."}}, "required": ["items", "quantities"]}}, {"name": "event_finder.find_upcoming", "description": "Find upcoming events of a specific genre in a given location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state where the search will take place, e.g. New York, NY."}, "genre": {"type": "string", "description": "The genre of events."}, "days_ahead": {"type": "integer", "description": "The number of days from now to include in the search.", "default": 7}}, "required": ["location", "genre"]}}]}, "model_result_raw": "<functions><function name=\"lawsuit_search\"><params><param name=\"company\" value=\"Google\" type=\"string\"/><param name=\"start_date\" value=\"2021-01-01\" type=\"string\"/><param name=\"location\" value=\"California\" type=\"string\"/><param name=\"status\" value=\"ongoing\" type=\"string\"/></function></functions>", "possible_answer": [{"lawsuit_search": {"company": ["Google"], "start_date": ["2021-01-01", "01/01/2021", "Jan.1,2021", "January 1, 2021"], "location": ["California", "CA"], "status": ["ongoing", ""]}}]}
{"id": "multiple_138", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 162"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_138", "question": [[{"role": "user", "content": "How to obtain the detailed case information of the R vs Adams legal case?"}]], "function": [{"name": "park_information", "description": "Retrieve the basic information such as elevation and area of a national park.", "parameters": {"type": "dict", "properties": {"park_name": {"type": "string", "description": "The name of the national park."}, "information": {"type": "array", "items": {"type": "string", "enum": ["Elevation", "Area", "Location", "Established Year"]}, "description": "The type of information you want about the park."}}, "required": ["park_name", "information"]}}, {"name": "legal_case.fetch", "description": "Fetch detailed legal case information from database.", "parameters": {"type": "dict", "properties": {"case_id": {"type": "string", "description": "The ID of the legal case."}, "details": {"type": "boolean", "description": "True if need the detail info. Default is false."}}, "required": ["case_id", "details"]}}, {"name": "calculate_stock_return", "description": "Calculate the projected return of a stock investment given the investment amount, the annual growth rate and holding period in years.", "parameters": {"type": "dict", "properties": {"investment_amount": {"type": "float", "description": "The amount of money to invest."}, "annual_growth_rate": {"type": "float", "description": "The expected annual growth rate of the stock."}, "holding_period": {"type": "integer", "description": "The number of years you intend to hold the stock."}, "include_dividends": {"type": "boolean", "description": "Optional. True if the calculation should take into account potential dividends. Default is false."}}, "required": ["investment_amount", "annual_growth_rate", "holding_period"]}}]}, "model_result_raw": "<functions><function name=\"legal_case.fetch\"><params><param name=\"case_id\" value=\"R vs Adams\" type=\"string\"/><param name=\"details\" value=\"true\" type=\"boolean\"/></param></function></functions>", "possible_answer": [{"legal_case.fetch": {"case_id": ["R vs Adams", "R_vs_Adams"], "details": [true]}}]}
{"id": "multiple_140", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 267"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_140", "question": [[{"role": "user", "content": "Find the lawsuits filed against the company Google in California in the year 2020."}]], "function": [{"name": "lawsuits_search", "description": "Search for lawsuits against a specific company within a specific time and location.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "location": {"type": "string", "description": "The location where the lawsuit was filed."}, "year": {"type": "integer", "description": "The year when the lawsuit was filed."}, "case_type": {"type": "string", "description": "The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. If not specified, search for all types. Default is 'all'"}}, "required": ["company_name", "location", "year"]}}, {"name": "hilton_hotel.check_availability", "description": "Check hotel availability for a specific location and time frame.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you want to check hotel availability."}, "check_in_date": {"type": "string", "description": "The check-in date in the format YYYY-MM-DD."}, "check_out_date": {"type": "string", "description": "The check-out date in the format YYYY-MM-DD."}, "no_of_adults": {"type": "integer", "description": "The number of adults for the hotel booking."}, "hotel_chain": {"type": "string", "description": "The hotel chain where you want to book the hotel.", "default": "Hilton"}}, "required": ["location", "check_in_date", "check_out_date", "no_of_adults"]}}]}, "model_result_raw": "<functions><function name=\"lawsuits_search\"><params><param name=\"company_name\" value=\"Google\" type=\"string\"/><param name=\"location\" value=\"California\" type=\"string\"/><param name=\"year\" value=\"2020\" type=\"integer\"/><param name=\"case_type\" value=\"all\" type=\"string\"/></function></functions>", "possible_answer": [{"lawsuits_search": {"company_name": ["Google"], "location": ["California", "CA"], "year": [2020], "case_type": ["", "all"]}}]}
{"id": "multiple_141", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 165"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_141", "question": [[{"role": "user", "content": "I need the details of the lawsuit case with case ID of 1234 and verify if it's already closed."}]], "function": [{"name": "get_protein_sequence", "description": "Retrieve the protein sequence encoded by a human gene.", "parameters": {"type": "dict", "properties": {"gene": {"type": "string", "description": "The human gene of interest."}, "species": {"type": "string", "description": "The species for which the gene is to be analyzed.", "default": "Homo sapiens"}}, "required": ["gene"]}}, {"name": "route.estimate_time", "description": "Estimate the travel time for a specific route with optional stops.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting point for the journey."}, "end_location": {"type": "string", "description": "The destination for the journey."}, "stops": {"type": "array", "items": {"type": "string"}, "description": "Additional cities or points of interest to stop at during the journey. Default is an empty array."}}, "required": ["start_location", "end_location"]}}, {"name": "lawsuit.check_case", "description": "Verify the details of a lawsuit case and check its status using case ID.", "parameters": {"type": "dict", "properties": {"case_id": {"type": "integer", "description": "The identification number of the lawsuit case."}, "closed_status": {"type": "boolean", "description": "The status of the lawsuit case to be verified."}}, "required": ["case_id", "closed_status"]}}]}, "model_result_raw": "<functions><function name=\"lawsuit.check_case\"><params><param name=\"case_id\" value=\"1234\" type=\"integer\"/><param name=\"closed_status\" value=\"true\" type=\"boolean\"/></function></functions>", "possible_answer": [{"lawsuit.check_case": {"case_id": [1234], "closed_status": [true]}}]}
{"id": "multiple_142", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 223"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_142", "question": [[{"role": "user", "content": "What is the humidity level in Miami, Florida in the upcoming 7 days?"}]], "function": [{"name": "weather.humidity_forecast", "description": "Retrieve a humidity forecast for a specific location and time frame.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the humidity for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}, "min_humidity": {"type": "integer", "description": "Minimum level of humidity (in percentage) to filter the result. Optional parameter. Default is 0."}}, "required": ["location", "days"]}}, {"name": "get_team_score", "description": "Retrieves the latest game score, individual player stats, and team stats for a specified sports team.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "league": {"type": "string", "description": "The league that the team is part of."}, "include_player_stats": {"type": "boolean", "default": false, "description": "Indicates if individual player statistics should be included in the result. Default is false."}}, "required": ["team_name", "league"]}}]}, "model_result_raw": "<functions><function name=\"weather.humidity_forecast\"><params><param name=\"location\" value=\"Miami, Florida\" type=\"string\"/><param name=\"days\" value=\"7\" type=\"integer\"/><param name=\"min_humidity\" value=\"0\" type=\"integer\"/></function></functions>", "possible_answer": [{"weather.humidity_forecast": {"location": ["Miami", "Miami, Florida", "FL"], "days": [7], "min_humidity": ["", 0]}}]}
{"id": "multiple_143", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_143", "question": [[{"role": "user", "content": "Calculate the slope gradient in degree between two points on a landscape with coordinates (40.7128, -74.0060) and (34.0522, -118.2437)."}]], "function": [{"name": "create_player_profile", "description": "Create a new player profile with character name, class and starting level.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The desired name of the player."}, "_class": {"type": "string", "description": "The character class for the player"}, "starting_level": {"type": "integer", "description": "The starting level for the player", "default": 1}}, "required": ["player_name", "_class"]}}, {"name": "poker_probability.full_house", "description": "Calculate the probability of getting a full house in a poker game.", "parameters": {"type": "dict", "properties": {"deck_size": {"type": "integer", "description": "The size of the deck. Default is 52."}, "hand_size": {"type": "integer", "description": "The size of the hand. Default is 5."}}, "required": ["deck_size", "hand_size"]}}, {"name": "concert.find_nearby", "description": "Locate nearby concerts based on specific criteria like genre.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Seattle, WA"}, "genre": {"type": "string", "description": "Genre of music to be played at the concert."}}, "required": ["location", "genre"]}}, {"name": "calculate_slope_gradient", "description": "Calculate the slope gradient between two geographical coordinates.", "parameters": {"type": "dict", "properties": {"point1": {"type": "array", "items": {"type": "float"}, "description": "The geographic coordinates for the first point [Latitude, Longitude]."}, "point2": {"type": "array", "items": {"type": "float"}, "description": "The geographic coordinates for the second point [Latitude, Longitude]."}, "unit": {"type": "string", "enum": ["degree", "percent", "ratio"], "description": "The unit for the slope gradient. Default is 'degree'."}}, "required": ["point1", "point2"]}}]}, "model_result_raw": "<function name=\"calculate_slope_gradient\"><param name=\"point1\" value=\"[40.7128, -74.0060]\" type=\"array\"/><param name=\"point2\" value=\"[34.0522, -118.2437]\" type=\"array\"/><param name=\"unit\" value=\"degree\" type=\"string\"/></function>", "model_result_decoded": [], "possible_answer": [{"calculate_slope_gradient": {"point1": [[40.7128, -74.006]], "point2": [[34.0522, -118.2437]], "unit": ["degree", ""]}}]}
{"id": "multiple_146", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 226"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_146", "question": [[{"role": "user", "content": "Find restaurants near me within 10 miles that offer Chinese cuisine in Seattle."}]], "function": [{"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific criteria like cuisine type.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Seattle, WA"}, "cuisine": {"type": "string", "description": "Preferred type of cuisine in restaurant."}, "max_distance": {"type": "integer", "description": "Maximum distance (in miles) within which to search for restaurants. Default is 5."}}, "required": ["location", "cuisine"]}}, {"name": "ecology_data.precipitation_stats", "description": "Retrieve precipitation data for a specified location and time period.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The name of the location, e.g., 'Amazon rainforest'."}, "time_frame": {"type": "string", "enum": ["six_months", "year", "five_years"], "description": "The time period for which data is required."}}, "required": ["location", "time_frame"]}}]}, "model_result_raw": "<functions><function name=\"restaurant.find_nearby\"><params><param name=\"location\" value=\"Seattle, WA\" type=\"string\"/><param name=\"cuisine\" value=\"Chinese\" type=\"string\"/><param name=\"max_distance\" value=\"10\" type=\"integer\"/></function></functions>", "possible_answer": [{"restaurant.find_nearby": {"location": ["Seattle", "Seattle, WA"], "cuisine": ["Chinese"], "max_distance": [10]}}]}
{"id": "multiple_147", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 230"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_147", "question": [[{"role": "user", "content": "Get me the directions from New York to Los Angeles avoiding highways and toll roads."}]], "function": [{"name": "map_service.get_directions", "description": "Retrieve directions from a starting location to an ending location, including options for route preferences.", "parameters": {"type": "dict", "properties": {"start": {"type": "string", "description": "Starting location for the route."}, "end": {"type": "string", "description": "Ending location for the route."}, "avoid": {"type": "array", "items": {"type": "string", "enum": ["tolls", "highways", "ferries"]}, "description": "Route features to avoid. Default is an empty array."}}, "required": ["start", "end"]}}, {"name": "convert_currency", "description": "Converts an amount from a particular currency to another currency.", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The base currency in which the original amount is present."}, "target_currency": {"type": "string", "description": "The currency to which you want to convert."}, "amount": {"type": "integer", "description": "The amount you want to convert."}}, "required": ["base_currency", "target_currency", "amount"]}}, {"name": "ecology.get_turtle_population", "description": "Get the population and species of turtles in a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The name of the location."}, "year": {"type": "integer", "description": "The year of the data requested. (optional) Default is 2024."}, "species": {"type": "boolean", "description": "Whether to include species information. Default is false. (optional)"}}, "required": ["location"]}}]}, "model_result_raw": "<functions><function name=\"map_service.get_directions\"><params><param name=\"start\" value=\"New York\" type=\"string\"/><param name=\"end\" value=\"Los Angeles\" type=\"string\"/><param name=\"avoid\" value=\"[tolls, highways]\" type=\"array\"/></function></functions>", "possible_answer": [{"map_service.get_directions": {"start": ["New York", "New York, NY", "NYC"], "end": ["Los Angeles", "LA"], "avoid": [["highways", "tolls"], ["tolls", "highways"]]}}]}
{"id": "multiple_149", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 208"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_149", "question": [[{"role": "user", "content": "Analyze the sentiment of a customer review 'I love the food here! It's always fresh and delicious.'."}]], "function": [{"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}, {"name": "sentiment_analysis", "description": "Perform sentiment analysis on a given piece of text.", "parameters": {"type": "dict", "properties": {"text": {"type": "string", "description": "The text on which to perform sentiment analysis."}, "language": {"type": "string", "description": "The language in which the text is written."}}, "required": ["text", "language"]}}, {"name": "get_time_difference", "description": "Get the time difference between two places.", "parameters": {"type": "dict", "properties": {"place1": {"type": "string", "description": "The first place for time difference."}, "place2": {"type": "string", "description": "The second place for time difference."}}, "required": ["place1", "place2"]}}, {"name": "calculate_bmi", "description": "Calculate the Body Mass Index (BMI) for a person based on their weight and height.", "parameters": {"type": "dict", "properties": {"weight": {"type": "integer", "description": "The weight of the person in kilograms."}, "height": {"type": "integer", "description": "The height of the person in centimeters."}, "system": {"type": "string", "description": "The system of units to be used, 'metric' or 'imperial'. Default is 'metric'."}}, "required": ["weight", "height"]}}]}, "model_result_raw": "<functions><function name=\"sentiment_analysis\"><params><param name=\"text\" value=\"I love the food here! It's always fresh and delicious.\" type=\"string\"/><param name=\"language\" value=\"english\" type=\"string\"/></function></functions>", "possible_answer": [{"sentiment_analysis": {"text": ["I love the food here! It's always fresh and delicious."], "language": ["english", "English"]}}]}
{"id": "multiple_151", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 259"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_151", "question": [[{"role": "user", "content": "Find the most followed person on twitter who tweets about psychology related to behaviour and group dynamics."}]], "function": [{"name": "social_media_analytics.most_followed", "description": "Find the most followed Twitter user related to certain topics.", "parameters": {"type": "dict", "properties": {"topic": {"type": "string", "description": "The main topic of interest."}, "sub_topics": {"type": "array", "items": {"type": "string"}, "description": "Sub-topics related to main topic, Optional. Default is an empty list."}, "region": {"type": "string", "description": "Region of interest for twitter search, Optional. Default is 'global'."}}, "required": ["topic"]}}, {"name": "calculate_probability", "description": "Calculate the probability of an event.", "parameters": {"type": "dict", "properties": {"total_outcomes": {"type": "integer", "description": "Total number of possible outcomes."}, "favorable_outcomes": {"type": "integer", "description": "Number of outcomes considered as 'successful'."}, "round_to": {"type": "integer", "description": "Number of decimal places to round the result to.", "default": 2}}, "required": ["total_outcomes", "favorable_outcomes"]}}, {"name": "concert_info.get", "description": "Retrieve information about concerts based on specific genre, location and date.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the concert will take place."}, "date": {"type": "string", "description": "Time frame to get the concert for."}, "genre": {"type": "string", "description": "Genre of the concert.", "enum": ["Pop", "Rock", "Country", "Classical", "Electronic", "Hip-Hop"]}}, "required": ["location", "date", "genre"]}}]}, "model_result_raw": "<functions><function name=\"social_media_analytics.most_followed\"><params><param name=\"topic\" value=\"psychology\" type=\"string\"/><param name=\"sub_topics\" value=\"['behaviour', 'group dynamics']\" type=\"array\"/><param name=\"region\" value=\"global\" type=\"string\"/></function></functions>", "possible_answer": [{"social_media_analytics.most_followed": {"topic": ["psychology", "Psychology"], "sub_topics": [["behaviour", "group dynamics"], ["group dynamics", "behaviour"]], "region": ["", "global"]}}]}
{"id": "multiple_152", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 275"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_152", "question": [[{"role": "user", "content": "Provide key war events in German history from 1871 to 1945."}]], "function": [{"name": "history.get_key_events", "description": "Retrieve key historical events within a specific period for a certain country.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The name of the country for which history is queried."}, "start_year": {"type": "integer", "description": "Start year of the period for which history is queried."}, "end_year": {"type": "integer", "description": "End year of the period for which history is queried."}, "event_type": {"type": "array", "items": {"type": "string", "enum": ["War", "Revolutions", "Diplomacy", "Economy"]}, "description": "Types of event. If none is provided, all types will be considered. Default is ['all']."}}, "required": ["country", "start_year", "end_year"]}}, {"name": "get_sculpture_value", "description": "Retrieve the current market value of a particular sculpture by a specific artist.", "parameters": {"type": "dict", "properties": {"sculpture": {"type": "string", "description": "The name of the sculpture."}, "artist": {"type": "string", "description": "The name of the artist who created the sculpture."}, "year": {"type": "integer", "description": "The year the sculpture was created. This is optional and is not required for all sculptures. Default is the 2024."}}, "required": ["sculpture", "artist"]}}]}, "model_result_raw": "<functions><function name=\"history.get_key_events\"><params><param name=\"country\" value=\"Germany\" type=\"string\"/><param name=\"start_year\" value=\"1871\" type=\"integer\"/><param name=\"end_year\" value=\"1945\" type=\"integer\"/><param name=\"event_type\" value=\"['War']\" type=\"array\"/></function></functions>", "possible_answer": [{"history.get_key_events": {"country": ["Germany"], "start_year": [1871], "end_year": [1945], "event_type": [["War"]]}}]}
{"id": "multiple_153", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 128"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_153", "question": [[{"role": "user", "content": "When was the signing of the Treaty of Lisbon?"}]], "function": [{"name": "locate_tallest_mountains", "description": "Find the tallest mountains within a specified radius of a location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city from which to calculate distance."}, "radius": {"type": "float", "description": "The radius within which to find mountains, measured in kilometers."}, "amount": {"type": "integer", "description": "The number of mountains to find, listed from tallest to smallest."}}, "required": ["location", "radius", "amount"]}}, {"name": "calculate_entropy_change", "description": "Calculate the entropy change for an isothermal and reversible process.", "parameters": {"type": "dict", "properties": {"initial_temp": {"type": "float", "description": "The initial temperature in Kelvin."}, "final_temp": {"type": "float", "description": "The final temperature in Kelvin."}, "heat_capacity": {"type": "float", "description": "The heat capacity in J/K."}, "isothermal": {"type": "boolean", "description": "Whether the process is isothermal. Default is True."}}, "required": ["initial_temp", "final_temp", "heat_capacity"]}}, {"name": "get_event_date", "description": "Retrieve the date of a historical event.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The name of the historical event."}, "location": {"type": "string", "description": "Location where the event took place. Defaults to global if not specified"}}, "required": ["event"]}}]}, "model_result_raw": "<functions><function name=\"get_event_date\"><params><param name=\"event\" value=\"Signing of the Treaty of Lisbon\" type=\"string\"/></function></functions>", "possible_answer": [{"get_event_date": {"event": ["Treaty of Lisbon", "Signing of the Treaty of Lisbon"], "location": ["", "global", "Lisbon", "Lisbon, Portugal"]}}]}
{"id": "multiple_155", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 158"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_155", "question": [[{"role": "user", "content": "Who discovered the neutron? Give me detail information."}]], "function": [{"name": "get_discoverer", "description": "Get the person or team who made a particular scientific discovery", "parameters": {"type": "dict", "properties": {"discovery": {"type": "string", "description": "The discovery for which the discoverer's information is needed."}, "detail": {"type": "boolean", "description": "Optional flag to get additional details about the discoverer, such as birth date and nationality. Defaults to false."}}, "required": ["discovery", "detail"]}}, {"name": "diabetes_prediction", "description": "Predict the likelihood of diabetes type 2 based on a person's weight and height.", "parameters": {"type": "dict", "properties": {"weight": {"type": "float", "description": "Weight of the person in lbs."}, "height": {"type": "float", "description": "Height of the person in inches."}, "activity_level": {"type": "string", "enum": ["sedentary", "lightly active", "moderately active", "very active", "extra active"], "description": "Physical activity level of the person."}}, "required": ["weight", "height", "activity_level"]}}, {"name": "museum_working_hours.get", "description": "Get the working hours of a museum in a specific location.", "parameters": {"type": "dict", "properties": {"museum": {"type": "string", "description": "The name of the museum."}, "location": {"type": "string", "description": "The location of the museum."}, "day": {"type": "string", "description": "Specific day of the week. Optional parameter. Default is 'today'."}}, "required": ["museum", "location"]}}]}, "model_result_raw": "<functions><function name=\"get_discoverer\"><params><param name=\"discovery\" value=\"neutron\" type=\"string\"/><param name=\"detail\" value=\"true\" type=\"boolean\"/></function></functions>", "possible_answer": [{"get_discoverer": {"discovery": ["neutron"], "detail": [true]}}]}
{"id": "multiple_156", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 235"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_156", "question": [[{"role": "user", "content": "What was Albert Einstein's contribution to science on March 17, 1915?"}]], "function": [{"name": "historical_contrib.get_contrib", "description": "Retrieve historical contribution made by a scientist on a specific date.", "parameters": {"type": "dict", "properties": {"scientist": {"type": "string", "description": "The scientist whose contributions need to be searched."}, "date": {"type": "string", "description": "The date when the contribution was made in yyyy-mm-dd format."}, "category": {"type": "string", "description": "The field of the contribution, such as 'Physics' or 'Chemistry'. Default is all fields."}}, "required": ["scientist", "date"]}}, {"name": "music.calculate_note_duration", "description": "Calculate the duration between two notes based on their frequencies and harmonic rhythm.", "parameters": {"type": "dict", "properties": {"first_note_frequency": {"type": "float", "description": "The frequency of the first note in Hz."}, "second_note_frequency": {"type": "float", "description": "The frequency of the second note in Hz."}, "tempo": {"type": "integer", "description": "The tempo of the music in beats per minute. Defaults to 120 beats per minute."}}, "required": ["first_note_frequency", "second_note_frequency"]}}, {"name": "math.gcd", "description": "Calculate the greatest common divisor of two integers.", "parameters": {"type": "dict", "properties": {"num1": {"type": "integer", "description": "First number."}, "num2": {"type": "integer", "description": "Second number."}}, "required": ["num1", "num2"]}}]}, "model_result_raw": "<functions><function name=\"historical_contrib.get_contrib\"><params><param name=\"scientist\" value=\"Albert Einstein\" type=\"string\"/><param name=\"date\" value=\"1915-03-17\" type=\"string\"/><param name=\"category\" value=\"all\" type=\"string\"/></function></functions>", "possible_answer": [{"historical_contrib.get_contrib": {"scientist": ["Albert Einstein"], "date": ["1915-03-17", "03/17/1915", "Mar.17,1915"], "category": ["", "all"]}}]}
{"id": "multiple_161", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 279"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_161", "question": [[{"role": "user", "content": "Find the top rated modern sculpture exhibition happening in New York in the upcoming month."}]], "function": [{"name": "card_game_probability.calculate", "description": "Calculate the probability of drawing a certain card or suit from a deck of cards.", "parameters": {"type": "dict", "properties": {"total_cards": {"type": "integer", "description": "Total number of cards in the deck."}, "desired_cards": {"type": "integer", "description": "Number of cards in the deck that satisfy the conditions."}, "cards_drawn": {"type": "integer", "default": 1, "description": "Number of cards drawn from the deck."}}, "required": ["total_cards", "desired_cards"]}}, {"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the exhibition is held, e.g., New York, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold. Default is 'high'"}}, "required": ["location", "art_form"]}}, {"name": "get_sculpture_info", "description": "Retrieves the most recent artwork by a specified artist with its detailed description.", "parameters": {"type": "dict", "properties": {"artist_name": {"type": "string", "description": "The name of the artist."}, "year": {"type": "integer", "description": "Year of the sculpture. This is optional. Default 2024"}, "detail": {"type": "boolean", "description": "If True, it provides detailed description of the sculpture. Defaults to False."}}, "required": ["artist_name"]}}]}, "model_result_raw": "<functions><function name=\"find_exhibition\"><params><param name=\"location\" value=\"New York\" type=\"string\"/><param name=\"art_form\" value=\"modern sculpture\" type=\"string\"/><param name=\"month\" value=\"upcoming\" type=\"string\"/><param name=\"user_ratings\" value=\"high\" type=\"string\"/></function></functions>", "possible_answer": [{"find_exhibition": {"location": ["New York", "New York, NY", "New York City", "NYC", "NY"], "art_form": ["sculpture", "modern sculpture"], "month": ["upcoming", "next month", "upcoming month", "next", ""], "user_ratings": ["high", ""]}}]}
{"id": "multiple_162", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 214"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_162", "question": [[{"role": "user", "content": "What is the structural dynamic analysis of the building with building Id B1004 for 2nd, 3rd and 4th floors?"}]], "function": [{"name": "player_statistic", "description": "Retrieves detailed player's statistics for a specific year.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The player's name."}, "year": {"type": "integer", "description": "Year for which the statistics will be displayed."}, "team_name": {"type": "string", "description": "The name of the team(optional). Default is 'all'"}}, "required": ["player_name", "year"]}}, {"name": "analyze_structure", "description": "Analyze a structure of a building based on its Id and floor numbers.", "parameters": {"type": "dict", "properties": {"building_id": {"type": "string", "description": "The unique identification number of the building."}, "floors": {"type": "array", "items": {"type": "integer"}, "description": "Floor numbers to be analyzed."}, "mode": {"type": "string", "description": "Mode of analysis, e.g. 'static' or 'dynamic'. Default is 'static'."}}, "required": ["building_id", "floors"]}}]}, "model_result_raw": "<functions><function name=\"analyze_structure\"><params><param name=\"building_id\" value=\"B1004\" type=\"string\"/><param name=\"floors\" value=\"[2, 3, 4]\" type=\"array\"/><param name=\"mode\" value=\"dynamic\" type=\"string\"/></param></function></functions>", "possible_answer": [{"analyze_structure": {"building_id": ["B1004"], "floors": [[2, 3, 4]], "mode": ["dynamic"]}}]}
{"id": "multiple_163", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 178"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_163", "question": [[{"role": "user", "content": "Get the list of top 5 popular artworks at the Metropolitan Museum of Art. Please sort by popularity."}]], "function": [{"name": "metropolitan_museum.get_top_artworks", "description": "Fetches the list of popular artworks at the Metropolitan Museum of Art. Results can be sorted based on popularity.", "parameters": {"type": "dict", "properties": {"number": {"type": "integer", "description": "The number of artworks to fetch"}, "sort_by": {"type": "string", "description": "The criteria to sort the results on. Default is ''.", "enum": ["popularity", "chronological", "alphabetical"]}}, "required": ["number"]}}, {"name": "lawsuit_search", "description": "Search for lawsuits related to a specific company within a specific date range and location.", "parameters": {"type": "dict", "properties": {"company": {"type": "string", "description": "The company related to the lawsuit."}, "start_date": {"type": "string", "description": "Start of the date range for when the lawsuit was filed."}, "location": {"type": "string", "description": "Location where the lawsuit was filed."}, "status": {"type": "string", "enum": ["ongoing", "settled", "dismissed"], "description": "The status of the lawsuit. Default is 'ongoing'."}}, "required": ["company", "start_date", "location"]}}]}, "model_result_raw": "<functions><function name=\"metropolitan_museum.get_top_artworks\"><params><param name=\"number\" value=\"5\" type=\"integer\"/><param name=\"sort_by\" value=\"popularity\" type=\"string\"/></function></functions>", "possible_answer": [{"metropolitan_museum.get_top_artworks": {"number": [5], "sort_by": ["popularity"]}}]}
{"id": "multiple_167", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_167", "question": [[{"role": "user", "content": "Generate a melody in C major scale, starting with the note C4, 16 measures long, at 120 beats per minute."}]], "function": [{"name": "calculate_density", "description": "Calculate the population density of a specific country in a specific year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country for which the density needs to be calculated."}, "year": {"type": "string", "description": "The year in which the density is to be calculated."}, "population": {"type": "integer", "description": "The population of the country."}, "land_area": {"type": "float", "description": "The land area of the country in square kilometers."}}, "required": ["country", "year", "population", "land_area"]}}, {"name": "get_directions", "description": "Retrieve directions from one location to another.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting point of the journey."}, "end_location": {"type": "string", "description": "The destination point of the journey."}, "route_type": {"type": "string", "description": "Type of route to use (e.g., fastest, scenic). Default is fastest.", "enum": ["fastest", "scenic"]}}, "required": ["start_location", "end_location"]}}, {"name": "music_generator.generate_melody", "description": "Generate a melody based on certain musical parameters.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The key of the melody. E.g., 'C' for C major."}, "start_note": {"type": "string", "description": "The first note of the melody, specified in scientific pitch notation. E.g., 'C4'."}, "length": {"type": "integer", "description": "The number of measures in the melody."}, "tempo": {"type": "integer", "description": "The tempo of the melody, in beats per minute. Optional parameter. If not specified, defaults to 120."}}, "required": ["key", "start_note", "length"]}}]}, "model_result_raw": "<music_generator.generate_melody><param name=\"key\" value=\"C\" type=\"string\"/><param name=\"start_note\" value=\"C4\" type=\"string\"/><param name=\"length\" value=\"16\" type=\"integer\"/><param name=\"tempo\" value=\"120\" type=\"integer\"/></music_generator.generate_melody>", "model_result_decoded": [], "possible_answer": [{"music_generator.generate_melody": {"key": ["C"], "start_note": ["C4"], "length": [16], "tempo": [120, ""]}}]}
{"id": "multiple_168", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 225"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_168", "question": [[{"role": "user", "content": "Find the lyrics to the song 'Bohemian Rhapsody' by Queen."}]], "function": [{"name": "get_stock_price", "description": "Retrieves the current stock price of the specified companies", "parameters": {"type": "dict", "properties": {"company_names": {"type": "array", "items": {"type": "string"}, "description": "The list of companies for which to retrieve the stock price."}}, "required": ["company_names"]}}, {"name": "get_song_lyrics", "description": "Retrieve the lyrics of a song based on the artist's name and song title.", "parameters": {"type": "dict", "properties": {"song_title": {"type": "string", "description": "The title of the song."}, "artist_name": {"type": "string", "description": "The name of the artist who performed the song."}, "lang": {"type": "string", "description": "The language of the lyrics. Default is English.", "enum": ["English", "French", "Spanish", "German", "Italian"]}}, "required": ["song_title", "artist_name"]}}, {"name": "park_information", "description": "Retrieve the basic information such as elevation and area of a national park.", "parameters": {"type": "dict", "properties": {"park_name": {"type": "string", "description": "The name of the national park."}, "information": {"type": "array", "items": {"type": "string", "enum": ["Elevation", "Area", "Location", "Established Year"]}, "description": "The type of information you want about the park."}}, "required": ["park_name", "information"]}}]}, "model_result_raw": "<functions><function name=\"get_song_lyrics\"><params><param name=\"song_title\" value=\"Bohemian Rhapsody\" type=\"string\"/><param name=\"artist_name\" value=\"Queen\" type=\"string\"/><param name=\"lang\" value=\"English\" type=\"string\"/></function></functions>", "possible_answer": [{"get_song_lyrics": {"song_title": ["Bohemian Rhapsody"], "artist_name": ["Queen"], "lang": ["English", ""]}}]}
{"id": "multiple_169", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_169", "question": [[{"role": "user", "content": "What is the musical scale associated with C sharp major?"}]], "function": [{"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is an empty array"}}, "required": ["loc", "product_list"]}}, {"name": "musical_scale", "description": "Get the musical scale of a specific key in music theory.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The musical key for which the scale will be found."}, "scale_type": {"type": "string", "default": "major", "description": "The type of musical scale."}}, "required": ["key"]}}]}, "model_result_raw": "<musical_scale name=\"musical_scale\"><param name=\"key\" value=\"C sharp\" type=\"string\"/><param name=\"scale_type\" value=\"major\" type=\"string\"/></musical_scale>", "model_result_decoded": [], "possible_answer": [{"musical_scale": {"key": ["C#", "C sharp"], "scale_type": ["major", ""]}}]}
{"id": "multiple_173", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 152"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_173", "question": [[{"role": "user", "content": "Get the NBA team's ranking with the best defence in the 2021 season."}]], "function": [{"name": "get_defense_ranking", "description": "Retrieve the defence ranking of NBA teams in a specified season.", "parameters": {"type": "dict", "properties": {"season": {"type": "integer", "description": "The NBA season to get defence ranking from."}, "top": {"type": "integer", "default": 1, "description": "Number of top teams in defence ranking to fetch."}}, "required": ["season"]}}, {"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "dict", "properties": {"list": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting. If not specified, it will default to ascending."}}, "required": ["list", "order"]}}, {"name": "calculate_cagr", "description": "Calculate the Compound Annual Growth Rate (CAGR) given an initial investment value, a final investment value, and the number of years.", "parameters": {"type": "dict", "properties": {"initial_value": {"type": "float", "description": "The initial investment value."}, "final_value": {"type": "float", "description": "The final investment value."}, "period_in_years": {"type": "integer", "description": "The period of the investment in years."}}, "required": ["initial_value", "final_value", "period_in_years"]}}]}, "model_result_raw": "<functions><function name=\"get_defense_ranking\"><params><param name=\"season\" value=\"2021\" type=\"integer\"/><param name=\"top\" value=\"1\" type=\"integer\"/></function></functions>", "possible_answer": [{"get_defense_ranking": {"season": [2021], "top": [1, ""]}}]}
{"id": "multiple_174", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 172"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_174", "question": [[{"role": "user", "content": "What is the ranking of Manchester United in Premier League?"}]], "function": [{"name": "sports_ranking", "description": "Fetch the ranking of a specific sports team in a specific league", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "The name of the team."}, "league": {"type": "string", "description": "The name of the league."}, "season": {"type": "integer", "description": "Optional parameter to specify the season, default is the current season, 2024"}}, "required": ["team", "league"]}}, {"name": "calculate_compound_interest", "description": "Calculates the compound interest of an investment over a given time period.", "parameters": {"type": "dict", "properties": {"principle": {"type": "float", "description": "The initial amount of the investment."}, "interest_rate": {"type": "float", "description": "The yearly interest rate of the investment."}, "time": {"type": "integer", "description": "The time, in years, the money is invested or borrowed for."}, "compounds_per_year": {"type": "integer", "description": "The number of times the interest is compounded per year. Default is 1 (interest is compounded yearly)."}}, "required": ["principle", "interest_rate", "time"]}}]}, "model_result_raw": "<functions><function name=\"sports_ranking\"><params><param name=\"team\" value=\"Manchester United\" type=\"string\"/><param name=\"league\" value=\"Premier League\" type=\"string\"/></function></functions>", "possible_answer": [{"sports_ranking": {"team": ["Manchester United", "Man United", "Man U", "MUFC"], "league": ["Premier League"], "season": ["", 2024]}}]}
{"id": "multiple_178", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 191"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_178", "question": [[{"role": "user", "content": "Find a Card of rank 'Queen' and suit 'Hearts' in the deck."}]], "function": [{"name": "currency_exchange.convert", "description": "Convert an amount from a base currency to a target currency based on the current exchange rate.", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The currency to convert from."}, "target_currency": {"type": "string", "description": "The currency to convert to."}, "amount": {"type": "float", "description": "The amount in base currency to convert"}}, "required": ["base_currency", "target_currency", "amount"]}}, {"name": "local_nursery.find", "description": "Locate local nurseries based on location and plant types availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city or locality where the nursery needs to be located."}, "plant_types": {"type": "array", "items": {"type": "string", "enum": ["Annual", "Perennial", "Shrub", "Tree", "Herbs", "Fruits"]}, "description": "Type of plants the nursery should provide."}}, "required": ["location", "plant_types"]}}, {"name": "find_card_in_deck", "description": "Locate a particular card in a deck based on rank and suit.", "parameters": {"type": "dict", "properties": {"rank": {"type": "string", "description": "Rank of the card (e.g. Ace, Two, King)."}, "suit": {"type": "string", "description": "Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs)."}, "deck": {"type": "array", "items": {"type": "dict", "properties": {"rank": {"type": "string"}, "suit": {"type": "string"}}}, "description": "Deck of cards. If not provided, the deck will be a standard 52 card deck by default"}}, "required": ["rank", "suit"]}}, {"name": "recipe.unit_conversion", "description": "Convert a value from one kitchen unit to another for cooking purposes.", "parameters": {"type": "dict", "properties": {"value": {"type": "float", "description": "The value to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from. Supports 'teaspoon', 'tablespoon', 'cup', etc."}, "to_unit": {"type": "string", "description": "The unit to convert to. Supports 'teaspoon', 'tablespoon', 'cup', etc."}, "precision": {"type": "integer", "description": "The precision to round the output to, in case of a non-integer result. Optional, default is 0."}}, "required": ["value", "from_unit", "to_unit"]}}]}, "model_result_raw": "<functions><function name=\"find_card_in_deck\"><params><param name=\"rank\" value=\"Queen\" type=\"string\"/><param name=\"suit\" value=\"Hearts\" type=\"string\"/><param name=\"deck\" value=\"[]\"></param></function></functions>", "possible_answer": [{"find_card_in_deck": {"rank": ["Queen"], "suit": ["Hearts"], "deck": [""]}}]}
{"id": "multiple_184", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 253"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_184", "question": [[{"role": "user", "content": "Give me a recipe for a vegetarian pasta with cheese for 2 servings."}]], "function": [{"name": "detailed_weather_forecast", "description": "Retrieve a detailed weather forecast for a specific location and duration including optional precipitation details.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "duration": {"type": "integer", "description": "Duration in hours for the detailed forecast."}, "include_precipitation": {"type": "boolean", "description": "Whether to include precipitation data in the forecast. Default is false."}}, "required": ["location", "duration"]}}, {"name": "recipe_search", "description": "Search for a recipe given dietary restriction, ingredients, and number of servings.", "parameters": {"type": "dict", "properties": {"dietary_restriction": {"type": "string", "description": "The dietary restriction, e.g., 'Vegetarian'."}, "ingredients": {"type": "array", "items": {"type": "string"}, "description": "The list of ingredients."}, "servings": {"type": "integer", "description": "The number of servings the recipe should make"}}, "required": ["dietary_restriction", "ingredients", "servings"]}}, {"name": "get_time_difference", "description": "Get the time difference between two places.", "parameters": {"type": "dict", "properties": {"place1": {"type": "string", "description": "The first place for time difference."}, "place2": {"type": "string", "description": "The second place for time difference."}}, "required": ["place1", "place2"]}}]}, "model_result_raw": "<functions><function name=\"recipe_search\"><params><param name=\"dietary_restriction\" value=\"Vegetarian\" type=\"string\"/><param name=\"ingredients\" value=\"['pasta', 'cheese', 'tomato sauce']\" type=\"array\"/><param name=\"servings\" value=\"2\" type=\"integer\"/></function></functions>", "possible_answer": [{"recipe_search": {"dietary_restriction": ["Vegetarian"], "ingredients": [["pasta", "cheese"], ["cheese", "pasta"]], "servings": [2]}}]}
{"id": "multiple_185", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 227"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_185", "question": [[{"role": "user", "content": "Find the closest sushi restaurant with a patio in Boston."}]], "function": [{"name": "board_game.chess.get_top_players", "description": "Find top chess players in a location based on rating.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city you want to find the players from."}, "minimum_rating": {"type": "integer", "description": "Minimum rating to filter the players."}, "number_of_players": {"type": "integer", "default": 10, "description": "Number of players you want to retrieve, default value is 10"}}, "required": ["location", "minimum_rating"]}}, {"name": "restaurant_search.find_closest", "description": "Locate the closest sushi restaurant based on certain criteria, such as the presence of a patio.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city, for instance Boston, MA"}, "cuisine": {"type": "string", "description": "Type of food like Sushi."}, "amenities": {"type": "array", "items": {"type": "string", "enum": ["Patio", "Wi-Fi", "Happy Hour", "Wheelchair Accessible"]}, "description": "Preferred amenities in the restaurant. Default is empty array."}}, "required": ["location", "cuisine"]}}]}, "model_result_raw": "<functions><function name=\"restaurant_search.find_closest\"><params><param name=\"location\" value=\"Boston\" type=\"string\"/><param name=\"cuisine\" value=\"Sushi\" type=\"string\"/><param name=\"amenities\" value=\"[Patio]\" type=\"array\"/></function></functions>", "possible_answer": [{"restaurant_search.find_closest": {"location": ["Boston", "Boston, MA"], "cuisine": ["Sushi"], "amenities": [["Patio"]]}}]}
{"id": "multiple_187", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 186"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_187", "question": [[{"role": "user", "content": "Check the price of tomatoes and lettuce at the Whole Foods in Los Angeles."}]], "function": [{"name": "geometry.area_circle", "description": "Calculate the area of a circle given the radius.", "parameters": {"type": "dict", "properties": {"radius": {"type": "float", "description": "The radius of the circle."}, "units": {"type": "string", "description": "The units in which the radius is measured (defaults to meters).", "default": "meters"}}, "required": ["radius"]}}, {"name": "find_recipes", "description": "Find recipes based on dietary restrictions, meal type, and preferred ingredients.", "parameters": {"type": "dict", "properties": {"diet": {"type": "string", "description": "The dietary restrictions, e.g., 'vegan', 'gluten-free'."}, "meal_type": {"type": "string", "description": "The type of meal, e.g., 'dinner', 'breakfast'."}, "ingredients": {"type": "array", "items": {"type": "string"}, "description": "The preferred ingredients. If left blank, it will return general recipes. Default is empty array."}}, "required": ["diet", "meal_type"]}}, {"name": "whole_foods.check_price", "description": "Check the price of items at a specific Whole Foods location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Location of the Whole Foods store."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items for which the price needs to be checked."}}, "required": ["location", "items"]}}, {"name": "calculate_shortest_distance", "description": "Calculate the shortest driving distance between two locations.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting location for the drive."}, "end_location": {"type": "string", "description": "The destination location for the drive."}, "route_preference": {"type": "string", "enum": ["Shortest", "Scenic"], "description": "The preferred type of route."}}, "required": ["start_location", "end_location", "route_preference"]}}]}, "model_result_raw": "<functions><function name=\"whole_foods.check_price\"><params><param name=\"location\" value=\"Los Angeles\" type=\"string\"/><param name=\"items\" value=\"['tomatoes', 'lettuce']\" type=\"array\"/></function></functions>", "possible_answer": [{"whole_foods.check_price": {"location": ["Los Angeles", "LA"], "items": [["tomatoes", "lettuce"], ["lettuce", "tomatoes"]]}}]}
{"id": "multiple_188", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 273"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_188", "question": [[{"role": "user", "content": "Find the grocery store closest to Berkeley that has at least a 4.5 star rating, selling tomatoes and also pet food."}]], "function": [{"name": "sentiment_analysis", "description": "Perform sentiment analysis on a given piece of text.", "parameters": {"type": "dict", "properties": {"text": {"type": "string", "description": "The text on which to perform sentiment analysis."}, "language": {"type": "string", "description": "The language in which the text is written."}}, "required": ["text", "language"]}}, {"name": "psych_research.get_preference", "description": "Gathers research data on public preference between two options, based on societal category.", "parameters": {"type": "dict", "properties": {"category": {"type": "string", "description": "The societal category the preference data is about. E.g. reading, transportation, food"}, "option_one": {"type": "string", "description": "The first option people could prefer."}, "option_two": {"type": "string", "description": "The second option people could prefer."}, "demographic": {"type": "string", "description": "Specific demographic of society to narrow down the research.", "default": "all"}}, "required": ["category", "option_one", "option_two"]}}, {"name": "grocery_store.find_best", "description": "Find the closest high-rated grocery stores based on certain product availability.", "parameters": {"type": "dict", "properties": {"my_location": {"type": "string", "description": "The current location of the user."}, "rating": {"type": "float", "description": "The minimum required store rating. Default is 0.0."}, "products": {"type": "array", "items": {"type": "string"}, "description": "Required products in a list."}}, "required": ["my_location", "products"]}}, {"name": "train_random_forest_classifier", "description": "Train a Random Forest classifier with the specified parameters.", "parameters": {"type": "dict", "properties": {"dataset": {"type": "string", "description": "The dataset to train the classifier on."}, "max_depth": {"type": "integer", "description": "The maximum depth of the trees in the forest."}, "n_estimators": {"type": "integer", "description": "The number of trees in the forest."}}, "required": ["dataset", "max_depth", "n_estimators"]}}]}, "model_result_raw": "<functions><function name=\"grocery_store.find_best\"><params><param name=\"my_location\" value=\"Berkeley\" type=\"string\"/><param name=\"rating\" value=\"4.5\" type=\"float\"/><param name=\"products\"><array><item value=\"tomatoes\" type=\"string\"/><item value=\"pet food\" type=\"string\"/></param></params></function></functions>", "possible_answer": [{"grocery_store.find_best": {"my_location": ["Berkeley", "Berkeley,California", "Berkeley,CA", "Berkeley, CA"], "rating": [4.5], "products": [["tomatoes", "pet food"], ["pet food", "tomatoes"], ["Tomatoes", "Pet food"], ["Pet food", "Tomatoes"]]}}]}
{"id": "multiple_192", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 215"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_192", "question": [[{"role": "user", "content": "Convert 150 Euros to Canadian dollars."}]], "function": [{"name": "currency_conversion.convert", "description": "Convert a value from one currency to another.", "parameters": {"type": "dict", "properties": {"amount": {"type": "integer", "description": "The amount to be converted."}, "from_currency": {"type": "string", "description": "The currency to convert from."}, "to_currency": {"type": "string", "description": "The currency to convert to."}}, "required": ["amount", "from_currency", "to_currency"]}}, {"name": "calc_absolute_pressure", "description": "Calculates the absolute pressure from gauge and atmospheric pressures.", "parameters": {"type": "dict", "properties": {"atm_pressure": {"type": "float", "description": "The atmospheric pressure in atmospheres (atm). Default is 1 atm if not provided."}, "gauge_pressure": {"type": "float", "description": "The gauge pressure in atmospheres (atm). Must be provided."}}, "required": ["gauge_pressure"]}}, {"name": "calculate_displacement", "description": "Calculates the displacement of an object in motion given initial velocity, time, and acceleration.", "parameters": {"type": "dict", "properties": {"initial_velocity": {"type": "float", "description": "The initial velocity of the object in m/s."}, "time": {"type": "float", "description": "The time in seconds that the object has been in motion."}, "acceleration": {"type": "float", "description": "The acceleration of the object in m/s^2.", "default": 0}}, "required": ["initial_velocity", "time"]}}]}, "model_result_raw": "<functions><function name=\"currency_conversion\"><params><param name=\"amount\" value=\"150\" type=\"integer\"/><param name=\"from_currency\" value=\"EUR\" type=\"string\"/><param name=\"to_currency\" value=\"CAD\" type=\"string\"/></function></functions>", "possible_answer": [{"currency_conversion.convert": {"amount": [150], "from_currency": ["EUR"], "to_currency": ["CAD"]}}]}
{"id": "multiple_195", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 197"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_195", "question": [[{"role": "user", "content": "Calculate the heat capacity at constant pressure for air, given its temperature is 298K and volume is 10 m^3."}]], "function": [{"name": "get_lawsuit_details", "description": "Retrieve the detailed information about a lawsuit based on its case number and the court location.", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "The case number of the lawsuit."}, "court_location": {"type": "string", "description": "The location of the court where the case is filed."}, "additional_details": {"type": "array", "items": {"type": "string", "enum": ["attorneys", "plaintiffs", "defendants", "charges", "court_updates"]}, "description": "Optional. Array containing additional details to be fetched. Default is empty array."}}, "required": ["case_number", "court_location"]}}, {"name": "get_team_rank", "description": "Get the team ranking in a sports league based on season and type.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "league": {"type": "string", "description": "The name of the league in which the team competes."}, "season": {"type": "string", "description": "The season for which the team's ranking is sought."}, "type": {"type": "string", "description": "Type of the season: regular or playoff.", "enum": ["regular", "playoff"]}}, "required": ["team_name", "league", "season", "type"]}}, {"name": "calc_heat_capacity", "description": "Calculate the heat capacity at constant pressure of air using its temperature and volume.", "parameters": {"type": "dict", "properties": {"temp": {"type": "integer", "description": "The temperature of the gas in Kelvin."}, "volume": {"type": "integer", "description": "The volume of the gas in m^3."}, "gas": {"type": "string", "description": "Type of gas, with air as default."}}, "required": ["temp", "volume"]}}]}, "model_result_raw": "<functions><function name=\"calc_heat_capacity\"><params><param name=\"temp\" value=\"298\" type=\"integer\"/><param name=\"volume\" value=\"10\" type=\"integer\"/><param name=\"gas\" value=\"air\" type=\"string\"/></function></functions>", "possible_answer": [{"calc_heat_capacity": {"temp": [298], "volume": [10], "gas": ["air", ""]}}]}
{"id": "multiple_197", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 169"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_197", "question": [[{"role": "user", "content": "Find the type of gene mutation based on SNP (Single Nucleotide Polymorphism) ID rs6034464."}]], "function": [{"name": "create_player_profile", "description": "Create a new player profile with character name, class and starting level.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The desired name of the player."}, "_class": {"type": "string", "description": "The character class for the player"}, "starting_level": {"type": "integer", "description": "The starting level for the player", "default": 1}}, "required": ["player_name", "_class"]}}, {"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is an empty array"}}, "required": ["loc", "product_list"]}}, {"name": "mutation_type.find", "description": "Finds the type of a genetic mutation based on its SNP (Single Nucleotide Polymorphism) ID.", "parameters": {"type": "dict", "properties": {"snp_id": {"type": "string", "description": "The ID of the Single Nucleotide Polymorphism (SNP) mutation."}, "species": {"type": "string", "description": "Species in which the SNP occurs, default is 'Homo sapiens' (Humans)."}}, "required": ["snp_id"]}}, {"name": "find_restaurants", "description": "Locate nearby restaurants based on location and food preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The specific location or area."}, "food_type": {"type": "string", "description": "The type of food preferred."}, "number": {"type": "integer", "description": "Number of results to return."}, "dietary_requirements": {"type": "array", "items": {"type": "string"}, "description": "Special dietary requirements, e.g. vegan, gluten-free.", "default": "None"}}, "required": ["location", "food_type", "number"]}}]}, "model_result_raw": "<functions><function name=\"mutation_type.find\"><params><param name=\"snp_id\" value=\"rs6034464\" type=\"string\"/><param name=\"species\" value=\"Homo sapiens\" type=\"string\"/></function></functions>", "possible_answer": [{"mutation_type.find": {"snp_id": ["rs6034464"], "species": ["", "Homo sapiens"]}}]}
{"id": "multiple_199", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 229"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_199", "question": [[{"role": "user", "content": "Predict the growth of forest in Yellowstone for the next 5 years including human impact."}]], "function": [{"name": "forest_growth_forecast", "description": "Predicts the forest growth over the next N years based on current trends.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location where you want to predict forest growth."}, "years": {"type": "integer", "description": "The number of years for the forecast."}, "include_human_impact": {"type": "boolean", "description": "Whether or not to include the impact of human activities in the forecast. If not provided, defaults to false."}}, "required": ["location", "years"]}}, {"name": "db_fetch_records", "description": "Fetch records from a specified database table based on certain conditions.", "parameters": {"type": "dict", "properties": {"database_name": {"type": "string", "description": "The name of the database."}, "table_name": {"type": "string", "description": "The name of the table from which records need to be fetched."}, "conditions": {"type": "dict", "properties": {"department": {"type": "string", "description": "The name of the department of students."}, "school": {"type": "string", "description": "The name of the school students are enrolled in."}}, "description": "The conditions based on which records are to be fetched."}, "fetch_limit": {"type": "integer", "description": "Limits the number of records to be fetched. If left empty, it fetches all records. (Optional) Default is 0."}}, "required": ["database_name", "table_name", "conditions"]}}]}, "model_result_raw": "<functions><function name=\"forest_growth_forecast\"><params><param name=\"location\" value=\"Yellowstone\" type=\"string\"/><param name=\"years\" value=\"5\" type=\"integer\"/><param name=\"include_human_impact\" value=\"true\" type=\"boolean\"/></function></functions>", "possible_answer": [{"forest_growth_forecast": {"location": ["Yellowstone", "yellowstone"], "years": [5], "include_human_impact": [true]}}]}