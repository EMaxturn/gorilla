{"accuracy": 0.8725, "correct_count": 349, "total_count": 400}
{"id": "simple_5", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Optional parameter 'root_type' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_5", "question": [[{"role": "user", "content": "Find all the roots of a quadratic equation given coefficients a = 3, b = -11, and c = -4."}]], "function": [{"name": "solve_quadratic", "description": "Solve a quadratic equation given coefficients a, b, and c. If optional 'root_type' is 'real', the function will only return real roots. If not specified, function may return complex roots.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "The coefficient of the squared term in the quadratic equation."}, "b": {"type": "integer", "description": "The coefficient of the linear term in the quadratic equation."}, "c": {"type": "integer", "description": "The constant term in the quadratic equation."}, "root_type": {"type": "string", "description": "The type of roots to return: 'real' for real roots, 'all' for both real and complex roots. Default value is 'real'."}}, "required": ["a", "b", "c"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n<functions>\n<function name=\"solve_quadratic\">\n<params>\n<param name=\"a\" value=\"3\" type=\"integer\"/>\n<param name=\"b\" value=\"-11\" type=\"integer\"/>\n<param name=\"c\" value=\"-4\" type=\"integer\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>\n```", "model_result_decoded": [{"solve_quadratic": {"a": 3, "b": -11, "c": -4}}], "possible_answer": [{"solve_quadratic": {"a": [3], "b": [-11], "c": [-4], "root_type": ["all"]}}]}
{"id": "simple_13", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'interval'. Expected outer type array with inner type <class 'float'>. Parameter value: [1, 3]."], "error_type": "type_error:nested", "prompt": {"id": "simple_13", "question": [[{"role": "user", "content": "Calculate the area under the curve y=x^2 from x=1 to x=3."}]], "function": [{"name": "calculate_area_under_curve", "description": "Calculate the area under a mathematical function within a given interval.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The mathematical function as a string."}, "interval": {"type": "array", "items": {"type": "float"}, "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."}, "method": {"type": "string", "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, "required": ["function", "interval"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n<functions>\n<function name=\"calculate_area_under_curve\">\n<params>\n<param name=\"function\" value=\"x^2\" type=\"string\"/>\n<param name=\"interval\" value=\"[1, 3]\" type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>\n```", "model_result_decoded": [{"calculate_area_under_curve": {"function": "x^2", "interval": [1, 3]}}], "possible_answer": [{"calculate_area_under_curve": {"function": ["x**2", "lambda x: x**2", "y=x**2"], "interval": [[1.0, 3.0]], "method": ["", "trapezoidal"]}}]}
{"id": "simple_37", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_37", "question": [[{"role": "user", "content": "Find the estimated travel time by car from San Francisco to Los Angeles with stops at Santa Barbara and Monterey."}]], "function": [{"name": "route.estimate_time", "description": "Estimate the travel time for a specific route with optional stops.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting point for the journey. It should be format as city name such as Boston."}, "end_location": {"type": "string", "description": "The destination for the journey. It should be format as city name such as Boston."}, "stops": {"type": "array", "items": {"type": "string"}, "description": "Additional cities or points of interest to stop at during the journey. Default is an empty list."}}, "required": ["start_location", "end_location"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n<functions>\n<function name=\"route.estimate_time\">\n<params>\n<param name=\"start_location\" value=\"San Francisco\" type=\"string\"/>\n<param name=\"end_location\" value=\"Los Angeles\" type=\"string\"/>\n<param name=\"stops\" value=\"Santa Barbara, Monterey\" type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>\n```", "possible_answer": [{"route.estimate_time": {"start_location": ["San Francisco"], "end_location": ["Los Angeles"], "stops": [["Santa Barbara", "Monterey"], ["Monterey", "Santa Barbara"]]}}]}
{"id": "simple_54", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'species': 'human'. Expected one of ['Homo sapiens', '']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_54", "question": [[{"role": "user", "content": "Identify the protein sequence of a given human gene 'BRCA1'."}]], "function": [{"name": "get_protein_sequence", "description": "Retrieve the protein sequence encoded by a human gene.", "parameters": {"type": "dict", "properties": {"gene": {"type": "string", "description": "The human gene of interest."}, "species": {"type": "string", "description": "The species for which the gene is to be analyzed.", "default": "Homo sapiens"}}, "required": ["gene"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n<functions>\n<function name=\"get_protein_sequence\">\n<params>\n<param name=\"gene\" value=\"BRCA1\" type=\"string\"/>\n<param name=\"species\" value=\"human\" type=\"string\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>\n```", "model_result_decoded": [{"get_protein_sequence": {"gene": "BRCA1", "species": "human"}}], "possible_answer": [{"get_protein_sequence": {"gene": ["BRCA1"], "species": ["Homo sapiens", ""]}}]}
{"id": "simple_55", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'cell_type': 'human cell'. Expected one of ['human']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_55", "question": [[{"role": "user", "content": "Find me detailed information about the structure of human cell"}]], "function": [{"name": "biology.get_cell_info", "description": "Retrieve information about the structure and functioning of a specified type of cell", "parameters": {"type": "dict", "properties": {"cell_type": {"type": "string", "description": "Type of cell you want information about"}, "detailed": {"type": "boolean", "description": "Indicate if you want a detailed description of the cell", "default": "false"}}, "required": ["cell_type"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n  <functions>\n    <function name=\"biology.get_cell_info\">\n      <params>\n        <param name=\"cell_type\" value=\"human cell\" type=\"string\"/>\n        <param name=\"detailed\" value=\"true\" type=\"boolean\"/>\n      </params>\n    </function>\n  </functions>\n</TOOLCALL>\n```", "model_result_decoded": [{"biology.get_cell_info": {"cell_type": "human cell", "detailed": true}}], "possible_answer": [{"biology.get_cell_info": {"cell_type": ["human"], "detailed": [true]}}]}
{"id": "simple_66", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'time_frame': 'last six months'. Expected one of ['six_months']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_66", "question": [[{"role": "user", "content": "Get me data on average precipitation in the Amazon rainforest for the last six months."}]], "function": [{"name": "ecology_data.precipitation_stats", "description": "Retrieve precipitation data for a specified location and time period.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The name of the location, e.g., 'Amazon rainforest'."}, "time_frame": {"type": "string", "enum": ["six_months", "year", "five_years"], "description": "The time period for which data is required."}}, "required": ["location", "time_frame"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"ecology_data.precipitation_stats\"><params><param name=\"location\" value=\"Amazon rainforest\" type=\"string\"/><param name=\"time_frame\" value=\"last six months\" type=\"string\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"ecology_data.precipitation_stats": {"location": "Amazon rainforest", "time_frame": "last six months"}}], "possible_answer": [{"ecology_data.precipitation_stats": {"location": ["Amazon rainforest"], "time_frame": ["six_months"]}}]}
{"id": "simple_77", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. malformed node or string on line 1: <ast.Name object at 0x7f248fdac250>"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_77", "question": [[{"role": "user", "content": "Find a nearby restaurant that serves vegan food in Los Angeles."}]], "function": [{"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific dietary preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Los Angeles, CA"}, "dietary_preference": {"type": "array", "items": {"type": "string", "enum": ["Vegan", "Vegetarian", "Gluten-free", "Dairy-free", "Nut-free"]}, "description": "Dietary preference. Default is empty list."}}, "required": ["location"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"restaurant.find_nearby\"><params><param name=\"location\" value=\"Los Angeles, CA\" type=\"string\"/><param name=\"dietary_preference\" value=\"vegan\" type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"restaurant.find_nearby": {"location": ["Los Angeles, CA"], "dietary_preference": [["Vegan"]]}}]}
{"id": "simple_79", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'data'. Expected type array, got tuple. Parameter value: (85, 90, 88, 92, 86, 89, 91)."], "error_type": "type_error:simple", "prompt": {"id": "simple_79", "question": [[{"role": "user", "content": "Create a histogram for student scores with the following data: 85, 90, 88, 92, 86, 89, 91 and set bin range to 5."}]], "function": [{"name": "create_histogram", "description": "Create a histogram based on provided data.", "parameters": {"type": "dict", "properties": {"data": {"type": "array", "items": {"type": "integer"}, "description": "The data for which histogram needs to be plotted."}, "bins": {"type": "integer", "description": "The number of equal-width bins in the range. Default is 10."}}, "required": ["data", "bins"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n<functions>\n<function name=\"create_histogram\">\n<params>\n<param name=\"data\" value=\"85, 90, 88, 92, 86, 89, 91\" type=\"array\"/>\n<param name=\"bins\" value=\"5\" type=\"integer\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>\n```", "model_result_decoded": [{"create_histogram": {"data": [85, 90, 88, 92, 86, 89, 91], "bins": 5}}], "possible_answer": [{"create_histogram": {"data": [[85, 90, 88, 92, 86, 89, 91]], "bins": [5]}}]}
{"id": "simple_80", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. malformed node or string on line 1: <ast.Name object at 0x7f248fdae0e0>"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_80", "question": [[{"role": "user", "content": "I want to find 5 restaurants nearby my location, Manhattan, offering Thai food and a vegan menu."}]], "function": [{"name": "find_restaurants", "description": "Locate nearby restaurants based on location and food preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The specific location or area. The location should be in the format of District, City."}, "food_type": {"type": "string", "description": "The type of food preferred."}, "number": {"type": "integer", "description": "Number of results to return."}, "dietary_requirements": {"type": "array", "items": {"type": "string"}, "description": "Special dietary requirements, e.g. vegan, gluten-free. Default is empty list."}}, "required": ["location", "food_type", "number"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n<functions>\n<function name=\"find_restaurants\">\n<params>\n<param name=\"location\" value=\"Manhattan, New York\" type=\"string\"/>\n<param name=\"food_type\" value=\"Thai\" type=\"string\"/>\n<param name=\"number\" value=\"5\" type=\"integer\"/>\n<param name=\"dietary_requirements\" value=\"vegan\" type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>\n```", "possible_answer": [{"find_restaurants": {"location": ["Manhattan, New York City", "Manhattan", "Manhattan, New York", "Manhattan, NY", "Manhattan, NYC"], "food_type": ["Thai"], "number": [5], "dietary_requirements": [["vegan"], ["Vegan"]]}}]}
{"id": "simple_82", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'numbers'. Expected outer type array with inner type <class 'float'>. Parameter value: [12, 15, 18, 20, 21, 26, 30]."], "error_type": "type_error:nested", "prompt": {"id": "simple_82", "question": [[{"role": "user", "content": "Calculate the average of list of integers [12, 15, 18, 20, 21, 26, 30]."}]], "function": [{"name": "calculate_average", "description": "Calculates the average of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to calculate the average of."}}, "required": ["numbers"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n<functions>\n<function name=\"calculate_average\">\n<params>\n<param name=\"numbers\" value=\"[12, 15, 18, 20, 21, 26, 30]\" type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>\n```", "model_result_decoded": [{"calculate_average": {"numbers": [12, 15, 18, 20, 21, 26, 30]}}], "possible_answer": [{"calculate_average": {"numbers": [[12.0, 15.0, 18.0, 20.0, 21.0, 26.0, 30.0]]}}]}
{"id": "simple_87", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'list'. Expected outer type array with inner type <class 'float'>. Parameter value: [5, 3, 4, 1, 2]."], "error_type": "type_error:nested", "prompt": {"id": "simple_87", "question": [[{"role": "user", "content": "Sort the list [5, 3, 4, 1, 2] in ascending order."}]], "function": [{"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "dict", "properties": {"list": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting."}}, "required": ["list", "order"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n  <functions>\n    <function name=\"array_sort\">\n      <params>\n        <param name=\"list\" value=\"[5, 3, 4, 1, 2]\" type=\"array\"/>\n        <param name=\"order\" value=\"ascending\" type=\"string\"/>\n      </params>\n    </function>\n  </functions>\n</TOOLCALL>\n```", "model_result_decoded": [{"array_sort": {"list": [5, 3, 4, 1, 2], "order": "ascending"}}], "possible_answer": [{"array_sort": {"list": [[5.0, 3.0, 4.0, 1.0, 2.0]], "order": ["ascending"]}}]}
{"id": "simple_89", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Unexpected dict key parameter: 'school_name'.", "Missing dict key parameter: 'department'."], "error_type": "value_error:dict_key", "prompt": {"id": "simple_89", "question": [[{"role": "user", "content": "Fetch all records for students studying Science in 'Bluebird High School' from the StudentDB."}]], "function": [{"name": "db_fetch_records", "description": "Fetch records from a specified database table based on certain conditions.", "parameters": {"type": "dict", "properties": {"database_name": {"type": "string", "description": "The name of the database."}, "table_name": {"type": "string", "description": "The name of the table from which records need to be fetched."}, "conditions": {"type": "dict", "properties": {"department": {"type": "string", "description": "The name of the department of students."}, "school": {"type": "string", "description": "The name of the school students are enrolled in."}}, "description": "The conditions based on which records are to be fetched."}, "fetch_limit": {"type": "integer", "description": "Limits the number of records to be fetched. Default is 0, which means no limit."}}, "required": ["database_name", "table_name", "conditions"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n<functions>\n<function name=\"db_fetch_records\">\n<params>\n<param name=\"database_name\" value=\"StudentDB\" type=\"string\"/>\n<param name=\"table_name\" value=\"Students\" type=\"string\"/>\n<param name=\"conditions\" value=\"{&quot;school_name&quot;: &quot;Bluebird High School&quot;, &quot;major&quot;: &quot;Science&quot;}\" type=\"dict\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>\n```", "model_result_decoded": [{"db_fetch_records": {"database_name": "StudentDB", "table_name": "Students", "conditions": {"school_name": "Bluebird High School", "major": "Science"}}}], "possible_answer": [{"db_fetch_records": {"database_name": ["StudentDB"], "table_name": ["students"], "conditions": [{"department": ["Science"], "school": ["Bluebird High School", "Bluebird HS"]}], "fetch_limit": ["", 0]}}]}
{"id": "simple_90", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_90", "question": [[{"role": "user", "content": "Retrieve Personal Info and Job History data of a specific employee whose ID is 345 in company 'ABC Ltd.'"}]], "function": [{"name": "employee.fetch_data", "description": "Fetches the detailed data for a specific employee in a given company.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "employee_id": {"type": "integer", "description": "The unique ID of the employee."}, "data_field": {"type": "array", "items": {"type": "string", "enum": ["Personal Info", "Job History", "Payroll", "Attendance"]}, "description": "Fields of data to be fetched for the employee (Optional). Default is ['Personal Info']"}}, "required": ["company_name", "employee_id"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n<functions>\n<function name=\"employee.fetch_data\">\n<params>\n<param name=\"company_name\" value=\"ABC Ltd.\" type=\"string\"/>\n<param name=\"employee_id\" value=\"345\" type=\"integer\"/>\n<param name=\"data_field\" value=\"Personal Info,Job History\" type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>\n```", "possible_answer": [{"employee.fetch_data": {"company_name": ["ABC Ltd."], "employee_id": [345], "data_field": [["Personal Info", "Job History"]]}}]}
{"id": "simple_96", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Wrong number of dictionaries in the list."], "error_type": "value_error:list_dict_count", "prompt": {"id": "simple_96", "question": [[{"role": "user", "content": "Find records in database in user table where age is greater than 25 and job is 'engineer'."}]], "function": [{"name": "database.query", "description": "Query the database based on certain conditions.", "parameters": {"type": "dict", "properties": {"table": {"type": "string", "description": "Name of the table to query."}, "conditions": {"type": "array", "items": {"type": "dict", "properties": {"field": {"type": "string", "description": "The field to apply the condition."}, "operation": {"type": "string", "description": "The operation to be performed.", "enum": ["<", ">", "=", ">=", "<="]}, "value": {"type": "string", "description": "The value to be compared."}}, "required": ["field", "operation", "value"]}, "description": "Conditions for the query."}}, "required": ["table", "conditions"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n<functions>\n<function name=\"database.query\">\n<params>\n<param name=\"table\" value=\"user\" type=\"string\"/>\n<param name=\"conditions\" value=\"[{'age': '>25', 'job': 'engineer'}]\" type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>\n```", "model_result_decoded": [{"database.query": {"table": "user", "conditions": [{"age": ">25", "job": "engineer"}]}}], "possible_answer": [{"database.query": {"table": ["user"], "conditions": [[{"field": ["age"], "operation": [">"], "value": ["25"]}, {"field": ["job"], "operation": ["="], "value": ["engineer"]}]]}}]}
{"id": "simple_103", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'polynomial'. Expected outer type array with inner type <class 'float'>. Parameter value: [3, 2, -4]."], "error_type": "type_error:nested", "prompt": {"id": "simple_103", "question": [[{"role": "user", "content": "Calculate the area under the curve y=3x^2 + 2x - 4, between x = -1 and x = 2."}]], "function": [{"name": "mathematics.calculate_area_under_curve", "description": "Calculate the area under the curve for a given polynomial function within a specified interval.", "parameters": {"type": "dict", "properties": {"polynomial": {"type": "array", "items": {"type": "float"}, "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."}, "limits": {"type": "array", "items": {"type": "float"}, "description": "A list of two numbers specifying the lower and upper limit for the integration interval."}}, "required": ["polynomial", "limits"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n<functions>\n<function name=\"mathematics.calculate_area_under_curve\">\n<params>\n<param name=\"polynomial\" value=\"[3, 2, -4]\" type=\"array\"/>\n<param name=\"limits\" value=\"[-1, 2]\" type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>\n```", "model_result_decoded": [{"mathematics.calculate_area_under_curve": {"polynomial": [3, 2, -4], "limits": [-1, 2]}}], "possible_answer": [{"mathematics.calculate_area_under_curve": {"polynomial": [[3.0, 2.0, -4.0]], "limits": [[-1.0, 2.0]]}}]}
{"id": "simple_123", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'group1'. Expected type array, got tuple. Parameter value: (12.4, 15.6, 11.2, 18.9)."], "error_type": "type_error:simple", "prompt": {"id": "simple_123", "question": [[{"role": "user", "content": "Perform a two-sample t-test to determine if there is a significant difference between the mean of group1 (e.g., 12.4, 15.6, 11.2, 18.9) and group2 (e.g., 10.5, 9.8, 15.2, 13.8) at the significance level 0.05."}]], "function": [{"name": "hypothesis_testing.two_sample_t_test", "description": "Perform a two-sample t-test to determine if there is a significant difference between the means of two independent samples.", "parameters": {"type": "dict", "properties": {"group1": {"type": "array", "items": {"type": "float"}, "description": "Sample observations from group 1."}, "group2": {"type": "array", "items": {"type": "float"}, "description": "Sample observations from group 2."}, "alpha": {"type": "float", "description": "Significance level for the t-test. Default is 0.05."}}, "required": ["group1", "group2"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n<functions>\n<function name=\"hypothesis_testing.two_sample_t_test\">\n<params>\n<param name=\"group1\" value=\"12.4, 15.6, 11.2, 18.9\" type=\"array\"/>\n<param name=\"group2\" value=\"10.5, 9.8, 15.2, 13.8\" type=\"array\"/>\n<param name=\"alpha\" value=\"0.05\" type=\"float\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>\n```", "model_result_decoded": [{"hypothesis_testing.two_sample_t_test": {"group1": [12.4, 15.6, 11.2, 18.9], "group2": [10.5, 9.8, 15.2, 13.8], "alpha": 0.05}}], "possible_answer": [{"hypothesis_testing.two_sample_t_test": {"group1": [[12.4, 15.6, 11.2, 18.9]], "group2": [[10.5, 9.8, 15.2, 13.8]], "alpha": [0.05, ""]}}]}
{"id": "simple_126", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. malformed node or string on line 1: <ast.Name object at 0x7f248fdadba0>"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_126", "question": [[{"role": "user", "content": "What is the coefficient of determination (R-squared) for a model using engine size and fuel economy variables to predict car_price with a dataset in path C:/data/cars.csv?"}]], "function": [{"name": "linear_regression.get_r_squared", "description": "Calculate the coefficient of determination of a regression model.", "parameters": {"type": "dict", "properties": {"dataset_path": {"type": "string", "description": "Path to the CSV dataset file."}, "independent_variables": {"type": "array", "items": {"type": "string"}, "description": "The independent variables to use in the regression model."}, "dependent_variable": {"type": "string", "description": "The dependent variable to predict in the regression model."}}, "required": ["dataset_path", "independent_variables", "dependent_variable"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n<functions>\n<function name=\"linear_regression.get_r_squared\">\n<params>\n<param name=\"dataset_path\" value=\"C:/data/cars.csv\" type=\"string\"/>\n<param name=\"independent_variables\" value=\"engine_size,fuel_economy\" type=\"array\"/>\n<param name=\"dependent_variable\" value=\"car_price\" type=\"string\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>\n```", "possible_answer": [{"linear_regression.get_r_squared": {"dataset_path": ["C:/data/cars.csv"], "independent_variables": [["engine_size", "fuel_economy"]], "dependent_variable": ["car_price"]}}]}
{"id": "simple_144", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 4, column 42"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_144", "question": [[{"role": "user", "content": "Find the market performance of the S&P 500 and the Dow Jones over the past 5 days."}]], "function": [{"name": "market_performance.get_data", "description": "Retrieve the market performance data for specified indexes over a specified time period.", "parameters": {"type": "dict", "properties": {"indexes": {"type": "array", "items": {"type": "string"}, "description": "Array of stock market indexes. Supported indexes are 'S&P 500', 'Dow Jones', 'NASDAQ', 'FTSE 100', 'DAX' etc."}, "days": {"type": "integer", "description": "Number of days in the past for which the performance data is required."}, "detailed": {"type": "boolean", "description": "Whether to return detailed performance data. If set to true, returns high, low, opening, and closing prices. If false, returns only closing prices. Default is false."}}, "required": ["indexes", "days"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n  <functions>\n    <function name=\"market_performance.get_data\">\n      <params>\n        <param name=\"indexes\" value=\"['S&P 500', 'Dow Jones']\" type=\"array\"/>\n        <param name=\"days\" value=\"5\" type=\"integer\"/>\n      </params>\n    </function>\n  </functions>\n</TOOLCALL>\n```", "possible_answer": [{"market_performance.get_data": {"indexes": [["S&P 500", "Dow Jones"]], "days": [5], "detailed": ["", true, false]}}]}
{"id": "simple_150", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'annual_interest_rate': 3.0. Expected one of [0.03]."], "error_type": "value_error:others", "prompt": {"id": "simple_150", "question": [[{"role": "user", "content": "Calculate the return of investment of a bank's savings account with a deposit of $1000, annual interest rate of 3% for 1 year."}]], "function": [{"name": "calculate_roi", "description": "Calculate the return on investment for a given deposit amount, annual interest rate, and time frame.", "parameters": {"type": "dict", "properties": {"deposit": {"type": "integer", "description": "The initial deposit amount."}, "annual_interest_rate": {"type": "float", "description": "The annual interest rate provided by the bank."}, "years": {"type": "integer", "description": "The period for which the money is invested."}}, "required": ["deposit", "annual_interest_rate", "years"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n  <functions>\n    <function name=\"calculate_roi\">\n      <params>\n        <param name=\"deposit\" value=\"1000\" type=\"integer\"/>\n        <param name=\"annual_interest_rate\" value=\"3.0\" type=\"float\"/>\n        <param name=\"years\" value=\"1\" type=\"integer\"/>\n      </params>\n    </function>\n  </functions>\n</TOOLCALL>\n```", "model_result_decoded": [{"calculate_roi": {"deposit": 1000, "annual_interest_rate": 3.0, "years": 1}}], "possible_answer": [{"calculate_roi": {"deposit": [1000], "annual_interest_rate": [0.03], "years": [1]}}]}
{"id": "simple_166", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. malformed node or string on line 1: <ast.Name object at 0x7f248fdac6a0>"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_166", "question": [[{"role": "user", "content": "Find a lawyer specializing in divorce cases and charge fee less than 400 dollars per hour in Chicago."}]], "function": [{"name": "lawyer.find_nearby", "description": "Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city and state, e.g. Chicago, IL."}, "specialty": {"type": "array", "items": {"type": "string", "enum": ["Civil", "Divorce", "Immigration", "Business", "Criminal"]}, "description": "Specialization of the lawyer."}, "fee": {"type": "integer", "description": "Hourly fee charged by lawyer"}}, "required": ["city", "specialty", "fee"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"lawyer.find_nearby\"><params><param name=\"city\" value=\"Chicago, IL\" type=\"string\"/><param name=\"specialty\" value=\"divorce\" type=\"array\"/><param name=\"fee\" value=\"400\" type=\"integer\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"lawyer.find_nearby": {"city": ["Chicago, IL.", "Chicago, IL"], "specialty": [["Divorce"]], "fee": [400]}}]}
{"id": "simple_172", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_172", "question": [[{"role": "user", "content": "How to obtain the detailed case information of the 'R vs Adams' legal case?"}]], "function": [{"name": "legal_case.fetch", "description": "Fetch detailed legal case information from database.", "parameters": {"type": "dict", "properties": {"case_id": {"type": "string", "description": "The ID of the legal case."}, "details": {"type": "boolean", "description": "True if need the detail info. "}}, "required": ["case_id", "details"]}}]}, "model_result_raw": "To obtain the detailed case information, I need the case ID. I don't have that information.\n", "model_result_decoded": [], "possible_answer": [{"legal_case.fetch": {"case_id": ["R vs Adams"], "details": [true]}}]}
{"id": "simple_193", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_193", "question": [[{"role": "user", "content": "Find the best local nurseries in Toronto with a good variety of annual plants."}]], "function": [{"name": "local_nursery.find", "description": "Locate local nurseries based on location and plant types availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city or locality where the nursery needs to be located."}, "plant_types": {"type": "array", "items": {"type": "string", "enum": ["Annual", "Perennial", "Shrub", "Tree", "Herbs", "Fruits"]}, "description": "Type of plants the nursery should provide."}}, "required": ["location", "plant_types"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n<functions>\n<function name=\"local_nursery.find\">\n<params>\n<param name=\"location\" value=\"Toronto\" type=\"string\"/>\n<param name=\"plant_types\" value=\"annual plants\" type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>\n```", "possible_answer": [{"local_nursery.find": {"location": ["Toronto"], "plant_types": [["Annual"]]}}]}
{"id": "simple_199", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_199", "question": [[{"role": "user", "content": "Find air quality index in San Jose for next three days."}]], "function": [{"name": "environmental_data.air_quality_index", "description": "Retrieves Air Quality Index (AQI) for specified location over a number of days.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Name of the city or town to retrieve air quality index for."}, "days": {"type": "integer", "description": "Number of days for which to retrieve data. If not provided, default to today."}}, "required": ["location"]}}]}, "model_result_raw": "The function `environmental_data.air_quality_index` can be used to find the air quality index. However, it cannot predict the AQI for the *next* three days, but it can retrieve the AQI for the *past* three days. Since the question asks for the *next* three days, I cannot fulfill the request.\n", "model_result_decoded": [], "possible_answer": [{"environmental_data.air_quality_index": {"location": ["San Jose", "'San Jose'"], "days": [3]}}]}
{"id": "simple_202", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'energy_type': 'solar'. Expected one of ['renewable']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_202", "question": [[{"role": "user", "content": "How many greenhouse gas emissions would I save if I switched to renewable energy sources for 3 months in California?"}]], "function": [{"name": "calculate_emission_savings", "description": "Calculate potential greenhouse gas emissions saved by switching to renewable energy sources.", "parameters": {"type": "dict", "properties": {"energy_type": {"type": "string", "description": "Type of the renewable energy source."}, "usage_duration": {"type": "integer", "description": "Usage duration in months."}, "region": {"type": "string", "description": "The region where you use energy. Default is 'Texas'."}}, "required": ["energy_type", "usage_duration"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"calculate_emission_savings\"><params><param name=\"energy_type\" value=\"solar\" type=\"string\"/><param name=\"usage_duration\" value=\"3\" type=\"integer\"/><param name=\"region\" value=\"California\" type=\"string\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"calculate_emission_savings": {"energy_type": "solar", "usage_duration": 3, "region": "California"}}], "possible_answer": [{"calculate_emission_savings": {"energy_type": ["renewable"], "usage_duration": [3], "region": ["California", "CA"]}}]}
{"id": "simple_208", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_208", "question": [[{"role": "user", "content": "Get me the directions from New York to Los Angeles avoiding highways and toll roads."}]], "function": [{"name": "map_service.get_directions", "description": "Retrieve directions from a starting location to an ending location, including options for route preferences.", "parameters": {"type": "dict", "properties": {"start": {"type": "string", "description": "Starting location for the route."}, "end": {"type": "string", "description": "Ending location for the route."}, "avoid": {"type": "array", "items": {"type": "string", "enum": ["tolls", "highways", "ferries"]}, "description": "Route features to avoid. Default is ['highways', 'ferries']"}}, "required": ["start", "end"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n<functions>\n<function name=\"map_service.get_directions\">\n<params>\n<param name=\"start\" value=\"New York\" type=\"string\"/>\n<param name=\"end\" value=\"Los Angeles\" type=\"string\"/>\n<param name=\"avoid\" value=\"highways,toll roads\" type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>\n```", "possible_answer": [{"map_service.get_directions": {"start": ["New York", "NYC"], "end": ["Los Angeles", "LA"], "avoid": [["highways", "tolls"], ["tolls", "highways"]]}}]}
{"id": "simple_209", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_209", "question": [[{"role": "user", "content": "Locate the nearest public library in Boston, Massachusetts with English fiction section and free Wi-Fi."}]], "function": [{"name": "public_library.find_nearby", "description": "Locate nearby public libraries based on specific criteria like English fiction availability and Wi-Fi.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Boston, MA"}, "facilities": {"type": "array", "items": {"type": "string", "enum": ["Wi-Fi", "Reading Room", "Fiction", "Children Section", "Cafe"]}, "description": "Facilities and sections in public library."}}, "required": ["location", "facilities"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n<functions>\n<function name=\"public_library.find_nearby\">\n<params>\n<param name=\"location\" value=\"Boston, MA\" type=\"string\"/>\n<param name=\"facilities\" value=\"English fiction section, free Wi-Fi\" type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>\n```", "possible_answer": [{"public_library.find_nearby": {"location": ["Boston, MA", "Boston, Massachusetts"], "facilities": [["Fiction", "Wi-Fi"], ["Wi-Fi", "Fiction"]]}}]}
{"id": "simple_224", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_224", "question": [[{"role": "user", "content": "Find the most followed person on twitter who tweets about psychology related to behaviour and group dynamics."}]], "function": [{"name": "social_media_analytics.most_followed", "description": "Find the most followed Twitter user related to certain topics.", "parameters": {"type": "dict", "properties": {"topic": {"type": "string", "description": "The main topic of interest."}, "sub_topics": {"type": "array", "items": {"type": "string"}, "description": "Sub-topics related to main topic. Default is empty."}, "region": {"type": "string", "description": "Region of interest for twitter search. Default is 'all'."}}, "required": ["topic"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n<functions>\n<function name=\"social_media_analytics.most_followed\">\n<params>\n<param name=\"topic\" value=\"psychology\" type=\"string\"/>\n<param name=\"sub_topics\" value=\"behaviour, group dynamics\" type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>\n```", "possible_answer": [{"social_media_analytics.most_followed": {"topic": ["psychology"], "sub_topics": [["behaviour", "group dynamics"]], "region": ["", "all"]}}]}
{"id": "simple_229", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_229", "question": [[{"role": "user", "content": "What's my Big Five Personality trait scores given that I am efficient, organized, easy going and compassionate?"}]], "function": [{"name": "get_bigfive_scores", "description": "Retrieve Big Five Personality trait scores based on individual's behavioural characteristics.", "parameters": {"type": "dict", "properties": {"characteristics": {"type": "array", "items": {"type": "string"}, "description": "List of user's behavioural characteristics."}, "scale": {"type": "string", "enum": ["high", "medium", "low"], "description": "The scoring scale of traits (default is medium)."}}, "required": ["characteristics"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n<functions>\n<function name=\"get_bigfive_scores\">\n<params>\n<param name=\"characteristics\" value=\"efficient, organized, easy going, compassionate\" type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>\n```", "possible_answer": [{"get_bigfive_scores": {"characteristics": [["efficient", "organized", "easy going", "compassionate"]], "scale": ["medium", ""]}}]}
{"id": "simple_231", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. malformed node or string on line 1: <ast.Name object at 0x7f248fdaf490>"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_231", "question": [[{"role": "user", "content": "Provide key war events in German history from 1871 to 1945."}]], "function": [{"name": "history.get_key_events", "description": "Retrieve key historical events within a specific period for a certain country.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The name of the country for which history is queried."}, "start_year": {"type": "integer", "description": "Start year of the period for which history is queried."}, "end_year": {"type": "integer", "description": "End year of the period for which history is queried."}, "event_type": {"type": "array", "items": {"type": "string", "enum": ["War", "Revolutions", "Diplomacy", "Economy"]}, "description": "Types of event. Default to 'all', which all types will be considered."}}, "required": ["country", "start_year", "end_year"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n<functions>\n<function name=\"history.get_key_events\">\n<params>\n<param name=\"country\" value=\"Germany\" type=\"string\"/>\n<param name=\"start_year\" value=\"1871\" type=\"integer\"/>\n<param name=\"end_year\" value=\"1945\" type=\"integer\"/>\n<param name=\"event_type\" value=\"war\" type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>\n```", "possible_answer": [{"history.get_key_events": {"country": ["Germany", "DE"], "start_year": [1871], "end_year": [1945], "event_type": [["War"]]}}]}
{"id": "simple_234", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'region': 'Europe'. Expected one of ['Northern', 'Southern', 'Eastern', 'Western']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_234", "question": [[{"role": "user", "content": "Find important Wars in European history during the 19th century."}]], "function": [{"name": "history_eu.fetch_events", "description": "Fetches significant historical events within a specific time period in European history.", "parameters": {"type": "dict", "properties": {"century": {"type": "integer", "description": "The century you are interested in."}, "region": {"type": "string", "description": "The region of Europe you are interested in.", "enum": ["Northern", "Southern", "Eastern", "Western"]}, "category": {"type": "string", "description": "Category of the historical events. Default is 'Culture'.", "enum": ["Wars", "Culture", "Politics", "Scientific", "Others"]}}, "required": ["century", "region"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n  <functions>\n    <function name=\"history_eu.fetch_events\">\n      <params>\n        <param name=\"century\" value=\"19\" type=\"integer\"/>\n        <param name=\"region\" value=\"Europe\" type=\"string\"/>\n        <param name=\"category\" value=\"War\" type=\"string\"/>\n      </params>\n    </function>\n  </functions>\n</TOOLCALL>\n```", "model_result_decoded": [{"history_eu.fetch_events": {"century": 19, "region": "Europe", "category": "War"}}], "possible_answer": [{"history_eu.fetch_events": {"century": [19], "region": ["Northern", "Southern", "Eastern", "Western"], "category": ["Wars"]}}]}
{"id": "simple_235", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'event': 'Treaty of Lisbon signing'. Expected one of ['Treaty of Lisbon', 'Signing of the Treaty of Lisbon', 'The signing of the Treaty of Lisbon']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_235", "question": [[{"role": "user", "content": "When was the signing of the Treaty of Lisbon?"}]], "function": [{"name": "get_event_date", "description": "Retrieve the date of a historical event.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The name of the historical event."}, "location": {"type": "string", "description": "Location where the event took place. Default to global if not specified."}}, "required": ["event"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n<functions>\n<function name=\"get_event_date\">\n<params>\n<param name=\"event\" value=\"Treaty of Lisbon signing\" type=\"string\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>\n```", "model_result_decoded": [{"get_event_date": {"event": "Treaty of Lisbon signing"}}], "possible_answer": [{"get_event_date": {"event": ["Treaty of Lisbon", "Signing of the Treaty of Lisbon", "The signing of the Treaty of Lisbon"], "location": ["", "Lisbon", "Lisbon, Portugal"]}}]}
{"id": "simple_238", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_238", "question": [[{"role": "user", "content": "Who was the president of the United States during the American Civil War?"}]], "function": [{"name": "us_history.get_president", "description": "Retrieve the U.S. president during a specific event in American history.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The event in U.S. history."}, "year": {"type": "integer", "description": "The specific year of the event."}}, "required": ["event", "year"]}}]}, "model_result_raw": "To answer this question, I need to know the specific year of the American Civil War. Could you please provide a year?\n", "model_result_decoded": [], "possible_answer": [{"us_history.get_president": {"event": ["American Civil War"], "year": [1861, 1862, 1863, 1864, 1865]}}]}
{"id": "simple_251", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'source': 'historical record'. Expected one of ['historical records']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_251", "question": [[{"role": "user", "content": "What is the earliest reference of Jesus Christ in history from historical record?"}]], "function": [{"name": "get_earliest_reference", "description": "Retrieve the earliest historical reference of a person.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the person."}, "source": {"type": "string", "enum": ["scriptures", "historical records"], "description": "Source to fetch the reference. Default is 'scriptures'"}}, "required": ["name"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n<functions>\n<function name=\"get_earliest_reference\">\n<params>\n<param name=\"name\" value=\"Jesus Christ\" type=\"string\"/>\n<param name=\"source\" value=\"historical record\" type=\"string\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>\n```", "model_result_decoded": [{"get_earliest_reference": {"name": "Jesus Christ", "source": "historical record"}}], "possible_answer": [{"get_earliest_reference": {"name": ["Jesus Christ"], "source": ["historical records"]}}]}
{"id": "simple_260", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Unexpected dict key parameter: 'width'.", "Missing dict key parameter: 'type'."], "error_type": "value_error:dict_key", "prompt": {"id": "simple_260", "question": [[{"role": "user", "content": "Calculate how many gallons of paint is required to paint a wall with width of 20ft and height of 12ft, assuming 1 gallon covers approximately 350 sq.ft. Don't include window area of 15 sq.ft."}]], "function": [{"name": "paint_requirement.calculate", "description": "Calculate the amount of paint required to paint a given area. Account for coverage efficiency of the paint and exclusions (like windows).", "parameters": {"type": "dict", "properties": {"area": {"type": "dict", "properties": {"width": {"type": "integer", "description": "The width of the area to be painted in feet."}, "height": {"type": "integer", "description": "The height of the area to be painted in feet."}}, "description": "The area to be painted."}, "paint_coverage": {"type": "integer", "description": "Coverage area per gallon of the paint in square feet.", "default": 350}, "exclusion": {"type": "dict", "properties": {"type": {"type": "string", "description": "The type of the exclusion e.g window, door etc."}, "area": {"type": "integer", "description": "The area of the exclusion in square feet."}}, "description": "Area not to be painted. Default to not use any exclusion if not specified."}}, "required": ["area", "paint_coverage"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n<functions>\n<function name=\"paint_requirement.calculate\">\n<params>\n<param name=\"area\" value=\"{&#x22;width&#x22;: 20, &#x22;height&#x22;: 12}\" type=\"dict\"/>\n<param name=\"paint_coverage\" value=\"350\" type=\"integer\"/>\n<param name=\"exclusion\" value=\"{&#x22;width&#x22;: 3.87, &#x22;height&#x22;: 3.87}\" type=\"dict\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>\n```", "model_result_decoded": [{"paint_requirement.calculate": {"area": {"width": 20, "height": 12}, "paint_coverage": 350, "exclusion": {"width": 3.87, "height": 3.87}}}], "possible_answer": [{"paint_requirement.calculate": {"area": [{"width": [20], "height": [12]}], "paint_coverage": [350], "exclusion": [{"type": ["window"], "area": [15]}]}}]}
{"id": "simple_277", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_277", "question": [[{"role": "user", "content": "Find the working hours and ticket price of The British Museum for this weekend, Jun.20,2023."}]], "function": [{"name": "museum_info", "description": "Get information about a museum including its opening hours and ticket prices for a specific date range.", "parameters": {"type": "dict", "properties": {"museum": {"type": "string", "description": "The name of the museum."}, "date": {"type": "string", "description": "The specific date for which information is needed, in the format of YYYY-MM-DD such as '2022-12-01'."}, "information": {"type": "array", "items": {"type": "string", "enum": ["opening_hours", "ticket_price", "address"]}, "description": "The type of information needed from the museum. This is optional and defaults to 'all' if not specified.", "default": "all"}}, "required": ["museum", "date"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"museum_info\"><params><param name=\"museum\" value=\"The British Museum\" type=\"string\"/><param name=\"date\" value=\"2023-06-20\" type=\"string\"/><param name=\"information\" value=\"working hours, ticket price\" type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"museum_info": {"museum": ["The British Museum"], "date": ["2023-06-20"], "information": [["opening_hours", "ticket_price"], ["ticket_price", "opening_hours"]]}}]}
{"id": "simple_278", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'features': ['price', 'ratings']. Expected one of [['price', 'rating']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_278", "question": [[{"role": "user", "content": "Find me the average price and ratings of piano from Yamaha."}]], "function": [{"name": "get_instrument_details", "description": "Retrieve the average price and ratings of an instrument from a particular manufacturer.", "parameters": {"type": "dict", "properties": {"instrument": {"type": "string", "description": "The name of the instrument."}, "manufacturer": {"type": "string", "description": "The manufacturer of the instrument."}, "features": {"type": "array", "items": {"type": "string", "enum": ["price", "rating"]}, "description": "The features to retrieve about the instrument. Default is 'price'"}}, "required": ["instrument", "manufacturer"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n  <functions>\n    <function name=\"get_instrument_details\">\n      <params>\n        <param name=\"instrument\" value=\"piano\" type=\"string\"/>\n        <param name=\"manufacturer\" value=\"Yamaha\" type=\"string\"/>\n        <param name=\"features\" value=\"['price', 'ratings']\" type=\"array\"/>\n      </params>\n    </function>\n  </functions>\n</TOOLCALL>\n```", "model_result_decoded": [{"get_instrument_details": {"instrument": "piano", "manufacturer": "Yamaha", "features": ["price", "ratings"]}}], "possible_answer": [{"get_instrument_details": {"instrument": ["piano"], "manufacturer": ["Yamaha"], "features": [["price", "rating"]]}}]}
{"id": "simple_305", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'performance_indicator': ['goals', 'assists']. Expected one of [['Goals Scored', 'Assists Made']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_305", "question": [[{"role": "user", "content": "Calculate the overall goal and assist of soccer player Messi in La Liga 2020-2021 season"}]], "function": [{"name": "sports_stats.get_performance", "description": "Compute the performance score of a soccer player given his game stats for a specific tournament in a season.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "Name of the player."}, "tournament": {"type": "string", "description": "Name of the soccer tournament."}, "season": {"type": "string", "description": "Specific season in format 'YYYY-YYYY'."}, "performance_indicator": {"type": "array", "items": {"type": "string", "enum": ["Goals Scored", "Assists Made", "Saves Made", "Cards Received"]}, "description": "Array of performance indicators. Use as much as possible. Default to use all if not specified."}}, "required": ["player_name", "tournament", "season"]}}]}, "model_result_raw": "I can calculate the performance score for Messi in La Liga 2020-2021, but I need to know which performance indicators to use. Since you specifically asked for goals and assists, I will use those.\n```tool_code\n<TOOLCALL>\n<functions>\n<function name=\"sports_stats.get_performance\">\n<params>\n<param name=\"player_name\" value=\"Messi\" type=\"string\"/>\n<param name=\"tournament\" value=\"La Liga\" type=\"string\"/>\n<param name=\"season\" value=\"2020-2021\" type=\"string\"/>\n<param name=\"performance_indicator\" value=\"['goals', 'assists']\" type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>\n```", "model_result_decoded": [{"sports_stats.get_performance": {"player_name": "Messi", "tournament": "La Liga", "season": "2020-2021", "performance_indicator": ["goals", "assists"]}}], "possible_answer": [{"sports_stats.get_performance": {"player_name": ["Messi", "Lionel Messi"], "tournament": ["La Liga"], "season": ["2020-2021"], "performance_indicator": [["Goals Scored", "Assists Made"]]}}]}
{"id": "simple_323", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'gender': 'female'. Expected one of ['women']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_323", "question": [[{"role": "user", "content": "Who is ranked as the top player in woman tennis?"}]], "function": [{"name": "sports_ranking.get_top_player", "description": "Get the top player in a specific sport.", "parameters": {"type": "dict", "properties": {"sport": {"type": "string", "description": "The type of sport."}, "gender": {"type": "string", "description": "The gender of the sport category. Optional.", "default": "men"}}, "required": ["sport"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n<functions>\n<function name=\"sports_ranking.get_top_player\">\n<params>\n<param name=\"sport\" value=\"tennis\" type=\"string\"/>\n<param name=\"gender\" value=\"female\" type=\"string\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>\n```", "model_result_decoded": [{"sports_ranking.get_top_player": {"sport": "tennis", "gender": "female"}}], "possible_answer": [{"sports_ranking.get_top_player": {"sport": ["tennis"], "gender": ["women"]}}]}
{"id": "simple_330", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'info_required': ['average_user_rating', 'age_range']. Expected one of [['average_review_rating', 'age_range']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_330", "question": [[{"role": "user", "content": "What's the average review rating and the age range for the board game 'Catan'?"}]], "function": [{"name": "board_game_info", "description": "Get the information about a board game from a database. ", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "Name of the board game."}, "info_required": {"type": "array", "items": {"type": "string", "enum": ["average_review_rating", "age_range", "number_of_players", "playing_time", "genre"]}, "description": "Array of information requested for the game."}}, "required": ["game_name", "info_required"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n<functions>\n<function name=\"board_game_info\">\n<params>\n<param name=\"game_name\" value=\"Catan\" type=\"string\"/>\n<param name=\"info_required\" value=\"['average_user_rating', 'age_range']\" type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>\n```", "model_result_decoded": [{"board_game_info": {"game_name": "Catan", "info_required": ["average_user_rating", "age_range"]}}], "possible_answer": [{"board_game_info": {"game_name": ["Catan"], "info_required": [["average_review_rating", "age_range"]]}}]}
{"id": "simple_333", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_333", "question": [[{"role": "user", "content": "Find the high and low temperatures, humidity, and precipitation for London, United Kingdom for the next 3 days."}]], "function": [{"name": "detailed_weather_forecast", "description": "Retrieve a detailed weather forecast for a specific location and time frame, including high/low temperatures, humidity, and precipitation.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}, "details": {"type": "array", "items": {"type": "string", "enum": ["high_low_temperature", "humidity", "precipitation"]}, "description": "Specific weather details required in the forecast."}}, "required": ["location", "days", "details"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n<functions>\n<function name=\"detailed_weather_forecast\">\n<params>\n<param name=\"location\" value=\"London, United Kingdom\" type=\"string\"/>\n<param name=\"days\" value=\"3\" type=\"integer\"/>\n<param name=\"details\" value=\"high temperature, low temperature, humidity, precipitation\" type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>\n```", "possible_answer": [{"detailed_weather_forecast": {"location": ["London, United Kingdom", "London"], "days": [3], "details": [["high_low_temperature", "humidity", "precipitation"]]}}]}
{"id": "simple_334", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. malformed node or string on line 1: <ast.Name object at 0x7f248fdaf010>"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_334", "question": [[{"role": "user", "content": "Check who is the winner in a game of blackjack given player having A and 10, dealer having 10 and 9. The Ace is considered 1."}]], "function": [{"name": "blackjack.check_winner", "description": "Checks and determines the winner in a game of blackjack.", "parameters": {"type": "dict", "properties": {"player_cards": {"type": "array", "items": {"type": "string"}, "description": "Cards held by the player."}, "dealer_cards": {"type": "array", "items": {"type": "string"}, "description": "Cards held by the dealer."}, "ace_value": {"type": "integer", "description": "The value considered for the ace card, can be either 1 or 11.", "default": 11}}, "required": ["player_cards", "dealer_cards"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n<functions>\n<function name=\"blackjack.check_winner\">\n<params>\n<param name=\"player_cards\" value=\"A,10\" type=\"array\"/>\n<param name=\"dealer_cards\" value=\"10,9\" type=\"array\"/>\n<param name=\"ace_value\" value=\"1\" type=\"integer\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>\n```", "possible_answer": [{"blackjack.check_winner": {"player_cards": [["A", "10"]], "dealer_cards": [["10", "9"]], "ace_value": [1]}}]}
{"id": "simple_358", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. malformed node or string on line 1: <ast.Name object at 0x7f248fdafb50>"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_358", "question": [[{"role": "user", "content": "Find a gluten-free cookie recipe that takes less than 30 minutes to prepare."}]], "function": [{"name": "recipe_search", "description": "Search for a cooking recipe based on specific dietary needs and time constraint.", "parameters": {"type": "dict", "properties": {"diet": {"type": "array", "items": {"type": "string", "enum": ["Gluten Free", "Dairy Free", "Vegan", "Vegetarian"]}, "description": "Specific dietary need."}, "time_limit": {"type": "integer", "description": "The maximum time to prepare the recipe in minutes. Default is 60 minutes."}, "dish": {"type": "string", "description": "The name of the dish to search for. Default is not use if not specified."}}, "required": ["dish", "diet"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"recipe_search\"><params><param name=\"diet\" value=\"gluten-free\" type=\"array\"/><param name=\"time_limit\" value=\"30\" type=\"integer\"/><param name=\"dish\" value=\"cookie\" type=\"string\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"recipe_search": {"diet": [["Gluten Free"], ["GF"], ["gluten free"]], "time_limit": [30], "dish": ["cookie"]}}]}
{"id": "simple_359", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. malformed node or string on line 1: <ast.Name object at 0x7f248fdac160>"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_359", "question": [[{"role": "user", "content": "Give me a recipe for a vegetarian pasta with cheese for 2 servings."}]], "function": [{"name": "recipe_search", "description": "Search for a recipe given dietary restriction, ingredients, and number of servings.", "parameters": {"type": "dict", "properties": {"dietary_restriction": {"type": "string", "description": "The dietary restriction, e.g., 'Vegetarian'."}, "ingredients": {"type": "array", "items": {"type": "string"}, "description": "The list of ingredients."}, "servings": {"type": "integer", "description": "The number of servings the recipe should make"}}, "required": ["dietary_restriction", "ingredients", "servings"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"recipe_search\"><params><param name=\"dietary_restriction\" value=\"Vegetarian\" type=\"string\"/><param name=\"ingredients\" value=\"pasta, cheese\" type=\"array\"/><param name=\"servings\" value=\"2\" type=\"integer\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"recipe_search": {"dietary_restriction": ["Vegetarian"], "ingredients": [["pasta", "cheese"]], "servings": [2]}}]}
{"id": "simple_363", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. malformed node or string on line 1: <ast.Name object at 0x7f248fdada80>"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_363", "question": [[{"role": "user", "content": "Find the closest sushi restaurant with a patio in Boston."}]], "function": [{"name": "restaurant_search.find_closest", "description": "Locate the closest sushi restaurant based on certain criteria, such as the presence of a patio.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city, for instance Boston, MA"}, "cuisine": {"type": "string", "description": "Type of food like Sushi."}, "amenities": {"type": "array", "items": {"type": "string", "enum": ["Patio", "Wi-Fi", "Happy Hour", "Wheelchair Accessible"]}, "description": "Preferred amenities in the restaurant. Default 'Wi-Fi'."}}, "required": ["location", "cuisine"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n  <functions>\n    <function name=\"restaurant_search.find_closest\">\n      <params>\n        <param name=\"location\" value=\"Boston, MA\" type=\"string\"/>\n        <param name=\"cuisine\" value=\"Sushi\" type=\"string\"/>\n        <param name=\"amenities\" value=\"patio\" type=\"array\"/>\n      </params>\n    </function>\n  </functions>\n</TOOLCALL>\n```", "possible_answer": [{"find_closest": {"location": ["Boston", "Boston, MA"], "cuisine": ["Sushi", "sushi"], "amenities": [["Patio"]]}}]}
{"id": "simple_369", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_369", "question": [[{"role": "user", "content": "Find a grocery store near me with organic fruits and vegetables in Houston."}]], "function": [{"name": "grocery_store.find_nearby", "description": "Locate nearby grocery stores based on specific criteria like organic fruits and vegetables.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Houston, TX"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["Organic", "Vegetables", "Fruits", "Dairy", "Seafood", "Bakery"]}, "description": "Categories of items to be found in the grocery store. Default is all if not specified."}}, "required": ["location"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"grocery_store.find_nearby\"><params><param name=\"location\" value=\"Houston, TX\" type=\"string\"/><param name=\"categories\" value=\"organic fruits and vegetables\" type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"grocery_store.find_nearby": {"location": ["Houston", "Houston, TX"], "categories": [["Organic", "Vegetables", "Fruits"], ["Organic", "Fruits", "Vegetables"], ["Vegetables", "Fruits", "Organic"], ["Fruits", "Vegetables", "Organic"], ["Fruits", "Organic", "Vegetables"], ["Vegetables", "Organic", "Fruits"]]}}]}
{"id": "simple_370", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_370", "question": [[{"role": "user", "content": "Order three bottles of olive oil and a five pound bag of rice from Safeway in Palo Alto."}]], "function": [{"name": "safeway.order", "description": "Order specified items from a Safeway location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location of the Safeway store, e.g. Palo Alto, CA."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order."}, "quantity": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item in the order list."}}, "required": ["location", "items", "quantity"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n<functions>\n<function name=\"safeway.order\">\n<params>\n<param name=\"location\" value=\"Palo Alto, CA\" type=\"string\"/>\n<param name=\"items\" value=\"olive oil, rice\" type=\"array\"/>\n<param name=\"quantity\" value=\"3, 5\" type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>\n```", "possible_answer": [{"safeway.order": {"location": ["Palo Alto", "Palo Alto, CA"], "items": [["olive oil", "rice"], ["olive oil", "bag of rice"]], "quantity": [[3, 1]]}}]}
{"id": "simple_373", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'pack_size'. Expected outer type array with inner type <class 'int'>. Parameter value: [None, None, 12]."], "error_type": "type_error:nested", "prompt": {"id": "simple_373", "question": [[{"role": "user", "content": "I want to buy apples, rice, and 12 pack of bottled water from a Walmart near San Jose. Show me the product information and stock availability."}]], "function": [{"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified."}}, "required": ["loc", "product_list"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n<functions>\n<function name=\"walmart.purchase\">\n<params>\n<param name=\"loc\" value=\"San Jose\" type=\"string\"/>\n<param name=\"product_list\" value=\"['apples', 'rice', 'bottled water']\" type=\"array\"/>\n<param name=\"pack_size\" value=\"[None, None, 12]\" type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>\n```", "model_result_decoded": [{"walmart.purchase": {"loc": "San Jose", "product_list": ["apples", "rice", "bottled water"], "pack_size": [null, null, 12]}}], "possible_answer": [{"walmart.purchase": {"loc": ["San Jose", "San Jose, CA"], "product_list": [["apples", "rice", "bottled water"], ["apples", "rice", "water"]], "pack_size": [[1, 1, 12]]}}]}
{"id": "simple_374", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'information': ['protein', 'calories', 'carbs']. Expected one of [['Protein', 'Calories', 'Carbohydrates']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_374", "question": [[{"role": "user", "content": "Check the amount of protein, calories and carbs in an avocado from Walmart."}]], "function": [{"name": "grocery_info.nutritional_info", "description": "Retrieve nutritional information for a given food item from a particular store", "parameters": {"type": "dict", "properties": {"store": {"type": "string", "description": "The store where the item is available"}, "food": {"type": "string", "description": "Food item for which information is needed."}, "information": {"type": "array", "items": {"type": "string", "enum": ["Protein", "Calories", "Carbohydrates", "Fat", "Fiber"]}, "description": "Nutritional details required."}}, "required": ["store", "food", "information"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n<functions>\n<function name=\"grocery_info.nutritional_info\">\n<params>\n<param name=\"store\" value=\"Walmart\" type=\"string\"/>\n<param name=\"food\" value=\"avocado\" type=\"string\"/>\n<param name=\"information\" value=\"['protein', 'calories', 'carbs']\" type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>\n```", "model_result_decoded": [{"grocery_info.nutritional_info": {"store": "Walmart", "food": "avocado", "information": ["protein", "calories", "carbs"]}}], "possible_answer": [{"grocery_info.nutritional_info": {"store": ["Walmart"], "food": ["avocado", "Avocado"], "information": [["Protein", "Calories", "Carbohydrates"]]}}]}
{"id": "simple_375", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. malformed node or string on line 1: <ast.Name object at 0x7f248fdaf640>"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_375", "question": [[{"role": "user", "content": "Check the total price for three pumpkins and two dozen eggs at Walmart."}]], "function": [{"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "dict", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional). Default to all if not specified."}}, "required": ["items", "quantities"]}}]}, "model_result_raw": "```xml\n<TOOLCALL>\n<functions>\n<function name=\"walmart.check_price\">\n<params>\n<param name=\"items\" value=\"pumpkins, eggs\" type=\"array\"/>\n<param name=\"quantities\" value=\"3, 24\" type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>\n```", "possible_answer": [{"walmart.check_price": {"items": [["pumpkins", "eggs"], ["pumpkin", "dozen eggs"]], "quantities": [[3, 24], [3, 2]], "store_location": [""]}}]}
{"id": "simple_380", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_380", "question": [[{"role": "user", "content": "Book a single room at a pet friendly hotel near Manhattan, New York for 3 nights starting from March 10th, 2023."}]], "function": [{"name": "hotel_booking", "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you want to book the hotel."}, "room_type": {"type": "string", "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."}, "duration": {"type": "integer", "description": "The number of nights you want to book the hotel for."}, "start_date": {"type": "string", "description": "The date when your stay begins."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["pet_friendly", "gym", "swimming_pool", "free_breakfast", "parking"]}, "description": "Optional preferences of stay at the hotel. Default to use all if not specified."}}, "required": ["location", "room_type", "duration", "start_date"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"hotel_booking\"><params><param name=\"location\" value=\"Manhattan, New York\" type=\"string\"/><param name=\"room_type\" value=\"single\" type=\"string\"/><param name=\"duration\" value=\"3\" type=\"integer\"/><param name=\"start_date\" value=\"March 10th, 2023\" type=\"string\"/><param name=\"preferences\" value=\"pet friendly\" type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"hotel_booking": {"location": ["Manhattan, New York", "Manhattan, NY", "NYC", "New York City"], "room_type": ["single"], "duration": [3], "start_date": ["2023-03-10", "03/10/2023", "Mar.10,2023", "March 10th, 2023", "March 10th,2023", "March10th, 2023", "March10th,2023"], "preferences": [["pet_friendly"]]}}]}
{"id": "simple_382", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'start_date': '10th December 2022'. Expected one of ['2022-12-10', '10/12/2022', 'Dec 10, 2022', 'December 10, 2022']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_382", "question": [[{"role": "user", "content": "Book a single room for two nights at the Hilton Hotel in Chicago, starting from 10th December 2022."}]], "function": [{"name": "book_hotel", "description": "Book a room of specified type for a particular number of nights at a specific hotel, starting from a specified date.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city in which the hotel is located."}, "room_type": {"type": "string", "description": "The type of room to be booked."}, "start_date": {"type": "string", "description": "The start date for the booking."}, "nights": {"type": "integer", "description": "The number of nights for which the booking is to be made."}}, "required": ["hotel_name", "location", "room_type", "start_date", "nights"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"book_hotel\"><params><param name=\"hotel_name\" value=\"Hilton Hotel\" type=\"string\"/><param name=\"location\" value=\"Chicago\" type=\"string\"/><param name=\"room_type\" value=\"single\" type=\"string\"/><param name=\"start_date\" value=\"10th December 2022\" type=\"string\"/><param name=\"nights\" value=\"2\" type=\"integer\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"book_hotel": {"hotel_name": "Hilton Hotel", "location": "Chicago", "room_type": "single", "start_date": "10th December 2022", "nights": 2}}], "possible_answer": [{"book_hotel": {"hotel_name": ["Hilton Hotel", "Hilton"], "location": ["Chicago"], "room_type": ["single"], "start_date": ["2022-12-10", "10/12/2022", "Dec 10, 2022", "December 10, 2022"], "nights": [2]}}]}