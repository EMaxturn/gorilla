{"id": "live_simple_13-3-9", "result": "<functions><function name=\"get_current_weather\"><params><param name=\"location\" value=\"Shanghai, China\" type=\"string\"/><param name=\"unit\" value=\"celsius\" type=\"string\"/></params></function></functions>", "input_token_count": 3819, "output_token_count": 49, "latency": 186.27248239517212}
{"id": "live_simple_14-3-10", "result": "<functions><function name=\"get_current_weather\"><params><param name=\"location\" value=\"Bangkok, Thailand\" type=\"string\"/><param name=\"unit\" value=\"fahrenheit\" type=\"string\"/></params></function></functions>", "input_token_count": 3807, "output_token_count": 49, "latency": 186.1922767162323}
{"id": "live_simple_20-4-0", "result": "<functions><function name=\"change_food\"><params><param name=\"food_item\" value=\"burger\" type=\"string\"/><param name=\"modification_request\" value=\"no onions,extra cheese\" type=\"string\"/></params></function></functions><|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n\n  user: any;\n  constructor(private userService: UserService, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.userService.getUser().subscribe((res: any) => {\n      this.user = res;\n    })\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  email: string;\n  password: string;\n  error: string;\n  constructor(private userService: UserService, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    if (this.authService.isLoggedIn()) {\n      this.router.navigate(['/']);\n    }\n  }\n\n  login() {\n    this.userService.login(this.email, this.password).subscribe((res: any) => {\n      if (res.success) {\n        this.authService.setToken(res.token);\n        this.router.navigate(['/']);\n      } else {\n        this.error = res.message;\n      }\n    })\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  name: string;\n  email: string;\n  password: string;\n  error: string;\n  constructor(private userService: UserService, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    if (this.authService.isLoggedIn()) {\n      this.router.navigate(['/']);\n    }\n  }\n\n  register() {\n    this.userService.register(this.name, this.email, this.password).subscribe((res: any) => {\n      if (res.success) {\n        this.authService.setToken(res.token);\n        this.router.navigate(['/']);\n      } else {\n        this.error = res.message;\n      }\n    })\n  }\n\n}\n<|repo_name|>sahilsharma-1999/angulartask<|file_sep|>/src/app/services/user.service.ts\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private http: HttpClient) { }\n\n  register(name: string, email: string, password: string): Observable<any> {\n    return this.http.post('http://localhost:3000/register', { name, email, password });\n  }\n\n  login(email: string, password: string): Observable<any> {\n    return this.http.post('http://localhost:3000/login', { email, password });\n  }\n\n  getUser(): Observable<any> {\n    return this.http.get('http://localhost:3000/user');\n  }\n\n  updateProfile(name: string, email: string, password: string): Observable<any> {\n    return this.http.put('http://localhost:3000/user', { name, email, password });\n  }\n\n  addTask(title: string, description: string): Observable<any> {\n    return this.http.post('http://localhost:3000/task', { title, description });\n  }\n\n  getTasks(): Observable<any> {\n    return this.http.get('http://localhost:3000/tasks');\n  }\n\n  deleteTask(id: string): Observable<any> {\n    return this.http.delete(`http://localhost:3000/task/${id}`);\n  }\n\n  updateTask(id: string, title: string, description: string): Observable<any> {\n    return this.http.put(`http://localhost:3000/task/${id}`, { title, description });\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-add-task',\n  templateUrl: './add-task.component.html',\n  styleUrls: ['./add-task.component.css']\n})\nexport class AddTaskComponent implements OnInit {\n\n  title: string;\n  description: string;\n  error: string;\n  constructor(private userService: UserService, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    if (!this.authService.isLoggedIn()) {\n      this.router.navigate(['/login']);\n    }\n  }\n\n  addTask() {\n    this.userService.addTask(this.title, this.description).subscribe((res: any) => {\n      if (res.success) {\n        this.router.navigate(['/tasks']);\n      } else {\n        this.error = res.message;\n      }\n    })\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-update-profile',\n  templateUrl: './update-profile.component.html',\n  styleUrls: ['./update-profile.component.css']\n})\nexport class UpdateProfileComponent implements OnInit {\n\n  name: string;\n  email: string;\n  password: string;\n  error: string;\n  constructor(private userService: UserService, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    if (!this.authService.isLoggedIn()) {\n      this.router.navigate(['/login']);\n    }\n  }\n\n  updateProfile() {\n    this.userService.updateProfile(this.name, this.email, this.password).subscribe((res: any) => {\n      if (res.success) {\n        this.router.navigate(['/profile']);\n      } else {\n        this.error = res.message;\n      }\n    })\n  }\n\n}\n<|file_sep|>import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AddTaskComponent } from './components/add-task/add-task.component';\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { ProfileComponent } from './components/profile/profile.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { TasksComponent } from './components/tasks/tasks.component';\nimport { UpdateProfileComponent } from './components/update-profile/update-profile.component';\nimport { AuthGuard } from './guards/auth.guard';\n\nconst routes: Routes = [\n  { path: '', component: DashboardComponent, canActivate: [AuthGuard] },\n  { path: 'login', component: LoginComponent },\n  { path: 'register', component: RegisterComponent },\n  { path: 'profile', component: ProfileComponent, canActivate: [AuthGuard] },\n  { path: 'update-profile', component: UpdateProfileComponent, canActivate: [AuthGuard] },\n  { path: 'add-task', component: AddTaskComponent, canActivate: [AuthGuard] },\n  { path: 'tasks', component: TasksComponent, canActivate: [AuthGuard] },\n  { path: '**', redirectTo: '' }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n<|repo_name|>sahilsharma-1999/angulartask<|file_sep|>/src/app/components/tasks/tasks.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-tasks',\n  templateUrl: './tasks.component.html',\n  styleUrls: ['./tasks.component.css']\n})\nexport class TasksComponent implements OnInit {\n\n  tasks: any;\n  constructor(private userService: UserService, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    if (!this.authService.isLoggedIn()) {\n      this.router.navigate(['/login']);\n    }\n    this.userService.getTasks().subscribe((res: any) => {\n      this.tasks = res.tasks;\n    })\n  }\n\n  deleteTask(id: string) {\n    this.userService.deleteTask(id).subscribe((res: any) => {\n      if (res.success) {\n        this.ngOnInit();\n      }\n    })\n  }\n\n}\n<|file_sep|>import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(private router: Router) { }\n\n  setToken(token: string) {\n    localStorage.setItem('token', token);\n  }\n\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n  isLoggedIn() {\n    return !!this.getToken();\n  }\n\n  logout() {\n    localStorage.removeItem('token');\n    this.router.navigate(['/login']);\n  }\n}\n<|repo_name|>sahilsharma-1999/angulartask<|file_sep|>/src/app/components/dashboard/dashboard.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    if (!this.authService.isLoggedIn()) {\n      this.router.navigate(['/login']);\n    }\n  }\n\n  logout() {\n    this.authService.logout();\n  }\n\n}\n<|repo_name|>jamesmccaffrey/CS-445<|file_sep|>/Project 1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1/Project1", "input_token_count": 3650, "output_token_count": 4096, "latency": 332.0337016582489}
{"id": "live_simple_24-5-2", "result": "<functions><function name=\"ChaFod\"><params><param name=\"TheFod\" value=\"BURGER\" type=\"string\"/></params></function></functions><|repo_name|>jameskyle/ember-cli-leaflet<|file_sep|>/tests/dummy/app/templates/application.hbs\n{{#leaflet-map lat=lat lng=lng zoom=zoom}}\n  {{#leaflet-tile-layer url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\" attribution=\"&copy; <a href='http://osm.org/copyright'>OpenStreetMap</a> contributors\"}}\n  {{/leaflet-tile-layer}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat2 lng=lng2}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat3 lng=lng3}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat4 lng=lng4}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat5 lng=lng5}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat6 lng=lng6}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat7 lng=lng7}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat8 lng=lng8}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat9 lng=lng9}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat10 lng=lng10}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat11 lng=lng11}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat12 lng=lng12}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat13 lng=lng13}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat14 lng=lng14}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat15 lng=lng15}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat16 lng=lng16}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat17 lng=lng17}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat18 lng=lng18}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat19 lng=lng19}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat20 lng=lng20}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat21 lng=lng21}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat22 lng=lng22}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat23 lng=lng23}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat24 lng=lng24}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat25 lng=lng25}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat26 lng=lng26}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat27 lng=lng27}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat28 lng=lng28}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat29 lng=lng29}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat30 lng=lng30}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat31 lng=lng31}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat32 lng=lng32}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat33 lng=lng33}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat34 lng=lng34}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat35 lng=lng35}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat36 lng=lng36}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat37 lng=lng37}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat38 lng=lng38}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat39 lng=lng39}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat40 lng=lng40}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat41 lng=lng41}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat42 lng=lng42}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat43 lng=lng43}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat44 lng=lng44}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat45 lng=lng45}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat46 lng=lng46}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat47 lng=lng47}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat48 lng=lng48}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat49 lng=lng49}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat50 lng=lng50}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat51 lng=lng51}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat52 lng=lng52}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat53 lng=lng53}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat54 lng=lng54}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat55 lng=lng55}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat56 lng=lng56}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat57 lng=lng57}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat58 lng=lng58}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat59 lng=lng59}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat60 lng=lng60}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat61 lng=lng61}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat62 lng=lng62}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat63 lng=lng63}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat64 lng=lng64}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat65 lng=lng65}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat66 lng=lng66}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat67 lng=lng67}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat68 lng=lng68}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat69 lng=lng69}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat70 lng=lng70}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat71 lng=lng71}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat72 lng=lng72}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat73 lng=lng73}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat74 lng=lng74}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat75 lng=lng75}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat76 lng=lng76}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat77 lng=lng77}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat78 lng=lng78}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat79 lng=lng79}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat80 lng=lng80}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat81 lng=lng81}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat82 lng=lng82}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat83 lng=lng83}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat84 lng=lng84}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat85 lng=lng85}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat86 lng=lng86}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat87 lng=lng87}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat88 lng=lng88}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat89 lng=lng89}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat90 lng=lng90}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat91 lng=lng91}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat92 lng=lng92}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat93 lng=lng93}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat94 lng=lng94}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n\n  {{#leaflet-marker lat=lat95 lng=lng", "input_token_count": 3466, "output_token_count": 4096, "latency": 332.24043130874634}
{"id": "live_simple_26-6-0", "result": "<functions>\n  <function name=\"uber.ride\">\n    <params>\n      <param name=\"loc\" value=\"123 \u0110\u01b0\u1eddng \u0110\u1ea1i h\u1ecdc, Berkeley, CA 94704\" type=\"string\"/>\n      <param name=\"type\" value=\"plus\" type=\"string\"/>\n      <param name=\"time\" value=\"10\" type=\"integer\"/>\n    </params>\n  </function>\n</functions>", "input_token_count": 4235, "output_token_count": 86, "latency": 189.53904914855957}
{"id": "live_simple_27-7-0", "result": "<functions><function name=\"uber.eat.order\"><params><param name=\"restaurant\" value=\"uber pitada\" type=\"string\"/><param name=\"items\" value=[\"burgers\", \"chicken wings\"] type=\"array\"/><param name=\"quantities\" value=[5, 6] type=\"array\"/></params></function></functions><|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  email: string;\n  password: string;\n  errorMessage: string;\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  login() {\n    this.authService.login(this.email, this.password).subscribe(\n      (user: User) => {\n        this.authService.setLoggedInUser(user);\n        this.router.navigate(['/']);\n      },\n      (error) => {\n        this.errorMessage = error.error.message;\n      }\n    );\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n  email: string;\n  password: string;\n  confirmPassword: string;\n  errorMessage: string;\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  register() {\n    if (this.password !== this.confirmPassword) {\n      this.errorMessage = 'Passwords do not match';\n      return;\n    }\n    this.authService.register(this.email, this.password).subscribe(\n      (user: User) => {\n        this.authService.setLoggedInUser(user);\n        this.router.navigate(['/']);\n      },\n      (error) => {\n        this.errorMessage = error.error.message;\n      }\n    );\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n  user: User;\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.user = this.authService.getLoggedInUser();\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/']);\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n  user: User;\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.user = this.authService.getLoggedInUser();\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/']);\n  }\n}\n<|repo_name|>sahilsharma-1999/angulartask<|file_sep|>/src/app/auth.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { User } from './user.model';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private loggedInUser: User;\n  constructor(private http: HttpClient) { }\n\n  register(email: string, password: string): Observable<User> {\n    return this.http.post<User>('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyD0Y6Q8X7Qq7ZQY7ZQY7ZQY7ZQY7ZQY7ZQ', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    });\n  }\n\n  login(email: string, password: string): Observable<User> {\n    return this.http.post<any>('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyD0Y6Q8X7Qq7ZQY7ZQY7ZQY7ZQY7ZQY7ZQ', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(\n      map((response) => {\n        this.setLoggedInUser(response);\n        return response;\n      })\n    );\n  }\n\n  setLoggedInUser(user: User) {\n    this.loggedInUser = user;\n    localStorage.setItem('user', JSON.stringify(user));\n  }\n\n  getLoggedInUser(): User {\n    if (this.loggedInUser) {\n      return this.loggedInUser;\n    }\n    const user = localStorage.getItem('user');\n    if (user) {\n      this.loggedInUser = JSON.parse(user);\n      return this.loggedInUser;\n    }\n    return null;\n  }\n\n  logout() {\n    this.loggedInUser = null;\n    localStorage.removeItem('user');\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n  user: User;\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.user = this.authService.getLoggedInUser();\n    if (!this.user) {\n      this.router.navigate(['/login']);\n    }\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/']);\n  }\n}\n<|repo_name|>sahilsharma-1999/angulartask<|file_sep|>/src/app/app-routing.module.ts\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthGuard } from './auth.guard';\nimport { HomeComponent } from './home/home.component';\nimport { LoginComponent } from './login/login.component';\nimport { ProfileComponent } from './profile/profile.component';\nimport { RegisterComponent } from './register/register.component';\n\nconst routes: Routes = [\n  { path: '', component: HomeComponent, canActivate: [AuthGuard] },\n  { path: 'login', component: LoginComponent },\n  { path: 'register', component: RegisterComponent },\n  { path: 'profile', component: ProfileComponent, canActivate: [AuthGuard] }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n<|repo_name|>sahilsharma-1999/angulartask<|file_sep|>/src/app/auth.guard.ts\nimport { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) { }\n\n  canActivate(): boolean {\n    const user = this.authService.getLoggedInUser();\n    if (!user) {\n      this.router.navigate(['/login']);\n      return false;\n    }\n    return true;\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  email: string;\n  password: string;\n  errorMessage: string;\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  login() {\n    this.authService.login(this.email, this.password).subscribe(\n      (user: User) => {\n        this.authService.setLoggedInUser(user);\n        this.router.navigate(['/']);\n      },\n      (error) => {\n        this.errorMessage = error.error.message;\n      }\n    );\n  }\n\n}\n<|repo_name|>sahilsharma-1999/recipe-app<|file_sep|>/src/app/recipes/recipe.service.ts\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Recipe } from './recipe.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RecipeService {\n  recipesChanged = new Subject<Recipe[]>();\n  private recipes: Recipe[] = [];\n  constructor(private http: HttpClient) { }\n\n  getRecipes() {\n    return this.http.get<Recipe[]>('https://recipe-app-1d1a6-default-rtdb.firebaseio.com/recipes.json')\n      .pipe(\n        map((recipes: Recipe[]) => {\n          return recipes.map(recipe => {\n            return {\n              ...recipe,\n              ingredients: recipe.ingredients ? recipe.ingredients : []\n            };\n          });\n        })\n      );\n  }\n\n  addRecipe(recipe: Recipe) {\n    this.http.post<Recipe>('https://recipe-app-1d1a6-default-rtdb.firebaseio.com/recipes.json', recipe)\n      .subscribe((recipeData: Recipe) => {\n        recipe.id = recipeData.name;\n        this.recipes.push(recipe);\n        this.recipesChanged.next(this.recipes.slice());\n      });\n  }\n\n  updateRecipe(index: number, newRecipe: Recipe) {\n    this.http.put<Recipe>(`https://recipe-app-1d1a6-default-rtdb.firebaseio.com/recipes/${newRecipe.id}.json`, newRecipe)\n      .subscribe(() => {\n        this.recipes[index] = newRecipe;\n        this.recipesChanged.next(this.recipes.slice());\n      });\n  }\n\n  deleteRecipe(id: string) {\n    this.http.delete(`https://recipe-app-1d1a6-default-rtdb.firebaseio.com/recipes/${id}.json`)\n      .subscribe(() => {\n        const updatedRecipes = this.recipes.filter(recipe => recipe.id !== id);\n        this.recipes = updatedRecipes;\n        this.recipesChanged.next(this.recipes.slice());\n      });\n  }\n}\n<|repo_name|>sahilsharma-1999/recipe-app<|file_sep|>/src/app/recipes/recipe.model.ts\nexport class Recipe {\n  id: string;\n  name: string;\n  description: string;\n  imagePath: string;\n  ingredients: Ingredient[];\n}\n\nexport class Ingredient {\n  name: string;\n  amount: number;\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { Recipe } from '../recipe.model';\nimport { RecipeService } from '../recipe.service';\n\n@Component({\n  selector: 'app-recipe-detail',\n  templateUrl: './recipe-detail.component.html',\n  styleUrls: ['./recipe-detail.component.css']\n})\nexport class RecipeDetailComponent implements OnInit {\n  recipe: Recipe;\n  id: string;\n  constructor(private recipeService: RecipeService, private route: ActivatedRoute, private router: Router) { }\n\n  ngOnInit(): void {\n    this.route.params.subscribe((params: Params) => {\n      this.id = params['id'];\n      this.recipeService.getRecipes().subscribe((recipes: Recipe[]) => {\n        this.recipe = recipes.find(recipe => recipe.id === this.id);\n      });\n    });\n  }\n\n  onEditRecipe() {\n    this.router.navigate(['edit'], { relativeTo: this.route });\n  }\n\n  onDeleteRecipe() {\n    this.recipeService.deleteRecipe(this.id);\n    this.router.navigate(['/']);\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { Recipe } from '../recipe.model';\nimport { RecipeService } from '../recipe.service';\n\n@Component({\n  selector: 'app-recipe-edit',\n  templateUrl: './recipe-edit.component.html',\n  styleUrls: ['./recipe-edit.component.css']\n})\nexport class RecipeEditComponent implements OnInit {\n  recipe: Recipe;\n  id: string;\n  constructor(private recipeService: RecipeService, private route: ActivatedRoute, private router: Router) { }\n\n  ngOnInit(): void {\n    this.route.params.subscribe((params: Params) => {\n      this.id = params['id'];\n      this.recipeService.getRecipes().subscribe((recipes: Recipe[]) => {\n        this.recipe = recipes.find(recipe => recipe.id === this.id);\n      });\n    });\n  }\n\n  onEditRecipe() {\n    this.recipeService.updateRecipe(this.recipe.id, this.recipe);\n    this.router.navigate(['../'], { relativeTo: this.route });\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { Recipe } from '../recipe.model';\nimport { RecipeService } from '../recipe.service';\n\n@Component({\n  selector: 'app-recipe-list',\n  templateUrl: './recipe-list.component.html',\n  styleUrls: ['./recipe-list.component.css']\n})\nexport class RecipeListComponent implements OnInit {\n  recipes: Recipe[];\n  constructor(private recipeService: RecipeService, private route: ActivatedRoute, private router: Router) { }\n\n  ngOnInit(): void {\n    this.recipeService.getRecipes().subscribe((recipes: Recipe[]) => {\n      this.recipes = recipes;\n    });\n    this.recipeService.recipesChanged.subscribe((recipes: Recipe[]) => {\n      this.recipes = recipes;\n    });\n  }\n\n  onNewRecipe() {\n    this.router.navigate(['new'], { relativeTo: this.route });\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n  email: string;\n  password: string;\n  confirmPassword: string;\n  errorMessage: string;\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  register(form: NgForm) {\n    if (this.password !== this.confirmPassword) {\n      this.errorMessage = 'Passwords do not match';\n      return;\n    }\n    this.authService.register(this.email, this.password).subscribe(\n      (user: User) => {\n        this.authService.setLoggedInUser(user);\n        this.router.navigate(['/']);\n      },\n      (error) => {\n        this.errorMessage = error.error.message;\n      }\n    );\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Recipe } from '../recipe.model';\nimport { RecipeService } from '../recipe.service';\n\n@Component({\n  selector: 'app-recipe-new',\n  templateUrl: './recipe-new.component.html',\n  styleUrls: ['./recipe-new.component.css']\n})\nexport class RecipeNewComponent implements OnInit {\n  recipe: Recipe = {\n    name: '',\n    description: '',\n    imagePath: '',\n    ingredients: []\n  };\n  constructor(private recipeService: RecipeService, private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  onAddRecipe(form: NgForm) {\n    this.recipeService.addRecipe(this.recipe);\n    this.router.navigate(['../'], { relativeTo: form.route });\n  }\n\n}\n<|file_sep|>import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { User } from './user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  userChanged = new Subject<User>();\n  private user: User;\n  constructor(private http: HttpClient) { }\n\n  register(email: string, password: string) {\n    return this.http.post<User>('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyD0Y6Q8X7Qq7ZQY7ZQY7ZQY7ZQY7ZQY7ZQ', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    });\n  }\n\n  login(email: string, password: string) {\n    return this.http.post<User>('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyD0Y6Q8X7Qq7ZQY7ZQY7ZQY7ZQY7ZQY7ZQ', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    });\n  }\n\n  setLoggedInUser(user: User) {\n    this.user = user;\n    this.userChanged.next(this.user);\n    localStorage.setItem('user', JSON.stringify(user));\n  }\n\n  getLoggedInUser() {\n    const user = localStorage.getItem('user');\n    if (user) {\n      this.user = JSON.parse(user);\n      return this.user;\n    }\n    return null;\n  }\n\n  logout() {\n    this.user = null;\n    this.userChanged.next(this.user);\n    localStorage.removeItem('user');\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n  user: User;\n  constructor(private authService: AuthService) { }\n\n  ngOnInit(): void {\n    this.user = this.authService.getLoggedInUser();\n    this.authService.userChanged.subscribe((user: User) => {\n      this.user = user;\n    });\n  }\n\n  logout() {\n    this.authService.logout();\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n  user: User;\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.user = this.authService.getLoggedInUser();\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/']);\n  }\n\n}\n<|repo_name|>sahilsharma-1999/recipe-app<|file_sep|>/src/app/recipes/recipe-list/recipe-list.component.css\n.recipe-list {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-evenly;\n}\n\n.recipe-item {\n  width: 300px;\n  margin: 10px;\n  padding: 10px;\n  border: 1px solid black;\n  border-radius: 5px;\n  box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.5);\n}\n\n.recipe", "input_token_count": 3777, "output_token_count": 4096, "latency": 350.35025668144226}
{"id": "live_simple_49-21-1", "result": "<functions><function name=\"find_beer\"><params><param name=\"brewery\" value=\"Creek\" type=\"string\"/><param name=\"taste\" value=\"bitter\" type=\"string\"/><param name=\"aroma\" value=\"chocolatey\" type=\"string\"/><param name=\"color\" value=\"dark\" type=\"string\"/><param name=\"style\" value=\"porter\" type=\"string\"/></params></function></functions>", "input_token_count": 6123, "output_token_count": 91, "latency": 226.98095226287842}
{"id": "live_simple_59-28-0", "result": "<functions><function name=\"get_movies\"><params><param name=\"city\" value=\"Mumbai\" type=\"string\"/><param name=\"movie_date\" value=\"2023-10-10\" type=\"string\"/></params></function></functions>", "input_token_count": 4664, "output_token_count": 51, "latency": 228.51655673980713}
{"id": "live_simple_78-39-0", "result": "<functions>\n  <function name=\"send_email\">\n    <params>\n      <param name=\"to_address\" value=\"andy@gorilla.ai\" type=\"string\"/>\n      <param name=\"subject\" value=\"Sales Forecast Request\" type=\"string\"/>\n      <param name=\"body\" value=\"Where is the latest sales forecast spreadsheet?\" type=\"string\"/>\n    </params>\n  </function>\n</functions>", "input_token_count": 4955, "output_token_count": 85, "latency": 230.72140884399414}
{"id": "live_simple_86-47-0", "result": "<functions><function name=\"sort_array\"><params><param name=\"array\" value=\"[1, 54, 3, 1, 76, 2343, 21]\" type=\"array\"/></params></function></functions>", "input_token_count": 3424, "output_token_count": 50, "latency": 230.20541405677795}
{"id": "live_simple_116-72-0", "result": "<functions><function name=\"sum_numbers\"><params><param name=\"numbers_list\" value=\"[133.0, 34.0]\" type=\"array\"/></params></function></functions>", "input_token_count": 3155, "output_token_count": 39, "latency": 230.85396194458008}
{"id": "live_simple_130-84-0", "result": "<functions>\n  <function name=\"requests.get\">\n    <params>\n      <param name=\"url\" value=\"https://192.120.45.67/sedgeapi/v1/cisco-nir/api/api/telemetry/flowrules/interfaceInfo\" type=\"string\"/>\n      <param name=\"params\" value=\"{&quot;fabricName&quot;: &quot;Network1&quot;, &quot;nodeId&quot;: 12, &quot;podId&quot;: 10, &quot;interfaceType&quot;: &quot;ethernet&quot;, &quot;infoType&quot;: &quot;statistics&quot;}\" type=\"dict\"/>\n    </params>\n  </function>\n</functions>", "input_token_count": 4158, "output_token_count": 149, "latency": 233.47361731529236}
{"id": "live_simple_131-84-1", "result": "<functions>\n  <function name=\"requests.get\">\n    <params>\n      <param name=\"url\" value=\"https://192.120.45.67/sedgeapi/v1/cisco-nir/api/api/telemetry/flowrules/interfaceInfo\" type=\"string\"/>\n      <param name=\"params\" value=\"{&quot;fabricName&quot;: &quot;Network1&quot;, &quot;nodeId&quot;: 12, &quot;podId&quot;: 10, &quot;interfaceType&quot;: &quot;Ethernet&quot;, &quot;infoType&quot;: &quot;Speed&quot;}\" type=\"dict\"/>\n    </params>\n  </function>\n</functions>", "input_token_count": 4206, "output_token_count": 148, "latency": 261.49881410598755}
{"id": "live_simple_167-99-1", "result": "<functions><function name=\"cmd_controller.execute\"><params><param name=\"command\" value=\"tasklist /FI \\\"IMAGENAME eq Code.exe\\\"\" type=\"string\"/></params></function></functions>", "input_token_count": 3590, "output_token_count": 42, "latency": 262.5905559062958}
{"id": "live_simple_181-106-0", "result": "<functions><function name=\"get_service_id\"><params><param name=\"service_id\" value=\"2\" type=\"integer\"/><param name=\"province_id\" value=\"1\" type=\"integer\"/><param name=\"district_name\" value=\"Chatuchak\" type=\"string\"/><param name=\"rating\" value=\"4.5\" type=\"float\"/></params></function></functions>", "input_token_count": 4657, "output_token_count": 78, "latency": 263.0284390449524}
{"id": "live_simple_186-111-0", "result": "<functions>\n  <function name=\"get_service_providers\">\n    <params>\n      <param name=\"service_id\" value=\"2\" type=\"integer\"/>\n      <param name=\"province_id\" value=\"3\" type=\"integer\"/>\n      <param name=\"rating\" value=\"4.5\" type=\"float\"/>\n      <param name=\"start_available_date\" value=\"2024-03-12 16:00:00\" type=\"string\"/>\n      <param name=\"end_available_date\" value=\"2024-03-12 18:00:00\" type=\"string\"/>\n    </params>\n  </function>\n</functions>", "input_token_count": 5635, "output_token_count": 134, "latency": 267.32423853874207}
{"id": "live_simple_188-113-0", "result": "<functions><function name=\"getDataForProfessional\"><params><param name=\"service_id\" value=\"2\" type=\"integer\"/><param name=\"province_id\" value=\"2\" type=\"integer\"/><param name=\"district_name\" value=\"Sankampang\" type=\"string\"/><param name=\"sub_district_name\" value=\"Ton Pao\" type=\"string\"/><param name=\"rating\" value=\"4.5\" type=\"float\"/></params></function></functions>", "input_token_count": 5670, "output_token_count": 96, "latency": 267.7451605796814}
{"id": "live_simple_193-116-1", "result": "<functions><function name=\"Weather_1_GetWeather\"><params><param name=\"city\" value=\"New York\" type=\"string\"/><param name=\"date\" value=\"2023-03-08\" type=\"string\"/></params></function></functions>", "input_token_count": 3576, "output_token_count": 53, "latency": 265.07613253593445}
{"id": "live_simple_199-116-7", "result": "<functions><function name=\"Weather_1_GetWeather\"><params><param name=\"city\" value=\"Marshall, MN\" type=\"string\"/><param name=\"date\" value=\"2023-03-05\" type=\"string\"/></params></function></functions>", "input_token_count": 3576, "output_token_count": 55, "latency": 262.4236042499542}
{"id": "live_simple_202-116-10", "result": "<functions><function name=\"Weather_1_GetWeather\"><params><param name=\"city\" value=\"Foster City\" type=\"string\"/><param name=\"date\" value=\"2023-04-25\" type=\"string\"/></params></function></functions>", "input_token_count": 3576, "output_token_count": 54, "latency": 260.87827134132385}
{"id": "live_simple_204-116-12", "result": "<functions><function name=\"Weather_1_GetWeather\"><params><param name=\"city\" value=\"Rutherford, NJ\" type=\"string\"/><param name=\"date\" value=\"2023-04-22\" type=\"string\"/></params></function></functions>", "input_token_count": 3581, "output_token_count": 55, "latency": 258.97831439971924}
{"id": "live_simple_221-117-13", "result": "<functions><function name=\"Movies_3_FindMovies\"><params><param name=\"directed_by\" value=\"James Gray\" type=\"string\"/><param name=\"genre\" value=\"dontcare\" type=\"string\"/><param name=\"cast\" value=\"dontcare\" type=\"string\"/></params></function></functions>", "input_token_count": 4323, "output_token_count": 65, "latency": 258.74747252464294}
{"id": "live_simple_236-124-1", "result": "<functions><function name=\"play_spotify_song\"><params><param name=\"query\" value=\"track:Dil Nu artist:Maninder Buttar\" type=\"string\"/></params></function></functions>", "input_token_count": 4006, "output_token_count": 42, "latency": 256.82395482063293}
{"id": "live_simple_245-127-0", "result": "<functions><function name=\"book_flight\"><params><param name=\"departure_location\" value=\"JFK\" type=\"string\"/><param name=\"departure_date\" value=\"16/03/2024\" type=\"string\"/><param name=\"departure_time\" value=\"14:00\" type=\"string\"/></params></function></functions><|repo_name|>jamesmccaffrey/CS-445-Project<|file_sep|>/src/edu/ncsu/csc316/assignment4/Node.java\npackage edu.ncsu.csc316.assignment4;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Node class for the graph\n * @author James McCaffrey\n *\n */\npublic class Node {\n\t\n\t/**\n\t * The name of the node\n\t */\n\tprivate String name;\n\t\n\t/**\n\t * The list of edges that are connected to this node\n\t */\n\tprivate List<Edge> edges;\n\t\n\t/**\n\t * Constructor for the node\n\t * @param name The name of the node\n\t */\n\tpublic Node(String name) {\n\t\tthis.name = name;\n\t\tedges = new ArrayList<Edge>();\n\t}\n\t\n\t/**\n\t * Adds an edge to the list of edges\n\t * @param edge The edge to add\n\t */\n\tpublic void addEdge(Edge edge) {\n\t\tedges.add(edge);\n\t}\n\t\n\t/**\n\t * Gets the name of the node\n\t * @return The name of the node\n\t */\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\t\n\t/**\n\t * Gets the list of edges\n\t * @return The list of edges\n\t */\n\tpublic List<Edge> getEdges() {\n\t\treturn edges;\n\t}\n\t\n\t/**\n\t * Gets the weight of the edge between this node and the given node\n\t * @param node The node to get the weight of the edge to\n\t * @return The weight of the edge\n\t */\n\tpublic int getWeight(Node node) {\n\t\tfor (Edge edge : edges) {\n\t\t\tif (edge.getOtherNode(this).equals(node)) {\n\t\t\t\treturn edge.getWeight();\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\t\n\t/**\n\t * Gets the edge between this node and the given node\n\t * @param node The node to get the edge to\n\t * @return The edge between this node and the given node\n\t */\n\tpublic Edge getEdge(Node node) {\n\t\tfor (Edge edge : edges) {\n\t\t\tif (edge.getOtherNode(this).equals(node)) {\n\t\t\t\treturn edge;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\t\n\t/**\n\t * Gets the number of edges connected to this node\n\t * @return The number of edges connected to this node\n\t */\n\tpublic int getNumEdges() {\n\t\treturn edges.size();\n\t}\n\t\n\t/**\n\t * Gets the number of nodes connected to this node\n\t * @return The number of nodes connected to this node\n\t */\n\tpublic int getNumNodes() {\n\t\treturn edges.size();\n\t}\n\t\n\t/**\n\t * Gets the average weight of the edges connected to this node\n\t * @return The average weight of the edges connected to this node\n\t */\n\tpublic double getAverageWeight() {\n\t\tint total = 0;\n\t\tfor (Edge edge : edges) {\n\t\t\ttotal += edge.getWeight();\n\t\t}\n\t\treturn (double) total / edges.size();\n\t}\n\t\n\t/**\n\t * Gets the maximum weight of the edges connected to this node\n\t * @return The maximum weight of the edges connected to this node\n\t */\n\tpublic int getMaxWeight() {\n\t\tint max = 0;\n\t\tfor (Edge edge : edges) {\n\t\t\tif (edge.getWeight() > max) {\n\t\t\t\tmax = edge.getWeight();\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n\t\n\t/**\n\t * Gets the minimum weight of the edges connected to this node\n\t * @return The minimum weight of the edges connected to this node\n\t */\n\tpublic int getMinWeight() {\n\t\tint min = Integer.MAX_VALUE;\n\t\tfor (Edge edge : edges) {\n\t\t\tif (edge.getWeight() < min) {\n\t\t\t\tmin = edge.getWeight();\n\t\t\t}\n\t\t}\n\t\treturn min;\n\t}\n\t\n\t/**\n\t * Gets the sum of the weights of the edges connected to this node\n\t * @return The sum of the weights of the edges connected to this node\n\t */\n\tpublic int getSumWeight() {\n\t\tint sum = 0;\n\t\tfor (Edge edge : edges) {\n\t\t\tsum += edge.getWeight();\n\t\t}\n\t\treturn sum;\n\t}\n\t\n\t/**\n\t * Gets the standard deviation of the weights of the edges connected to this node\n\t * @return The standard deviation of the weights of the edges connected to this node\n\t */\n\tpublic double getStandardDeviation() {\n\t\tdouble average = getAverageWeight();\n\t\tdouble sum = 0;\n\t\tfor (Edge edge : edges) {\n\t\t\tsum += Math.pow(edge.getWeight() - average, 2);\n\t\t}\n\t\treturn Math.sqrt(sum / edges.size());\n\t}\n\t\n\t/**\n\t * Gets the variance of the weights of the edges connected to this node\n\t * @return The variance of the weights of the edges connected to this node\n\t */\n\tpublic double getVariance() {\n\t\tdouble average = getAverageWeight();\n\t\tdouble sum = 0;\n\t\tfor (Edge edge : edges) {\n\t\t\tsum += Math.pow(edge.getWeight() - average, 2);\n\t\t}\n\t\treturn sum / edges.size();\n\t}\n\t\n\t/**\n\t * Gets the median of the weights of the edges connected to this node\n\t * @return The median of the weights of the edges connected to this node\n\t */\n\tpublic double getMedian() {\n\t\tint[] weights = new int[edges.size()];\n\t\tfor (int i = 0; i < edges.size(); i++) {\n\t\t\tweights[i] = edges.get(i).getWeight();\n\t\t}\n\t\tquickSort(weights, 0, weights.length - 1);\n\t\tif (weights.length % 2 == 0) {\n\t\t\treturn (double) (weights[weights.length / 2] + weights[weights.length / 2 - 1]) / 2;\n\t\t}\n\t\treturn (double) weights[weights.length / 2];\n\t}\n\t\n\t/**\n\t * Sorts the array using quick sort\n\t * @param array The array to sort\n\t * @param start The starting index\n\t * @param end The ending index\n\t */\n\tprivate void quickSort(int[] array, int start, int end) {\n\t\tif (start < end) {\n\t\t\tint pivot = partition(array, start, end);\n\t\t\tquickSort(array, start, pivot - 1);\n\t\t\tquickSort(array, pivot + 1, end);\n\t\t}\n\t}\n\t\n\t/**\n\t * Partitions the array\n\t * @param array The array to partition\n\t * @param start The starting index\n\t * @param end The ending index\n\t * @return The index of the pivot\n\t */\n\tprivate int partition(int[] array, int start, int end) {\n\t\tint pivot = array[end];\n\t\tint i = start - 1;\n\t\tfor (int j = start; j < end; j++) {\n\t\t\tif (array[j] <= pivot) {\n\t\t\t\ti++;\n\t\t\t\tint temp = array[i];\n\t\t\t\tarray[i] = array[j];\n\t\t\t\tarray[j] = temp;\n\t\t\t}\n\t\t}\n\t\tint temp = array[i + 1];\n\t\tarray[i + 1] = array[end];\n\t\tarray[end] = temp;\n\t\treturn i + 1;\n\t}\n\t\n\t/**\n\t * Gets the node with the highest average weight\n\t * @return The node with the highest average weight\n\t */\n\tpublic Node getHighestAverageWeight() {\n\t\tNode highest = this;\n\t\tfor (Edge edge : edges) {\n\t\t\tNode node = edge.getOtherNode(this);\n\t\t\tif (node.getAverageWeight() > highest.getAverageWeight()) {\n\t\t\t\thighest = node;\n\t\t\t}\n\t\t}\n\t\treturn highest;\n\t}\n\t\n\t/**\n\t * Gets the node with the lowest average weight\n\t * @return The node with the lowest average weight\n\t */\n\tpublic Node getLowestAverageWeight() {\n\t\tNode lowest = this;\n\t\tfor (Edge edge : edges) {\n\t\t\tNode node = edge.getOtherNode(this);\n\t\t\tif (node.getAverageWeight() < lowest.getAverageWeight()) {\n\t\t\t\tlowest = node;\n\t\t\t}\n\t\t}\n\t\treturn lowest;\n\t}\n\t\n\t/**\n\t * Gets the node with the highest maximum weight\n\t * @return The node with the highest maximum weight\n\t */\n\tpublic Node getHighestMaxWeight() {\n\t\tNode highest = this;\n\t\tfor (Edge edge : edges) {\n\t\t\tNode node = edge.getOtherNode(this);\n\t\t\tif (node.getMaxWeight() > highest.getMaxWeight()) {\n\t\t\t\thighest = node;\n\t\t\t}\n\t\t}\n\t\treturn highest;\n\t}\n\t\n\t/**\n\t * Gets the node with the lowest maximum weight\n\t * @return The node with the lowest maximum weight\n\t */\n\tpublic Node getLowestMaxWeight() {\n\t\tNode lowest = this;\n\t\tfor (Edge edge : edges) {\n\t\t\tNode node = edge.getOtherNode(this);\n\t\t\tif (node.getMaxWeight() < lowest.getMaxWeight()) {\n\t\t\t\tlowest = node;\n\t\t\t}\n\t\t}\n\t\treturn lowest;\n\t}\n\t\n\t/**\n\t * Gets the node with the highest minimum weight\n\t * @return The node with the highest minimum weight\n\t */\n\tpublic Node getHighestMinWeight() {\n\t\tNode highest = this;\n\t\tfor (Edge edge : edges) {\n\t\t\tNode node = edge.getOtherNode(this);\n\t\t\tif (node.getMinWeight() > highest.getMinWeight()) {\n\t\t\t\thighest = node;\n\t\t\t}\n\t\t}\n\t\treturn highest;\n\t}\n\t\n\t/**\n\t * Gets the node with the lowest minimum weight\n\t * @return The node with the lowest minimum weight\n\t */\n\tpublic Node getLowestMinWeight() {\n\t\tNode lowest = this;\n\t\tfor (Edge edge : edges) {\n\t\t\tNode node = edge.getOtherNode(this);\n\t\t\tif (node.getMinWeight() < lowest.getMinWeight()) {\n\t\t\t\tlowest = node;\n\t\t\t}\n\t\t}\n\t\treturn lowest;\n\t}\n\t\n\t/**\n\t * Gets the node with the highest sum weight\n\t * @return The node with the highest sum weight\n\t */\n\tpublic Node getHighestSumWeight() {\n\t\tNode highest = this;\n\t\tfor (Edge edge : edges) {\n\t\t\tNode node = edge.getOtherNode(this);\n\t\t\tif (node.getSumWeight() > highest.getSumWeight()) {\n\t\t\t\thighest = node;\n\t\t\t}\n\t\t}\n\t\treturn highest;\n\t}\n\t\n\t/**\n\t * Gets the node with the lowest sum weight\n\t * @return The node with the lowest sum weight\n\t */\n\tpublic Node getLowestSumWeight() {\n\t\tNode lowest = this;\n\t\tfor (Edge edge : edges) {\n\t\t\tNode node = edge.getOtherNode(this);\n\t\t\tif (node.getSumWeight() < lowest.getSumWeight()) {\n\t\t\t\tlowest = node;\n\t\t\t}\n\t\t}\n\t\treturn lowest;\n\t}\n\t\n\t/**\n\t * Gets the node with the highest standard deviation\n\t * @return The node with the highest standard deviation\n\t */\n\tpublic Node getHighestStandardDeviation() {\n\t\tNode highest = this;\n\t\tfor (Edge edge : edges) {\n\t\t\tNode node = edge.getOtherNode(this);\n\t\t\tif (node.getStandardDeviation() > highest.getStandardDeviation()) {\n\t\t\t\thighest = node;\n\t\t\t}\n\t\t}\n\t\treturn highest;\n\t}\n\t\n\t/**\n\t * Gets the node with the lowest standard deviation\n\t * @return The node with the lowest standard deviation\n\t */\n\tpublic Node getLowestStandardDeviation() {\n\t\tNode lowest = this;\n\t\tfor (Edge edge : edges) {\n\t\t\tNode node = edge.getOtherNode(this);\n\t\t\tif (node.getStandardDeviation() < lowest.getStandardDeviation()) {\n\t\t\t\tlowest = node;\n\t\t\t}\n\t\t}\n\t\treturn lowest;\n\t}\n\t\n\t/**\n\t * Gets the node with the highest variance\n\t * @return The node with the highest variance\n\t */\n\tpublic Node getHighestVariance() {\n\t\tNode highest = this;\n\t\tfor (Edge edge : edges) {\n\t\t\tNode node = edge.getOtherNode(this);\n\t\t\tif (node.getVariance() > highest.getVariance()) {\n\t\t\t\thighest = node;\n\t\t\t}\n\t\t}\n\t\treturn highest;\n\t}\n\t\n\t/**\n\t * Gets the node with the lowest variance\n\t * @return The node with the lowest variance\n\t */\n\tpublic Node getLowestVariance() {\n\t\tNode lowest = this;\n\t\tfor (Edge edge : edges) {\n\t\t\tNode node = edge.getOtherNode(this);\n\t\t\tif (node.getVariance() < lowest.getVariance()) {\n\t\t\t\tlowest = node;\n\t\t\t}\n\t\t}\n\t\treturn lowest;\n\t}\n\t\n\t/**\n\t * Gets the node with the highest median\n\t * @return The node with the highest median\n\t */\n\tpublic Node getHighestMedian() {\n\t\tNode highest = this;\n\t\tfor (Edge edge : edges) {\n\t\t\tNode node = edge.getOtherNode(this);\n\t\t\tif (node.getMedian() > highest.getMedian()) {\n\t\t\t\thighest = node;\n\t\t\t}\n\t\t}\n\t\treturn highest;\n\t}\n\t\n\t/**\n\t * Gets the node with the lowest median\n\t * @return The node with the lowest median\n\t */\n\tpublic Node getLowestMedian() {\n\t\tNode lowest = this;\n\t\tfor (Edge edge : edges) {\n\t\t\tNode node = edge.getOtherNode(this);\n\t\t\tif (node.getMedian() < lowest.getMedian()) {\n\t\t\t\tlowest = node;\n\t\t\t}\n\t\t}\n\t\treturn lowest;\n\t}\n\t\n\t/**\n\t * Gets the node with the highest number of edges\n\t * @return The node with the highest number of edges\n\t */\n\tpublic Node getHighestNumEdges() {\n\t\tNode highest = this;\n\t\tfor (Edge edge : edges) {\n\t\t\tNode node = edge.getOtherNode(this);\n\t\t\tif (node.getNumEdges() > highest.getNumEdges()) {\n\t\t\t\thighest = node;\n\t\t\t}\n\t\t}\n\t\treturn highest;\n\t}\n\t\n\t/**\n\t * Gets the node with the lowest number of edges\n\t * @return The node with the lowest number of edges\n\t */\n\tpublic Node getLowestNumEdges() {\n\t\tNode lowest = this;\n\t\tfor (Edge edge : edges) {\n\t\t\tNode node = edge.getOtherNode(this);\n\t\t\tif (node.getNumEdges() < lowest.getNumEdges()) {\n\t\t\t\tlowest = node;\n\t\t\t}\n\t\t}\n\t\treturn lowest;\n\t}\n\t\n\t/**\n\t * Gets the node with the highest number of nodes\n\t * @return The node with the highest number of nodes\n\t */\n\tpublic Node getHighestNumNodes() {\n\t\tNode highest = this;\n\t\tfor (Edge edge : edges) {\n\t\t\tNode node = edge.getOtherNode(this);\n\t\t\tif (node.getNumNodes() > highest.getNumNodes()) {\n\t\t\t\thighest = node;\n\t\t\t}\n\t\t}\n\t\treturn highest;\n\t}\n\t\n\t/**\n\t * Gets the node with the lowest number of nodes\n\t * @return The node with the lowest number of nodes\n\t */\n\tpublic Node getLowestNumNodes() {\n\t\tNode lowest = this;\n\t\tfor (Edge edge : edges) {\n\t\t\tNode node = edge.getOtherNode(this);\n\t\t\tif (node.getNumNodes() < lowest.getNumNodes()) {\n\t\t\t\tlowest = node;\n\t\t\t}\n\t\t}\n\t\treturn lowest;\n\t}\n\t\n\t/**\n\t * Gets the node with the highest weight to this node\n\t * @return The node with the highest weight to this node\n\t */\n\tpublic Node getHighestWeight() {\n\t\tNode highest = this;\n\t\tfor (Edge edge : edges) {\n\t\t\tNode node = edge.getOtherNode(this);\n\t\t\tif (edge.getWeight() > highest.getWeight(node)) {\n\t\t\t\thighest = node;\n\t\t\t}\n\t\t}\n\t\treturn highest;\n\t}\n\t\n\t/**\n\t * Gets the node with the lowest weight to this node\n\t * @return The node with the lowest weight to this node\n\t */\n\tpublic Node getLowestWeight() {\n\t\tNode lowest = this;\n\t\tfor (Edge edge : edges) {\n\t\t\tNode node = edge.getOtherNode(this);\n\t\t\tif (edge.getWeight() < lowest.getWeight(node)) {\n\t\t\t\tlowest = node;\n\t\t\t}\n\t\t}\n\t\treturn lowest;\n\t}\n\t\n\t/**\n\t * Gets the node with the highest weight to this node\n\t * @param node The node to get the highest weight to\n\t * @return The node with the highest weight to this node\n\t */\n\tpublic Node getHighestWeight(Node node) {\n\t\tNode highest = this;\n\t\tfor (Edge edge : edges) {\n\t\t\tif (edge.getOtherNode(this).equals(node)) {\n\t\t\t\treturn edge.getOtherNode(this);\n\t\t\t}\n\t\t\tif (edge.getWeight() > highest.getWeight(edge.getOtherNode(this))) {\n\t\t\t\thighest = edge.getOtherNode(this);\n\t\t\t}\n\t\t}\n\t\treturn highest;\n\t}\n\t\n\t/**\n\t * Gets the node with the lowest weight to this node\n\t * @param node The node to get the lowest weight to\n\t * @return The node with the lowest weight to this node\n\t */\n\tpublic Node getLowestWeight(Node node) {\n\t\tNode lowest = this;\n\t\tfor (Edge edge : edges) {\n\t\t\tif (edge.getOtherNode(this).equals(node)) {\n\t\t\t\treturn edge.getOtherNode(this);\n\t\t\t}\n\t\t\tif (edge.getWeight() < lowest.getWeight(edge.getOtherNode(this))) {\n\t\t\t\tlowest = edge.getOtherNode(this);\n\t\t\t}\n\t\t}\n\t\treturn lowest;\n\t}\n\t\n\t/**\n\t * Gets the node with the highest weight to this node\n\t * @param node The node to get the highest weight to\n\t * @return The node with the highest weight to this node\n\t */\n\tpublic Node getHighestWeightTo(Node node) {\n\t\tNode highest = this;\n\t\tfor (Edge edge : edges) {\n\t\t\tif (edge.getOtherNode(this).equals(node)) {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tif (edge.getWeight() > highest.getWeight(node)) {\n\t\t\t\thighest = edge.getOtherNode(this);\n\t\t\t}\n\t\t}\n\t\treturn highest;\n\t}\n\t\n\t/**\n\t * Gets the node with the lowest weight to this node\n\t * @param node The node to get the lowest weight to\n\t * @return The node with the lowest weight to this node\n\t */\n\tpublic Node getLowestWeightTo(Node node) {\n\t\tNode lowest = this;\n\t\tfor (Edge edge : edges) {\n\t\t\tif (edge.getOtherNode(this).equals(node)) {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tif (edge.getWeight() < lowest.getWeight(node)) {\n\t\t\t\tlowest = edge.getOtherNode(this);\n\t\t\t}\n\t\t}\n\t\treturn lowest;\n\t}\n\t\n\t/**\n\t * Gets the node with the highest weight from this node\n\t * @param node The node to get the highest weight from\n\t * @return The node with the highest weight from this node\n\t */\n\tpublic Node getHighestWeightFrom(Node node) {\n\t\tNode highest = this;\n\t\tfor (Edge edge : edges) {\n\t\t\tif (edge.getOtherNode(this).equals(node)) {\n\t\t\t", "input_token_count": 4045, "output_token_count": 4096, "latency": 409.34059262275696}
