{"accuracy": 0.8, "correct_count": 24, "total_count": 30}
{"id": "simple_96", "model_name": "DeepSeek-R1", "test_category": "simple", "valid": false, "error": ["Unexpected dict key parameter: 'column'.", "Missing dict key parameter: 'field'."], "error_type": "value_error:dict_key", "prompt": {"id": "simple_96", "question": [[{"role": "user", "content": "Find records in database in user table where age is greater than 25 and job is 'engineer'."}]], "function": [{"name": "database.query", "description": "Query the database based on certain conditions.", "parameters": {"type": "dict", "properties": {"table": {"type": "string", "description": "Name of the table to query."}, "conditions": {"type": "array", "items": {"type": "dict", "properties": {"field": {"type": "string", "description": "The field to apply the condition."}, "operation": {"type": "string", "description": "The operation to be performed.", "enum": ["<", ">", "=", ">=", "<="]}, "value": {"type": "string", "description": "The value to be compared."}}, "required": ["field", "operation", "value"]}, "description": "Conditions for the query."}}, "required": ["table", "conditions"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"database.query\">\n<param name=\"table\" type=\"string\">user</param>\n<param name=\"conditions\" type=\"array\">\n[\n  {\"column\": \"age\", \"operator\": \">\", \"value\": 25},\n  {\"column\": \"job\", \"operator\": \"=\", \"value\": \"engineer\"}\n]\n</param>\n</function>\n</functions>\n</TOOLCALL>", "model_result_decoded": [{"database.query": {"table": "user", "conditions": [{"column": "age", "operator": ">", "value": 25}, {"column": "job", "operator": "=", "value": "engineer"}]}}], "possible_answer": [{"database.query": {"table": ["user"], "conditions": [[{"field": ["age"], "operation": [">"], "value": ["25"]}, {"field": ["job"], "operation": ["="], "value": ["engineer"]}]]}}]}
{"id": "simple_208", "model_name": "DeepSeek-R1", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'avoid': ['highways', 'toll roads']. Expected one of [['highways', 'tolls'], ['tolls', 'highways']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_208", "question": [[{"role": "user", "content": "Get me the directions from New York to Los Angeles avoiding highways and toll roads."}]], "function": [{"name": "map_service.get_directions", "description": "Retrieve directions from a starting location to an ending location, including options for route preferences.", "parameters": {"type": "dict", "properties": {"start": {"type": "string", "description": "Starting location for the route."}, "end": {"type": "string", "description": "Ending location for the route."}, "avoid": {"type": "array", "items": {"type": "string", "enum": ["tolls", "highways", "ferries"]}, "description": "Route features to avoid. Default is ['highways', 'ferries']"}}, "required": ["start", "end"]}}]}, "model_result_raw": "<TOOLCALL><functions>\n<function name=\"map_service.get_directions\">\n<param name=\"start\" type=\"string\">New York</param>\n<param name=\"end\" type=\"string\">Los Angeles</param>\n<param name=\"avoid\" type=\"array\">[\"highways\", \"toll roads\"]</param>\n</function>\n</functions></TOOLCALL>", "model_result_decoded": [{"map_service.get_directions": {"start": "New York", "end": "Los Angeles", "avoid": ["highways", "toll roads"]}}], "possible_answer": [{"map_service.get_directions": {"start": ["New York", "NYC"], "end": ["Los Angeles", "LA"], "avoid": [["highways", "tolls"], ["tolls", "highways"]]}}]}
{"id": "simple_244", "model_name": "DeepSeek-R1", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'work_title': 'Philosophi\u00e6 Naturalis Principia Mathematica'. Expected one of ['Law of Universal Gravitation', 'Universal Law of Gravitation', 'The law of universal gravitation']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_244", "question": [[{"role": "user", "content": "What year was the law of universal gravitation published by Isaac Newton?"}]], "function": [{"name": "publication_year.find", "description": "Fetches the year a particular scientific work was published.", "parameters": {"type": "dict", "properties": {"author": {"type": "string", "description": "Name of the author of the work."}, "work_title": {"type": "string", "description": "Title of the scientific work."}, "location": {"type": "string", "description": "Place of the publication, if known. Default to 'all'."}}, "required": ["author", "work_title"]}}]}, "model_result_raw": "The question asks for the publication year of Isaac Newton's law of universal gravitation, which was published in his work *Philosophi\u00e6 Naturalis Principia Mathematica*. The available function requires the author's name and the work's title. \n\n<TOOLCALL><functions>\n<function name=\"publication_year.find\">\n  <param name=\"author\" type=\"string\">Isaac Newton</param>\n  <param name=\"work_title\" type=\"string\">Philosophi\u00e6 Naturalis Principia Mathematica</param>\n</function>\n</functions></TOOLCALL>", "model_result_decoded": [{"publication_year.find": {"author": "Isaac Newton", "work_title": "Philosophi\u00e6 Naturalis Principia Mathematica"}}], "possible_answer": [{"publication_year.find": {"author": ["Isaac Newton"], "work_title": ["Law of Universal Gravitation", "Universal Law of Gravitation", "The law of universal gravitation"], "location": ["", "all"]}}]}
{"id": "simple_328", "model_name": "DeepSeek-R1", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'parameters': ['rating', 'min_players', 'max_players']. Expected one of [['rating', 'player count'], ['player count', 'rating']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_328", "question": [[{"role": "user", "content": "Find the rating and player count of the board game 'Ticket to Ride'."}]], "function": [{"name": "boardgame.get_info", "description": "Retrieve detailed information of a board game.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "Name of the board game."}, "parameters": {"type": "array", "items": {"type": "string", "enum": ["player count", "playing time", "age", "mechanics", "rating"]}, "description": "Game characteristics interested."}, "language": {"type": "string", "description": "The preferred language for the game information, default is English"}}, "required": ["name", "parameters"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"boardgame.get_info\">\n<param name=\"name\" type=\"string\">Ticket to Ride</param>\n<param name=\"parameters\" type=\"array\">[\"rating\",\"min_players\",\"max_players\"]</param>\n</function>\n</functions>\n</TOOLCALL>", "model_result_decoded": [{"boardgame.get_info": {"name": "Ticket to Ride", "parameters": ["rating", "min_players", "max_players"]}}], "possible_answer": [{"boardgame.get_info": {"name": ["Ticket to Ride"], "parameters": [["rating", "player count"], ["player count", "rating"]], "language": ["", "English"]}}]}
{"id": "simple_360", "model_name": "DeepSeek-R1", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'maxCalories': 499. Expected one of [500]."], "error_type": "value_error:others", "prompt": {"id": "simple_360", "question": [[{"role": "user", "content": "Find a recipe for pasta carbonara which contains only less than 500 calories."}]], "function": [{"name": "find_recipe", "description": "Locate a recipe based on name and its calorie content", "parameters": {"type": "dict", "properties": {"recipeName": {"type": "string", "description": "The recipe's name."}, "maxCalories": {"type": "integer", "description": "The maximum calorie content of the recipe.", "default": 1000}}, "required": ["recipeName"]}}]}, "model_result_raw": "<TOOLCALL><functions>\n  <function name=\"find_recipe\">\n    <param name=\"recipeName\" type=\"string\">pasta carbonara</param>\n    <param name=\"maxCalories\" type=\"integer\">499</param>\n  </function>\n</functions></TOOLCALL>", "model_result_decoded": [{"find_recipe": {"recipeName": "pasta carbonara", "maxCalories": 499}}], "possible_answer": [{"find_recipe": {"recipeName": ["pasta carbonara"], "maxCalories": [500]}}]}
{"id": "simple_380", "model_name": "DeepSeek-R1", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'preferences': ['pet friendly', 'near Manhattan']. Expected one of [['pet_friendly']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_380", "question": [[{"role": "user", "content": "Book a single room at a pet friendly hotel near Manhattan, New York for 3 nights starting from March 10th, 2023."}]], "function": [{"name": "hotel_booking", "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you want to book the hotel."}, "room_type": {"type": "string", "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."}, "duration": {"type": "integer", "description": "The number of nights you want to book the hotel for."}, "start_date": {"type": "string", "description": "The date when your stay begins."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["pet_friendly", "gym", "swimming_pool", "free_breakfast", "parking"]}, "description": "Optional preferences of stay at the hotel. Default to use all if not specified."}}, "required": ["location", "room_type", "duration", "start_date"]}}]}, "model_result_raw": "<TOOLCALL><functions>\n<function name=\"hotel_booking\">\n<param name=\"location\" type=\"string\">New York City</param>\n<param name=\"room_type\" type=\"string\">single</param>\n<param name=\"duration\" type=\"integer\">3</param>\n<param name=\"start_date\" type=\"string\">2023-03-10</param>\n<param name=\"preferences\" type=\"array\">[\"pet friendly\", \"near Manhattan\"]</param>\n</function>\n</functions></TOOLCALL>", "model_result_decoded": [{"hotel_booking": {"location": "New York City", "room_type": "single", "duration": 3, "start_date": "2023-03-10", "preferences": ["pet friendly", "near Manhattan"]}}], "possible_answer": [{"hotel_booking": {"location": ["Manhattan, New York", "Manhattan, NY", "NYC", "New York City"], "room_type": ["single"], "duration": [3], "start_date": ["2023-03-10", "03/10/2023", "Mar.10,2023", "March 10th, 2023", "March 10th,2023", "March10th, 2023", "March10th,2023"], "preferences": [["pet_friendly"]]}}]}