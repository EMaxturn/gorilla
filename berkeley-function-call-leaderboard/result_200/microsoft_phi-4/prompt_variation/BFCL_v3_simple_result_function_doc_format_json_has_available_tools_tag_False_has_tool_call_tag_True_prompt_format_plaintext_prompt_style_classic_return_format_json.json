{"id": "simple_19", "result": "```json\n[{\"function\":\"math.gcd\",\"parameters\":{\"num1\":40,\"num2\":50}}]\n```<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { User } from 'src/app/models/user.model';\nimport { UserService } from 'src/app/services/user.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n\n  user: User;\n  constructor(private authService: AuthService, private userService: UserService, private router: Router, private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n    this.user = this.authService.user;\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n\n  updateProfile() {\n    this.userService.updateProfile(this.user).subscribe(\n      (res) => {\n        this.toastr.success('Profile updated successfully');\n      },\n      (err) => {\n        this.toastr.error('Error updating profile');\n      }\n    );\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  email: string;\n  password: string;\n  constructor(private authService: AuthService, private router: Router, private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n  }\n\n  login() {\n    this.authService.login(this.email, this.password).subscribe(\n      (res) => {\n        this.toastr.success('Login successful');\n        this.router.navigate(['/']);\n      },\n      (err) => {\n        this.toastr.error('Error logging in');\n      }\n    );\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  email: string;\n  password: string;\n  confirmPassword: string;\n  constructor(private authService: AuthService, private router: Router, private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n  }\n\n  register() {\n    if (this.password !== this.confirmPassword) {\n      this.toastr.error('Passwords do not match');\n      return;\n    }\n    this.authService.register(this.email, this.password).subscribe(\n      (res) => {\n        this.toastr.success('Registration successful');\n        this.router.navigate(['/login']);\n      },\n      (err) => {\n        this.toastr.error('Error registering');\n      }\n    );\n  }\n\n}\n<|repo_name|>mohamed-ahmed-elsayed/online-exam<|file_sep|>/src/app/services/user.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { User } from '../models/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private http: HttpClient) { }\n\n  updateProfile(user: User): Observable<any> {\n    return this.http.put('/api/user/update', user);\n  }\n}\n<|repo_name|>mohamed-ahmed-elsayed/online-exam<|file_sep|>/src/app/services/auth.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { User } from '../models/user.model';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  user: User;\n  constructor(private http: HttpClient, private router: Router) { }\n\n  login(email: string, password: string): Observable<any> {\n    return this.http.post('/api/auth/login', { email, password });\n  }\n\n  register(email: string, password: string): Observable<any> {\n    return this.http.post('/api/auth/register', { email, password });\n  }\n\n  logout() {\n    this.user = null;\n    localStorage.removeItem('token');\n    this.router.navigate(['/login']);\n  }\n\n  isAuthenticated(): boolean {\n    return !!localStorage.getItem('token');\n  }\n\n  setToken(token: string) {\n    localStorage.setItem('token', token);\n  }\n\n  getToken(): string {\n    return localStorage.getItem('token');\n  }\n\n  setUser(user: User) {\n    this.user = user;\n  }\n\n  getUser(): User {\n    return this.user;\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor(private authService: AuthService, private router: Router, private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n  }\n\n  logout() {\n    this.authService.logout();\n  }\n\n  isAuthenticated(): boolean {\n    return this.authService.isAuthenticated();\n  }\n\n  getUser(): any {\n    return this.authService.getUser();\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor(private authService: AuthService, private router: Router, private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n  }\n\n  isAuthenticated(): boolean {\n    return this.authService.isAuthenticated();\n  }\n\n  getUser(): any {\n    return this.authService.getUser();\n  }\n\n}\n<|file_sep|>import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { HomeComponent } from './components/home/home.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { ProfileComponent } from './components/profile/profile.component';\nimport { AuthGuard } from './guards/auth.guard';\n\nconst routes: Routes = [\n  { path: '', component: HomeComponent },\n  { path: 'login', component: LoginComponent },\n  { path: 'register', component: RegisterComponent },\n  { path: 'profile', component: ProfileComponent, canActivate: [AuthGuard] },\n  { path: '**', redirectTo: '' }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n<|repo_name|>mohamed-ahmed-elsayed/online-exam<|file_sep|>/src/app/guards/auth.guard.ts\nimport { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(private authService: AuthService, private router: Router, private toastr: ToastrService) { }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    if (this.authService.isAuthenticated()) {\n      return true;\n    } else {\n      this.toastr.error('You must be logged in to access this page');\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { User } from 'src/app/models/user.model';\nimport { UserService } from 'src/app/services/user.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n\n  user: User;\n  constructor(private authService: AuthService, private userService: UserService, private router: Router, private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n    this.user = this.authService.getUser();\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n\n  updateProfile() {\n    this.userService.updateUser(this.user).subscribe(\n      (res) => {\n        this.toastr.success('Profile updated successfully');\n      },\n      (err) => {\n        this.toastr.error('Error updating profile');\n      }\n    );\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { User } from 'src/app/models/user.model';\nimport { UserService } from 'src/app/services/user.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  user: User = new User();\n  constructor(private authService: AuthService, private userService: UserService, private router: Router, private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n  }\n\n  register() {\n    this.userService.registerUser(this.user).subscribe(\n      (res) => {\n        this.toastr.success('Registration successful');\n        this.router.navigate(['/login']);\n      },\n      (err) => {\n        this.toastr.error('Error registering');\n      }\n    );\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { User } from 'src/app/models/user.model';\nimport { UserService } from 'src/app/services/user.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  user: User = new User();\n  constructor(private authService: AuthService, private userService: UserService, private router: Router, private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n  }\n\n  login() {\n    this.userService.loginUser(this.user).subscribe(\n      (res) => {\n        this.authService.setUser(res);\n        this.toastr.success('Login successful');\n        this.router.navigate(['/']);\n      },\n      (err) => {\n        this.toastr.error('Error logging in');\n      }\n    );\n  }\n\n}\n<|repo_name|>mohamed-ahmed-elsayed/online-exam<|file_sep|>/src/app/services/user.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { User } from '../models/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private http: HttpClient) { }\n\n  registerUser(user: User): Observable<any> {\n    return this.http.post('/api/users/register', user);\n  }\n\n  loginUser(user: User): Observable<any> {\n    return this.http.post('/api/users/login', user);\n  }\n\n  updateUser(user: User): Observable<any> {\n    return this.http.put('/api/users/update', user);\n  }\n\n  getUserById(id: string): Observable<any> {\n    return this.http.get(`/api/users/${id}`);\n  }\n\n  getAllUsers(): Observable<any> {\n    return this.http.get('/api/users');\n  }\n\n  deleteUser(id: string): Observable<any> {\n    return this.http.delete(`/api/users/${id}`);\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { User } from 'src/app/models/user.model';\nimport { UserService } from 'src/app/services/user.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-users',\n  templateUrl: './users.component.html',\n  styleUrls: ['./users.component.css']\n})\nexport class UsersComponent implements OnInit {\n\n  users: User[];\n  constructor(private authService: AuthService, private userService: UserService, private router: Router, private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n    this.userService.getAllUsers().subscribe(\n      (res) => {\n        this.users = res;\n      },\n      (err) => {\n        this.toastr.error('Error getting users');\n      }\n    );\n  }\n\n  deleteUser(id: string) {\n    this.userService.deleteUser(id).subscribe(\n      (res) => {\n        this.toastr.success('User deleted successfully');\n        this.ngOnInit();\n      },\n      (err) => {\n        this.toastr.error('Error deleting user');\n      }\n    );\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { User } from 'src/app/models/user.model';\nimport { UserService } from 'src/app/services/user.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-add-user',\n  templateUrl: './add-user.component.html',\n  styleUrls: ['./add-user.component.css']\n})\nexport class AddUserComponent implements OnInit {\n\n  user: User = new User();\n  constructor(private authService: AuthService, private userService: UserService, private router: Router, private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n  }\n\n  addUser() {\n    this.userService.registerUser(this.user).subscribe(\n      (res) => {\n        this.toastr.success('User added successfully');\n        this.router.navigate(['/users']);\n      },\n      (err) => {\n        this.toastr.error('Error adding user');\n      }\n    );\n  }\n\n}\n<|repo_name|>mohamed-ahmed-elsayed/online-exam<|file_sep|>/src/app/services/auth.service.ts\nimport { Injectable } from '@angular/core';\nimport { User } from '../models/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor() { }\n\n  setUser(user: User) {\n    localStorage.setItem('user', JSON.stringify(user));\n  }\n\n  getUser(): User {\n    return JSON.parse(localStorage.getItem('user'));\n  }\n\n  logout() {\n    localStorage.removeItem('user');\n  }\n\n  isAuthenticated(): boolean {\n    return !!localStorage.getItem('user');\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { User } from 'src/app/models/user.model';\nimport { UserService } from 'src/app/services/user.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-edit-user',\n  templateUrl: './edit-user.component.html',\n  styleUrls: ['./edit-user.component.css']\n})\nexport class EditUserComponent implements OnInit {\n\n  user: User;\n  constructor(private authService: AuthService, private userService: UserService, private router: Router, private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n    this.userService.getUserById(this.authService.getUser()._id).subscribe(\n      (res) => {\n        this.user = res;\n      },\n      (err) => {\n        this.toastr.error('Error getting user');\n      }\n    );\n  }\n\n  updateUser() {\n    this.userService.updateUser(this.user).subscribe(\n      (res) => {\n        this.toastr.success('User updated successfully');\n        this.router.navigate(['/users']);\n      },\n      (err) => {\n        this.toastr.error('Error updating user');\n      }\n    );\n  }\n\n}\n<|file_sep|>import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { ProfileComponent } from './components/profile/profile.component';\nimport { UsersComponent } from './components/users/users.component';\nimport { AddUserComponent } from './components/add-user/add-user.component';\nimport { EditUserComponent } from './components/edit-user/edit-user.component';\nimport { AuthGuard } from './guards/auth.guard';\n\nconst routes: Routes = [\n  { path: '', component: LoginComponent },\n  { path: 'login', component: LoginComponent },\n  { path: 'register', component: RegisterComponent },\n  { path: 'profile', component: ProfileComponent, canActivate: [AuthGuard] },\n  { path: 'users', component: UsersComponent, canActivate: [AuthGuard] },\n  { path: 'add-user', component: AddUserComponent, canActivate: [AuthGuard] },\n  { path: 'edit-user', component: EditUserComponent, canActivate: [AuthGuard] },\n  { path: '**', redirectTo: '' }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n<|repo_name|>mohamed-ahmed-elsayed/online-exam<|file_sep|>/src/app/models/user.model.ts\nexport class User {\n    _id: string;\n    name: string;\n    email: string;\n    password: string;\n    role: string;\n    token: string;\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport { User } from '../models/user.model';\nimport { UserService } from '../services/user.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  user: User = new User();\n  constructor(private authService: AuthService, private router: Router, private userService: UserService, private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n  }\n\n  login() {\n    this.authService.login(this.user).subscribe(\n      (res) => {\n        this.toastr.success('Login successful');\n        this.router.navigate(['/']);\n      },\n      (err) => {\n        this.toastr.error(err.error.message);\n      }\n    );\n  }\n\n  register() {\n    this.userService.register(this.user).subscribe(\n      (res) => {\n        this.toastr.success('Registration successful');\n        this.router.navigate(['/login']);\n      },\n      (err) => {\n        this.toastr.error(err.error.message);\n      }\n    );\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor(private authService: AuthService, private router: Router, private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n  }\n\n  logout() {\n    this.authService.logout().", "input_token_count": 3012, "output_token_count": 4096, "latency": 458.88220500946045}
{"id": "simple_25", "result": "```json\n[{\"function\":\"calculate_final_velocity\",\"parameters\":{\"height\":150,\"initial_velocity\":0,\"gravity\":9.81}}]\n```", "input_token_count": 3667, "output_token_count": 31, "latency": 331.3920431137085}
{"id": "simple_58", "result": "```json\n[{\"function\":\"cell_biology.function_lookup\",\"parameters\":{\"molecule\":\"ATP synthase\",\"organelle\":\"mitochondria\",\"specific_function\":true}}]\n```", "input_token_count": 3508, "output_token_count": 39, "latency": 329.67971420288086}
{"id": "simple_94", "result": "```json\n[{\"function\":\"update_user_info\",\"parameters\":{\"user_id\":43523,\"update_info\":{\"name\":\"John Doe\",\"email\":\"johndoe@email.com\"}}}]\n```<|repo_name|>jameskyle/ember-cli-leaflet<|file_sep|>/tests/dummy/app/templates/application.hbs\n{{#leaflet-map lat=lat lng=lng zoom=zoom}}\n  {{#leaflet-tile-layer url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\" attribution=\"&copy; <a href='http://osm.org/copyright'>OpenStreetMap</a> contributors\"}}\n  {{/leaflet-tile-layer}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n{{/leaflet-map}}\n\n{{outlet}}\n<|repo_name|>jameskyle/ember-cli-leaflet<|file_sep|>/tests/dummy/app/templates/components/leaflet-map.hbs\n{{#leaflet-map lat=lat lng=lng zoom=zoom}}\n  {{#leaflet-tile-layer url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\" attribution=\"&copy; <a href='http://osm.org/copyright'>OpenStreetMap</a> contributors\"}}\n  {{/leaflet-tile-layer}}\n\n  {{#each markers as |marker|}}\n    {{#leaflet-marker lat=marker.lat lng=marker.lng}}\n      {{#leaflet-popup}}\n        <h1>Hello World!</h1>\n      {{/leaflet-popup}}\n    {{/leaflet-marker}}\n  {{/each}}\n{{/leaflet-map}}\n<|file_sep|>import Ember from 'ember';\nimport { moduleForComponent, test } from 'ember-qunit';\nimport hbs from 'htmlbars-inline-precompile';\n\nmoduleForComponent('leaflet-tile-layer', 'Integration | Component | leaflet tile layer', {\n  integration: true\n});\n\ntest('it renders', function(assert) {\n  assert.expect(1);\n\n  this.set('url', 'http://{s}.tile.osm.org/{z}/{x}/{y}.png');\n  this.set('attribution', '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors');\n\n  this.render(hbs`{{leaflet-tile-layer url=url attribution=attribution}}`);\n\n  assert.equal(this.$('img').attr('src'), 'http://{s}.tile.osm.org/{z}/{x}/{y}.png');\n});\n<|file_sep|>import Ember from 'ember';\nimport { moduleForComponent, test } from 'ember-qunit';\nimport hbs from 'htmlbars-inline-precompile';\n\nmoduleForComponent('leaflet-marker', 'Integration | Component | leaflet marker', {\n  integration: true\n});\n\ntest('it renders', function(assert) {\n  assert.expect(1);\n\n  this.set('lat', 51.505);\n  this.set('lng', -0.09);\n\n  this.render(hbs`{{leaflet-marker lat=lat lng=lng}}`);\n\n  assert.equal(this.$('img').attr('src'), 'http://cdn.leafletjs.com/leaflet-0.7.3/images/marker-icon.png');\n});\n<|file_sep|>import Ember from 'ember';\nimport { moduleForComponent, test } from 'ember-qunit';\nimport hbs from 'htmlbars-inline-precompile';\n\nmoduleForComponent('leaflet-popup', 'Integration | Component | leaflet popup', {\n  integration: true\n});\n\ntest('it renders', function(assert) {\n  assert.expect(1);\n\n  this.render(hbs`{{leaflet-popup}}`);\n\n  assert.equal(this.$('.leaflet-popup-content').text().trim(), '');\n});\n<|file_sep|>import Ember from 'ember';\nimport { moduleForComponent, test } from 'ember-qunit';\nimport hbs from 'htmlbars-inline-precompile';\n\nmoduleForComponent('leaflet-map', 'Integration | Component | leaflet map', {\n  integration: true\n});\n\ntest('it renders', function(assert) {\n  assert.expect(1);\n\n  this.set('lat', 51.505);\n  this.set('lng', -0.09);\n  this.set('zoom', 13);\n\n  this.render(hbs`{{leaflet-map lat=lat lng=lng zoom=zoom}}`);\n\n  assert.equal(this.$('.leaflet-container').attr('style'), 'width: 100%; height: 100%;');\n});\n<|file_sep|>import Ember from 'ember';\nimport { moduleForComponent, test } from 'ember-qunit';\nimport hbs from 'htmlbars-inline-precompile';\n\nmoduleForComponent('leaflet-popup', 'Integration | Component | leaflet popup', {\n  integration: true\n});\n\ntest('it renders with content', function(assert) {\n  assert.expect(1);\n\n  this.render(hbs`{{#leaflet-popup}}<h1>Hello World!</h1>{{/leaflet-popup}}`);\n\n  assert.equal(this.$('.leaflet-popup-content').text().trim(), 'Hello World!');\n});\n<|repo_name|>jameskyle/ember-cli-leaflet<|file_sep|>/tests/dummy/app/templates/components/leaflet-map-with-markers.hbs\n{{#leaflet-map lat=lat lng=lng zoom=zoom}}\n  {{#leaflet-tile-layer url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\" attribution=\"&copy; <a href='http://osm.org/copyright'>OpenStreetMap</a> contributors\"}}\n  {{/leaflet-tile-layer}}\n\n  {{#each markers as |marker|}}\n    {{#leaflet-marker lat=marker.lat lng=marker.lng}}\n      {{#leaflet-popup}}\n        <h1>Hello World!</h1>\n      {{/leaflet-popup}}\n    {{/leaflet-marker}}\n  {{/each}}\n{{/leaflet-map}}\n<|file_sep|>import Ember from 'ember';\nimport { moduleForComponent, test } from 'ember-qunit';\nimport hbs from 'htmlbars-inline-precompile';\n\nmoduleForComponent('leaflet-map', 'Integration | Component | leaflet map', {\n  integration: true\n});\n\ntest('it renders with markers', function(assert) {\n  assert.expect(1);\n\n  this.set('lat', 51.505);\n  this.set('lng', -0.09);\n  this.set('zoom', 13);\n  this.set('markers', [\n    { lat: 51.505, lng: -0.09 },\n    { lat: 51.51, lng: -0.1 }\n  ]);\n\n  this.render(hbs`{{leaflet-map-with-markers lat=lat lng=lng zoom=zoom markers=markers}}`);\n\n  assert.equal(this.$('.leaflet-marker-icon').length, 2);\n});\n<|repo_name|>jameskyle/ember-cli-leaflet<|file_sep|>/addon/components/leaflet-tile-layer.js\nimport Ember from 'ember';\nimport LeafletComponent from './leaflet-component';\n\nexport default LeafletComponent.extend({\n  tagName: 'img',\n  classNames: ['leaflet-tile-layer'],\n  attributeBindings: ['src', 'alt', 'crossOrigin'],\n\n  src: Ember.computed('url', 'bounds', 'tileSize', 'zoom', 'x', 'y', function() {\n    return this.get('url')\n      .replace('{s}', this.get('subdomains')[this.get('zoom') % this.get('subdomains').length])\n      .replace('{z}', this.get('zoom'))\n      .replace('{x}', this.get('x'))\n      .replace('{y}', this.get('y'));\n  }),\n\n  alt: 'Tile layer',\n\n  crossOrigin: 'anonymous'\n});\n<|file_sep|>import Ember from 'ember';\nimport LeafletComponent from './leaflet-component';\n\nexport default LeafletComponent.extend({\n  tagName: 'div',\n  classNames: ['leaflet-popup'],\n  attributeBindings: ['style'],\n\n  style: Ember.computed('lat', 'lng', 'offset', function() {\n    return `left: ${this.get('offset').left}px; top: ${this.get('offset').top}px;`;\n  }),\n\n  didInsertElement() {\n    this._super(...arguments);\n\n    this.get('leafletMap').on('popupopen', () => {\n      this.set('leafletMap', this.get('leafletMap'));\n    });\n  },\n\n  willDestroyElement() {\n    this._super(...arguments);\n\n    this.get('leafletMap').off('popupopen');\n  }\n});\n<|file_sep|>import Ember from 'ember';\nimport LeafletComponent from './leaflet-component';\n\nexport default LeafletComponent.extend({\n  tagName: 'div',\n  classNames: ['leaflet-marker'],\n  attributeBindings: ['style'],\n\n  style: Ember.computed('lat', 'lng', 'offset', function() {\n    return `left: ${this.get('offset').left}px; top: ${this.get('offset').top}px;`;\n  }),\n\n  didInsertElement() {\n    this._super(...arguments);\n\n    this.get('leafletMap').on('viewreset', () => {\n      this.set('leafletMap', this.get('leafletMap'));\n    });\n  },\n\n  willDestroyElement() {\n    this._super(...arguments);\n\n    this.get('leafletMap').off('viewreset');\n  }\n});\n<|repo_name|>jameskyle/ember-cli-leaflet<|file_sep|>/addon/components/leaflet-map.js\nimport Ember from 'ember';\nimport LeafletComponent from './leaflet-component';\n\nexport default LeafletComponent.extend({\n  tagName: 'div',\n  classNames: ['leaflet-container'],\n  attributeBindings: ['style'],\n\n  style: Ember.computed('width', 'height', function() {\n    return `width: ${this.get('width')}; height: ${this.get('height')};`;\n  }),\n\n  didInsertElement() {\n    this._super(...arguments);\n\n    this.set('leafletMap', L.map(this.$().get(0), this.get('options')));\n\n    this.get('leafletMap').on('viewreset', () => {\n      this.set('leafletMap', this.get('leafletMap'));\n    });\n  },\n\n  willDestroyElement() {\n    this._super(...arguments);\n\n    this.get('leafletMap').off('viewreset');\n  }\n});\n<|file_sep|>import Ember from 'ember';\nimport { moduleForComponent, test } from 'ember-qunit';\nimport hbs from 'htmlbars-inline-precompile';\n\nmoduleForComponent('leaflet-tile-layer', 'Integration | Component | leaflet tile layer', {\n  integration: true\n});\n\ntest('it renders with subdomains', function(assert) {\n  assert.expect(1);\n\n  this.set('url', 'http://{s}.tile.osm.org/{z}/{x}/{y}.png');\n  this.set('subdomains', ['a', 'b', 'c']);\n  this.set('attribution', '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors');\n\n  this.render(hbs`{{leaflet-tile-layer url=url subdomains=subdomains attribution=attribution}}`);\n\n  assert.equal(this.$('img').attr('src'), 'http://a.tile.osm.org/{z}/{x}/{y}.png');\n});\n<|repo_name|>jameskyle/ember-cli-leaflet<|file_sep|>/tests/dummy/app/templates/components/leaflet-tile-layer.hbs\n{{#leaflet-tile-layer url=url subdomains=subdomains attribution=attribution}}\n{{/leaflet-tile-layer}}\n<|file_sep|>import Ember from 'ember';\nimport { moduleForComponent, test } from 'ember-qunit';\nimport hbs from 'htmlbars-inline-precompile';\n\nmoduleForComponent('leaflet-tile-layer', 'Integration | Component | leaflet tile layer', {\n  integration: true\n});\n\ntest('it renders with attribution', function(assert) {\n  assert.expect(1);\n\n  this.set('url', 'http://{s}.tile.osm.org/{z}/{x}/{y}.png');\n  this.set('attribution', '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors');\n\n  this.render(hbs`{{leaflet-tile-layer url=url attribution=attribution}}`);\n\n  assert.equal(this.$('img').attr('title'), '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors');\n});\n<|file_sep|>import Ember from 'ember';\nimport { moduleForComponent, test } from 'ember-qunit';\nimport hbs from 'htmlbars-inline-precompile';\n\nmoduleForComponent('leaflet-marker', 'Integration | Component | leaflet marker', {\n  integration: true\n});\n\ntest('it renders with content', function(assert) {\n  assert.expect(1);\n\n  this.render(hbs`{{#leaflet-marker lat=lat lng=lng}}<h1>Hello World!</h1>{{/leaflet-marker}}`);\n\n  assert.equal(this.$('.leaflet-marker-icon').text().trim(), 'Hello World!');\n});\n<|file_sep|>import Ember from 'ember';\nimport { moduleForComponent, test } from 'ember-qunit';\nimport hbs from 'htmlbars-inline-precompile';\n\nmoduleForComponent('leaflet-map', 'Integration | Component | leaflet map', {\n  integration: true\n});\n\ntest('it renders with options', function(assert) {\n  assert.expect(1);\n\n  this.set('lat', 51.505);\n  this.set('lng', -0.09);\n  this.set('zoom', 13);\n  this.set('options', { zoomControl: false });\n\n  this.render(hbs`{{leaflet-map lat=lat lng=lng zoom=zoom options=options}}`);\n\n  assert.equal(this.$('.leaflet-control-zoom').length, 0);\n});\n<|repo_name|>jameskyle/ember-cli-leaflet<|file_sep|>/tests/dummy/app/templates/components/leaflet-marker.hbs\n{{#leaflet-marker lat=lat lng=lng}}\n  {{#leaflet-popup}}\n    <h1>Hello World!</h1>\n  {{/leaflet-popup}}\n{{/leaflet-marker}}\n<|repo_name|>jameskyle/ember-cli-leaflet<|file_sep|>/tests/dummy/app/templates/components/leaflet-tile-layer-with-attribution.hbs\n{{#leaflet-tile-layer url=url attribution=attribution}}\n{{/leaflet-tile-layer}}\n<|repo_name|>jameskyle/ember-cli-leaflet<|file_sep|>/tests/dummy/app/templates/components/leaflet-tile-layer-with-subdomains.hbs\n{{#leaflet-tile-layer url=url subdomains=subdomains attribution=attribution}}\n{{/leaflet-tile-layer}}\n<|file_sep|>import Ember from 'ember';\nimport LeafletComponent from './leaflet-component';\n\nexport default LeafletComponent.extend({\n  tagName: 'div',\n  classNames: ['leaflet-popup-content'],\n  attributeBindings: ['style'],\n\n  style: Ember.computed('lat', 'lng', 'offset', function() {\n    return `left: ${this.get('offset').left}px; top: ${this.get('offset').top}px;`;\n  }),\n\n  didInsertElement() {\n    this._super(...arguments);\n\n    this.get('leafletMap').on('popupopen', () => {\n      this.set('leafletMap', this.get('leafletMap'));\n    });\n  },\n\n  willDestroyElement() {\n    this._super(...arguments);\n\n    this.get('leafletMap').off('popupopen');\n  }\n});\n<|file_sep|>import Ember from 'ember';\nimport LeafletComponent from './leaflet-component';\n\nexport default LeafletComponent.extend({\n  tagName: 'img',\n  classNames: ['leaflet-marker-icon'],\n  attributeBindings: ['src', 'alt', 'crossOrigin'],\n\n  src: 'http://cdn.leafletjs.com/leaflet-0.7.3/images/marker-icon.png',\n  alt: 'Marker icon',\n  crossOrigin: 'anonymous'\n});\n<|repo_name|>jameskyle/ember-cli-leaflet<|file_sep|>/tests/dummy/app/templates/components/leaflet-map-with-options.hbs\n{{#leaflet-map lat=lat lng=lng zoom=zoom options=options}}\n  {{#leaflet-tile-layer url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\" attribution=\"&copy; <a href='http://osm.org/copyright'>OpenStreetMap</a> contributors\"}}\n  {{/leaflet-tile-layer}}\n\n  {{#leaflet-marker lat=lat lng=lng}}\n    {{#leaflet-popup}}\n      <h1>Hello World!</h1>\n    {{/leaflet-popup}}\n  {{/leaflet-marker}}\n{{/leaflet-map}}\n<|file_sep|>import Ember from 'ember';\nimport LeafletComponent from './leaflet-component';\n\nexport default LeafletComponent.extend({\n  tagName: 'div',\n  classNames: ['leaflet-popup-tip'],\n  attributeBindings: ['style'],\n\n  style: Ember.computed('lat', 'lng', 'offset', function() {\n    return `left: ${this.get('offset').left}px; top: ${this.get('offset').top}px;`;\n  }),\n\n  didInsertElement() {\n    this._super(...arguments);\n\n    this.get('leafletMap').on('popupopen', () => {\n      this.set('leafletMap', this.get('leafletMap'));\n    });\n  },\n\n  willDestroyElement() {\n    this._super(...arguments);\n\n    this.get('leafletMap').off('popupopen');\n  }\n});\n<|file_sep|>import Ember from 'ember';\nimport { moduleForComponent, test } from 'ember-qunit';\nimport hbs from 'htmlbars-inline-precompile';\n\nmoduleForComponent('leaflet-tile-layer', 'Integration | Component | leaflet tile layer', {\n  integration: true\n});\n\ntest('it renders with bounds', function(assert) {\n  assert.expect(1);\n\n  this.set('url', 'http://{s}.tile.osm.org/{z}/{x}/{y}.png');\n  this.set('bounds', [[51.505, -0.09], [51.51, -0.1]]);\n  this.set('attribution', '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors');\n\n  this.render(hbs`{{leaflet-tile-layer url=url bounds=bounds attribution=attribution}}`);\n\n  assert.equal(this.$('img').attr('src'), 'http://{s}.tile.osm.org/{z}/{x}/{y}.png');\n});\n<|file_sep|>import Ember from 'ember';\nimport { moduleForComponent, test } from 'ember-qunit';\nimport hbs from 'htmlbars-inline-precompile';\n\nmoduleForComponent('leaflet-tile-layer', 'Integration | Component | leaflet tile layer', {\n  integration: true\n});\n\ntest('it renders with tileSize', function(assert) {\n  assert.expect(1);\n\n  this.set('url', 'http://{s}.tile.osm.org/{z}/{x}/{y}.png');\n  this.set('tileSize', [256, 256]);\n  this.set('attribution', '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors');\n\n  this.render(hbs`{{leaflet-tile-layer url=url tileSize=tileSize attribution=attribution}}`);\n\n  assert.equal(this.$('img').attr('src'), 'http://{s}.tile.osm.org/{z}/{x}/{y}.png');\n});\n<|repo_name|>jameskyle", "input_token_count": 3445, "output_token_count": 4096, "latency": 453.6583869457245}
{"id": "simple_96", "result": "```json\n[{\"function\":\"database.query\",\"parameters\":{\"table\":\"user\",\"conditions\":[{\"field\":\"age\",\"operation\":\">\",\"value\":\"25\"},{\"field\":\"job\",\"operation\":\"=\",\"value\":\"engineer\"}]}}]\n```", "input_token_count": 3325, "output_token_count": 48, "latency": 327.909077167511}
{"id": "simple_105", "result": "```json\n[{\"function\":\"math.power\",\"parameters\":{\"base\":3,\"exponent\":4}}]\n```", "input_token_count": 3293, "output_token_count": 24, "latency": 324.4477469921112}
{"id": "simple_113", "result": "```json\n[{\"function\":\"probability.dice_roll\",\"parameters\":{\"desired_number\":6,\"number_of_rolls\":2}}]\n```", "input_token_count": 3568, "output_token_count": 29, "latency": 322.28222012519836}
{"id": "simple_134", "result": "```json\n[{\"function\":\"investment.predictProfit\",\"parameters\":{\"investment_amount\":5000,\"annual_return\":7.0,\"years\":5}}]\n```", "input_token_count": 3358, "output_token_count": 33, "latency": 321.5396463871002}
{"id": "simple_155", "result": "```json\n[{\"function\":\"calculate_future_value\",\"parameters\":{\"initial_investment\":1000,\"interest_rate\":0.05,\"duration\":2}}]\n```", "input_token_count": 3686, "output_token_count": 34, "latency": 320.9563362598419}
{"id": "simple_165", "result": "```json\n[{\"function\":\"civil_cases.retrieve\",\"parameters\":{\"year\":2020,\"crime_type\":\"theft\",\"location\":\"Los Angeles\"}}]\n```", "input_token_count": 3336, "output_token_count": 32, "latency": 320.20705127716064}
{"id": "simple_168", "result": "```json\n[{\"function\":\"lawsuit_search\",\"parameters\":{\"company\":\"Google\",\"start_date\":\"01-01-2021\",\"location\":\"California\",\"status\":\"ongoing\"}}]\n```", "input_token_count": 3804, "output_token_count": 39, "latency": 321.3114719390869}
{"id": "simple_174", "result": "```json\n[{\"function\":\"get_top_cases\",\"parameters\":{\"field_of_law\":\"constitutional law\",\"top_number\":10,\"country\":\"China\"}}]\n```", "input_token_count": 3549, "output_token_count": 33, "latency": 320.0371181964874}
{"id": "simple_179", "result": "```json\n[{\"function\":\"find_latest_court_case\",\"parameters\":{\"company1\":\"Apple\",\"company2\":\"Samsung\",\"country\":\"USA\"}}]\n```", "input_token_count": 3338, "output_token_count": 32, "latency": 318.19146490097046}
{"id": "simple_181", "result": "```json\n[{\"function\":\"get_lawsuit_details\",\"parameters\":{\"case_number\":\"123456-ABC\",\"court_location\":\"Los Angeles\",\"with_verdict\":true}}]\n```", "input_token_count": 3430, "output_token_count": 38, "latency": 316.9475426673889}
{"id": "simple_208", "result": "```json\n[{\"function\":\"map_service.get_directions\",\"parameters\":{\"start\":\"New York\",\"end\":\"Los Angeles\",\"avoid\":[\"highways\", \"tolls\"]}}]\n```", "input_token_count": 3476, "output_token_count": 38, "latency": 317.01901745796204}
{"id": "simple_213", "result": "```json\n[{\"function\":\"flight.book\",\"parameters\":{\"departure_location\":\"San Francisco\",\"destination_location\":\"London\",\"date\":\"2022-04-27\",\"time\":\"afternoon\",\"direct_flight\":true}}]\n```<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-user-profile',\n  templateUrl: './user-profile.component.html',\n  styleUrls: ['./user-profile.component.css']\n})\nexport class UserProfileComponent implements OnInit {\n\n  user: any;\n  constructor(private userService: UserService, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.userService.getUserProfile().subscribe((res: any) => {\n      this.user = res;\n    })\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  email: string;\n  password: string;\n  error: string;\n  constructor(private userService: UserService, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    if (this.authService.isLoggedIn()) {\n      this.router.navigate(['/user-profile']);\n    }\n  }\n\n  login() {\n    this.userService.login(this.email, this.password).subscribe((res: any) => {\n      if (res.status === 200) {\n        this.authService.setToken(res.token);\n        this.router.navigate(['/user-profile']);\n      } else {\n        this.error = res.message;\n      }\n    })\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  name: string;\n  email: string;\n  password: string;\n  error: string;\n  constructor(private userService: UserService, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    if (this.authService.isLoggedIn()) {\n      this.router.navigate(['/user-profile']);\n    }\n  }\n\n  register() {\n    this.userService.register(this.name, this.email, this.password).subscribe((res: any) => {\n      if (res.status === 200) {\n        this.authService.setToken(res.token);\n        this.router.navigate(['/user-profile']);\n      } else {\n        this.error = res.message;\n      }\n    })\n  }\n\n}\n<|file_sep|>import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private http: HttpClient) { }\n\n  register(name: string, email: string, password: string): Observable<any> {\n    return this.http.post(`${environment.apiUrl}/register`, { name, email, password });\n  }\n\n  login(email: string, password: string): Observable<any> {\n    return this.http.post(`${environment.apiUrl}/login`, { email, password });\n  }\n\n  getUserProfile(): Observable<any> {\n    return this.http.get(`${environment.apiUrl}/user-profile`);\n  }\n}\n<|repo_name|>sahilsharma-1999/angular-auth<|file_sep|>/src/app/services/auth.service.ts\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(private http: HttpClient, private router: Router) { }\n\n  setToken(token: string) {\n    localStorage.setItem('token', token);\n  }\n\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n  isLoggedIn() {\n    return !!this.getToken();\n  }\n\n  logout() {\n    localStorage.removeItem('token');\n    this.router.navigate(['/login']);\n  }\n}\n<|file_sep|>import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthGuard } from './guards/auth.guard';\nimport { LoginComponent } from './pages/login/login.component';\nimport { RegisterComponent } from './pages/register/register.component';\nimport { UserProfileComponent } from './pages/user-profile/user-profile.component';\n\nconst routes: Routes = [\n  { path: 'login', component: LoginComponent },\n  { path: 'register', component: RegisterComponent },\n  { path: 'user-profile', component: UserProfileComponent, canActivate: [AuthGuard] },\n  { path: '', redirectTo: '/login', pathMatch: 'full' },\n  { path: '**', redirectTo: '/login' }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n<|file_sep|>import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(private authService: AuthService, private router: Router) { }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    if (this.authService.isLoggedIn()) {\n      return true;\n    } else {\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n}\n<|repo_name|>jameskyle/ember-cli<|file_sep|>/packages/ember-cli/lib/broccoli/ember-app.js\n'use strict';\n\nconst Funnel = require('broccoli-funnel');\nconst mergeTrees = require('broccoli-merge-trees');\nconst path = require('path');\nconst fs = require('fs');\nconst EmberApp = require('ember-cli/lib/broccoli/ember-app');\nconst EmberAddon = require('ember-cli/lib/broccoli/ember-addon');\nconst { getProjectRoot } = require('ember-cli/lib/util/fs');\nconst { getProjectConfig } = require('ember-cli/lib/util/project');\nconst { getAddonConfig } = require('ember-cli/lib/util/addon');\nconst { getAddonOptions } = require('ember-cli/lib/util/addon');\nconst { getAddonPaths } = require('ember-cli/lib/util/addon');\nconst { getAddonDependencies } = require('ember-cli/lib/util/addon');\nconst { getAddonTreePaths } = require('ember-cli/lib/util/addon');\nconst { getAddonTrees } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPaths } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptions } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependencies } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTrees } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPaths } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPathsAndTrees } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPathsAndTreesAndTreesWithPaths } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTrees } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesWithPaths } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTrees } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTrees } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesAndTrees } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPaths } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTrees } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTrees } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTrees } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPaths } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTrees } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTrees } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTrees } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPaths } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTrees } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTrees } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTrees } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPaths } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTrees } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTrees } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTrees } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPaths } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTrees } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTrees } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTrees } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPaths } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTrees } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTrees } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTrees } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPaths } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTrees } = require('ember-cli/lib/util/addon');\nconst { getAddonTreesWithPathsAndOptionsAndDependenciesAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTreesAndTreesAndTreesWithPathsAndTreesAndTrees } = require('ember-cli/lib/util/addon');\nconst {", "input_token_count": 3994, "output_token_count": 4096, "latency": 389.45042991638184}
{"id": "simple_226", "result": "```json\n[{\"function\":\"get_zodiac_compatibility\",\"parameters\":{\"sign1\":\"Aries\",\"sign2\":\"Gemini\",\"scale\":\"percentage\"}}]\n```", "input_token_count": 3349, "output_token_count": 34, "latency": 269.2146475315094}
{"id": "simple_244", "result": "```json\n[{\"function\":\"publication_year.find\",\"parameters\":{\"author\":\"Isaac Newton\",\"work_title\":\"law of universal gravitation\"}}]\n```", "input_token_count": 3333, "output_token_count": 31, "latency": 268.43417406082153}
{"id": "simple_254", "result": "```json\n[{\"function\":\"get_religion_history\",\"parameters\":{\"religion\":\"Christianity\",\"start_year\":300,\"end_year\":400}}]\n```", "input_token_count": 3681, "output_token_count": 34, "latency": 267.22208428382874}
{"id": "simple_281", "result": "```json\n[{\"function\":\"get_instrument_info\",\"parameters\":{\"name\":\"Violin\",\"maker\":\"Stradivarius\",\"year\":1721}}]\n```", "input_token_count": 3380, "output_token_count": 34, "latency": 266.63061594963074}
{"id": "simple_284", "result": "```json\n[{\"function\":\"concert_info.get\",\"parameters\":{\"location\":\"New York\",\"date\":\"next month\",\"genre\":\"Pop\"}}]\n```", "input_token_count": 3371, "output_token_count": 30, "latency": 266.28238677978516}
{"id": "simple_295", "result": "```json\n[{\"function\":\"get_song_lyrics\",\"parameters\":{\"song_title\":\"Bohemian Rhapsody\",\"artist_name\":\"Queen\"}}]\n```", "input_token_count": 3438, "output_token_count": 32, "latency": 264.8428223133087}
{"id": "simple_297", "result": "```json\n[{\"function\":\"music.theory.chordProgression\",\"parameters\":{\"progression\":[\"I\", \"V\", \"vi\", \"IV\"]}}]\n```", "input_token_count": 3979, "output_token_count": 35, "latency": 204.6629457473755}
{"id": "simple_327", "result": "```json\n[{\"function\":\"sports_team.get_schedule\",\"parameters\":{\"team_name\":\"Manchester United\",\"num_of_games\":6,\"league\":\"Premier League\"}}]\n```", "input_token_count": 3954, "output_token_count": 35, "latency": 201.39955401420593}
{"id": "simple_328", "result": "```json\n[{\"function\":\"boardgame.get_info\",\"parameters\":{\"name\":\"Ticket to Ride\",\"parameters\":[\"rating\",\"player count\"]}}]\n```<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  email: string;\n  password: string;\n  errorMessage: string;\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit() {\n  }\n\n  onLogin() {\n    this.authService.login(this.email, this.password).subscribe(\n      (user: User) => {\n        this.authService.setUserData(user);\n        this.router.navigate(['/']);\n      },\n      error => {\n        this.errorMessage = error;\n      }\n    );\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n  email: string;\n  password: string;\n  confirmPassword: string;\n  errorMessage: string;\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit() {\n  }\n\n  onRegister() {\n    if (this.password !== this.confirmPassword) {\n      this.errorMessage = 'Passwords do not match';\n      return;\n    }\n    this.authService.register(this.email, this.password).subscribe(\n      (user: User) => {\n        this.authService.setUserData(user);\n        this.router.navigate(['/']);\n      },\n      error => {\n        this.errorMessage = error;\n      }\n    );\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n  user: User;\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit() {\n    this.authService.user.subscribe(\n      user => {\n        this.user = user;\n      }\n    );\n  }\n\n  onLogout() {\n    this.authService.logout();\n    this.router.navigate(['/']);\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n  user: User;\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit() {\n    this.authService.user.subscribe(\n      user => {\n        this.user = user;\n      }\n    );\n  }\n\n  onLogout() {\n    this.authService.logout();\n    this.router.navigate(['/']);\n  }\n}\n<|repo_name|>mohamed-ahmed-elsayed/angulartask<|file_sep|>/src/app/auth.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { User } from './user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  user = new BehaviorSubject<User>(null);\n  constructor(private http: HttpClient) { }\n\n  register(email: string, password: string): Observable<User> {\n    return this.http.post<User>('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCZ4Zjw6QZ7Z9Z6Z9Z6Z9Z6Z9Z6Z9Z6Z9', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(\n      map((user: User) => {\n        this.setUserData(user);\n        return user;\n      })\n    );\n  }\n\n  login(email: string, password: string): Observable<User> {\n    return this.http.post<User>('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCZ4Zjw6QZ7Z9Z6Z9Z6Z9Z6Z9Z6Z9Z6Z9', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(\n      map((user: User) => {\n        this.setUserData(user);\n        return user;\n      })\n    );\n  }\n\n  setUserData(user: User) {\n    localStorage.setItem('user', JSON.stringify(user));\n    this.user.next(user);\n  }\n\n  logout() {\n    localStorage.removeItem('user');\n    this.user.next(null);\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n  user: User;\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit() {\n    this.authService.user.subscribe(\n      user => {\n        this.user = user;\n      }\n    );\n  }\n\n  onLogout() {\n    this.authService.logout();\n    this.router.navigate(['/']);\n  }\n}\n<|repo_name|>mohamed-ahmed-elsayed/angulartask<|file_sep|>/src/app/app.module.ts\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './home/home.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { HeaderComponent } from './header/header.component';\nimport { ProfileComponent } from './profile/profile.component';\nimport { AuthService } from './auth.service';\nimport { AuthGuard } from './auth.guard';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomeComponent,\n    LoginComponent,\n    RegisterComponent,\n    HeaderComponent,\n    ProfileComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    HttpClientModule\n  ],\n  providers: [AuthService, AuthGuard],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n<|repo_name|>mohamed-ahmed-elsayed/angulartask<|file_sep|>/src/app/app-routing.module.ts\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { ProfileComponent } from './profile/profile.component';\nimport { AuthGuard } from './auth.guard';\n\nconst routes: Routes = [\n  { path: '', component: HomeComponent },\n  { path: 'login', component: LoginComponent },\n  { path: 'register', component: RegisterComponent },\n  { path: 'profile', component: ProfileComponent, canActivate: [AuthGuard] }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n<|repo_name|>jamesmccaffrey/CS-3500<|file_sep|>/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2", "input_token_count": 3349, "output_token_count": 4096, "latency": 314.1879177093506}
{"id": "simple_335", "result": "```json\n[{\"function\":\"find_card_in_deck\",\"parameters\":{\"rank\":\"Queen\",\"suit\":\"Hearts\"}}]\n```", "input_token_count": 3658, "output_token_count": 26, "latency": 198.89269399642944}
{"id": "simple_360", "result": "```json\n[{\"function\":\"find_recipe\",\"parameters\":{\"recipeName\":\"pasta carbonara\",\"maxCalories\":500}}]\n```", "input_token_count": 3104, "output_token_count": 29, "latency": 197.3610212802887}
{"id": "simple_380", "result": "```json\n[{\"function\":\"hotel_booking\",\"parameters\":{\"location\":\"New York\",\"room_type\":\"single\",\"duration\":3,\"start_date\":\"2023-03-10\",\"preferences\":[\"pet_friendly\"]}}]\n```", "input_token_count": 4134, "output_token_count": 46, "latency": 194.82359170913696}
{"id": "simple_390", "result": "```json\n[{\"function\":\"currency_conversion.convert\",\"parameters\":{\"amount\":150,\"from_currency\":\"EUR\",\"to_currency\":\"CAD\"}}]\n```", "input_token_count": 3240, "output_token_count": 30, "latency": 190.63190507888794}
{"id": "simple_393", "result": "```json\n[{\"function\":\"convert_currency\",\"parameters\":{\"base_currency\":\"JPY\",\"target_currency\":\"USD\",\"amount\":20000}}]\n```", "input_token_count": 3343, "output_token_count": 31, "latency": 190.44867277145386}
