{"id": "multiple_4", "result": "```json\n[{\"function\":\"kinematics.calculate_displacement\",\"parameters\":{\"initial_speed\":20,\"acceleration\":10,\"time\":5}}]\n```", "input_token_count": 6588, "output_token_count": 32, "latency": 552.567143201828}
{"id": "multiple_25", "result": "```json\n[{\"function\":\"video_games.store_price\",\"parameters\":{\"game_title\":\"Assassins Creed Valhalla\",\"platform\":\"PlayStation\",\"region\":\"United States\"}}]\n```", "input_token_count": 7178, "output_token_count": 38, "latency": 554.3909778594971}
{"id": "multiple_31", "result": "```json\n[{\"function\":\"geometry_rectangle.calculate\",\"parameters\":{\"width\":7,\"length\":10}}]\n```", "input_token_count": 5443, "output_token_count": 24, "latency": 553.553985118866}
{"id": "multiple_36", "result": "```json\n[{\"function\":\"kinematics.calculate_speed_from_rest\",\"parameters\":{\"distance\":20,\"time\":4}}]\n```", "input_token_count": 5912, "output_token_count": 27, "latency": 553.7966418266296}
{"id": "multiple_42", "result": "```json\n[{\"function\":\"calculate_final_temperature\",\"parameters\":{\"quantity1\":2,\"temperature1\":300,\"quantity2\":3,\"temperature2\":400}}]\n```", "input_token_count": 5534, "output_token_count": 36, "latency": 553.1318714618683}
{"id": "multiple_46", "result": "```json\n[{\"function\":\"sort_list\",\"parameters\":{\"elements\":[\"Sam\", \"Alice\", \"Jack\"]}}]\n```<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n\n  user: any = {};\n  constructor(private userService: UserService, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.userService.getUser(this.authService.currentUserValue.id).subscribe(\n      (data: any) => {\n        this.user = data;\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n\n}\n<|repo_name|>mohamed-ahmed-elsayed/ecommerce<|file_sep|>/src/app/services/product.service.ts\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n\n  constructor(private http: HttpClient) { }\n\n  getProducts(): Observable<any> {\n    return this.http.get(`${environment.apiUrl}/products`);\n  }\n\n  getProduct(id: number): Observable<any> {\n    return this.http.get(`${environment.apiUrl}/products/${id}`);\n  }\n\n  addProduct(product: any): Observable<any> {\n    return this.http.post(`${environment.apiUrl}/products`, product);\n  }\n\n  updateProduct(product: any): Observable<any> {\n    return this.http.put(`${environment.apiUrl}/products/${product.id}`, product);\n  }\n\n  deleteProduct(id: number): Observable<any> {\n    return this.http.delete(`${environment.apiUrl}/products/${id}`);\n  }\n}\n<|repo_name|>mohamed-ahmed-elsayed/ecommerce<|file_sep|>/src/app/services/auth.service.ts\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private currentUserSubject: BehaviorSubject<any>;\n  public currentUser: Observable<any>;\n\n  constructor(private http: HttpClient, private router: Router) {\n    this.currentUserSubject = new BehaviorSubject<any>(JSON.parse(localStorage.getItem('currentUser')));\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n\n  public get currentUserValue() {\n    return this.currentUserSubject.value;\n  }\n\n  login(email: string, password: string) {\n    return this.http.post<any>(`${environment.apiUrl}/auth/login`, { email, password })\n      .pipe(map(user => {\n        // store user details and jwt token in local storage to keep user logged in between page refreshes\n        localStorage.setItem('currentUser', JSON.stringify(user));\n        this.currentUserSubject.next(user);\n        return user;\n      }));\n  }\n\n  logout() {\n    // remove user from local storage to log user out\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n    this.router.navigate(['/login']);\n  }\n\n  register(user: any) {\n    return this.http.post(`${environment.apiUrl}/auth/register`, user);\n  }\n\n  forgotPassword(email: string) {\n    return this.http.post(`${environment.apiUrl}/auth/forgot-password`, { email });\n  }\n\n  resetPassword(token: string, password: string) {\n    return this.http.post(`${environment.apiUrl}/auth/reset-password`, { token, password });\n  }\n}\n<|repo_name|>mohamed-ahmed-elsayed/ecommerce<|file_sep|>/src/app/components/admin/admin.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.css']\n})\nexport class AdminComponent implements OnInit {\n\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    if (!this.authService.currentUserValue) {\n      this.router.navigate(['/login']);\n    }\n  }\n\n  logout() {\n    this.authService.logout();\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  loginForm: FormGroup;\n  loading = false;\n  submitted = false;\n  error = '';\n\n  constructor(private formBuilder: FormBuilder, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.loginForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required]]\n    });\n  }\n\n  get f() { return this.loginForm.controls; }\n\n  onSubmit() {\n    this.submitted = true;\n\n    // stop here if form is invalid\n    if (this.loginForm.invalid) {\n      return;\n    }\n\n    this.loading = true;\n    this.authService.login(this.f.email.value, this.f.password.value)\n      .subscribe(\n        data => {\n          this.router.navigate(['/admin']);\n        },\n        error => {\n          this.error = error.error.message;\n          this.loading = false;\n        });\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  registerForm: FormGroup;\n  loading = false;\n  submitted = false;\n  error = '';\n\n  constructor(private formBuilder: FormBuilder, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.registerForm = this.formBuilder.group({\n      name: ['', [Validators.required]],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      confirmPassword: ['', [Validators.required]]\n    }, { validator: this.passwordMatchValidator });\n  }\n\n  get f() { return this.registerForm.controls; }\n\n  passwordMatchValidator(formGroup: FormGroup) {\n    const password = formGroup.get('password').value;\n    const confirmPassword = formGroup.get('confirmPassword').value;\n    if (password !== confirmPassword) {\n      formGroup.get('confirmPassword').setErrors({ passwordMismatch: true });\n    }\n  }\n\n  onSubmit() {\n    this.submitted = true;\n\n    // stop here if form is invalid\n    if (this.registerForm.invalid) {\n      return;\n    }\n\n    this.loading = true;\n    this.authService.register(this.registerForm.value)\n      .subscribe(\n        data => {\n          this.router.navigate(['/login']);\n        },\n        error => {\n          this.error = error.error.message;\n          this.loading = false;\n        });\n  }\n\n}\n<|repo_name|>mohamed-ahmed-elsayed/ecommerce<|file_sep|>/src/app/components/admin/products/products.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ProductService } from 'src/app/services/product.service';\n\n@Component({\n  selector: 'app-products',\n  templateUrl: './products.component.html',\n  styleUrls: ['./products.component.css']\n})\nexport class ProductsComponent implements OnInit {\n\n  products: any = [];\n  constructor(private productService: ProductService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.productService.getProducts().subscribe(\n      (data: any) => {\n        this.products = data;\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n\n  deleteProduct(id: number) {\n    this.productService.deleteProduct(id).subscribe(\n      (data: any) => {\n        this.products = this.products.filter(product => product.id !== id);\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n\n  editProduct(id: number) {\n    this.router.navigate(['/admin/products/edit', id]);\n  }\n\n}\n<|repo_name|>mohamed-ahmed-elsayed/ecommerce<|file_sep|>/src/app/components/admin/products/add-product/add-product.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ProductService } from 'src/app/services/product.service';\n\n@Component({\n  selector: 'app-add-product',\n  templateUrl: './add-product.component.html',\n  styleUrls: ['./add-product.component.css']\n})\nexport class AddProductComponent implements OnInit {\n\n  addProductForm: FormGroup;\n  loading = false;\n  submitted = false;\n  error = '';\n\n  constructor(private formBuilder: FormBuilder, private productService: ProductService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.addProductForm = this.formBuilder.group({\n      name: ['', [Validators.required]],\n      description: ['', [Validators.required]],\n      price: ['', [Validators.required]],\n      image: ['', [Validators.required]]\n    });\n  }\n\n  get f() { return this.addProductForm.controls; }\n\n  onSubmit() {\n    this.submitted = true;\n\n    // stop here if form is invalid\n    if (this.addProductForm.invalid) {\n      return;\n    }\n\n    this.loading = true;\n    this.productService.addProduct(this.addProductForm.value)\n      .subscribe(\n        data => {\n          this.router.navigate(['/admin/products']);\n        },\n        error => {\n          this.error = error.error.message;\n          this.loading = false;\n        });\n  }\n\n}\n<|repo_name|>mohamed-ahmed-elsayed/ecommerce<|file_sep|>/src/app/components/admin/products/edit-product/edit-product.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ProductService } from 'src/app/services/product.service';\n\n@Component({\n  selector: 'app-edit-product',\n  templateUrl: './edit-product.component.html',\n  styleUrls: ['./edit-product.component.css']\n})\nexport class EditProductComponent implements OnInit {\n\n  editProductForm: FormGroup;\n  loading = false;\n  submitted = false;\n  error = '';\n  product: any = {};\n\n  constructor(private formBuilder: FormBuilder, private productService: ProductService, private router: Router, private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.editProductForm = this.formBuilder.group({\n      name: ['', [Validators.required]],\n      description: ['', [Validators.required]],\n      price: ['', [Validators.required]],\n      image: ['', [Validators.required]]\n    });\n\n    const id = this.route.snapshot.params['id'];\n    this.productService.getProduct(id).subscribe(\n      (data: any) => {\n        this.product = data;\n        this.editProductForm.patchValue(this.product);\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n\n  get f() { return this.editProductForm.controls; }\n\n  onSubmit() {\n    this.submitted = true;\n\n    // stop here if form is invalid\n    if (this.editProductForm.invalid) {\n      return;\n    }\n\n    this.loading = true;\n    this.productService.updateProduct(this.editProductForm.value)\n      .subscribe(\n        data => {\n          this.router.navigate(['/admin/products']);\n        },\n        error => {\n          this.error = error.error.message;\n          this.loading = false;\n        });\n  }\n\n}\n<|repo_name|>mohamed-ahmed-elsayed/ecommerce<|file_sep|>/src/app/components/admin/admin-routing.module.ts\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AdminComponent } from './admin.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { EditProductComponent } from './products/edit-product/edit-product.component';\nimport { ProductsComponent } from './products/products.component';\nimport { AddProductComponent } from './products/add-product/add-product.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AdminComponent,\n    children: [\n      {\n        path: '',\n        component: DashboardComponent\n      },\n      {\n        path: 'products',\n        component: ProductsComponent\n      },\n      {\n        path: 'products/add',\n        component: AddProductComponent\n      },\n      {\n        path: 'products/edit/:id',\n        component: EditProductComponent\n      }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AdminRoutingModule { }\n<|repo_name|>mohamed-ahmed-elsayed/ecommerce<|file_sep|>/src/app/components/admin/admin.module.ts\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AdminComponent } from './admin.component';\nimport { AdminRoutingModule } from './admin-routing.module';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { ProductsComponent } from './products/products.component';\nimport { AddProductComponent } from './products/add-product/add-product.component';\nimport { EditProductComponent } from './products/edit-product/edit-product.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgxPaginationModule } from 'ngx-pagination';\n\n@NgModule({\n  declarations: [\n    AdminComponent,\n    DashboardComponent,\n    ProductsComponent,\n    AddProductComponent,\n    EditProductComponent\n  ],\n  imports: [\n    CommonModule,\n    AdminRoutingModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    NgxPaginationModule\n  ]\n})\nexport class AdminModule { }\n<|repo_name|>mohamed-ahmed-elsayed/ecommerce<|file_sep|>/src/app/components/admin/dashboard/dashboard.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n\n  users: any = [];\n  products: any = [];\n  constructor(private userService: UserService) { }\n\n  ngOnInit(): void {\n    this.userService.getUsers().subscribe(\n      (data: any) => {\n        this.users = data;\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n\n}\n<|repo_name|>mohamed-ahmed-elsayed/ecommerce<|file_sep|>/src/app/components/admin/products/products.component.html\n<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n          <h3 class=\"card-title\">Products</h3>\n          <a class=\"btn btn-primary float-right\" routerLink=\"/admin/products/add\">Add Product</a>\n        </div>\n        <!-- /.card-header -->\n        <div class=\"card-body\">\n          <table id=\"example1\" class=\"table table-bordered table-striped\">\n            <thead>\n              <tr>\n                <th>Image</th>\n                <th>Name</th>\n                <th>Description</th>\n                <th>Price</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr *ngFor=\"let product of products\">\n                <td><img src=\"{{product.image}}\" width=\"100\" height=\"100\" /></td>\n                <td>{{product.name}}</td>\n                <td>{{product.description}}</td>\n                <td>{{product.price}}</td>\n                <td>\n                  <a class=\"btn btn-primary\" routerLink=\"/admin/products/edit/{{product.id}}\">Edit</a>\n                  <button class=\"btn btn-danger\" (click)=\"deleteProduct(product.id)\">Delete</button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        <!-- /.card-body -->\n      </div>\n      <!-- /.card -->\n    </div>\n  </div>\n</div>\n<|repo_name|>mohamed-ahmed-elsayed/ecommerce<|file_sep|>/src/app/components/admin/products/add-product/add-product.component.html\n<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n          <h3 class=\"card-title\">Add Product</h3>\n        </div>\n        <!-- /.card-header -->\n        <div class=\"card-body\">\n          <form [formGroup]=\"addProductForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"form-group\">\n              <label for=\"name\">Name</label>\n              <input type=\"text\" class=\"form-control\" id=\"name\" formControlName=\"name\" />\n              <div *ngIf=\"f.name.touched && f.name.invalid\" class=\"alert alert-danger\">\n                <div *ngIf=\"f.name.errors.required\">Name is required</div>\n              </div>\n            </div>\n            <div class=\"form-group\">\n              <label for=\"description\">Description</label>\n              <input type=\"text\" class=\"form-control\" id=\"description\" formControlName=\"description\" />\n              <div *ngIf=\"f.description.touched && f.description.invalid\" class=\"alert alert-danger\">\n                <div *ngIf=\"f.description.errors.required\">Description is required</div>\n              </div>\n            </div>\n            <div class=\"form-group\">\n              <label for=\"price\">Price</label>\n              <input type=\"text\" class=\"form-control\" id=\"price\" formControlName=\"price\" />\n              <div *ngIf=\"f.price.touched && f.price.invalid\" class=\"alert alert-danger\">\n                <div *ngIf=\"f.price.errors.required\">Price is required</div>\n              </div>\n            </div>\n            <div class=\"form-group\">\n              <label for=\"image\">Image</label>\n              <input type=\"text\" class=\"form-control\" id=\"image\" formControlName=\"image\" />\n              <div *ngIf=\"f.image.touched && f.image.invalid\" class=\"alert alert-danger\">\n                <div *ngIf=\"f.image.errors.required\">Image is required</div>\n              </div>\n            </div>\n            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"loading\">Submit</button>\n            <div *ngIf=\"error\" class=\"alert alert-danger\">{{error}}</div>\n          </form>\n        </div>\n        <!-- /.card-body -->\n      </div>\n      <!-- /.card -->\n    </div>\n  </div>\n</div>\n<|repo_name|>mohamed-ahmed-elsayed/ecommerce<|file_sep|>/src/app/components/admin/products/edit-product/edit-product.component.html\n<div class=\"container\">\n  <div class=\"row\">\n    <", "input_token_count": 5875, "output_token_count": 4096, "latency": 805.1436612606049}
{"id": "multiple_51", "result": "```json\n[{\"function\":\"dice_roll_probability\",\"parameters\":{\"desired_sum\":7,\"sides_per_die\":6}}]\n```", "input_token_count": 6543, "output_token_count": 28, "latency": 671.7475228309631}
{"id": "multiple_54", "result": "```json\n[{\"function\":\"corporate_finance.dividend_data\",\"parameters\":{\"company\":\"Apple Inc\",\"years\":5}}]\n```<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n\n  user: any = {};\n  constructor(private userService: UserService, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.userService.getUser(this.authService.currentUserValue.id).subscribe(\n      (data) => {\n        this.user = data;\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  user: any = {};\n  constructor(private userService: UserService, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  register() {\n    this.userService.register(this.user).subscribe(\n      (data) => {\n        this.authService.login(this.user).subscribe(\n          (data) => {\n            this.authService.currentUserSubject.next(data);\n            this.router.navigate(['/']);\n          },\n          (error) => {\n            console.log(error);\n          }\n        );\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  user: any = {};\n  constructor(private userService: UserService, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  login() {\n    this.authService.login(this.user).subscribe(\n      (data) => {\n        this.authService.currentUserSubject.next(data);\n        this.router.navigate(['/']);\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-add',\n  templateUrl: './add.component.html',\n  styleUrls: ['./add.component.css']\n})\nexport class AddComponent implements OnInit {\n\n  user: any = {};\n  constructor(private userService: UserService, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  add() {\n    this.userService.add(this.user).subscribe(\n      (data) => {\n        this.router.navigate(['/']);\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-edit',\n  templateUrl: './edit.component.html',\n  styleUrls: ['./edit.component.css']\n})\nexport class EditComponent implements OnInit {\n\n  user: any = {};\n  constructor(private userService: UserService, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.userService.getUser(this.authService.currentUserValue.id).subscribe(\n      (data) => {\n        this.user = data;\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n\n  edit() {\n    this.userService.edit(this.user).subscribe(\n      (data) => {\n        this.router.navigate(['/']);\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  users: any = [];\n  constructor(private userService: UserService, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.userService.getUsers().subscribe(\n      (data) => {\n        this.users = data;\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n\n  delete(id: number) {\n    this.userService.delete(id).subscribe(\n      (data) => {\n        this.users = this.users.filter((user) => {\n          return user.id !== id;\n        });\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n\n}\n<|file_sep|>import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private http: HttpClient) { }\n\n  getUsers(): Observable<any> {\n    return this.http.get(`${environment.apiUrl}/users`);\n  }\n\n  getUser(id: number): Observable<any> {\n    return this.http.get(`${environment.apiUrl}/users/${id}`);\n  }\n\n  add(user: any): Observable<any> {\n    return this.http.post(`${environment.apiUrl}/users`, user);\n  }\n\n  edit(user: any): Observable<any> {\n    return this.http.put(`${environment.apiUrl}/users/${user.id}`, user);\n  }\n\n  delete(id: number): Observable<any> {\n    return this.http.delete(`${environment.apiUrl}/users/${id}`);\n  }\n\n  register(user: any): Observable<any> {\n    return this.http.post(`${environment.apiUrl}/users/register`, user);\n  }\n}\n<|repo_name|>mohamed-ahmed-elsayed/angular-8-crud<|file_sep|>/src/app/services/auth.service.ts\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private currentUserSubject: BehaviorSubject<any>;\n  public currentUser: Observable<any>;\n\n  constructor(private http: HttpClient) {\n    this.currentUserSubject = new BehaviorSubject<any>(JSON.parse(localStorage.getItem('currentUser')));\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n\n  public get currentUserValue(): any {\n    return this.currentUserSubject.value;\n  }\n\n  login(user: any): Observable<any> {\n    return this.http.post<any>(`${environment.apiUrl}/users/login`, user).pipe(\n      map((data) => {\n        localStorage.setItem('currentUser', JSON.stringify(data));\n        this.currentUserSubject.next(data);\n        return data;\n      })\n    );\n  }\n\n  logout() {\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n  }\n}\n<|repo_name|>jamesmccaffrey/azure-docs<|file_sep|>/articles/azure-monitor/app/java-standalone-config.md\n---\ntitle: Azure Application Insights Java standalone configuration | Microsoft Docs\ndescription: Configure Application Insights Java standalone agent\nms.topic: conceptual\nms.date: 10/10/2019\n---\n\n# Configure Application Insights Java standalone agent\n\nThe Application Insights Java standalone agent is a Java agent that can be attached to any Java application to collect telemetry. It can be used with any Java application, including those running on Azure App Service, Azure Spring Cloud, and Azure Kubernetes Service. It can also be used with Java applications running on-premises or in other cloud environments.\n\nThe agent is configured using a configuration file. This article describes the configuration options available for the agent.\n\n## Configuration file\n\nThe configuration file is a JSON file. The file must be named `applicationinsights.json` and must be placed in the same directory as the Java agent JAR file. The file must be in the same directory as the Java agent JAR file. The file must be in the same directory as the Java agent JAR file. The file must be in the same directory as the Java agent JAR file.\n\n## Configuration options\n\nThe following table describes the configuration options available for the Application Insights Java standalone agent.\n\n| Option | Description | Default |\n| --- | --- | --- |\n| instrumentationKey | The instrumentation key for the Application Insights resource. | None |\n| disableAutoDependencyTracking | Disables automatic dependency tracking. | false |\n| disableAutoPerformanceCountersCollection | Disables automatic performance counters collection. | false |\n| disableAutoJmxMetricsCollection | Disables automatic JMX metrics collection. | false |\n| disableAutoDiagnosticLogCollection | Disables automatic diagnostic log collection. | false |\n| disableAutoHttpCorrelation | Disables automatic HTTP correlation. | false |\n| disableAutoSpringCloudInstrumentation | Disables automatic Spring Cloud instrumentation. | false |\n| disableAutoSpringFrameworkInstrumentation | Disables automatic Spring Framework instrumentation. | false |\n| disableAutoServletInstrumentation | Disables automatic servlet instrumentation. | false |\n| disableAutoWebInstrumentation | Disables automatic web instrumentation. | false |\n| disableAutoW3cDistributedTracing | Disables automatic W3C distributed tracing. | false |\n| disableAutoJvmMetricsCollection | Disables automatic JVM metrics collection. | false |\n| disableAutoLog4j2Instrumentation | Disables automatic Log4j2 instrumentation. | false |\n| disableAutoLogbackInstrumentation | Disables automatic Logback instrumentation. | false |\n| disableAutoLog4jInstrumentation | Disables automatic Log4j instrumentation. | false |\n| disableAutoLogstashInstrumentation | Disables automatic Logstash instrumentation. | false |\n| disableAutoMicrometerInstrumentation | Disables automatic Micrometer instrumentation. | false |\n| disableAutoSpringBootInstrumentation | Disables automatic Spring Boot instrumentation. | false |\n| disableAutoSpringCloudGatewayInstrumentation | Disables automatic Spring Cloud Gateway instrumentation. | false |\n| disableAutoSpringCloudOpenFeignInstrumentation | Disables automatic Spring Cloud OpenFeign instrumentation. | false |\n| disableAutoSpringCloudWebClientInstrumentation | Disables automatic Spring Cloud WebClient instrumentation. | false |\n| disableAutoSpringMVCInstrumentation | Disables automatic Spring MVC instrumentation. | false |\n| disableAutoSpringWebFluxInstrumentation | Disables automatic Spring WebFlux instrumentation. | false |\n| disableAutoTomcatInstrumentation | Disables automatic Tomcat instrumentation. | false |\n| disableAutoUndertowInstrumentation | Disables automatic Undertow instrumentation. | false |\n| disableAutoVertxInstrumentation | Disables automatic Vert.x instrumentation. | false |\n| disableAutoJaxrsInstrumentation | Disables automatic JAX-RS instrumentation. | false |\n| disableAutoJaxwsInstrumentation | Disables automatic JAX-WS instrumentation. | false |\n| disableAutoJerseyInstrumentation | Disables automatic Jersey instrumentation. | false |\n| disableAutoServlet3Instrumentation | Disables automatic Servlet 3 instrumentation. | false |\n| disableAutoServlet4Instrumentation | Disables automatic Servlet 4 instrumentation. | false |\n| disableAutoWebMvcInstrumentation | Disables automatic Web MVC instrumentation. | false |\n| disableAutoWebFluxInstrumentation | Disables automatic WebFlux instrumentation. | false |\n| disableAutoTomcatInstrumentation | Disables automatic Tomcat instrumentation. | false |\n| disableAutoUndertowInstrumentation | Disables automatic Undertow instrumentation. | false |\n| disableAutoVertxInstrumentation | Disables automatic Vert.x instrumentation. | false |\n| disableAutoJaxrsInstrumentation | Disables automatic JAX-RS instrumentation. | false |\n| disableAutoJaxwsInstrumentation | Disables automatic JAX-WS instrumentation. | false |\n| disableAutoJerseyInstrumentation | Disables automatic Jersey instrumentation. | false |\n| disableAutoServlet3Instrumentation | Disables automatic Servlet 3 instrumentation. | false |\n| disableAutoServlet4Instrumentation | Disables automatic Servlet 4 instrumentation. | false |\n| disableAutoWebMvcInstrumentation | Disables automatic Web MVC instrumentation. | false |\n| disableAutoWebFluxInstrumentation | Disables automatic WebFlux instrumentation. | false |\n| disableAutoTomcatInstrumentation | Disables automatic Tomcat instrumentation. | false |\n| disableAutoUndertowInstrumentation | Disables automatic Undertow instrumentation. | false |\n| disableAutoVertxInstrumentation | Disables automatic Vert.x instrumentation. | false |\n| disableAutoJaxrsInstrumentation | Disables automatic JAX-RS instrumentation. | false |\n| disableAutoJaxwsInstrumentation | Disables automatic JAX-WS instrumentation. | false |\n| disableAutoJerseyInstrumentation | Disables automatic Jersey instrumentation. | false |\n| disableAutoServlet3Instrumentation | Disables automatic Servlet 3 instrumentation. | false |\n| disableAutoServlet4Instrumentation | Disables automatic Servlet 4 instrumentation. | false |\n| disableAutoWebMvcInstrumentation | Disables automatic Web MVC instrumentation. | false |\n| disableAutoWebFluxInstrumentation | Disables automatic WebFlux instrumentation. | false |\n| disableAutoTomcatInstrumentation | Disables automatic Tomcat instrumentation. | false |\n| disableAutoUndertowInstrumentation | Disables automatic Undertow instrumentation. | false |\n| disableAutoVertxInstrumentation | Disables automatic Vert.x instrumentation. | false |\n| disableAutoJaxrsInstrumentation | Disables automatic JAX-RS instrumentation. | false |\n| disableAutoJaxwsInstrumentation | Disables automatic JAX-WS instrumentation. | false |\n| disableAutoJerseyInstrumentation | Disables automatic Jersey instrumentation. | false |\n| disableAutoServlet3Instrumentation | Disables automatic Servlet 3 instrumentation. | false |\n| disableAutoServlet4Instrumentation | Disables automatic Servlet 4 instrumentation. | false |\n| disableAutoWebMvcInstrumentation | Disables automatic Web MVC instrumentation. | false |\n| disableAutoWebFluxInstrumentation | Disables automatic WebFlux instrumentation. | false |\n| disableAutoTomcatInstrumentation | Disables automatic Tomcat instrumentation. | false |\n| disableAutoUndertowInstrumentation | Disables automatic Undertow instrumentation. | false |\n| disableAutoVertxInstrumentation | Disables automatic Vert.x instrumentation. | false |\n| disableAutoJaxrsInstrumentation | Disables automatic JAX-RS instrumentation. | false |\n| disableAutoJaxwsInstrumentation | Disables automatic JAX-WS instrumentation. | false |\n| disableAutoJerseyInstrumentation | Disables automatic Jersey instrumentation. | false |\n| disableAutoServlet3Instrumentation | Disables automatic Servlet 3 instrumentation. | false |\n| disableAutoServlet4Instrumentation | Disables automatic Servlet 4 instrumentation. | false |\n| disableAutoWebMvcInstrumentation | Disables automatic Web MVC instrumentation. | false |\n| disableAutoWebFluxInstrumentation | Disables automatic WebFlux instrumentation. | false |\n| disableAutoTomcatInstrumentation | Disables automatic Tomcat instrumentation. | false |\n| disableAutoUndertowInstrumentation | Disables automatic Undertow instrumentation. | false |\n| disableAutoVertxInstrumentation | Disables automatic Vert.x instrumentation. | false |\n| disableAutoJaxrsInstrumentation | Disables automatic JAX-RS instrumentation. | false |\n| disableAutoJaxwsInstrumentation | Disables automatic JAX-WS instrumentation. | false |\n| disableAutoJerseyInstrumentation | Disables automatic Jersey instrumentation. | false |\n| disableAutoServlet3Instrumentation | Disables automatic Servlet 3 instrumentation. | false |\n| disableAutoServlet4Instrumentation | Disables automatic Servlet 4 instrumentation. | false |\n| disableAutoWebMvcInstrumentation | Disables automatic Web MVC instrumentation. | false |\n| disableAutoWebFluxInstrumentation | Disables automatic WebFlux instrumentation. | false |\n| disableAutoTomcatInstrumentation | Disables automatic Tomcat instrumentation. | false |\n| disableAutoUndertowInstrumentation | Disables automatic Undertow instrumentation. | false |\n| disableAutoVertxInstrumentation | Disables automatic Vert.x instrumentation. | false |\n| disableAutoJaxrsInstrumentation | Disables automatic JAX-RS instrumentation. | false |\n| disableAutoJaxwsInstrumentation | Disables automatic JAX-WS instrumentation. | false |\n| disableAutoJerseyInstrumentation | Disables automatic Jersey instrumentation. | false |\n| disableAutoServlet3Instrumentation | Disables automatic Servlet 3 instrumentation. | false |\n| disableAutoServlet4Instrumentation | Disables automatic Servlet 4 instrumentation. | false |\n| disableAutoWebMvcInstrumentation | Disables automatic Web MVC instrumentation. | false |\n| disableAutoWebFluxInstrumentation | Disables automatic WebFlux instrumentation. | false |\n| disableAutoTomcatInstrumentation | Disables automatic Tomcat instrumentation. | false |\n| disableAutoUndertowInstrumentation | Disables automatic Undertow instrumentation. | false |\n| disableAutoVertxInstrumentation | Disables automatic Vert.x instrumentation. | false |\n| disableAutoJaxrsInstrumentation | Disables automatic JAX-RS instrumentation. | false |\n| disableAutoJaxwsInstrumentation | Disables automatic JAX-WS instrumentation. | false |\n| disableAutoJerseyInstrumentation | Disables automatic Jersey instrumentation. | false |\n| disableAutoServlet3Instrumentation | Disables automatic Servlet 3 instrumentation. | false |\n| disableAutoServlet4Instrumentation | Disables automatic Servlet 4 instrumentation. | false |\n| disableAutoWebMvcInstrumentation | Disables automatic Web MVC instrumentation. | false |\n| disableAutoWebFluxInstrumentation | Disables automatic WebFlux instrumentation. | false |\n| disableAutoTomcatInstrumentation | Disables automatic Tomcat instrumentation. | false |\n| disableAutoUndertowInstrumentation | Disables automatic Undertow instrumentation. | false |\n| disableAutoVertxInstrumentation | Disables automatic Vert.x instrumentation. | false |\n| disableAutoJaxrsInstrumentation | Disables automatic JAX-RS instrumentation. | false |\n| disableAutoJaxwsInstrumentation | Disables automatic JAX-WS instrumentation. | false |\n| disableAutoJerseyInstrumentation | Disables automatic Jersey instrumentation. | false |\n| disableAutoServlet3Instrumentation | Disables automatic Servlet 3 instrumentation. | false |\n| disableAutoServlet4Instrumentation | Disables automatic Servlet 4 instrumentation. | false |\n| disableAutoWebMvcInstrumentation | Disables automatic Web MVC instrumentation. | false |\n| disableAutoWebFluxInstrumentation | Disables automatic WebFlux instrumentation. | false |\n| disableAutoTomcatInstrumentation | Disables automatic Tomcat instrumentation. | false |\n| disableAutoUndertowInstrumentation | Disables automatic Undertow instrumentation. | false |\n| disableAutoVertxInstrument", "input_token_count": 5360, "output_token_count": 4096, "latency": 820.9161033630371}
{"id": "multiple_71", "result": "```json\n[{\"function\":\"get_population\",\"parameters\":{\"year\":1954,\"category\":\"veterans\"}}]\n```", "input_token_count": 6125, "output_token_count": 26, "latency": 668.8815546035767}
{"id": "multiple_75", "result": "```json\n[{\"function\":\"paint_color.trends\",\"parameters\":{\"room\":\"Living room\"}}]\n```", "input_token_count": 6332, "output_token_count": 22, "latency": 667.9831650257111}
{"id": "multiple_102", "result": "```json\n[{\"function\":\"calculate_displacement\",\"parameters\":{\"initial_velocity\":10,\"time\":5,\"acceleration\":9.8}}]\n```", "input_token_count": 6898, "output_token_count": 32, "latency": 667.4593949317932}
{"id": "multiple_132", "result": "```json\n[{\"function\":\"finance.calculate_future_value\",\"parameters\":{\"initial_investment\":20000,\"rate_of_return\":0.08,\"years\":5}}]\n```", "input_token_count": 7183, "output_token_count": 36, "latency": 666.1953654289246}
{"id": "multiple_159", "result": "```json\n[{\"function\":\"calculate_paint_needed\",\"parameters\":{\"coverage_rate\":400,\"length\":30,\"height\":12}}]\n```", "input_token_count": 6836, "output_token_count": 29, "latency": 665.569906949997}
{"id": "multiple_161", "result": "```json\n[{\"function\":\"find_exhibition\",\"parameters\":{\"location\":\"New York, NY\",\"art_form\":\"sculpture\",\"month\":\"upcoming\",\"user_ratings\":\"high\"}}]\n```", "input_token_count": 7698, "output_token_count": 40, "latency": 665.5350358486176}
{"id": "multiple_191", "result": "```json\n[{\"function\":\"book_hotel\",\"parameters\":{\"hotel_name\":\"Hotel Paradise\",\"location\":\"Las Vegas\",\"room_type\":\"luxury\",\"start_date\":\"05-12-2022\",\"stay_duration\":3,\"view\":\"city\"}}]\n```", "input_token_count": 8803, "output_token_count": 52, "latency": 666.4771192073822}
