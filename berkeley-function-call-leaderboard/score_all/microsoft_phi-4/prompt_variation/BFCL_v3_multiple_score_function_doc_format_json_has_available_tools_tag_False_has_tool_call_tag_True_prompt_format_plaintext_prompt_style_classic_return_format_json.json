{"accuracy": 0.9, "correct_count": 180, "total_count": 200}
{"id": "multiple_7", "model_name": "microsoft_phi-4", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_7", "question": [[{"role": "user", "content": "How to assess the population growth in deer and their impact on woodland in Washington state over the past decade?"}]], "function": [{"name": "wildlife_population.assess_growth", "description": "Assesses the population growth of a specific species in a specified location over a period.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species for which the growth is to be calculated."}, "location": {"type": "string", "description": "The area where the species is present."}, "duration": {"type": "integer", "description": "The time period for which the population growth should be calculated in years."}}, "required": ["species", "location", "duration"]}}, {"name": "ecological_impact.analyze", "description": "Analyzes the impact of a species on a particular ecosystem.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species whose impact is to be calculated."}, "ecosystem": {"type": "string", "description": "The ecosystem being affected."}, "location": {"type": "string", "description": "The area where the impact is analyzed."}, "timeframe": {"type": "integer", "description": "The time period for which the impact analysis should be carried out in years.", "default": 5}}, "required": ["species", "ecosystem", "location"]}}]}, "model_result_raw": "```json\n[{\"function\":\"wildlife_population.assess_growth\",\"parameters\":{\"species\":\"deer\",\"location\":\"Washington state\",\"duration\":10}},{\"function\":\"ecological_impact.analyze\",\"parameters\":{\"species\":\"deer\",\"ecosystem\":\"woodland\",\"location\":\"Washington state\",\"timeframe\":10}}]\n```", "model_result_decoded": [{"wildlife_population.assess_growth": {"species": "deer", "location": "Washington state", "duration": 10}}, {"ecological_impact.analyze": {"species": "deer", "ecosystem": "woodland", "location": "Washington state", "timeframe": 10}}], "possible_answer": [{"wildlife_population.assess_growth": {"species": ["deer", "Deer"], "location": ["Washington state", "WA", "Washington"], "duration": [10]}}]}
{"id": "multiple_10", "model_name": "microsoft_phi-4", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_10", "question": [[{"role": "user", "content": "I need to delete some columns from my employees database on personal_data table. I want to remove their email addresses and social security numbers to respect privacy."}]], "function": [{"name": "database.modify_columns", "description": "This function allows deletion or addition of columns in a database", "parameters": {"type": "dict", "properties": {"db_name": {"type": "string", "description": "The name of the database to modify."}, "table": {"type": "string", "description": "The name of the table to modify."}, "operation": {"type": "string", "description": "The operation to carry out on the table. Can be 'delete' or 'add'."}, "columns": {"type": "array", "description": "List of the columns to add or delete from the table.", "items": {"type": "string"}}}, "required": ["db_name", "table", "operation", "columns"]}}, {"name": "database.create_backup", "description": "This function creates a backup of the database before modification", "parameters": {"type": "dict", "properties": {"db_name": {"type": "string", "description": "The name of the database to create a backup of."}, "backup_location": {"type": "string", "description": "The file path where the backup should be stored."}, "timestamp": {"type": "boolean", "description": "Option to append a timestamp to the backup file name.", "default": "False"}}, "required": ["db_name", "backup_location"]}}]}, "model_result_raw": "```json\n[{\"function\":\"database.create_backup\",\"parameters\":{\"db_name\":\"employees\",\"backup_location\":\"path/to/backup/location\",\"timestamp\":true}},{\"function\":\"database.modify_columns\",\"parameters\":{\"db_name\":\"employees\",\"table\":\"personal_data\",\"operation\":\"delete\",\"columns\":[\"email\",\"social_security_number\"]}}]\n```", "model_result_decoded": [{"database.create_backup": {"db_name": "employees", "backup_location": "path/to/backup/location", "timestamp": true}}, {"database.modify_columns": {"db_name": "employees", "table": "personal_data", "operation": "delete", "columns": ["email", "social_security_number"]}}], "possible_answer": [{"database.modify_columns": {"db_name": ["employees"], "table": ["personal_data"], "operation": ["delete"], "columns": [["email", "ssn"], ["ssn", "email"], ["email", "social_security_number"], ["social_security_number", "email"], ["email", "social security number"], ["social security number", "email"]]}}]}
{"id": "multiple_13", "model_name": "microsoft_phi-4", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_13", "question": [[{"role": "user", "content": "How much revenue would company XYZ generate if we increase the sales units of product A by 10% while keeping the price the same?"}]], "function": [{"name": "corporate_finance.product_price", "description": "Fetch the current selling price of the product.", "parameters": {"type": "dict", "properties": {"company": {"type": "string", "description": "The company that sells the product."}, "product": {"type": "string", "description": "The product whose price we want to fetch."}}, "required": ["company", "product"]}}, {"name": "corporate_finance.revenue_forecast", "description": "Estimate the revenue of a company by multiplying the sales units of the product with its selling price.", "parameters": {"type": "dict", "properties": {"company": {"type": "string", "description": "The company that you want to calculate the revenue for."}, "product": {"type": "string", "description": "The product sold by the company."}, "sales_units_increase_percentage": {"type": "integer", "description": "Percentage increase in the sales units. This value is optional and defaults to zero if not provided."}}, "required": ["company", "product"]}}]}, "model_result_raw": "```json\n[{\"function\":\"corporate_finance.product_price\",\"parameters\":{\"company\":\"XYZ\",\"product\":\"A\"}},{\"function\":\"corporate_finance.revenue_forecast\",\"parameters\":{\"company\":\"XYZ\",\"product\":\"A\",\"sales_units_increase_percentage\":10}}]\n```", "model_result_decoded": [{"corporate_finance.product_price": {"company": "XYZ", "product": "A"}}, {"corporate_finance.revenue_forecast": {"company": "XYZ", "product": "A", "sales_units_increase_percentage": 10}}], "possible_answer": [{"corporate_finance.revenue_forecast": {"company": ["XYZ"], "product": ["A", "Product A"], "sales_units_increase_percentage": [10]}}]}
{"id": "multiple_26", "model_name": "microsoft_phi-4", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_26", "question": [[{"role": "user", "content": "Find out the rewards for playing Fortnite on Playstation platform with different missions and trophies"}]], "function": [{"name": "game_scores.get", "description": "Retrieve scores and rankings based on player\u2019s performance in a certain game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The gaming platform e.g. Xbox, Playstation, PC"}, "level": {"type": "integer", "description": "The level of the game for which you want to retrieve the scores."}, "player": {"type": "string", "description": "The name of the player for whom you want to retrieve scores. Default ''", "optional": true}}, "required": ["game", "platform", "level"]}}, {"name": "game_rewards.get", "description": "Retrieve information about different types of rewards that you can receive when playing a certain game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The gaming platform e.g. Xbox, Playstation, PC"}, "mission": {"type": "string", "description": "The mission for which you want to know the rewards. Default to ''", "optional": true}, "trophy": {"type": "string", "description": "The trophy level for which you want to know the rewards. Default to ''", "optional": true}}, "required": ["game", "platform"]}}, {"name": "game_missions.list", "description": "List all missions for a certain game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the game."}}, "required": ["game"]}}]}, "model_result_raw": "```json\n[\n    {\"function\":\"game_rewards.get\",\"parameters\":{\"game\":\"Fortnite\",\"platform\":\"Playstation\",\"mission\":\"\"}},\n    {\"function\":\"game_rewards.get\",\"parameters\":{\"game\":\"Fortnite\",\"platform\":\"Playstation\",\"trophy\":\"\"}}\n]\n```", "model_result_decoded": [{"game_rewards.get": {"game": "Fortnite", "platform": "Playstation", "mission": ""}}, {"game_rewards.get": {"game": "Fortnite", "platform": "Playstation", "trophy": ""}}], "possible_answer": [{"game_rewards.get": {"game": ["Fortnite"], "platform": ["Playstation", "PS"], "mission": [""], "trophy": [""]}}]}
{"id": "multiple_32", "model_name": "microsoft_phi-4", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'round_off': 2. Expected one of ['', 0]."], "error_type": "value_error:others", "prompt": {"id": "multiple_32", "question": [[{"role": "user", "content": "Calculate the volume of a cone with radius 4 and height 7."}]], "function": [{"name": "geometry.calculate_cone_volume", "description": "Calculate the volume of a cone given the radius and height.", "parameters": {"type": "dict", "properties": {"radius": {"type": "integer", "description": "Radius of the cone base."}, "height": {"type": "integer", "description": "Height of the cone."}, "round_off": {"type": "integer", "description": "Number of decimal places to round off the answer. Default 0"}}, "required": ["radius", "height"]}}, {"name": "physics.calculate_cone_mass", "description": "Calculate the mass of a cone given the radius, height, and density.", "parameters": {"type": "dict", "properties": {"radius": {"type": "float", "description": "Radius of the cone base."}, "height": {"type": "float", "description": "Height of the cone."}, "density": {"type": "float", "description": "Density of the material the cone is made of."}}, "required": ["radius", "height", "density"]}}]}, "model_result_raw": "<TOOLCALL>\n```json\n[{\"function\":\"geometry.calculate_cone_volume\",\"parameters\":{\"radius\":4,\"height\":7,\"round_off\":2}}]\n```\n</TOOLCALL>", "model_result_decoded": [{"geometry.calculate_cone_volume": {"radius": 4, "height": 7, "round_off": 2}}], "possible_answer": [{"geometry.calculate_cone_volume": {"radius": [4], "height": [7], "round_off": ["", 0]}}]}
{"id": "multiple_38", "model_name": "microsoft_phi-4", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'availability': True. Expected one of ['', False]."], "error_type": "value_error:others", "prompt": {"id": "multiple_38", "question": [[{"role": "user", "content": "Find a book 'The Alchemist' in the library branches within New York city."}]], "function": [{"name": "library.reserve_book", "description": "Reserves a book in the library if available.", "parameters": {"type": "dict", "properties": {"book_id": {"type": "string", "description": "The id of the book to reserve."}, "branch_id": {"type": "string", "description": "The id of the library branch to reserve from."}, "return_date": {"type": "string", "description": "The date the book is to be returned (optional). Default is ''"}}, "required": ["book_id", "branch_id"]}}, {"name": "library.search_book", "description": "Searches for a book in the library within the specified city.", "parameters": {"type": "dict", "properties": {"book_name": {"type": "string", "description": "The name of the book to search for."}, "city": {"type": "string", "description": "The city to search within."}, "availability": {"type": "boolean", "description": "If true, search for available copies. If false or omitted, search for any copy regardless of availability. Default is false"}, "genre": {"type": "string", "description": "The genre of the book to filter search (optional). Default is ''"}}, "required": ["book_name", "city"]}}]}, "model_result_raw": "```json\n[{\"function\":\"library.search_book\",\"parameters\":{\"book_name\":\"The Alchemist\",\"city\":\"New York\",\"availability\":true}}]\n```", "model_result_decoded": [{"library.search_book": {"book_name": "The Alchemist", "city": "New York", "availability": true}}], "possible_answer": [{"library.search_book": {"book_name": ["The Alchemist"], "city": ["New York", "New York, NY", "New York City", "NYC", "NY"], "availability": ["", false], "genre": [""]}}]}
{"id": "multiple_40", "model_name": "microsoft_phi-4", "test_category": "multiple", "valid": false, "error": ["Function name 'electromagnetism.biot_savart_law' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "multiple_40", "question": [[{"role": "user", "content": "Calculate the strength of magnetic field given distance is 8 meters and current is 12 Amperes?"}]], "function": [{"name": "electromagnetism.ampere_law", "description": "Calculate magnetic field strength using Ampere's Circuital Law. Input the current enclosed by a circular path and the distance from the center of the circle. Can be applied to a cylindrical or spherical symmetry of consistent magnetic field. ", "parameters": {"type": "dict", "properties": {"enclosed_current": {"type": "float", "description": "The total current enclosed by the loop. In Amperes."}, "radius": {"type": "float", "description": "The radius of the circle or the distance from the center of the circular path. In meters."}, "mu0": {"type": "float", "description": "Permeability of free space. Its value is default approximated to be 0.000001256 H/m. Optional"}}, "required": ["enclosed_current", "radius"]}}, {"name": "electromagnetism.biot_savart_law", "description": "Calculate magnetic field strength using Biot-Savart law. Input the current in Ampere and the distance in meters.", "parameters": {"type": "dict", "properties": {"current": {"type": "integer", "description": "The current in the conductor, in Amperes."}, "distance": {"type": "integer", "description": "Distance from the current carrying conductor, in meters."}, "mu0": {"type": "float", "description": "Permeability of free space. Its value is default approximated to be 0.000001256 H/m. Optional"}}, "required": ["current", "distance"]}}]}, "model_result_raw": "```json\n[{\"function\":\"biot_savart_law\",\"parameters\":{\"current\":12,\"distance\":8}}]\n```", "model_result_decoded": [{"biot_savart_law": {"current": 12, "distance": 8}}], "possible_answer": [{"electromagnetism.biot_savart_law": {"current": [12], "distance": [8], "mu0": [1.256e-06, 1.256e-06, ""]}}]}
{"id": "multiple_51", "model_name": "microsoft_phi-4", "test_category": "multiple", "valid": false, "error": ["Optional parameter 'n_rolls' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "multiple_51", "question": [[{"role": "user", "content": "Calculate the probability of rolling a sum of 7 on a roll of two dice."}]], "function": [{"name": "dice_roll_probability", "description": "Calculate the probability of a specific sum appearing from rolling two dice.", "parameters": {"type": "dict", "properties": {"desired_sum": {"type": "integer", "description": "The sum for which to calculate the probability."}, "n_rolls": {"type": "integer", "description": "Number of dice to be rolled. Default is 1", "optional": true}, "sides_per_die": {"type": "integer", "description": "Number of sides on each die."}}, "required": ["desired_sum", "sides_per_die"]}}, {"name": "flip_coin_probability", "description": "Calculate the probability of a specific outcome appearing from flipping a coin.", "parameters": {"type": "dict", "properties": {"desired_outcome": {"type": "string", "description": "The outcome for which to calculate the probability."}, "n_flips": {"type": "integer", "description": "Number of coins to be flipped. Default 1", "optional": true}}, "required": ["desired_outcome"]}}, {"name": "shuffle_card_probability", "description": "Calculate the probability of a specific card appearing from a shuffled deck.", "parameters": {"type": "dict", "properties": {"desired_card": {"type": "string", "description": "The card for which to calculate the probability."}, "n_decks": {"type": "integer", "description": "Number of decks to shuffle. Default 1", "optional": true}}, "required": ["desired_card"]}}]}, "model_result_raw": "```json\n[{\"function\":\"dice_roll_probability\",\"parameters\":{\"desired_sum\":7,\"sides_per_die\":6}}]\n```", "model_result_decoded": [{"dice_roll_probability": {"desired_sum": 7, "sides_per_die": 6}}], "possible_answer": [{"dice_roll_probability": {"desired_sum": [7], "sides_per_die": [6], "n_rolls": [2]}}]}
{"id": "multiple_53", "model_name": "microsoft_phi-4", "test_category": "multiple", "valid": false, "error": ["Function name 'linear_regression' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "multiple_53", "question": [[{"role": "user", "content": "Predict the house prices for next 5 years based on interest rates and unemployment rates."}]], "function": [{"name": "linear_regression", "description": "Applies linear regression to a given set of independent variables to make a prediction.", "parameters": {"type": "dict", "properties": {"independent_var": {"type": "array", "items": {"type": "string"}, "description": "The independent variables."}, "dependent_var": {"type": "string", "description": "The dependent variable."}, "forecast_period": {"type": "integer", "description": "The number of years to forecast the prices. Default 1", "optional": true}}, "required": ["independent_var", "dependent_var"]}}, {"name": "random_forest_regression", "description": "Applies Random Forest Regression to a given set of independent variables to make a prediction.", "parameters": {"type": "dict", "properties": {"independent_var": {"type": "array", "items": {"type": "string"}, "description": "The independent variables."}, "dependent_var": {"type": "string", "description": "The dependent variable."}, "n_estimators": {"type": "integer", "description": "The number of trees in the forest. Default 1", "optional": true}, "forecast_period": {"type": "integer", "description": "The number of years to forecast the prices. Default 1", "optional": true}}, "required": ["independent_var", "dependent_var"]}}]}, "model_result_raw": "```json\n[{\"function\":\"random_forest_regression\",\"parameters\":{\"independent_var\":[\"interest rates\",\"unemployment rates\"],\"dependent_var\":\"house prices\",\"forecast_period\":5}}]\n```", "model_result_decoded": [{"random_forest_regression": {"independent_var": ["interest rates", "unemployment rates"], "dependent_var": "house prices", "forecast_period": 5}}], "possible_answer": [{"linear_regression": {"independent_var": [["interest rates", "unemployment rates"], ["interest_rate", "unemployment_rate"], ["interest rate", "unemployment rate"]], "dependent_var": ["house_price", "house price"], "forecast_period": [5]}}]}
{"id": "multiple_64", "model_name": "microsoft_phi-4", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'date': '06-02-2023'. Expected one of ['06-01-2023']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_64", "question": [[{"role": "user", "content": "Give me the UV index for Tokyo for tomorrow, June01 2023."}]], "function": [{"name": "uv_index.get_future", "description": "Retrieve UV index data for a specified location and date.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location to retrieve the UV index for."}, "date": {"type": "string", "description": "The date for the UV index, in the format mm-dd-yyyy."}}, "required": ["location", "date"]}}, {"name": "rainfall_prediction", "description": "Retrieve rainfall data for a specified location and date.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location to retrieve the rainfall prediction for."}, "date": {"type": "string", "description": "The date for the rainfall prediction, in the format mm/dd/yyyy.'"}}, "required": ["location", "date"]}}, {"name": "snowfall_prediction", "description": "Retrieve snowfall data for a specified location and date.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location to retrieve the snowfall prediction for."}, "date": {"type": "string", "description": "The date for the snowfall prediction, in the format mm-dd-yyyy."}}, "required": ["location", "date"]}}]}, "model_result_raw": "```json\n[{\"function\":\"uv_index.get_future\",\"parameters\":{\"location\":\"Tokyo\",\"date\":\"06-02-2023\"}}]\n```", "model_result_decoded": [{"uv_index.get_future": {"location": "Tokyo", "date": "06-02-2023"}}], "possible_answer": [{"uv_index.get_future": {"location": ["Tokyo"], "date": ["06-01-2023"]}}]}
{"id": "multiple_70", "model_name": "microsoft_phi-4", "test_category": "multiple", "valid": false, "error": ["Function name 'european_history.get_monarchs' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "multiple_70", "question": [[{"role": "user", "content": "Who were the kings of France during the 18th century?"}]], "function": [{"name": "european_history.get_events", "description": "Provides a list of major historical events based on the specified country and century.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "Country name."}, "century": {"type": "integer", "description": "Century as an integer. For example, for the 1700s, input '18'."}, "event_type": {"type": "string", "description": "Type of the event such as 'war', 'invention', 'revolution' etc. This field is optional. Default is 'all'"}}, "required": ["country", "century"]}}, {"name": "european_history.get_culture", "description": "Provides information on cultural trends, art movements, philosophical ideas based on the specified country and century.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "Country name."}, "century": {"type": "integer", "description": "Century as an integer. For example, for the 1700s, input '18'."}, "aspect": {"type": "string", "description": "Aspect of culture such as 'literature', 'art', 'philosophy' etc. This field is optional. Default 'any'"}}, "required": ["country", "century"]}}, {"name": "european_history.get_monarchs", "description": "Provides a list of monarchs based on the specified country and century.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "Country name."}, "century": {"type": "integer", "description": "Century as an integer. For example, for the 1700s, input '18'."}}, "required": ["country", "century"]}}]}, "model_result_raw": "```json\n[{\"function\":\"get_monarchs\",\"parameters\":{\"country\":\"France\",\"century\":18}}]\n```", "model_result_decoded": [{"get_monarchs": {"country": "France", "century": 18}}], "possible_answer": [{"european_history.get_monarchs": {"country": ["France"], "century": [18]}}]}
{"id": "multiple_76", "model_name": "microsoft_phi-4", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_76", "question": [[{"role": "user", "content": "I want to order a custom bronze sculpture of a horse. What material options are available?"}]], "function": [{"name": "painting.create_custom", "description": "Order a custom painting with your preferred color.", "parameters": {"type": "dict", "properties": {"subject": {"type": "string", "description": "The subject of the painting, e.g. horse"}, "color": {"type": "string", "enum": ["Red", "Blue", "Green", "Yellow", "Black"], "description": "Preferred main color for the painting."}, "size": {"type": "integer", "description": "The desired size for the painting in inches. This parameter is optional. Default 12"}}, "required": ["subject", "color"]}}, {"name": "sculpture.create_custom", "description": "Order a custom sculpture with your preferred material.", "parameters": {"type": "dict", "properties": {"item": {"type": "string", "description": "The subject of the sculpture, e.g. horse"}, "material": {"type": "string", "enum": ["Bronze", "Marble", "Terracotta", "Wood", "Stone"], "description": "Preferred material for the sculpture."}, "size": {"type": "integer", "description": "The desired size for the sculpture in inches. This parameter is optional. Default 12"}}, "required": ["item", "material"]}}]}, "model_result_raw": "```json\n[]\n```\n\nThe question asks for available material options for a custom sculpture. The function `sculpture.create_custom` provides the available materials as part of its parameters. The available materials for a sculpture are Bronze, Marble, Terracotta, Wood, and Stone. No function call is necessary to provide this information.", "model_result_decoded": [], "possible_answer": [{"sculpture.create_custom": {"item": ["horse", "Horse"], "material": ["Bronze", "bronze"], "size": ["", 12]}}]}
{"id": "multiple_80", "model_name": "microsoft_phi-4", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'services': ['Guitar Lessons', 'Violin Lessons']. Expected one of [['Violin Lessons']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "multiple_80", "question": [[{"role": "user", "content": "Find a local guitar shop that also offers violin lessons in Nashville."}]], "function": [{"name": "music_shop.find_nearby", "description": "Locate nearby music shops based on specific criteria like instrument lessons availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Nashville, TN"}, "services": {"type": "array", "items": {"type": "string", "enum": ["Guitar Lessons", "Violin Lessons", "Piano Lessons", "Ukulele Lessons"]}, "description": "Types of instrument lessons offered in the shop. Default empty array"}, "instruments": {"type": "array", "items": {"type": "string", "enum": ["Guitars", "Violins", "Pianos", "Drums"]}, "description": "Types of instruments sold in the shop. Default empty array"}}, "required": ["location"]}}, {"name": "gym.find_nearby", "description": "Locate nearby gyms based on specific criteria like types of fitness classes availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Nashville, TN"}, "classes": {"type": "array", "items": {"type": "string", "enum": ["Yoga", "Spin", "Zumba", "CrossFit"]}, "description": "Types of fitness classes offered in the gym. Default empty array"}, "equipment": {"type": "array", "items": {"type": "string", "enum": ["Treadmills", "Ellipticals", "Weight Machines", "Free Weights"]}, "description": "Types of gym equipment available. Default empty array"}}, "required": ["location"]}}]}, "model_result_raw": "```json\n[{\"function\":\"music_shop.find_nearby\",\"parameters\":{\"location\":\"Nashville, TN\",\"services\":[\"Guitar Lessons\",\"Violin Lessons\"]}}]\n```", "model_result_decoded": [{"music_shop.find_nearby": {"location": "Nashville, TN", "services": ["Guitar Lessons", "Violin Lessons"]}}], "possible_answer": [{"music_shop.find_nearby": {"location": ["Nashville, TN", "Nashville"], "services": [["Violin Lessons"]], "instruments": [["Guitars"]]}}]}
{"id": "multiple_91", "model_name": "microsoft_phi-4", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'ingredientLimit': 5. Expected one of [4]."], "error_type": "value_error:others", "prompt": {"id": "multiple_91", "question": [[{"role": "user", "content": "Can I find a good cooking recipe for apple pie using less than 5 ingredients?"}]], "function": [{"name": "restaurant.find", "description": "Locate restaurants based on specific criteria such as cuisine and price range", "parameters": {"type": "dict", "properties": {"cuisine": {"type": "string", "description": "The type of cuisine preferred."}, "price": {"type": "array", "items": {"type": "string"}, "description": "Price range of the restaurant in format ['low', 'mid', 'high']. Default ['low', 'mid', 'high']"}}, "required": ["cuisine"]}}, {"name": "recipe.find", "description": "Locate cooking recipes based on specific criteria such as main ingredient and number of ingredients", "parameters": {"type": "dict", "properties": {"mainIngredient": {"type": "string", "description": "Main ingredient for the recipe."}, "ingredientLimit": {"type": "integer", "description": "Max number of ingredients the recipe should use."}}, "required": ["mainIngredient", "ingredientLimit"]}}]}, "model_result_raw": "```json\n[{\"function\":\"recipe.find\",\"parameters\":{\"mainIngredient\":\"apple\",\"ingredientLimit\":5}}]\n```", "model_result_decoded": [{"recipe.find": {"mainIngredient": "apple", "ingredientLimit": 5}}], "possible_answer": [{"recipe.find": {"mainIngredient": ["apple pie", "apple"], "ingredientLimit": [4]}}]}
{"id": "multiple_109", "model_name": "microsoft_phi-4", "test_category": "multiple", "valid": false, "error": ["Incorrect type for parameter 'include_description'. Expected type boolean, got str. Parameter value: 'true'."], "error_type": "type_error:simple", "prompt": {"id": "multiple_109", "question": [[{"role": "user", "content": "What are the names of proteins found in the plasma membrane?"}]], "function": [{"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the exhibition is held, e.g., New York, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold. Default is 'high'"}}, "required": ["location", "art_form"]}}, {"name": "mutation_type.find", "description": "Finds the type of a genetic mutation based on its SNP (Single Nucleotide Polymorphism) ID.", "parameters": {"type": "dict", "properties": {"snp_id": {"type": "string", "description": "The ID of the Single Nucleotide Polymorphism (SNP) mutation."}, "species": {"type": "string", "description": "Species in which the SNP occurs, default is 'Homo sapiens' (Humans)."}}, "required": ["snp_id"]}}, {"name": "cellbio.get_proteins", "description": "Get the list of proteins in a specific cell compartment.", "parameters": {"type": "dict", "properties": {"cell_compartment": {"type": "string", "description": "The specific cell compartment."}, "include_description": {"type": "boolean", "description": "Set true if you want a brief description of each protein.", "default": "false"}}, "required": ["cell_compartment"]}}]}, "model_result_raw": "```json\n[{\"function\":\"cellbio.get_proteins\",\"parameters\":{\"cell_compartment\":\"plasma membrane\",\"include_description\":\"true\"}}]\n```", "model_result_decoded": [{"cellbio.get_proteins": {"cell_compartment": "plasma membrane", "include_description": "true"}}], "possible_answer": [{"cellbio.get_proteins": {"cell_compartment": ["plasma membrane"], "include_description": [false, ""]}}]}
{"id": "multiple_119", "model_name": "microsoft_phi-4", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_119", "question": [[{"role": "user", "content": "Find records in database in user table where age is greater than 25 and job is 'engineer'."}]], "function": [{"name": "average_batting_score", "description": "Get the average batting score of a cricketer for specified past matches.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "Name of the cricket player."}, "matches": {"type": "integer", "description": "Number of past matches to consider for average calculation."}, "match_format": {"type": "string", "description": "Format of the cricket matches considered (e.g., 'T20', 'ODI', 'Test'). Default is 'T20'."}}, "required": ["player_name", "matches"]}}, {"name": "calculate_return_on_investment", "description": "Calculate the return on investment for a given stock based on its purchase price, sale price, and any dividends received.", "parameters": {"type": "dict", "properties": {"purchase_price": {"type": "float", "description": "The price the stock was bought at."}, "sale_price": {"type": "float", "description": "The price the stock was sold at."}, "dividend": {"type": "float", "description": "Any dividends received from the stock.", "default": 0}}, "required": ["purchase_price", "sale_price"]}}, {"name": "database.query", "description": "Query the database based on certain conditions.", "parameters": {"type": "dict", "properties": {"table": {"type": "string", "description": "Name of the table to query."}, "conditions": {"type": "array", "items": {"type": "dict", "properties": {"field": {"type": "string", "description": "The field to apply the condition."}, "operation": {"type": "string", "description": "The operation to be performed.", "enum": ["<", ">", "=", ">=", "<="]}, "value": {"type": "string", "description": "The value to be compared."}}, "required": ["field", "operation", "value"]}, "description": "Conditions for the query."}}, "required": ["table", "conditions"]}}, {"name": "probability_of_event", "description": "Calculates the probability of an event.", "parameters": {"type": "dict", "properties": {"success_outcomes": {"type": "integer", "description": "The number of successful outcomes."}, "total_outcomes": {"type": "integer", "description": "The total number of possible outcomes."}, "format_as_ratio": {"type": "boolean", "description": "When true, formats the output as a ratio instead of a decimal. Default is false."}}, "required": ["success_outcomes", "total_outcomes"]}}]}, "model_result_raw": "```json\n[{\"function\":\"database.query\",\"parameters\":{\"table\":\"user\",\"conditions\":[{\"field\":\"age\",\"operation\":\">\",\"value\":\"25\"},{\"field\":\"job\",\"operation\":\"=\",\"value\":\"engineer\"}]}}]\n```", "model_result_decoded": [], "possible_answer": [{"database.query": {"table": ["user"], "conditions": [[{"field": ["age"], "operation": [">"], "value": ["25"]}, {"field": ["job"], "operation": ["="], "value": ["engineer"]}]]}}]}
{"id": "multiple_132", "model_name": "microsoft_phi-4", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'rate_of_return': 8.0. Expected one of [0.08]."], "error_type": "value_error:others", "prompt": {"id": "multiple_132", "question": [[{"role": "user", "content": "Calculate the future value of an investment with an annual rate of return of 8%, an initial investment of $20000, and a time frame of 5 years."}]], "function": [{"name": "mix_paint_color", "description": "Combine two primary paint colors and adjust the resulting color's lightness level.", "parameters": {"type": "dict", "properties": {"color1": {"type": "string", "description": "The first primary color to be mixed."}, "color2": {"type": "string", "description": "The second primary color to be mixed."}, "lightness": {"type": "integer", "description": "The desired lightness level of the resulting color in percentage. The default level is set to 50%."}}, "required": ["color1", "color2"]}}, {"name": "finance.calculate_future_value", "description": "Calculate the future value of an investment given an initial investment, annual rate of return, and a time frame.", "parameters": {"type": "dict", "properties": {"initial_investment": {"type": "integer", "description": "The initial investment amount."}, "rate_of_return": {"type": "float", "description": "The annual rate of return."}, "years": {"type": "integer", "description": "The time frame of the investment in years."}, "contribution": {"type": "integer", "description": "Optional: Additional regular contributions. Default is 0."}}, "required": ["initial_investment", "rate_of_return", "years"]}}, {"name": "create_histogram", "description": "Create a histogram based on provided data.", "parameters": {"type": "dict", "properties": {"data": {"type": "array", "items": {"type": "float"}, "description": "The data for which histogram needs to be plotted."}, "bins": {"type": "integer", "description": "The number of equal-width bins in the range. Default is 10."}}, "required": ["data", "bins"]}}]}, "model_result_raw": "```json\n[{\"function\":\"finance.calculate_future_value\",\"parameters\":{\"initial_investment\":20000,\"rate_of_return\":8.0,\"years\":5}}]\n```", "model_result_decoded": [{"finance.calculate_future_value": {"initial_investment": 20000, "rate_of_return": 8.0, "years": 5}}], "possible_answer": [{"finance.calculate_future_value": {"initial_investment": [20000], "rate_of_return": [0.08], "years": [5], "contribution": ["", 0]}}]}
{"id": "multiple_133", "model_name": "microsoft_phi-4", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'annual_yield': 5.0. Expected one of [0.05]."], "error_type": "value_error:others", "prompt": {"id": "multiple_133", "question": [[{"role": "user", "content": "Calculate the balance of a mutual fund given a total investment of $50000 with a 5% annual yield after 3 years."}]], "function": [{"name": "calculate_mutual_fund_balance", "description": "Calculate the final balance of a mutual fund investment based on the total initial investment, annual yield rate and the time period.", "parameters": {"type": "dict", "properties": {"investment_amount": {"type": "integer", "description": "The initial total amount invested in the fund."}, "annual_yield": {"type": "float", "description": "The annual yield rate of the fund."}, "years": {"type": "integer", "description": "The period of time for the fund to mature."}}, "required": ["investment_amount", "annual_yield", "years"]}}, {"name": "geometry.calculate_area_circle", "description": "Calculate the area of a circle given its radius.", "parameters": {"type": "dict", "properties": {"radius": {"type": "float", "description": "The radius of the circle."}, "unit": {"type": "string", "description": "The measurement unit of the radius (optional parameter, default is 'units')."}}, "required": ["radius"]}}]}, "model_result_raw": "<TOOLCALL>\n```json\n[{\"function\":\"calculate_mutual_fund_balance\",\"parameters\":{\"investment_amount\":50000,\"annual_yield\":5.0,\"years\":3}}]\n```\n</TOOLCALL>", "model_result_decoded": [{"calculate_mutual_fund_balance": {"investment_amount": 50000, "annual_yield": 5.0, "years": 3}}], "possible_answer": [{"calculate_mutual_fund_balance": {"investment_amount": [50000], "annual_yield": [0.05], "years": [3]}}]}
{"id": "multiple_149", "model_name": "microsoft_phi-4", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'language': 'en'. Expected one of ['english', 'English']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_149", "question": [[{"role": "user", "content": "Analyze the sentiment of a customer review 'I love the food here! It's always fresh and delicious.'."}]], "function": [{"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}, {"name": "sentiment_analysis", "description": "Perform sentiment analysis on a given piece of text.", "parameters": {"type": "dict", "properties": {"text": {"type": "string", "description": "The text on which to perform sentiment analysis."}, "language": {"type": "string", "description": "The language in which the text is written."}}, "required": ["text", "language"]}}, {"name": "get_time_difference", "description": "Get the time difference between two places.", "parameters": {"type": "dict", "properties": {"place1": {"type": "string", "description": "The first place for time difference."}, "place2": {"type": "string", "description": "The second place for time difference."}}, "required": ["place1", "place2"]}}, {"name": "calculate_bmi", "description": "Calculate the Body Mass Index (BMI) for a person based on their weight and height.", "parameters": {"type": "dict", "properties": {"weight": {"type": "integer", "description": "The weight of the person in kilograms."}, "height": {"type": "integer", "description": "The height of the person in centimeters."}, "system": {"type": "string", "description": "The system of units to be used, 'metric' or 'imperial'. Default is 'metric'."}}, "required": ["weight", "height"]}}]}, "model_result_raw": "```json\n[{\"function\":\"sentiment_analysis\",\"parameters\":{\"text\":\"I love the food here! It's always fresh and delicious.\",\"language\":\"en\"}}]\n```", "model_result_decoded": [{"sentiment_analysis": {"text": "I love the food here! It's always fresh and delicious.", "language": "en"}}], "possible_answer": [{"sentiment_analysis": {"text": ["I love the food here! It's always fresh and delicious."], "language": ["english", "English"]}}]}
{"id": "multiple_164", "model_name": "microsoft_phi-4", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'finish': 'Rosewood Finish'. Expected one of ['Rosewood']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_164", "question": [[{"role": "user", "content": "What's the retail price of a Fender American Professional II Stratocaster in Rosewood Finish?"}]], "function": [{"name": "grocery_store.find_nearby", "description": "Locate nearby grocery stores based on specific criteria like organic fruits and vegetables.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Houston, TX"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["Organic", "Vegetables", "Fruits", "Dairy", "Seafood", "Bakery"]}, "description": "Categories of items to be found in the grocery store. Default is empty array"}}, "required": ["location"]}}, {"name": "calculate_NPV", "description": "Calculate the NPV (Net Present Value) of an investment, considering a series of future cash flows, discount rate, and an initial investment.", "parameters": {"type": "dict", "properties": {"cash_flows": {"type": "array", "items": {"type": "float"}, "description": "Series of future cash flows."}, "discount_rate": {"type": "float", "description": "The discount rate to use."}, "initial_investment": {"type": "float", "description": "The initial investment. Default is 0 if not specified."}}, "required": ["cash_flows", "discount_rate"]}}, {"name": "get_stock_price", "description": "Get the closing stock price for a specific company on a specified date.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "Name of the company."}, "date": {"type": "string", "description": "Date of when to get the stock price. Format: yyyy-mm-dd."}, "exchange": {"type": "string", "description": "Name of the stock exchange market where the company's stock is listed. Default is 'NASDAQ'"}}, "required": ["company_name", "date"]}}, {"name": "instrument_price.get", "description": "Retrieve the current retail price of a specific musical instrument.", "parameters": {"type": "dict", "properties": {"brand": {"type": "string", "description": "The brand of the instrument."}, "model": {"type": "string", "description": "The specific model of the instrument."}, "finish": {"type": "string", "description": "The color or type of finish on the instrument."}}, "required": ["brand", "model", "finish"]}}]}, "model_result_raw": "```json\n[{\"function\":\"instrument_price.get\",\"parameters\":{\"brand\":\"Fender\",\"model\":\"American Professional II Stratocaster\",\"finish\":\"Rosewood Finish\"}}]\n```", "model_result_decoded": [{"instrument_price.get": {"brand": "Fender", "model": "American Professional II Stratocaster", "finish": "Rosewood Finish"}}], "possible_answer": [{"instrument_price.get": {"brand": ["Fender"], "model": ["American Professional II Stratocaster"], "finish": ["Rosewood"]}}]}