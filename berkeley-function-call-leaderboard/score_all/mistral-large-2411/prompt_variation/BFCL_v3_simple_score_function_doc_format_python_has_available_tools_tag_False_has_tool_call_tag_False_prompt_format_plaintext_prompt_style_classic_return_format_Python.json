{"accuracy": 0.8675, "correct_count": 347, "total_count": 400}
{"id": "simple_1", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Function name 'math.factorial' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_1", "question": [[{"role": "user", "content": "Calculate the factorial of 5 using math functions."}]], "function": [{"name": "math.factorial", "description": "Calculate the factorial of a given number.", "parameters": {"type": "dict", "properties": {"number": {"type": "integer", "description": "The number for which factorial needs to be calculated."}}, "required": ["number"]}}]}, "model_result_raw": "[factorial(number=5)]", "model_result_decoded": [{"factorial": {"number": 5}}], "possible_answer": [{"math.factorial": {"number": [5]}}]}
{"id": "simple_13", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'interval'. Expected outer type array with inner type <class 'float'>. Parameter value: [1, 3]."], "error_type": "type_error:nested", "prompt": {"id": "simple_13", "question": [[{"role": "user", "content": "Calculate the area under the curve y=x^2 from x=1 to x=3."}]], "function": [{"name": "calculate_area_under_curve", "description": "Calculate the area under a mathematical function within a given interval.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The mathematical function as a string."}, "interval": {"type": "array", "items": {"type": "float"}, "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."}, "method": {"type": "string", "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, "required": ["function", "interval"]}}]}, "model_result_raw": "```[calculate_area_under_curve(function='x**2', interval=[1, 3], method='trapezoidal')]```", "model_result_decoded": [{"calculate_area_under_curve": {"function": "x**2", "interval": [1, 3], "method": "trapezoidal"}}], "possible_answer": [{"calculate_area_under_curve": {"function": ["x**2", "lambda x: x**2", "y=x**2"], "interval": [[1.0, 3.0]], "method": ["", "trapezoidal"]}}]}
{"id": "simple_20", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Function name 'math.hcf' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_20", "question": [[{"role": "user", "content": "Find the highest common factor of 36 and 24."}]], "function": [{"name": "math.hcf", "description": "Calculate the highest common factor of two numbers.", "parameters": {"type": "dict", "properties": {"number1": {"type": "integer", "description": "First number."}, "number2": {"type": "integer", "description": "Second number."}}, "required": ["number1", "number2"]}}]}, "model_result_raw": "[hcf(number1=36, number2=24)]", "model_result_decoded": [{"hcf": {"number1": 36, "number2": 24}}], "possible_answer": [{"math.hcf": {"number1": [36], "number2": [24]}}]}
{"id": "simple_22", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Function name 'math.gcd' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_22", "question": [[{"role": "user", "content": "Calculate the greatest common divisor of two given numbers, for example 12 and 15."}]], "function": [{"name": "math.gcd", "description": "Calculate the greatest common divisor (gcd) of the two integers.", "parameters": {"type": "dict", "properties": {"num1": {"type": "integer", "description": "The first number."}, "num2": {"type": "integer", "description": "The second number."}}, "required": ["num1", "num2"]}}]}, "model_result_raw": "[gcd(num1=12, num2=15)]", "model_result_decoded": [{"gcd": {"num1": 12, "num2": 15}}], "possible_answer": [{"math.gcd": {"num1": [12], "num2": [15]}}]}
{"id": "simple_24", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Function name 'math.gcd' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_24", "question": [[{"role": "user", "content": "Find the greatest common divisor (GCD) of 12 and 18"}]], "function": [{"name": "math.gcd", "description": "Calculate the greatest common divisor of two integers.", "parameters": {"type": "dict", "properties": {"num1": {"type": "integer", "description": "First number."}, "num2": {"type": "integer", "description": "Second number."}}, "required": ["num1", "num2"]}}]}, "model_result_raw": "[gcd(num1=12, num2=18)]", "model_result_decoded": [{"gcd": {"num1": 12, "num2": 18}}], "possible_answer": [{"math.gcd": {"num1": [12], "num2": [18]}}]}
{"id": "simple_55", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'cell_type': 'human cell'. Expected one of ['human']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_55", "question": [[{"role": "user", "content": "Find me detailed information about the structure of human cell"}]], "function": [{"name": "biology.get_cell_info", "description": "Retrieve information about the structure and functioning of a specified type of cell", "parameters": {"type": "dict", "properties": {"cell_type": {"type": "string", "description": "Type of cell you want information about"}, "detailed": {"type": "boolean", "description": "Indicate if you want a detailed description of the cell", "default": "false"}}, "required": ["cell_type"]}}]}, "model_result_raw": "```[biology.get_cell_info(cell_type='human cell', detailed=True)]```", "model_result_decoded": [{"biology.get_cell_info": {"cell_type": "human cell", "detailed": true}}], "possible_answer": [{"biology.get_cell_info": {"cell_type": ["human"], "detailed": [true]}}]}
{"id": "simple_66", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'time_frame': '6 months'. Expected one of ['six_months']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_66", "question": [[{"role": "user", "content": "Get me data on average precipitation in the Amazon rainforest for the last six months."}]], "function": [{"name": "ecology_data.precipitation_stats", "description": "Retrieve precipitation data for a specified location and time period.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The name of the location, e.g., 'Amazon rainforest'."}, "time_frame": {"type": "string", "enum": ["six_months", "year", "five_years"], "description": "The time period for which data is required."}}, "required": ["location", "time_frame"]}}]}, "model_result_raw": "```[ecology_data.precipitation_stats(location='Amazon rainforest', time_frame='6 months')]```", "model_result_decoded": [{"ecology_data.precipitation_stats": {"location": "Amazon rainforest", "time_frame": "6 months"}}], "possible_answer": [{"ecology_data.precipitation_stats": {"location": ["Amazon rainforest"], "time_frame": ["six_months"]}}]}
{"id": "simple_82", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'numbers'. Expected outer type array with inner type <class 'float'>. Parameter value: [12, 15, 18, 20, 21, 26, 30]."], "error_type": "type_error:nested", "prompt": {"id": "simple_82", "question": [[{"role": "user", "content": "Calculate the average of list of integers [12, 15, 18, 20, 21, 26, 30]."}]], "function": [{"name": "calculate_average", "description": "Calculates the average of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to calculate the average of."}}, "required": ["numbers"]}}]}, "model_result_raw": "[calculate_average(numbers=[12, 15, 18, 20, 21, 26, 30])]", "model_result_decoded": [{"calculate_average": {"numbers": [12, 15, 18, 20, 21, 26, 30]}}], "possible_answer": [{"calculate_average": {"numbers": [[12.0, 15.0, 18.0, 20.0, 21.0, 26.0, 30.0]]}}]}
{"id": "simple_87", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'list'. Expected outer type array with inner type <class 'float'>. Parameter value: [5, 3, 4, 1, 2]."], "error_type": "type_error:nested", "prompt": {"id": "simple_87", "question": [[{"role": "user", "content": "Sort the list [5, 3, 4, 1, 2] in ascending order."}]], "function": [{"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "dict", "properties": {"list": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting."}}, "required": ["list", "order"]}}]}, "model_result_raw": "```[array_sort(list=[5, 3, 4, 1, 2], order='ascending')]```", "model_result_decoded": [{"array_sort": {"list": [5, 3, 4, 1, 2], "order": "ascending"}}], "possible_answer": [{"array_sort": {"list": [[5.0, 3.0, 4.0, 1.0, 2.0]], "order": ["ascending"]}}]}
{"id": "simple_89", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Unexpected dict key parameter: 'school_name'.", "Missing dict key parameter: 'department'."], "error_type": "value_error:dict_key", "prompt": {"id": "simple_89", "question": [[{"role": "user", "content": "Fetch all records for students studying Science in 'Bluebird High School' from the StudentDB."}]], "function": [{"name": "db_fetch_records", "description": "Fetch records from a specified database table based on certain conditions.", "parameters": {"type": "dict", "properties": {"database_name": {"type": "string", "description": "The name of the database."}, "table_name": {"type": "string", "description": "The name of the table from which records need to be fetched."}, "conditions": {"type": "dict", "properties": {"department": {"type": "string", "description": "The name of the department of students."}, "school": {"type": "string", "description": "The name of the school students are enrolled in."}}, "description": "The conditions based on which records are to be fetched."}, "fetch_limit": {"type": "integer", "description": "Limits the number of records to be fetched. Default is 0, which means no limit."}}, "required": ["database_name", "table_name", "conditions"]}}]}, "model_result_raw": "```[db_fetch_records(database_name=\"StudentDB\", table_name=\"students\", conditions={\"school_name\": \"Bluebird High School\", \"major\": \"Science\"})]\n```", "model_result_decoded": [{"db_fetch_records": {"database_name": "StudentDB", "table_name": "students", "conditions": {"school_name": "Bluebird High School", "major": "Science"}}}], "possible_answer": [{"db_fetch_records": {"database_name": ["StudentDB"], "table_name": ["students"], "conditions": [{"department": ["Science"], "school": ["Bluebird High School", "Bluebird HS"]}], "fetch_limit": ["", 0]}}]}
{"id": "simple_91", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'condition': 'Sunday'. Expected one of ['open on Sundays', 'opens on Sundays']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_91", "question": [[{"role": "user", "content": "Get the highest rated sushi restaurant in Boston, that opens on Sundays."}]], "function": [{"name": "get_restaurant", "description": "Retrieve highest rated restaurant given cuisine, location, and a condition.", "parameters": {"type": "dict", "properties": {"cuisine": {"type": "string", "description": "Cuisine of the restaurant."}, "location": {"type": "string", "description": "City where restaurant is located."}, "condition": {"type": "string", "description": "Condition to be met by the restaurant (e.g., operating days, amenities, etc.)"}}, "required": ["cuisine", "location", "condition"]}}]}, "model_result_raw": "```[get_restaurant(cuisine=\"sushi\", location=\"Boston\", condition=\"Sunday\")]```", "model_result_decoded": [{"get_restaurant": {"cuisine": "sushi", "location": "Boston", "condition": "Sunday"}}], "possible_answer": [{"get_restaurant": {"cuisine": ["sushi"], "location": ["Boston"], "condition": ["open on Sundays", "opens on Sundays"]}}]}
{"id": "simple_96", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'conditions'. Expected outer type array with inner type <class 'dict'>. Parameter value: ['age > 25', \"job = 'engineer'\"]."], "error_type": "type_error:nested", "prompt": {"id": "simple_96", "question": [[{"role": "user", "content": "Find records in database in user table where age is greater than 25 and job is 'engineer'."}]], "function": [{"name": "database.query", "description": "Query the database based on certain conditions.", "parameters": {"type": "dict", "properties": {"table": {"type": "string", "description": "Name of the table to query."}, "conditions": {"type": "array", "items": {"type": "dict", "properties": {"field": {"type": "string", "description": "The field to apply the condition."}, "operation": {"type": "string", "description": "The operation to be performed.", "enum": ["<", ">", "=", ">=", "<="]}, "value": {"type": "string", "description": "The value to be compared."}}, "required": ["field", "operation", "value"]}, "description": "Conditions for the query."}}, "required": ["table", "conditions"]}}]}, "model_result_raw": "```[database.query(table=\"user\", conditions=[\"age > 25\", \"job = 'engineer'\"])]\n```", "model_result_decoded": [{"database.query": {"table": "user", "conditions": ["age > 25", "job = 'engineer'"]}}], "possible_answer": [{"database.query": {"table": ["user"], "conditions": [[{"field": ["age"], "operation": [">"], "value": ["25"]}, {"field": ["job"], "operation": ["="], "value": ["engineer"]}]]}}]}
{"id": "simple_97", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Function name 'math.factorial' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_97", "question": [[{"role": "user", "content": "Calculate the factorial of the number 5"}]], "function": [{"name": "math.factorial", "description": "Calculate the factorial of a given number.", "parameters": {"type": "dict", "properties": {"number": {"type": "integer", "description": "The number to compute factorial."}}, "required": ["number"]}}]}, "model_result_raw": "[factorial(number=5)]", "model_result_decoded": [{"factorial": {"number": 5}}], "possible_answer": [{"math.factorial": {"number": [5]}}]}
{"id": "simple_98", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'hours': 18. Expected one of [6]."], "error_type": "value_error:others", "prompt": {"id": "simple_98", "question": [[{"role": "user", "content": "What will be the angle between the hour and minute hands of a clock at 6:30 PM?"}]], "function": [{"name": "calculate_clock_angle", "description": "Calculate the angle between the hour and minute hands of a clock at a given time.", "parameters": {"type": "dict", "properties": {"hours": {"type": "integer", "description": "The hour on the clock face."}, "minutes": {"type": "integer", "description": "The minutes on the clock face."}, "round_to": {"type": "integer", "description": "The number of decimal places to round the result to, default is 2."}}, "required": ["hours", "minutes"]}}]}, "model_result_raw": "[calculate_clock_angle(hours=18, minutes=30, round_to=2)]", "model_result_decoded": [{"calculate_clock_angle": {"hours": 18, "minutes": 30, "round_to": 2}}], "possible_answer": [{"calculate_clock_angle": {"hours": [6], "minutes": [30], "round_to": ["", 2]}}]}
{"id": "simple_103", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'polynomial'. Expected outer type array with inner type <class 'float'>. Parameter value: [3, 2, -4]."], "error_type": "type_error:nested", "prompt": {"id": "simple_103", "question": [[{"role": "user", "content": "Calculate the area under the curve y=3x^2 + 2x - 4, between x = -1 and x = 2."}]], "function": [{"name": "mathematics.calculate_area_under_curve", "description": "Calculate the area under the curve for a given polynomial function within a specified interval.", "parameters": {"type": "dict", "properties": {"polynomial": {"type": "array", "items": {"type": "float"}, "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."}, "limits": {"type": "array", "items": {"type": "float"}, "description": "A list of two numbers specifying the lower and upper limit for the integration interval."}}, "required": ["polynomial", "limits"]}}]}, "model_result_raw": "[mathematics.calculate_area_under_curve(polynomial=[3, 2, -4], limits=[-1, 2])]", "model_result_decoded": [{"mathematics.calculate_area_under_curve": {"polynomial": [3, 2, -4], "limits": [-1, 2]}}], "possible_answer": [{"mathematics.calculate_area_under_curve": {"polynomial": [[3.0, 2.0, -4.0]], "limits": [[-1.0, 2.0]]}}]}
{"id": "simple_105", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Function name 'math.power' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_105", "question": [[{"role": "user", "content": "Calculate the power of 3 raised to the power 4."}]], "function": [{"name": "math.power", "description": "Calculate the power of one number raised to another.", "parameters": {"type": "dict", "properties": {"base": {"type": "integer", "description": "The base number."}, "exponent": {"type": "integer", "description": "The exponent."}, "mod": {"type": "integer", "description": "The modulus. Default is 1. Calculates pow(base, exponent) % mod when provided."}}, "required": ["base", "exponent"]}}]}, "model_result_raw": "[power(base=3, exponent=4)]", "model_result_decoded": [{"power": {"base": 3, "exponent": 4}}], "possible_answer": [{"math.power": {"base": [3], "exponent": [4], "mod": ["", 1]}}]}
{"id": "simple_111", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Function name 'random.normalvariate' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_111", "question": [[{"role": "user", "content": "Generate a random number from a normal distribution with mean 0 and standard deviation 1."}]], "function": [{"name": "random.normalvariate", "description": "Generates a random number from a normal distribution given the mean and standard deviation.", "parameters": {"type": "dict", "properties": {"mu": {"type": "integer", "description": "Mean of the normal distribution."}, "sigma": {"type": "integer", "description": "Standard deviation of the normal distribution."}}, "required": ["mu", "sigma"]}}]}, "model_result_raw": "[normalvariate(mu=0, sigma=1)]", "model_result_decoded": [{"normalvariate": {"mu": 0, "sigma": 1}}], "possible_answer": [{"random.normalvariate": {"mu": [0], "sigma": [1]}}]}
{"id": "simple_116", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Function name 'probabilities.calculate_single' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_116", "question": [[{"role": "user", "content": "What's the probability of drawing a king from a well shuffled standard deck of 52 cards?"}]], "function": [{"name": "probabilities.calculate_single", "description": "Calculate the probability of an event.", "parameters": {"type": "dict", "properties": {"total_outcomes": {"type": "integer", "description": "The total number of outcomes."}, "event_outcomes": {"type": "integer", "description": "The number of outcomes where the event occurs."}, "round": {"type": "integer", "description": "Round the answer to a specified number of decimal places. Defaults to 2."}}, "required": ["total_outcomes", "event_outcomes"]}}]}, "model_result_raw": "```[calculate_single(total_outcomes=52, event_outcomes=4, round=2)]```", "model_result_decoded": [{"calculate_single": {"total_outcomes": 52, "event_outcomes": 4, "round": 2}}], "possible_answer": [{"probabilities.calculate_single": {"total_outcomes": [52], "event_outcomes": [4], "round": [2, ""]}}]}
{"id": "simple_124", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. '[' was never closed (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_124", "question": [[{"role": "user", "content": "Find the statistical significance between two set of variables, dataset_A with the values 12, 24, 36 and dataset_B with the values 15, 30, 45."}]], "function": [{"name": "t_test", "description": "Perform a statistical t-test to check if the means of two independent datasets are statistically different.", "parameters": {"type": "dict", "properties": {"dataset_A": {"type": "array", "items": {"type": "integer"}, "description": "Dataset A for comparison."}, "dataset_B": {"type": "array", "items": {"type": "integer"}, "description": "Dataset B for comparison."}, "alpha": {"type": "float", "description": "Significance level for the test. Default is 0.05."}}, "required": ["dataset_A", "dataset_B"]}}]}, "model_result_raw": "```python\n[t_test(dataset_A=[12, 24, 36], dataset_B=[15, 30, 45])]\n```", "possible_answer": [{"t_test": {"dataset_A": [[12, 24, 36]], "dataset_B": [[15, 30, 45]], "alpha": [0.05, ""]}}]}
{"id": "simple_139", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. '[' was never closed (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_139", "question": [[{"role": "user", "content": "What is the estimated return on a mutual fund, given that it has a yearly yield of 5%, an investment amount of $2000 and a time period of 3 years?"}]], "function": [{"name": "estimate_mutual_fund_return", "description": "Calculate the estimated return on a mutual fund given the yearly yield, the investment amount and the time period.", "parameters": {"type": "dict", "properties": {"yearly_yield": {"type": "float", "description": "The yearly yield of the mutual fund as a percentage."}, "investment_amount": {"type": "integer", "description": "The initial investment amount in the mutual fund."}, "years": {"type": "integer", "description": "The time period for which the investment is made in years."}}, "required": ["yearly_yield", "investment_amount", "years"]}}]}, "model_result_raw": "```python\n[estimate_mutual_fund_return(yearly_yield=5.0, investment_amount=2000, years=3)]\n```", "possible_answer": [{"estimate_mutual_fund_return": {"yearly_yield": [5.0], "investment_amount": [2000], "years": [3]}}]}
{"id": "simple_161", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'detail_level': 'detail'. Expected one of ['detailed']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_161", "question": [[{"role": "user", "content": "Find out the possible punishments for the crime of theft in California in detail."}]], "function": [{"name": "crime_statute_lookup", "description": "Look up the criminal statutes in a specific jurisdiction to find possible punishments for a specific crime.", "parameters": {"type": "dict", "properties": {"jurisdiction": {"type": "string", "description": "The jurisdiction to search in, usually a state or country."}, "crime": {"type": "string", "description": "The crime to search for."}, "detail_level": {"type": "string", "enum": ["basic", "detailed"], "description": "How detailed of a report to return. Optional, default is 'basic'."}}, "required": ["jurisdiction", "crime"]}}]}, "model_result_raw": "```[crime_statute_lookup(jurisdiction=\"California\", crime=\"theft\", detail_level=\"detail\")]```", "model_result_decoded": [{"crime_statute_lookup": {"jurisdiction": "California", "crime": "theft", "detail_level": "detail"}}], "possible_answer": [{"crime_statute_lookup": {"jurisdiction": ["California", "CA"], "crime": ["theft"], "detail_level": ["detailed"]}}]}
{"id": "simple_177", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'status': 'Patent'. Expected one of ['all', '']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_177", "question": [[{"role": "user", "content": "Find all Patent lawsuit cases of Facebook in 2018."}]], "function": [{"name": "get_lawsuit_cases", "description": "Retrieve all lawsuit cases related to a specific company during a particular year.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "year": {"type": "integer", "description": "The specific year to search for lawsuit cases."}, "status": {"type": "string", "enum": ["open", "closed", "all"], "description": "The status of the lawsuit cases to retrieve. If not specified, defaults to 'all'."}}, "required": ["company_name", "year"]}}]}, "model_result_raw": "```[get_lawsuit_cases(company_name=\"Facebook\", year=2018, status=\"Patent\")]```", "model_result_decoded": [{"get_lawsuit_cases": {"company_name": "Facebook", "year": 2018, "status": "Patent"}}], "possible_answer": [{"get_lawsuit_cases": {"company_name": ["Facebook"], "year": [2018], "status": ["all", ""]}}]}
{"id": "simple_187", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'include_temperature'. Expected type boolean, got str. Parameter value: 'true'."], "error_type": "type_error:simple", "prompt": {"id": "simple_187", "question": [[{"role": "user", "content": "What's the current temperature and humidity in Seattle, Washington?"}]], "function": [{"name": "get_current_weather", "description": "Retrieves the current temperature and humidity for a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city name to get the weather for."}, "include_temperature": {"type": "boolean", "description": "Whether to include the temperature in the result. Default is true."}, "include_humidity": {"type": "boolean", "description": "Whether to include the humidity in the result. Default is true."}}, "required": ["location"]}}]}, "model_result_raw": "```[get_current_weather(location=\"Seattle, Washington\", include_temperature=true, include_humidity=true)]\n```", "model_result_decoded": [{"get_current_weather": {"location": "Seattle, Washington", "include_temperature": "true", "include_humidity": "true"}}], "possible_answer": [{"get_current_weather": {"location": ["Seattle", "Seattle, Washington"], "include_temperature": [true, ""], "include_humidity": [true, ""]}}]}
{"id": "simple_196", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'date': '2022/08/16'. Expected one of ['08-16-2022']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_196", "question": [[{"role": "user", "content": "What is the air quality index in London 2022/08/16?"}]], "function": [{"name": "air_quality", "description": "Retrieve the air quality index for a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality index for."}, "date": {"type": "string", "description": "The date (month-day-year) you want to get the air quality index for."}}, "required": ["location", "date"]}}]}, "model_result_raw": "```[air_quality(location='London', date='2022/08/16')]```", "model_result_decoded": [{"air_quality": {"location": "London", "date": "2022/08/16"}}], "possible_answer": [{"air_quality": {"location": ["London"], "date": ["08-16-2022"]}}]}
{"id": "simple_199", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Function name 'environmental_data.air_quality_index' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_199", "question": [[{"role": "user", "content": "Find air quality index in San Jose for next three days."}]], "function": [{"name": "environmental_data.air_quality_index", "description": "Retrieves Air Quality Index (AQI) for specified location over a number of days.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Name of the city or town to retrieve air quality index for."}, "days": {"type": "integer", "description": "Number of days for which to retrieve data. If not provided, default to today."}}, "required": ["location"]}}]}, "model_result_raw": "[air_quality_index(location=\"San Jose\", days=3)]", "model_result_decoded": [{"air_quality_index": {"location": "San Jose", "days": 3}}], "possible_answer": [{"environmental_data.air_quality_index": {"location": ["San Jose", "'San Jose'"], "days": [3]}}]}
{"id": "simple_202", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'energy_type': 'solar'. Expected one of ['renewable']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_202", "question": [[{"role": "user", "content": "How many greenhouse gas emissions would I save if I switched to renewable energy sources for 3 months in California?"}]], "function": [{"name": "calculate_emission_savings", "description": "Calculate potential greenhouse gas emissions saved by switching to renewable energy sources.", "parameters": {"type": "dict", "properties": {"energy_type": {"type": "string", "description": "Type of the renewable energy source."}, "usage_duration": {"type": "integer", "description": "Usage duration in months."}, "region": {"type": "string", "description": "The region where you use energy. Default is 'Texas'."}}, "required": ["energy_type", "usage_duration"]}}]}, "model_result_raw": "```[calculate_emission_savings(energy_type='solar', usage_duration=3, region='California')]\n```", "model_result_decoded": [{"calculate_emission_savings": {"energy_type": "solar", "usage_duration": 3, "region": "California"}}], "possible_answer": [{"calculate_emission_savings": {"energy_type": ["renewable"], "usage_duration": [3], "region": ["California", "CA"]}}]}
{"id": "simple_209", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'facilities': ['English fiction', 'Wi-Fi']. Expected one of [['Fiction', 'Wi-Fi'], ['Wi-Fi', 'Fiction']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_209", "question": [[{"role": "user", "content": "Locate the nearest public library in Boston, Massachusetts with English fiction section and free Wi-Fi."}]], "function": [{"name": "public_library.find_nearby", "description": "Locate nearby public libraries based on specific criteria like English fiction availability and Wi-Fi.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Boston, MA"}, "facilities": {"type": "array", "items": {"type": "string", "enum": ["Wi-Fi", "Reading Room", "Fiction", "Children Section", "Cafe"]}, "description": "Facilities and sections in public library."}}, "required": ["location", "facilities"]}}]}, "model_result_raw": "```[public_library.find_nearby(location=\"Boston, MA\", facilities=[\"English fiction\", \"Wi-Fi\"])]\n```", "model_result_decoded": [{"public_library.find_nearby": {"location": "Boston, MA", "facilities": ["English fiction", "Wi-Fi"]}}], "possible_answer": [{"public_library.find_nearby": {"location": ["Boston, MA", "Boston, Massachusetts"], "facilities": [["Fiction", "Wi-Fi"], ["Wi-Fi", "Fiction"]]}}]}
{"id": "simple_215", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'extra_info'. Expected type boolean, got str. Parameter value: 'false'."], "error_type": "type_error:simple", "prompt": {"id": "simple_215", "question": [[{"role": "user", "content": "Give me a brief on movie 'Interstellar'"}]], "function": [{"name": "movie_details.brief", "description": "This function retrieves a brief about a specified movie.", "parameters": {"type": "dict", "properties": {"title": {"type": "string", "description": "Title of the movie"}, "extra_info": {"type": "boolean", "description": "Option to get additional information like Director, Cast, Awards etc.", "default": "false"}}, "required": ["title"]}}]}, "model_result_raw": "```[movie_details.brief(title='Interstellar', extra_info=false)]```", "model_result_decoded": [{"movie_details.brief": {"title": "Interstellar", "extra_info": "false"}}], "possible_answer": [{"movie_details.brief": {"title": ["Interstellar"], "extra_info": ["", false]}}]}
{"id": "simple_232", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Function name 'monarch.getMonarchOfYear' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_232", "question": [[{"role": "user", "content": "What was the full name king of England in 1800?"}]], "function": [{"name": "monarch.getMonarchOfYear", "description": "Retrieve the monarch of a specific location during a specified year.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location (e.g., country) whose monarch needs to be found."}, "year": {"type": "integer", "description": "The year to search the monarch."}, "fullName": {"type": "boolean", "default": false, "description": "If true, returns the full name and title of the monarch."}}, "required": ["location", "year"]}}]}, "model_result_raw": "```[getMonarchOfYear(location=\"England\", year=1800, fullName=True)]```", "model_result_decoded": [{"getMonarchOfYear": {"location": "England", "year": 1800, "fullName": true}}], "possible_answer": [{"monarch.getMonarchOfYear": {"location": ["England", "ENG"], "year": [1800], "fullName": [true]}}]}
{"id": "simple_234", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Missing required parameter: 'region'."], "error_type": "simple_function_checker:missing_required", "prompt": {"id": "simple_234", "question": [[{"role": "user", "content": "Find important Wars in European history during the 19th century."}]], "function": [{"name": "history_eu.fetch_events", "description": "Fetches significant historical events within a specific time period in European history.", "parameters": {"type": "dict", "properties": {"century": {"type": "integer", "description": "The century you are interested in."}, "region": {"type": "string", "description": "The region of Europe you are interested in.", "enum": ["Northern", "Southern", "Eastern", "Western"]}, "category": {"type": "string", "description": "Category of the historical events. Default is 'Culture'.", "enum": ["Wars", "Culture", "Politics", "Scientific", "Others"]}}, "required": ["century", "region"]}}]}, "model_result_raw": "```[history_eu.fetch_events(century=19, category='Wars')]```", "model_result_decoded": [{"history_eu.fetch_events": {"century": 19, "category": "Wars"}}], "possible_answer": [{"history_eu.fetch_events": {"century": [19], "region": ["Northern", "Southern", "Eastern", "Western"], "category": ["Wars"]}}]}
{"id": "simple_244", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'work_title': 'Philosophi\u00e6 Naturalis Principia Mathematica'. Expected one of ['Law of Universal Gravitation', 'Universal Law of Gravitation', 'The law of universal gravitation']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_244", "question": [[{"role": "user", "content": "What year was the law of universal gravitation published by Isaac Newton?"}]], "function": [{"name": "publication_year.find", "description": "Fetches the year a particular scientific work was published.", "parameters": {"type": "dict", "properties": {"author": {"type": "string", "description": "Name of the author of the work."}, "work_title": {"type": "string", "description": "Title of the scientific work."}, "location": {"type": "string", "description": "Place of the publication, if known. Default to 'all'."}}, "required": ["author", "work_title"]}}]}, "model_result_raw": "```[publication_year.find(author=\"Isaac Newton\", work_title=\"Philosophi\u00e6 Naturalis Principia Mathematica\")]```", "model_result_decoded": [{"publication_year.find": {"author": "Isaac Newton", "work_title": "Philosophi\u00e6 Naturalis Principia Mathematica"}}], "possible_answer": [{"publication_year.find": {"author": ["Isaac Newton"], "work_title": ["Law of Universal Gravitation", "Universal Law of Gravitation", "The law of universal gravitation"], "location": ["", "all"]}}]}
{"id": "simple_247", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Function name 'historical_contrib.get_contrib' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_247", "question": [[{"role": "user", "content": "What was Albert Einstein's contribution to science on March 17, 1915?"}]], "function": [{"name": "historical_contrib.get_contrib", "description": "Retrieve historical contribution made by a scientist on a specific date.", "parameters": {"type": "dict", "properties": {"scientist": {"type": "string", "description": "The scientist whose contributions need to be searched."}, "date": {"type": "string", "description": "The date when the contribution was made in yyyy-mm-dd format."}, "category": {"type": "string", "description": "The field of the contribution, such as 'Physics' or 'Chemistry'. Default is 'all'."}}, "required": ["scientist", "date"]}}]}, "model_result_raw": "[get_contrib(scientist=\"Albert Einstein\",date=\"1915-03-17\",category=\"all\")]", "model_result_decoded": [{"get_contrib": {"scientist": "Albert Einstein", "date": "1915-03-17", "category": "all"}}], "possible_answer": [{"historical_contrib.get_contrib": {"scientist": ["Albert Einstein"], "date": ["1915-03-17", "03/17/1915", "Mar.17,1915"], "category": ["", "all"]}}]}
{"id": "simple_248", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Function name 'science_history.get_invention' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_248", "question": [[{"role": "user", "content": "Who invented the theory of relativity and in which year?"}]], "function": [{"name": "science_history.get_invention", "description": "Retrieve the inventor and year of invention based on the invention's name.", "parameters": {"type": "dict", "properties": {"invention_name": {"type": "string", "description": "The name of the invention."}, "want_year": {"type": "boolean", "default": false, "description": "Return the year of invention if set to true."}}, "required": ["invention_name", "want_year"]}}]}, "model_result_raw": "```[get_invention(invention_name=\"theory of relativity\", want_year=True)]```", "model_result_decoded": [{"get_invention": {"invention_name": "theory of relativity", "want_year": true}}], "possible_answer": [{"science_history.get_invention": {"invention_name": ["theory of relativity", "Theory of Relativity"], "want_year": [true]}}]}
{"id": "simple_249", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'include_people': True. Expected one of [False, '']."], "error_type": "value_error:others", "prompt": {"id": "simple_249", "question": [[{"role": "user", "content": "Tell me more about Christianity and its history till the 14th century"}]], "function": [{"name": "religion.history_info", "description": "Provides comprehensive historical details about a specified religion till a specified century.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "The name of the religion for which historical details are needed."}, "till_century": {"type": "integer", "description": "The century till which historical details are needed."}, "include_people": {"type": "boolean", "description": "To include influential people related to the religion during that time period, default is False"}}, "required": ["religion", "till_century"]}}]}, "model_result_raw": "```[religion.history_info(religion=\"Christianity\", till_century=14, include_people=True)]```", "model_result_decoded": [{"religion.history_info": {"religion": "Christianity", "till_century": 14, "include_people": true}}], "possible_answer": [{"religion.history_info": {"religion": ["Christianity"], "till_century": [14], "include_people": [false, ""]}}]}
{"id": "simple_251", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'source': 'historical record'. Expected one of ['historical records']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_251", "question": [[{"role": "user", "content": "What is the earliest reference of Jesus Christ in history from historical record?"}]], "function": [{"name": "get_earliest_reference", "description": "Retrieve the earliest historical reference of a person.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the person."}, "source": {"type": "string", "enum": ["scriptures", "historical records"], "description": "Source to fetch the reference. Default is 'scriptures'"}}, "required": ["name"]}}]}, "model_result_raw": "```[get_earliest_reference(name=\"Jesus Christ\", source=\"historical record\")]```", "model_result_decoded": [{"get_earliest_reference": {"name": "Jesus Christ", "source": "historical record"}}], "possible_answer": [{"get_earliest_reference": {"name": ["Jesus Christ"], "source": ["historical records"]}}]}
{"id": "simple_260", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Unexpected dict key parameter: 'window'.", "Missing dict key parameter: 'type'."], "error_type": "value_error:dict_key", "prompt": {"id": "simple_260", "question": [[{"role": "user", "content": "Calculate how many gallons of paint is required to paint a wall with width of 20ft and height of 12ft, assuming 1 gallon covers approximately 350 sq.ft. Don't include window area of 15 sq.ft."}]], "function": [{"name": "paint_requirement.calculate", "description": "Calculate the amount of paint required to paint a given area. Account for coverage efficiency of the paint and exclusions (like windows).", "parameters": {"type": "dict", "properties": {"area": {"type": "dict", "properties": {"width": {"type": "integer", "description": "The width of the area to be painted in feet."}, "height": {"type": "integer", "description": "The height of the area to be painted in feet."}}, "description": "The area to be painted."}, "paint_coverage": {"type": "integer", "description": "Coverage area per gallon of the paint in square feet.", "default": 350}, "exclusion": {"type": "dict", "properties": {"type": {"type": "string", "description": "The type of the exclusion e.g window, door etc."}, "area": {"type": "integer", "description": "The area of the exclusion in square feet."}}, "description": "Area not to be painted. Default to not use any exclusion if not specified."}}, "required": ["area", "paint_coverage"]}}]}, "model_result_raw": "```[paint_requirement.calculate(area={\"width\": 20, \"height\": 12}, paint_coverage=350, exclusion={\"window\": 15})]```", "model_result_decoded": [{"paint_requirement.calculate": {"area": {"width": 20, "height": 12}, "paint_coverage": 350, "exclusion": {"window": 15}}}], "possible_answer": [{"paint_requirement.calculate": {"area": [{"width": [20], "height": [12]}], "paint_coverage": [350], "exclusion": [{"type": ["window"], "area": [15]}]}}]}
{"id": "simple_272", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. '[' was never closed (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_272", "question": [[{"role": "user", "content": "Calculate the area and circumference of a circle with a radius of 5 units."}]], "function": [{"name": "calculate_circle_dimensions", "description": "Calculate the area and circumference of a circle based on the radius.", "parameters": {"type": "dict", "properties": {"radius": {"type": "integer", "description": "The radius of the circle."}}, "required": ["radius"]}}]}, "model_result_raw": "```python\n[calculate_circle_dimensions(radius=5)]\n```", "possible_answer": [{"calculate_circle_dimensions": {"radius": [5]}}]}
{"id": "simple_277", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'information': ['working hours', 'ticket price']. Expected one of [['opening_hours', 'ticket_price'], ['ticket_price', 'opening_hours']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_277", "question": [[{"role": "user", "content": "Find the working hours and ticket price of The British Museum for this weekend, Jun.20,2023."}]], "function": [{"name": "museum_info", "description": "Get information about a museum including its opening hours and ticket prices for a specific date range.", "parameters": {"type": "dict", "properties": {"museum": {"type": "string", "description": "The name of the museum."}, "date": {"type": "string", "description": "The specific date for which information is needed, in the format of YYYY-MM-DD such as '2022-12-01'."}, "information": {"type": "array", "items": {"type": "string", "enum": ["opening_hours", "ticket_price", "address"]}, "description": "The type of information needed from the museum. This is optional and defaults to 'all' if not specified.", "default": "all"}}, "required": ["museum", "date"]}}]}, "model_result_raw": "```[museum_info(museum='The British Museum', date='2023-06-20', information=['working hours', 'ticket price'])]\n```", "model_result_decoded": [{"museum_info": {"museum": "The British Museum", "date": "2023-06-20", "information": ["working hours", "ticket price"]}}], "possible_answer": [{"museum_info": {"museum": ["The British Museum"], "date": ["2023-06-20"], "information": [["opening_hours", "ticket_price"], ["ticket_price", "opening_hours"]]}}]}
{"id": "simple_278", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'features': ['price', 'ratings']. Expected one of [['price', 'rating']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_278", "question": [[{"role": "user", "content": "Find me the average price and ratings of piano from Yamaha."}]], "function": [{"name": "get_instrument_details", "description": "Retrieve the average price and ratings of an instrument from a particular manufacturer.", "parameters": {"type": "dict", "properties": {"instrument": {"type": "string", "description": "The name of the instrument."}, "manufacturer": {"type": "string", "description": "The manufacturer of the instrument."}, "features": {"type": "array", "items": {"type": "string", "enum": ["price", "rating"]}, "description": "The features to retrieve about the instrument. Default is 'price'"}}, "required": ["instrument", "manufacturer"]}}]}, "model_result_raw": "```[get_instrument_details(instrument=\"piano\", manufacturer=\"Yamaha\", features=[\"price\", \"ratings\"])]\n```", "model_result_decoded": [{"get_instrument_details": {"instrument": "piano", "manufacturer": "Yamaha", "features": ["price", "ratings"]}}], "possible_answer": [{"get_instrument_details": {"instrument": ["piano"], "manufacturer": ["Yamaha"], "features": [["price", "rating"]]}}]}
{"id": "simple_286", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'date': '04-2024'. Expected one of ['04-2022', 'April 2022']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_286", "question": [[{"role": "user", "content": "Get concert details for the artist Beyonce performing in San Diego next month (April 2022)."}]], "function": [{"name": "concert.get_details", "description": "Fetch the details for a particular concert based on the artist and location.", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "Name of the artist/band who's performing."}, "location": {"type": "string", "description": "City where the concert is taking place."}, "date": {"type": "string", "description": "Date of the concert in 'mm-yyyy' format. Default is the current month if not specified."}}, "required": ["artist", "location"]}}]}, "model_result_raw": "```[concert.get_details(artist=\"Beyonce\", location=\"San Diego\", date=\"04-2024\")]```", "model_result_decoded": [{"concert.get_details": {"artist": "Beyonce", "location": "San Diego", "date": "04-2024"}}], "possible_answer": [{"concert.get_details": {"artist": ["Beyonce"], "location": ["San Diego", "San Diego, California", "CA"], "date": ["04-2022", "April 2022"]}}]}
{"id": "simple_300", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Function name 'music.calculate_note_duration' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_300", "question": [[{"role": "user", "content": "Calculate the duration between two notes of 440Hz and 880Hz frequency based on harmonic rhythm."}]], "function": [{"name": "music.calculate_note_duration", "description": "Calculate the duration between two notes based on their frequencies and harmonic rhythm.", "parameters": {"type": "dict", "properties": {"first_note_frequency": {"type": "integer", "description": "The frequency of the first note in Hz."}, "second_note_frequency": {"type": "integer", "description": "The frequency of the second note in Hz."}, "tempo": {"type": "integer", "description": "The tempo of the music in beats per minute. Defaults to 120 beats per minute."}}, "required": ["first_note_frequency", "second_note_frequency"]}}]}, "model_result_raw": "[calculate_note_duration(first_note_frequency=440, second_note_frequency=880, tempo=120)]", "model_result_decoded": [{"calculate_note_duration": {"first_note_frequency": 440, "second_note_frequency": 880, "tempo": 120}}], "possible_answer": [{"music.calculate_note_duration": {"first_note_frequency": [440], "second_note_frequency": [880], "tempo": ["", 120]}}]}
{"id": "simple_305", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'performance_indicator': ['goal', 'assist']. Expected one of [['Goals Scored', 'Assists Made']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_305", "question": [[{"role": "user", "content": "Calculate the overall goal and assist of soccer player Messi in La Liga 2020-2021 season"}]], "function": [{"name": "sports_stats.get_performance", "description": "Compute the performance score of a soccer player given his game stats for a specific tournament in a season.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "Name of the player."}, "tournament": {"type": "string", "description": "Name of the soccer tournament."}, "season": {"type": "string", "description": "Specific season in format 'YYYY-YYYY'."}, "performance_indicator": {"type": "array", "items": {"type": "string", "enum": ["Goals Scored", "Assists Made", "Saves Made", "Cards Received"]}, "description": "Array of performance indicators. Use as much as possible. Default to use all if not specified."}}, "required": ["player_name", "tournament", "season"]}}]}, "model_result_raw": "```[sports_stats.get_performance(player_name=\"Messi\",tournament=\"La Liga\",season=\"2020-2021\",performance_indicator=[\"goal\",\"assist\"])]\n```", "model_result_decoded": [{"sports_stats.get_performance": {"player_name": "Messi", "tournament": "La Liga", "season": "2020-2021", "performance_indicator": ["goal", "assist"]}}], "possible_answer": [{"sports_stats.get_performance": {"player_name": ["Messi", "Lionel Messi"], "tournament": ["La Liga"], "season": ["2020-2021"], "performance_indicator": [["Goals Scored", "Assists Made"]]}}]}
{"id": "simple_307", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'venue': 'home'. Expected one of ['', True]."], "error_type": "value_error:others", "prompt": {"id": "simple_307", "question": [[{"role": "user", "content": "Who won the basketball game between Lakers and Clippers on Jan 28, 2021?"}]], "function": [{"name": "game_result.get_winner", "description": "Get the winner of a specific basketball game.", "parameters": {"type": "dict", "properties": {"teams": {"type": "array", "items": {"type": "string"}, "description": "List of two teams who played the game."}, "date": {"type": "string", "description": "The date of the game, formatted as YYYY-MM-DD."}, "venue": {"type": "string", "optional": true, "description": "Optional: The venue of the game. Default is 'home'."}}, "required": ["teams", "date"]}}]}, "model_result_raw": "```[game_result.get_winner(teams=['Lakers', 'Clippers'], date='2021-01-28', venue='home')]```", "model_result_decoded": [{"game_result.get_winner": {"teams": ["Lakers", "Clippers"], "date": "2021-01-28", "venue": "home"}}], "possible_answer": [{"game_result.get_winner": {"teams": [["Lakers", "Clippers"], ["Clippers", "Lakers"]], "date": ["2021-01-28", "01/28/2021", "Jan.28,2021"], "venue": ["", true]}}]}
{"id": "simple_330", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'info_required': ['average_rating', 'age_range']. Expected one of [['average_review_rating', 'age_range']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_330", "question": [[{"role": "user", "content": "What's the average review rating and the age range for the board game 'Catan'?"}]], "function": [{"name": "board_game_info", "description": "Get the information about a board game from a database. ", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "Name of the board game."}, "info_required": {"type": "array", "items": {"type": "string", "enum": ["average_review_rating", "age_range", "number_of_players", "playing_time", "genre"]}, "description": "Array of information requested for the game."}}, "required": ["game_name", "info_required"]}}]}, "model_result_raw": "```[board_game_info(game_name='Catan', info_required=['average_rating', 'age_range'])]\n```", "model_result_decoded": [{"board_game_info": {"game_name": "Catan", "info_required": ["average_rating", "age_range"]}}], "possible_answer": [{"board_game_info": {"game_name": ["Catan"], "info_required": [["average_review_rating", "age_range"]]}}]}
{"id": "simple_333", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'details': ['high_temperature', 'low_temperature', 'humidity', 'precipitation']. Expected one of [['high_low_temperature', 'humidity', 'precipitation']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_333", "question": [[{"role": "user", "content": "Find the high and low temperatures, humidity, and precipitation for London, United Kingdom for the next 3 days."}]], "function": [{"name": "detailed_weather_forecast", "description": "Retrieve a detailed weather forecast for a specific location and time frame, including high/low temperatures, humidity, and precipitation.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}, "details": {"type": "array", "items": {"type": "string", "enum": ["high_low_temperature", "humidity", "precipitation"]}, "description": "Specific weather details required in the forecast."}}, "required": ["location", "days", "details"]}}]}, "model_result_raw": "```[detailed_weather_forecast(location=\"London, United Kingdom\", days=3, details=[\"high_temperature\", \"low_temperature\", \"humidity\", \"precipitation\"])]\n```", "model_result_decoded": [{"detailed_weather_forecast": {"location": "London, United Kingdom", "days": 3, "details": ["high_temperature", "low_temperature", "humidity", "precipitation"]}}], "possible_answer": [{"detailed_weather_forecast": {"location": ["London, United Kingdom", "London"], "days": [3], "details": [["high_low_temperature", "humidity", "precipitation"]]}}]}
{"id": "simple_369", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'categories': ['organic fruits', 'vegetables']. Expected one of [['Organic', 'Vegetables', 'Fruits'], ['Organic', 'Fruits', 'Vegetables'], ['Vegetables', 'Fruits', 'Organic'], ['Fruits', 'Vegetables', 'Organic'], ['Fruits', 'Organic', 'Vegetables'], ['Vegetables', 'Organic', 'Fruits']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_369", "question": [[{"role": "user", "content": "Find a grocery store near me with organic fruits and vegetables in Houston."}]], "function": [{"name": "grocery_store.find_nearby", "description": "Locate nearby grocery stores based on specific criteria like organic fruits and vegetables.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Houston, TX"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["Organic", "Vegetables", "Fruits", "Dairy", "Seafood", "Bakery"]}, "description": "Categories of items to be found in the grocery store. Default is all if not specified."}}, "required": ["location"]}}]}, "model_result_raw": "```[grocery_store.find_nearby(location=\"Houston, TX\", categories=[\"organic fruits\", \"vegetables\"])]\n```", "model_result_decoded": [{"grocery_store.find_nearby": {"location": "Houston, TX", "categories": ["organic fruits", "vegetables"]}}], "possible_answer": [{"grocery_store.find_nearby": {"location": ["Houston", "Houston, TX"], "categories": [["Organic", "Vegetables", "Fruits"], ["Organic", "Fruits", "Vegetables"], ["Vegetables", "Fruits", "Organic"], ["Fruits", "Vegetables", "Organic"], ["Fruits", "Organic", "Vegetables"], ["Vegetables", "Organic", "Fruits"]]}}]}
{"id": "simple_370", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'quantity': [3, 5]. Expected one of [[3, 1]]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_370", "question": [[{"role": "user", "content": "Order three bottles of olive oil and a five pound bag of rice from Safeway in Palo Alto."}]], "function": [{"name": "safeway.order", "description": "Order specified items from a Safeway location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location of the Safeway store, e.g. Palo Alto, CA."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order."}, "quantity": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item in the order list."}}, "required": ["location", "items", "quantity"]}}]}, "model_result_raw": "[safeway.order(location=\"Palo Alto, CA\", items=[\"olive oil\", \"rice\"], quantity=[3, 5])]", "model_result_decoded": [{"safeway.order": {"location": "Palo Alto, CA", "items": ["olive oil", "rice"], "quantity": [3, 5]}}], "possible_answer": [{"safeway.order": {"location": ["Palo Alto", "Palo Alto, CA"], "items": [["olive oil", "rice"], ["olive oil", "bag of rice"]], "quantity": [[3, 1]]}}]}
{"id": "simple_372", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'organic'. Expected type boolean, got str. Parameter value: 'true'."], "error_type": "type_error:simple", "prompt": {"id": "simple_372", "question": [[{"role": "user", "content": "Find the top five organic bananas brands on the basis of rating from Whole Foods store."}]], "function": [{"name": "whole_foods.find_top_brands", "description": "Get top brands based on a specific product from Whole Foods", "parameters": {"type": "dict", "properties": {"product": {"type": "string", "description": "The product for which the top brands should be fetched."}, "number": {"type": "integer", "description": "Number of top brands to be fetched. Default is 5"}, "organic": {"type": "boolean", "description": "If the product should be organic. Default is false"}}, "required": ["product"]}}]}, "model_result_raw": "```[whole_foods.find_top_brands(product=\"bananas\", number=5, organic=true)]```", "model_result_decoded": [{"whole_foods.find_top_brands": {"product": "bananas", "number": 5, "organic": "true"}}], "possible_answer": [{"whole_foods.find_top_brands": {"product": ["bananas"], "number": [5, ""], "organic": [true]}}]}
{"id": "simple_373", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'pack_size'. Expected outer type array with inner type <class 'int'>. Parameter value: [None, None, 12]."], "error_type": "type_error:nested", "prompt": {"id": "simple_373", "question": [[{"role": "user", "content": "I want to buy apples, rice, and 12 pack of bottled water from a Walmart near San Jose. Show me the product information and stock availability."}]], "function": [{"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified."}}, "required": ["loc", "product_list"]}}]}, "model_result_raw": "```[walmart.purchase(loc=\"San Jose\",product_list=[\"apples\", \"rice\", \"bottled water\"],pack_size=[None, None, 12])]```", "model_result_decoded": [{"walmart.purchase": {"loc": "San Jose", "product_list": ["apples", "rice", "bottled water"], "pack_size": [null, null, 12]}}], "possible_answer": [{"walmart.purchase": {"loc": ["San Jose", "San Jose, CA"], "product_list": [["apples", "rice", "bottled water"], ["apples", "rice", "water"]], "pack_size": [[1, 1, 12]]}}]}
{"id": "simple_374", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'information': ['protein', 'calories', 'carbs']. Expected one of [['Protein', 'Calories', 'Carbohydrates']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_374", "question": [[{"role": "user", "content": "Check the amount of protein, calories and carbs in an avocado from Walmart."}]], "function": [{"name": "grocery_info.nutritional_info", "description": "Retrieve nutritional information for a given food item from a particular store", "parameters": {"type": "dict", "properties": {"store": {"type": "string", "description": "The store where the item is available"}, "food": {"type": "string", "description": "Food item for which information is needed."}, "information": {"type": "array", "items": {"type": "string", "enum": ["Protein", "Calories", "Carbohydrates", "Fat", "Fiber"]}, "description": "Nutritional details required."}}, "required": ["store", "food", "information"]}}]}, "model_result_raw": "```[grocery_info.nutritional_info(store=\"Walmart\", food=\"avocado\", information=[\"protein\", \"calories\", \"carbs\"])]\n```", "model_result_decoded": [{"grocery_info.nutritional_info": {"store": "Walmart", "food": "avocado", "information": ["protein", "calories", "carbs"]}}], "possible_answer": [{"grocery_info.nutritional_info": {"store": ["Walmart"], "food": ["avocado", "Avocado"], "information": [["Protein", "Calories", "Carbohydrates"]]}}]}
{"id": "simple_375", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'items': ['pumpkin', 'egg']. Expected one of [['pumpkins', 'eggs'], ['pumpkin', 'dozen eggs']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_375", "question": [[{"role": "user", "content": "Check the total price for three pumpkins and two dozen eggs at Walmart."}]], "function": [{"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "dict", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional). Default to all if not specified."}}, "required": ["items", "quantities"]}}]}, "model_result_raw": "```[walmart.check_price(items=['pumpkin', 'egg'], quantities=[3, 24])]```", "model_result_decoded": [{"walmart.check_price": {"items": ["pumpkin", "egg"], "quantities": [3, 24]}}], "possible_answer": [{"walmart.check_price": {"items": [["pumpkins", "eggs"], ["pumpkin", "dozen eggs"]], "quantities": [[3, 24], [3, 2]], "store_location": [""]}}]}
{"id": "simple_382", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'start_date': '10th December 2022'. Expected one of ['2022-12-10', '10/12/2022', 'Dec 10, 2022', 'December 10, 2022']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_382", "question": [[{"role": "user", "content": "Book a single room for two nights at the Hilton Hotel in Chicago, starting from 10th December 2022."}]], "function": [{"name": "book_hotel", "description": "Book a room of specified type for a particular number of nights at a specific hotel, starting from a specified date.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city in which the hotel is located."}, "room_type": {"type": "string", "description": "The type of room to be booked."}, "start_date": {"type": "string", "description": "The start date for the booking."}, "nights": {"type": "integer", "description": "The number of nights for which the booking is to be made."}}, "required": ["hotel_name", "location", "room_type", "start_date", "nights"]}}]}, "model_result_raw": "[book_hotel(hotel_name=\"Hilton Hotel\", location=\"Chicago\", room_type=\"single\", start_date=\"10th December 2022\", nights=2)]", "model_result_decoded": [{"book_hotel": {"hotel_name": "Hilton Hotel", "location": "Chicago", "room_type": "single", "start_date": "10th December 2022", "nights": 2}}], "possible_answer": [{"book_hotel": {"hotel_name": ["Hilton Hotel", "Hilton"], "location": ["Chicago"], "room_type": ["single"], "start_date": ["2022-12-10", "10/12/2022", "Dec 10, 2022", "December 10, 2022"], "nights": [2]}}]}
{"id": "simple_387", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'start_date': '2024-06-01'. Expected one of ['2022-06-01', '06/01/2022', 'Jun.1,2022']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_387", "question": [[{"role": "user", "content": "Book a hotel room at the Plaza Hotel in New York for 3 nights starting from 1st June 2022"}]], "function": [{"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}]}, "model_result_raw": "[hotel_booking(hotel_name=\"Plaza Hotel\", location=\"New York, NY\", start_date=\"2024-06-01\", end_date=\"2024-06-04\", rooms=1)]", "model_result_decoded": [{"hotel_booking": {"hotel_name": "Plaza Hotel", "location": "New York, NY", "start_date": "2024-06-01", "end_date": "2024-06-04", "rooms": 1}}], "possible_answer": [{"hotel_booking": {"hotel_name": ["Plaza Hotel"], "location": ["New York City, NY", "New York, NY"], "start_date": ["2022-06-01", "06/01/2022", "Jun.1,2022"], "end_date": ["2022-06-04", "06/04/2022", "Jun.4,2022"], "rooms": [1, ""]}}]}