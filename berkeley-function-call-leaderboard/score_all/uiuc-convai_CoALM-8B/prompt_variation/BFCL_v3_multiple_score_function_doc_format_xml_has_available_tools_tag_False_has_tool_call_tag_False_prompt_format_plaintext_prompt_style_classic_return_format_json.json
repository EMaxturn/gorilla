{"accuracy": 0.795, "correct_count": 159, "total_count": 200}
{"id": "multiple_7", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_7", "question": [[{"role": "user", "content": "How to assess the population growth in deer and their impact on woodland in Washington state over the past decade?"}]], "function": [{"name": "wildlife_population.assess_growth", "description": "Assesses the population growth of a specific species in a specified location over a period.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species for which the growth is to be calculated."}, "location": {"type": "string", "description": "The area where the species is present."}, "duration": {"type": "integer", "description": "The time period for which the population growth should be calculated in years."}}, "required": ["species", "location", "duration"]}}, {"name": "ecological_impact.analyze", "description": "Analyzes the impact of a species on a particular ecosystem.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species whose impact is to be calculated."}, "ecosystem": {"type": "string", "description": "The ecosystem being affected."}, "location": {"type": "string", "description": "The area where the impact is analyzed."}, "timeframe": {"type": "integer", "description": "The time period for which the impact analysis should be carried out in years.", "default": 5}}, "required": ["species", "ecosystem", "location"]}}]}, "model_result_raw": "```\n[{\"function\":\"wildlife_population.assess_growth\",\"parameters\":{\"species\":\"deer\",\"location\":\"Washington state\",\"duration\":10}}, {\"function\":\"ecological_impact.analyze\",\"parameters\":{\"species\":\"deer\",\"ecosystem\":\"woodland\", \"location\":\"Washington state\", \"timeframe\":10}}]\n```", "model_result_decoded": [{"wildlife_population.assess_growth": {"species": "deer", "location": "Washington state", "duration": 10}}, {"ecological_impact.analyze": {"species": "deer", "ecosystem": "woodland", "location": "Washington state", "timeframe": 10}}], "possible_answer": [{"wildlife_population.assess_growth": {"species": ["deer", "Deer"], "location": ["Washington state", "WA", "Washington"], "duration": [10]}}]}
{"id": "multiple_8", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_8", "question": [[{"role": "user", "content": "Find a 3 bedroom villa for sale within $300,000 to $400,000 budget in San Diego."}]], "function": [{"name": "property_valuation.get", "description": "Get estimated value of a property based on location, specifications and age", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the property is located, e.g. San Diego, CA."}, "propertyType": {"type": "string", "description": "Type of property such as villa, condo, apartment, etc."}, "bedrooms": {"type": "integer", "description": "Number of bedrooms required in the property."}, "age": {"type": "integer", "description": "Age of the property in years."}}, "required": ["location", "propertyType", "bedrooms", "age"]}}, {"name": "realestate.find_properties", "description": "Find properties based on location, budget, and specifications", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the property is located, e.g. San Diego, CA."}, "propertyType": {"type": "string", "description": "Type of property such as villa, condo, apartment, etc."}, "bedrooms": {"type": "integer", "description": "Number of bedrooms required in the property."}, "budget": {"type": "dict", "properties": {"min": {"type": "float", "description": "Minimum budget limit."}, "max": {"type": "float", "description": "Maximum budget limit."}}, "description": "Budget range for the property."}}, "required": ["location", "propertyType", "bedrooms", "budget"]}}]}, "model_result_raw": "```\n[{\"function\":\"realestate.find_properties\", \"parameters\": {\"location\": \"San Diego\", \"propertyType\": \"villa\", \"bedrooms\": 3, \"budget\": {\"min\": 300000, \"max\": 400000}}]\n```", "model_result_decoded": [], "possible_answer": [{"realestate.find_properties": {"location": ["SD", "San Diego", "San Diego, CA", "CA"], "propertyType": ["villa"], "bedrooms": [3], "budget": [{"min": [300000], "max": [400000]}]}}]}
{"id": "multiple_9", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_9", "question": [[{"role": "user", "content": "Calculate the average grade for student John who has these scores {'math':90, 'science':75, 'history':82, 'music':89} across different subjects."}]], "function": [{"name": "calculate_standard_deviation", "description": "This function calculates the standard deviation across different scores for a specific student.", "parameters": {"type": "dict", "properties": {"gradeDict": {"type": "dict", "description": "A dictionary where keys represent subjects and values represent scores"}}, "required": ["gradeDict"]}}, {"name": "calculate_average", "description": "This function calculates the average grade across different subjects for a specific student.", "parameters": {"type": "dict", "properties": {"gradeDict": {"type": "dict", "description": "A dictionary where keys represent subjects and values represent scores"}}, "required": ["gradeDict"]}}, {"name": "highest_grade", "description": "This function finds the subject where the student got the highest score.", "parameters": {"type": "dict", "properties": {"gradeDict": {"type": "dict", "description": "A dictionary where keys represent subjects and values represent scores"}}, "required": ["gradeDict"]}}]}, "model_result_raw": "```\n[{\"function\":\"calculate_average\",\"parameters\":{\"gradeDict\": {\"math\": 90, \"science\": 75, \"history\": 82, \"music\": 89}}]\n```", "model_result_decoded": [], "possible_answer": [{"calculate_average": {"gradeDict": [{"math": [90], "science": [75], "history": [82], "music": [89]}]}}]}
{"id": "multiple_26", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_26", "question": [[{"role": "user", "content": "Find out the rewards for playing Fortnite on Playstation platform with different missions and trophies"}]], "function": [{"name": "game_scores.get", "description": "Retrieve scores and rankings based on player\u2019s performance in a certain game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The gaming platform e.g. Xbox, Playstation, PC"}, "level": {"type": "integer", "description": "The level of the game for which you want to retrieve the scores."}, "player": {"type": "string", "description": "The name of the player for whom you want to retrieve scores. Default ''", "optional": true}}, "required": ["game", "platform", "level"]}}, {"name": "game_rewards.get", "description": "Retrieve information about different types of rewards that you can receive when playing a certain game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The gaming platform e.g. Xbox, Playstation, PC"}, "mission": {"type": "string", "description": "The mission for which you want to know the rewards. Default to ''", "optional": true}, "trophy": {"type": "string", "description": "The trophy level for which you want to know the rewards. Default to ''", "optional": true}}, "required": ["game", "platform"]}}, {"name": "game_missions.list", "description": "List all missions for a certain game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the game."}}, "required": ["game"]}}]}, "model_result_raw": "```\n[{\"function\":\"game_rewards.get\",\"parameters\":{\"game\":\"Fortnite\",\"platform\":\"Playstation\"}}, {\"function\":\"game_rewards.get\",\"parameters\":{\"game\":\"Fortnite\",\"platform\":\"Playstation\", \"mission\": \"mission1\"}}, {\"function\":\"game_rewards.get\",\"parameters\":{\"game\":\"Fortnite\",\"platform\":\"Playstation\", \"trophy\": \"trophy1\"}}]\n```", "model_result_decoded": [{"game_rewards.get": {"game": "Fortnite", "platform": "Playstation"}}, {"game_rewards.get": {"game": "Fortnite", "platform": "Playstation", "mission": "mission1"}}, {"game_rewards.get": {"game": "Fortnite", "platform": "Playstation", "trophy": "trophy1"}}], "possible_answer": [{"game_rewards.get": {"game": ["Fortnite"], "platform": ["Playstation", "PS"], "mission": [""], "trophy": [""]}}]}
{"id": "multiple_41", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_41", "question": [[{"role": "user", "content": "Calculate the magnetic field at point P using Ampere\u2019s law where current I is 10 Amperes and r is 0.01 meter."}]], "function": [{"name": "electric_field.calculate", "description": "Calculate the electric field based on the amount of charge and distance from the charge", "parameters": {"type": "dict", "properties": {"Q": {"type": "float", "description": "The amount of charge in coulombs."}, "r": {"type": "float", "description": "The distance from the charge in meters."}}, "required": ["Q", "r"]}}, {"name": "magnetic_field.calculate", "description": "Calculate the magnetic field based on the current flowing and the radial distance using Ampere\u2019s law", "parameters": {"type": "dict", "properties": {"I": {"type": "integer", "description": "The electric current flowing in Amperes."}, "r": {"type": "float", "description": "The radial distance from the line of current in meters."}}, "required": ["I", "r"]}}, {"name": "electric_force.calculate", "description": "Calculate the electric force between two charges at a distance", "parameters": {"type": "dict", "properties": {"Q1": {"type": "float", "description": "The amount of the first charge in coulombs."}, "Q2": {"type": "float", "description": "The amount of the second charge in coulombs."}, "r": {"type": "float", "description": "The distance between the two charges in meters."}}, "required": ["Q1", "Q2", "r"]}}]}, "model_result_raw": "```\n[magnetic_field.calculate(I=10, r=0.01)]", "model_result_decoded": [], "possible_answer": [{"magnetic_field.calculate": {"I": [10], "r": [0.01]}}]}
{"id": "multiple_49", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'annual_rate': 0.025. Expected one of [2.5]."], "error_type": "value_error:others", "prompt": {"id": "multiple_49", "question": [[{"role": "user", "content": "Calculate the compound interest for an amount of 1500 for a duration of 2 years with an annual interest rate of 2.5%."}]], "function": [{"name": "calc_Compound_Interest", "description": "Compute compound interest.", "parameters": {"type": "dict", "properties": {"principle_amount": {"type": "integer", "description": "The principle amount that is invested."}, "duration": {"type": "integer", "description": "Duration of time period in years."}, "annual_rate": {"type": "float", "description": "Interest rate in percentage."}, "compound_freq": {"type": "integer", "default": 1, "description": "The number of times that interest is compounded per unit time."}}, "required": ["principle_amount", "duration", "annual_rate"]}}, {"name": "future_value", "description": "Calculates the future value of an investment given an interest rate and time period.", "parameters": {"type": "dict", "properties": {"initial_investment": {"type": "float", "description": "The initial investment amount."}, "interest_rate": {"type": "float", "description": "The annual interest rate (as a decimal)."}, "time": {"type": "integer", "description": "The number of time periods the money is invested for."}, "num_compoundings": {"type": "integer", "default": 1, "description": "The number of times that interest is compounded per time period."}}, "required": ["initial_investment", "interest_rate", "time"]}}, {"name": "calc_Simple_Interest", "description": "Compute simple interest.", "parameters": {"type": "dict", "properties": {"principle_amount": {"type": "float", "description": "The principle amount that is invested."}, "duration": {"type": "float", "description": "Duration of time period in years."}, "annual_rate": {"type": "float", "description": "Interest rate in percentage."}}, "required": ["principle_amount", "duration", "annual_rate"]}}]}, "model_result_raw": "```\n[{\"function\":\"calc_Compound_Interest\", \"parameters\": {\"principle_amount\": 1500, \"duration\": 2, \"annual_rate\": 0.025}}]\n```", "model_result_decoded": [{"calc_Compound_Interest": {"principle_amount": 1500, "duration": 2, "annual_rate": 0.025}}], "possible_answer": [{"calc_Compound_Interest": {"principle_amount": [1500], "duration": [2], "annual_rate": [2.5], "compound_freq": ["", 1]}}]}
{"id": "multiple_51", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_51", "question": [[{"role": "user", "content": "Calculate the probability of rolling a sum of 7 on a roll of two dice."}]], "function": [{"name": "dice_roll_probability", "description": "Calculate the probability of a specific sum appearing from rolling two dice.", "parameters": {"type": "dict", "properties": {"desired_sum": {"type": "integer", "description": "The sum for which to calculate the probability."}, "n_rolls": {"type": "integer", "description": "Number of dice to be rolled. Default is 1", "optional": true}, "sides_per_die": {"type": "integer", "description": "Number of sides on each die."}}, "required": ["desired_sum", "sides_per_die"]}}, {"name": "flip_coin_probability", "description": "Calculate the probability of a specific outcome appearing from flipping a coin.", "parameters": {"type": "dict", "properties": {"desired_outcome": {"type": "string", "description": "The outcome for which to calculate the probability."}, "n_flips": {"type": "integer", "description": "Number of coins to be flipped. Default 1", "optional": true}}, "required": ["desired_outcome"]}}, {"name": "shuffle_card_probability", "description": "Calculate the probability of a specific card appearing from a shuffled deck.", "parameters": {"type": "dict", "properties": {"desired_card": {"type": "string", "description": "The card for which to calculate the probability."}, "n_decks": {"type": "integer", "description": "Number of decks to shuffle. Default 1", "optional": true}}, "required": ["desired_card"]}}]}, "model_result_raw": "```\n[dice_roll_probability(desired_sum=7, n_rolls=2, sides_per_die=6)]", "model_result_decoded": [], "possible_answer": [{"dice_roll_probability": {"desired_sum": [7], "sides_per_die": [6], "n_rolls": [2]}}]}
{"id": "multiple_53", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Function name 'linear_regression' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "multiple_53", "question": [[{"role": "user", "content": "Predict the house prices for next 5 years based on interest rates and unemployment rates."}]], "function": [{"name": "linear_regression", "description": "Applies linear regression to a given set of independent variables to make a prediction.", "parameters": {"type": "dict", "properties": {"independent_var": {"type": "array", "items": {"type": "string"}, "description": "The independent variables."}, "dependent_var": {"type": "string", "description": "The dependent variable."}, "forecast_period": {"type": "integer", "description": "The number of years to forecast the prices. Default 1", "optional": true}}, "required": ["independent_var", "dependent_var"]}}, {"name": "random_forest_regression", "description": "Applies Random Forest Regression to a given set of independent variables to make a prediction.", "parameters": {"type": "dict", "properties": {"independent_var": {"type": "array", "items": {"type": "string"}, "description": "The independent variables."}, "dependent_var": {"type": "string", "description": "The dependent variable."}, "n_estimators": {"type": "integer", "description": "The number of trees in the forest. Default 1", "optional": true}, "forecast_period": {"type": "integer", "description": "The number of years to forecast the prices. Default 1", "optional": true}}, "required": ["independent_var", "dependent_var"]}}]}, "model_result_raw": "```\n[{\"function\": \"random_forest_regression\", \"parameters\": {\"independent_var\": [\"interest_rate\", \"unemployment_rate\"], \"dependent_var\": \"house_price\", \"forecast_period\": 5}}]\n```", "model_result_decoded": [{"random_forest_regression": {"independent_var": ["interest_rate", "unemployment_rate"], "dependent_var": "house_price", "forecast_period": 5}}], "possible_answer": [{"linear_regression": {"independent_var": [["interest rates", "unemployment rates"], ["interest_rate", "unemployment_rate"], ["interest rate", "unemployment rate"]], "dependent_var": ["house_price", "house price"], "forecast_period": [5]}}]}
{"id": "multiple_62", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_62", "question": [[{"role": "user", "content": "Find me the closest nature park that allows camping and has scenic views in Boston, MA."}]], "function": [{"name": "nature_park.find_nearby", "description": "Locate nearby nature parks based on specific criteria like camping availability and scenic views.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Boston, MA."}, "features": {"type": "array", "items": {"type": "string", "enum": ["Camping", "Scenic View", "Trails", "Picnic Areas"]}, "description": "Preferred features in nature park."}}, "required": ["location", "features"]}}, {"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific criteria.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Boston, MA."}, "amenities": {"type": "array", "items": {"type": "string", "enum": ["Delivery", "Outdoor Seating", "Vegetarian Options"]}, "description": "Preferred amenities in restaurant. Default empty array []"}}, "required": ["location"]}}]}, "model_result_raw": "```\n[nature_park.find_nearby(location=\"Boston, MA\", features=[\"camping\", \"scenic views\"])]", "model_result_decoded": [], "possible_answer": [{"nature_park.find_nearby": {"location": ["Boston, MA", "Boston"], "features": [["Camping", "Scenic View"], ["Scenic View", "Camping"]]}}]}
{"id": "multiple_66", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_66", "question": [[{"role": "user", "content": "How much traffic should I expect from Las Vegas to Los Angeles this weekend?"}]], "function": [{"name": "calculate_distance", "description": "Calculate distance between two locations.", "parameters": {"type": "dict", "properties": {"start_point": {"type": "string", "description": "Starting point of the journey."}, "end_point": {"type": "string", "description": "Ending point of the journey."}}, "required": ["start_point", "end_point"]}}, {"name": "traffic_estimate", "description": "Estimate traffic from one location to another for a specific time period.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "Starting location for the journey."}, "end_location": {"type": "string", "description": "Ending location for the journey."}, "time_period": {"type": "string", "description": "Specify a time frame to estimate the traffic, 'now' for current, 'weekend' for the coming weekend. Default 'now'"}}, "required": ["start_location", "end_location"]}}, {"name": "weather_forecast", "description": "Retrieve a weather forecast for a specific location and time frame.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}}, "required": ["location", "days"]}}]}, "model_result_raw": "[traffic_estimate(start_location=\"Las Vegas\", end_location=\"Los Angeles\", time_period=\"weekend\")]", "model_result_decoded": [], "possible_answer": [{"traffic_estimate": {"start_location": ["Las Vegas"], "end_location": ["Los Angeles"], "time_period": ["weekend"]}}]}
{"id": "multiple_68", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_68", "question": [[{"role": "user", "content": "Can I find a historical fiction book at the New York public library?"}]], "function": [{"name": "library.search_books", "description": "Search for a book in a given library with optional parameters", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Name or city of library"}, "genre": {"type": "string", "description": "Genre of the book"}, "title": {"type": "string", "description": "Title of the book. Default ''"}}, "required": ["location", "genre"]}}, {"name": "google.books_search", "description": "Search for a book in the Google Books library with optional parameters", "parameters": {"type": "dict", "properties": {"genre": {"type": "string", "description": "Genre of the book"}, "title": {"type": "string", "description": "Title of the book. Default ''"}}, "required": ["genre"]}}, {"name": "openlibrary.books_search", "description": "Search for a book in the Open Library with optional parameters", "parameters": {"type": "dict", "properties": {"genre": {"type": "string", "description": "Genre of the book"}, "title": {"type": "string", "description": "Title of the book. Default ''"}}, "required": ["genre"]}}]}, "model_result_raw": "[library.search_books(location=\"New York public library\", genre=\"historical fiction\")]", "model_result_decoded": [], "possible_answer": [{"library.search_books": {"location": ["New York", "New York, NY", "New York City", "New York City, NY", "NYC", "New York public library"], "genre": ["Historical Fiction", "historical fiction"], "title": [""]}}]}
{"id": "multiple_74", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_74", "question": [[{"role": "user", "content": "Find the price of Van Gogh's painting 'Starry Night' on all auction platforms."}]], "function": [{"name": "art_auction.fetch_artwork_price", "description": "Fetch the price of a specific artwork on the auction platform.", "parameters": {"type": "dict", "properties": {"artwork_name": {"type": "string", "description": "The name of the artwork to be searched."}, "artist": {"type": "string", "description": "The artist's name to ensure the precise artwork is fetched."}, "platform": {"type": "string", "description": "The platform where the artwork's price should be fetched from.", "default": "all"}}, "required": ["artwork_name", "artist"]}}, {"name": "library.search_book", "description": "Search for a specific book in the library.", "parameters": {"type": "dict", "properties": {"title": {"type": "string", "description": "The title of the book to be searched."}, "author": {"type": "string", "description": "The author of the book to ensure the precise book is fetched."}, "platform": {"type": "string", "description": "The library where the book should be fetched from.", "default": "all"}}, "required": ["title", "author"]}}]}, "model_result_raw": "```\n[{\"function\":\"art_auction.fetch_artwork_price\", \"parameters\": {\"artwork_name\": \"Starry Night\", \"artist\": \"Van Gogh\"}}, {\"function\":\"art_auction.fetch_artwork_price\", \"parameters\": {\"artwork_name\": \"Starry Night\", \"artist\": \"Van Gogh\", \"platform\": \"Sotheby's\"}}, {\"function\":\"art_auction.fetch_artwork_price\", \"parameters\": {\"artwork_name\": \"Starry Night\", \"artist\": \"Van Gogh\", \"platform\": \"Christie's\"}}]\n```", "model_result_decoded": [{"art_auction.fetch_artwork_price": {"artwork_name": "Starry Night", "artist": "Van Gogh"}}, {"art_auction.fetch_artwork_price": {"artwork_name": "Starry Night", "artist": "Van Gogh", "platform": "Sotheby's"}}, {"art_auction.fetch_artwork_price": {"artwork_name": "Starry Night", "artist": "Van Gogh", "platform": "Christie's"}}], "possible_answer": [{"art_auction.fetch_artwork_price": {"artwork_name": ["Starry Night"], "artist": ["Van Gogh"], "platform": ["all", ""]}}]}
{"id": "multiple_75", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_75", "question": [[{"role": "user", "content": "Which paint color is currently most popular for living rooms?"}]], "function": [{"name": "weather_forecast", "description": "Retrieve a weather forecast for a specific location and time frame.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}}, "required": ["location", "days"]}}, {"name": "paint_color.trends", "description": "Find the most popular paint color for a specific area in the home.", "parameters": {"type": "dict", "properties": {"room": {"type": "string", "description": "Type of the room e.g. Living room, Bathroom etc."}, "period": {"type": "string", "enum": ["Daily", "Weekly", "Monthly", "Yearly"], "description": "The period over which to check the paint color trend. Default 'Daily'"}}, "required": ["room"]}}, {"name": "house_price_trends", "description": "Find the average house price in a specific area.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state, e.g. New York, NY."}, "period": {"type": "string", "enum": ["Daily", "Weekly", "Monthly", "Yearly"], "description": "The period over which to check the price trend. Default 'Yearly'"}}, "required": ["location"]}}]}, "model_result_raw": "[paint_color.trends(room=\"Living room\")]", "model_result_decoded": [], "possible_answer": [{"paint_color.trends": {"room": ["living room", "Living room"], "period": ["", "Daily"]}}]}
{"id": "multiple_76", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_76", "question": [[{"role": "user", "content": "I want to order a custom bronze sculpture of a horse. What material options are available?"}]], "function": [{"name": "painting.create_custom", "description": "Order a custom painting with your preferred color.", "parameters": {"type": "dict", "properties": {"subject": {"type": "string", "description": "The subject of the painting, e.g. horse"}, "color": {"type": "string", "enum": ["Red", "Blue", "Green", "Yellow", "Black"], "description": "Preferred main color for the painting."}, "size": {"type": "integer", "description": "The desired size for the painting in inches. This parameter is optional. Default 12"}}, "required": ["subject", "color"]}}, {"name": "sculpture.create_custom", "description": "Order a custom sculpture with your preferred material.", "parameters": {"type": "dict", "properties": {"item": {"type": "string", "description": "The subject of the sculpture, e.g. horse"}, "material": {"type": "string", "enum": ["Bronze", "Marble", "Terracotta", "Wood", "Stone"], "description": "Preferred material for the sculpture."}, "size": {"type": "integer", "description": "The desired size for the sculpture in inches. This parameter is optional. Default 12"}}, "required": ["item", "material"]}}]}, "model_result_raw": "The given function \"sculpture.create_custom\" requires the \"material\" parameter, which specifies the preferred material for the sculpture. The available materials are not explicitly listed in the provided functions. Therefore, I cannot directly call the function because the required information is missing. Please provide the preferred material for the sculpture.", "model_result_decoded": [], "possible_answer": [{"sculpture.create_custom": {"item": ["horse", "Horse"], "material": ["Bronze", "bronze"], "size": ["", 12]}}]}
{"id": "multiple_78", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Incorrect type for parameter 'features'. Expected type array, got str. Parameter value: 'timings,exhibitions,accessibility'."], "error_type": "type_error:simple", "prompt": {"id": "multiple_78", "question": [[{"role": "user", "content": "Get me information about Natural History Museum in London including timings, exhibitions, and accessibility."}]], "function": [{"name": "tourist_spot_info", "description": "Retrieve information about a specific tourist spot.", "parameters": {"type": "dict", "properties": {"spot": {"type": "string", "description": "The name of the tourist spot you want to get information for."}, "city": {"type": "string", "description": "The city where the tourist spot is located."}, "details": {"type": "array", "items": {"type": "string", "enum": ["timing", "attractions", "tickets", "accessibility", "history"]}, "description": "Details of the tourist spot to get information on. For multiple details, separate them by comma.", "default": "timing, attractions"}}, "required": ["spot", "city"]}}, {"name": "museum_info", "description": "Retrieve information about a specific museum.", "parameters": {"type": "dict", "properties": {"museum": {"type": "string", "description": "The name of the museum you want to get information for."}, "city": {"type": "string", "description": "The city where the museum is located."}, "features": {"type": "array", "items": {"type": "string", "enum": ["timings", "exhibitions", "accessibility", "events", "history"]}, "description": "Features of the museum to get information on. For multiple features, separate them by comma.", "default": "timings, exhibitions"}}, "required": ["museum", "city"]}}]}, "model_result_raw": "```\n[{\"function\":\"museum_info\", \"parameters\": {\"museum\": \"Natural History Museum\", \"city\": \"London\", \"features\": \"timings,exhibitions,accessibility\"}}]\n```", "model_result_decoded": [{"museum_info": {"museum": "Natural History Museum", "city": "London", "features": "timings,exhibitions,accessibility"}}], "possible_answer": [{"museum_info": {"museum": ["Natural History Museum"], "city": ["London"], "features": [["timings", "exhibitions", "accessibility"], ["exhibitions", "timings", "accessibility"], ["exhibitions", "accessibility", "timings"], ["accessibility", "timings", "exhibitions"], ["accessibility", "exhibitions", "timings"], ["timings", "accessibility", "exhibitions"]]}}]}
{"id": "multiple_80", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_80", "question": [[{"role": "user", "content": "Find a local guitar shop that also offers violin lessons in Nashville."}]], "function": [{"name": "music_shop.find_nearby", "description": "Locate nearby music shops based on specific criteria like instrument lessons availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Nashville, TN"}, "services": {"type": "array", "items": {"type": "string", "enum": ["Guitar Lessons", "Violin Lessons", "Piano Lessons", "Ukulele Lessons"]}, "description": "Types of instrument lessons offered in the shop. Default empty array"}, "instruments": {"type": "array", "items": {"type": "string", "enum": ["Guitars", "Violins", "Pianos", "Drums"]}, "description": "Types of instruments sold in the shop. Default empty array"}}, "required": ["location"]}}, {"name": "gym.find_nearby", "description": "Locate nearby gyms based on specific criteria like types of fitness classes availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Nashville, TN"}, "classes": {"type": "array", "items": {"type": "string", "enum": ["Yoga", "Spin", "Zumba", "CrossFit"]}, "description": "Types of fitness classes offered in the gym. Default empty array"}, "equipment": {"type": "array", "items": {"type": "string", "enum": ["Treadmills", "Ellipticals", "Weight Machines", "Free Weights"]}, "description": "Types of gym equipment available. Default empty array"}}, "required": ["location"]}}]}, "model_result_raw": "[music_shop.find_nearby(location=\"Nashville\", services=[\"guitar lessons\", \"violin lessons\"])]", "model_result_decoded": [], "possible_answer": [{"music_shop.find_nearby": {"location": ["Nashville, TN", "Nashville"], "services": [["Violin Lessons"]], "instruments": [["Guitars"]]}}]}
{"id": "multiple_82", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_82", "question": [[{"role": "user", "content": "Play a song in C Major key at tempo 120 bpm."}]], "function": [{"name": "music.generate", "description": "Generate a piece of music given a key, tempo, and time signature.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The key of the piece, e.g., C Major."}, "tempo": {"type": "integer", "description": "Tempo of the piece in beats per minute."}, "time_signature": {"type": "string", "description": "Time signature of the piece, e.g., 4/4. Default '4/4'", "optional": true}}, "required": ["key", "tempo"]}}, {"name": "audio.generate", "description": "Generate an audio signal given a frequency, amplitude, and duration.", "parameters": {"type": "dict", "properties": {"frequency": {"type": "float", "description": "Frequency of the audio signal in Hz."}, "amplitude": {"type": "float", "description": "Amplitude of the audio signal."}, "duration": {"type": "integer", "description": "Duration of the audio signal in seconds. Default 1", "optional": true}}, "required": ["frequency", "amplitude"]}}]}, "model_result_raw": "[music.generate(key=\"C Major\", tempo=120)]", "model_result_decoded": [], "possible_answer": [{"music.generate": {"key": ["C Major"], "tempo": [120], "time_signature": ["", "4/4"]}}]}
{"id": "multiple_87", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_87", "question": [[{"role": "user", "content": "Find the latest update or patch for the game 'Cyberpunk 2077' on Xbox platform."}]], "function": [{"name": "games.reviews.find", "description": "Find reviews for a specific game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the game."}, "region": {"type": "string", "description": "The region where the reviews are coming from (optional, default is 'global')"}}, "required": ["game"]}}, {"name": "games.update.find", "description": "Find the latest updates or patches for a specific game on a specified gaming platform.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The gaming platform, e.g. Xbox, Playstation, PC."}, "region": {"type": "string", "description": "The region of the update (optional, default is 'global')"}}, "required": ["game", "platform"]}}, {"name": "games.price.find", "description": "Find the current price for a specific game on a specified gaming platform.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The gaming platform, e.g. Xbox, Playstation, PC."}}, "required": ["game", "platform"]}}]}, "model_result_raw": "[games.update.find(game=\"Cyberpunk 2077\", platform=\"Xbox\")]", "model_result_decoded": [], "possible_answer": [{"games.update.find": {"game": ["Cyberpunk 2077"], "platform": ["Xbox"], "region": ["", "global"]}}]}
{"id": "multiple_90", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_90", "question": [[{"role": "user", "content": "I want a seafood restaurant in Seattle that can accommodate a group of 5."}]], "function": [{"name": "events.find_event", "description": "Find events suitable for groups based on specified criteria such as location and event type.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Seattle, WA"}, "event_type": {"type": "array", "items": {"type": "string", "enum": ["Concert", "Sports", "Exhibition", "Festival"]}, "description": "Type of event. Default empty array"}, "group_size": {"type": "integer", "description": "Size of the group that the event should accommodate."}}, "required": ["location", "group_size"]}}, {"name": "restaurant.find_group", "description": "Find restaurants suitable for groups based on specified criteria such as location and cuisine.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Seattle, WA"}, "cuisine": {"type": "array", "items": {"type": "string", "enum": ["Seafood", "Italian", "Indian", "Chinese"]}, "description": "Preferred cuisine at the restaurant. Default empty array"}, "group_size": {"type": "integer", "description": "Size of the group that the restaurant should accommodate."}}, "required": ["location", "group_size"]}}]}, "model_result_raw": "[restaurant.find_group(location=\"Seattle\", cuisine=[\"seafood\"], group_size=5)]", "model_result_decoded": [], "possible_answer": [{"restaurant.find_group": {"location": ["Seattle", "Seattle, WA"], "cuisine": [["Seafood"]], "group_size": [5]}}]}
{"id": "multiple_91", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_91", "question": [[{"role": "user", "content": "Can I find a good cooking recipe for apple pie using less than 5 ingredients?"}]], "function": [{"name": "restaurant.find", "description": "Locate restaurants based on specific criteria such as cuisine and price range", "parameters": {"type": "dict", "properties": {"cuisine": {"type": "string", "description": "The type of cuisine preferred."}, "price": {"type": "array", "items": {"type": "string"}, "description": "Price range of the restaurant in format ['low', 'mid', 'high']. Default ['low', 'mid', 'high']"}}, "required": ["cuisine"]}}, {"name": "recipe.find", "description": "Locate cooking recipes based on specific criteria such as main ingredient and number of ingredients", "parameters": {"type": "dict", "properties": {"mainIngredient": {"type": "string", "description": "Main ingredient for the recipe."}, "ingredientLimit": {"type": "integer", "description": "Max number of ingredients the recipe should use."}}, "required": ["mainIngredient", "ingredientLimit"]}}]}, "model_result_raw": "[recipe.find(mainIngredient=\"apple\", ingredientLimit=5)]", "model_result_decoded": [], "possible_answer": [{"recipe.find": {"mainIngredient": ["apple pie", "apple"], "ingredientLimit": [4]}}]}
{"id": "multiple_92", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_92", "question": [[{"role": "user", "content": "Get me a list of available vegetarian and gluten-free foods at the Walmart near Denver."}]], "function": [{"name": "safeway.vegan_products", "description": "Get available vegan products at specified Safeway store", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the Safeway store is located, e.g. Denver, CO"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["vegan", "gluten-free"]}, "description": "Product categories to search within. Default empty array"}}, "required": ["location"]}}, {"name": "wholefoods.vegan_products", "description": "Get available vegan products at specified Whole Foods store", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the Whole Foods store is located, e.g. Denver, CO"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["vegan", "gluten-free"]}, "description": "Product categories to search within. Default empty array"}}, "required": ["location"]}}, {"name": "walmart.vegan_products", "description": "Get available vegan products at specified Walmart store", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the Walmart store is located, e.g. Denver, CO"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["vegan", "gluten-free"]}, "description": "Product categories to search within. Default empty array"}}, "required": ["location"]}}]}, "model_result_raw": "The given functions do not support searching for vegetarian and gluten-free foods at Walmart. They only provide information on vegan products. Therefore, I cannot directly call any of the functions to fulfill your request.", "model_result_decoded": [], "possible_answer": [{"walmart.vegan_products": {"location": ["Denver, CO", "Denver"], "categories": [["vegan", "gluten-free"], ["gluten-free", "vegan"]]}}]}
{"id": "multiple_113", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Nested type checking failed for parameter 'trait_contributions'. Expected outer type array with inner type <class 'float'>. Parameter value: [40, 60]."], "error_type": "type_error:nested", "prompt": {"id": "multiple_113", "question": [[{"role": "user", "content": "Calculate the expected evolutionary fitness of a creature, with trait A contributing to 40% of the fitness and trait B contributing 60%, if trait A has a value of 0.8 and trait B a value of 0.7."}]], "function": [{"name": "chess.rating", "description": "Fetches the current chess rating of a given player", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The full name of the chess player."}, "variant": {"type": "string", "description": "The variant of chess for which rating is requested (e.g., 'classical', 'blitz', 'bullet'). Default is 'classical'."}}, "required": ["player_name"]}}, {"name": "calculate_fitness", "description": "Calculate the expected evolutionary fitness of a creature based on the individual values and contributions of its traits.", "parameters": {"type": "dict", "properties": {"trait_values": {"type": "array", "items": {"type": "float"}, "description": "List of trait values, which are decimal numbers between 0 and 1, where 1 represents the trait maximally contributing to fitness."}, "trait_contributions": {"type": "array", "items": {"type": "float"}, "description": "List of the percentage contributions of each trait to the overall fitness, which must sum to 1."}}, "required": ["trait_values", "trait_contributions"]}}, {"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is empty array."}}, "required": ["loc", "product_list"]}}, {"name": "lawyer.find_nearby", "description": "Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city and state, e.g. Chicago, IL."}, "specialty": {"type": "array", "items": {"type": "string", "enum": ["Civil", "Divorce", "Immigration", "Business", "Criminal"]}, "description": "Specialization of the lawyer."}, "fee": {"type": "integer", "description": "Hourly fee charged by lawyer", "maximum": 400}}, "required": ["city", "specialty", "fee"]}}]}, "model_result_raw": "```\n[{\"function\":\"calculate_fitness\", \"parameters\": {\"trait_values\": [0.8, 0.7], \"trait_contributions\": [40, 60]}}]\n```", "model_result_decoded": [{"calculate_fitness": {"trait_values": [0.8, 0.7], "trait_contributions": [40, 60]}}], "possible_answer": [{"calculate_fitness": {"trait_values": [[0.8, 0.7]], "trait_contributions": [[0.4, 0.6]]}}]}
{"id": "multiple_119", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_119", "question": [[{"role": "user", "content": "Find records in database in user table where age is greater than 25 and job is 'engineer'."}]], "function": [{"name": "average_batting_score", "description": "Get the average batting score of a cricketer for specified past matches.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "Name of the cricket player."}, "matches": {"type": "integer", "description": "Number of past matches to consider for average calculation."}, "match_format": {"type": "string", "description": "Format of the cricket matches considered (e.g., 'T20', 'ODI', 'Test'). Default is 'T20'."}}, "required": ["player_name", "matches"]}}, {"name": "calculate_return_on_investment", "description": "Calculate the return on investment for a given stock based on its purchase price, sale price, and any dividends received.", "parameters": {"type": "dict", "properties": {"purchase_price": {"type": "float", "description": "The price the stock was bought at."}, "sale_price": {"type": "float", "description": "The price the stock was sold at."}, "dividend": {"type": "float", "description": "Any dividends received from the stock.", "default": 0}}, "required": ["purchase_price", "sale_price"]}}, {"name": "database.query", "description": "Query the database based on certain conditions.", "parameters": {"type": "dict", "properties": {"table": {"type": "string", "description": "Name of the table to query."}, "conditions": {"type": "array", "items": {"type": "dict", "properties": {"field": {"type": "string", "description": "The field to apply the condition."}, "operation": {"type": "string", "description": "The operation to be performed.", "enum": ["<", ">", "=", ">=", "<="]}, "value": {"type": "string", "description": "The value to be compared."}}, "required": ["field", "operation", "value"]}, "description": "Conditions for the query."}}, "required": ["table", "conditions"]}}, {"name": "probability_of_event", "description": "Calculates the probability of an event.", "parameters": {"type": "dict", "properties": {"success_outcomes": {"type": "integer", "description": "The number of successful outcomes."}, "total_outcomes": {"type": "integer", "description": "The total number of possible outcomes."}, "format_as_ratio": {"type": "boolean", "description": "When true, formats the output as a ratio instead of a decimal. Default is false."}}, "required": ["success_outcomes", "total_outcomes"]}}]}, "model_result_raw": "```\n[{\"function\":\"database.query\", \"parameters\": {\"table\": \"user\", \"conditions\": [{\"age\": {\"$gt\": 25}}, {\"job\": \"engineer\"}]}}]\n```", "model_result_decoded": [], "possible_answer": [{"database.query": {"table": ["user"], "conditions": [[{"field": ["age"], "operation": [">"], "value": ["25"]}, {"field": ["job"], "operation": ["="], "value": ["engineer"]}]]}}]}
{"id": "multiple_129", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Incorrect type for parameter 'annual_rate'. Expected type float, got int. Parameter value: 5."], "error_type": "type_error:simple", "prompt": {"id": "multiple_129", "question": [[{"role": "user", "content": "Find the compound interest for an investment of $10000 with an annual interest rate of 5% compounded monthly for 5 years."}]], "function": [{"name": "lawsuits_search", "description": "Search for lawsuits against a specific company within a specific time and location.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "location": {"type": "string", "description": "The location where the lawsuit was filed."}, "year": {"type": "integer", "description": "The year when the lawsuit was filed."}, "case_type": {"type": "string", "description": "The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. If not specified, search for all types. Default is 'all'"}}, "required": ["company_name", "location", "year"]}}, {"name": "compound_interest", "description": "Calculate compound interest for a certain time period.", "parameters": {"type": "dict", "properties": {"principal": {"type": "integer", "description": "The initial amount of money that was invested or loaned out."}, "annual_rate": {"type": "float", "description": "The interest rate for a year as a percentage."}, "compounding_freq": {"type": "string", "enum": ["monthly", "quarterly", "annually"], "description": "The number of times that interest is compounded per unit period."}, "time_in_years": {"type": "integer", "description": "The time the money is invested for in years."}}, "required": ["principal", "annual_rate", "compounding_freq", "time_in_years"]}}]}, "model_result_raw": "```\n[{\"function\":\"compound_interest\", \"parameters\": {\"principal\": 10000, \"annual_rate\": 5, \"compounding_freq\": \"monthly\", \"time_in_years\": 5}}]\n```", "model_result_decoded": [{"compound_interest": {"principal": 10000, "annual_rate": 5, "compounding_freq": "monthly", "time_in_years": 5}}], "possible_answer": [{"compound_interest": {"principal": [10000], "annual_rate": [5.0], "compounding_freq": ["monthly"], "time_in_years": [5]}}]}
{"id": "multiple_134", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_134", "question": [[{"role": "user", "content": "Look up details of a felony crime record for case number CA123456 in San Diego County"}]], "function": [{"name": "calculate_density", "description": "Calculate the population density of a specific country in a specific year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country for which the density needs to be calculated."}, "year": {"type": "string", "description": "The year in which the density is to be calculated."}, "population": {"type": "integer", "description": "The population of the country."}, "land_area": {"type": "float", "description": "The land area of the country in square kilometers."}}, "required": ["country", "year", "population", "land_area"]}}, {"name": "crime_record.get_record", "description": "Retrieve detailed felony crime records using a specific case number and location.", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "The case number related to the crime."}, "county": {"type": "string", "description": "The county in which the crime occurred."}, "details": {"type": "boolean", "description": "To get a detailed report, set as true. Defaults to false."}}, "required": ["case_number", "county"]}}, {"name": "get_highest_scoring_player", "description": "Retrieve the highest scoring player in a specific game and season.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The game in which you want to find the highest scoring player."}, "season": {"type": "string", "description": "The season during which the high score was achieved."}, "region": {"type": "string", "description": "The geographical region in which the game is being played (Optional). Defaults to 'USA'"}}, "required": ["game", "season"]}}, {"name": "calculate_compound_interest", "description": "Calculates the compound interest of an investment over a given time period.", "parameters": {"type": "dict", "properties": {"principle": {"type": "float", "description": "The initial amount of the investment."}, "interest_rate": {"type": "float", "description": "The yearly interest rate of the investment."}, "time": {"type": "integer", "description": "The time, in years, the money is invested or borrowed for."}, "compounds_per_year": {"type": "integer", "description": "The number of times the interest is compounded per year. Default is 1 (interest is compounded yearly)."}}, "required": ["principle", "interest_rate", "time"]}}]}, "model_result_raw": "[crime_record.get_record(case_number=\"CA123456\", county=\"San Diego County\")]", "model_result_decoded": [], "possible_answer": [{"crime_record.get_record": {"case_number": ["CA123456"], "county": ["San Diego", "San Diego County"], "details": [true]}}]}
{"id": "multiple_138", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_138", "question": [[{"role": "user", "content": "How to obtain the detailed case information of the R vs Adams legal case?"}]], "function": [{"name": "park_information", "description": "Retrieve the basic information such as elevation and area of a national park.", "parameters": {"type": "dict", "properties": {"park_name": {"type": "string", "description": "The name of the national park."}, "information": {"type": "array", "items": {"type": "string", "enum": ["Elevation", "Area", "Location", "Established Year"]}, "description": "The type of information you want about the park."}}, "required": ["park_name", "information"]}}, {"name": "legal_case.fetch", "description": "Fetch detailed legal case information from database.", "parameters": {"type": "dict", "properties": {"case_id": {"type": "string", "description": "The ID of the legal case."}, "details": {"type": "boolean", "description": "True if need the detail info. Default is false."}}, "required": ["case_id", "details"]}}, {"name": "calculate_stock_return", "description": "Calculate the projected return of a stock investment given the investment amount, the annual growth rate and holding period in years.", "parameters": {"type": "dict", "properties": {"investment_amount": {"type": "float", "description": "The amount of money to invest."}, "annual_growth_rate": {"type": "float", "description": "The expected annual growth rate of the stock."}, "holding_period": {"type": "integer", "description": "The number of years you intend to hold the stock."}, "include_dividends": {"type": "boolean", "description": "Optional. True if the calculation should take into account potential dividends. Default is false."}}, "required": ["investment_amount", "annual_growth_rate", "holding_period"]}}]}, "model_result_raw": "[legal_case.fetch(case_id=\"R vs Adams\", details=True)]", "model_result_decoded": [], "possible_answer": [{"legal_case.fetch": {"case_id": ["R vs Adams", "R_vs_Adams"], "details": [true]}}]}
{"id": "multiple_147", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'avoid': ['highways', 'toll roads']. Expected one of [['highways', 'tolls'], ['tolls', 'highways']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "multiple_147", "question": [[{"role": "user", "content": "Get me the directions from New York to Los Angeles avoiding highways and toll roads."}]], "function": [{"name": "map_service.get_directions", "description": "Retrieve directions from a starting location to an ending location, including options for route preferences.", "parameters": {"type": "dict", "properties": {"start": {"type": "string", "description": "Starting location for the route."}, "end": {"type": "string", "description": "Ending location for the route."}, "avoid": {"type": "array", "items": {"type": "string", "enum": ["tolls", "highways", "ferries"]}, "description": "Route features to avoid. Default is an empty array."}}, "required": ["start", "end"]}}, {"name": "convert_currency", "description": "Converts an amount from a particular currency to another currency.", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The base currency in which the original amount is present."}, "target_currency": {"type": "string", "description": "The currency to which you want to convert."}, "amount": {"type": "integer", "description": "The amount you want to convert."}}, "required": ["base_currency", "target_currency", "amount"]}}, {"name": "ecology.get_turtle_population", "description": "Get the population and species of turtles in a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The name of the location."}, "year": {"type": "integer", "description": "The year of the data requested. (optional) Default is 2024."}, "species": {"type": "boolean", "description": "Whether to include species information. Default is false. (optional)"}}, "required": ["location"]}}]}, "model_result_raw": "```\n[{\"function\":\"map_service.get_directions\", \"parameters\": {\"start\": \"New York\", \"end\": \"Los Angeles\", \"avoid\": [\"highways\", \"toll roads\"]}}]\n```", "model_result_decoded": [{"map_service.get_directions": {"start": "New York", "end": "Los Angeles", "avoid": ["highways", "toll roads"]}}], "possible_answer": [{"map_service.get_directions": {"start": ["New York", "New York, NY", "NYC"], "end": ["Los Angeles", "LA"], "avoid": [["highways", "tolls"], ["tolls", "highways"]]}}]}
{"id": "multiple_149", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'language': 'en'. Expected one of ['english', 'English']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_149", "question": [[{"role": "user", "content": "Analyze the sentiment of a customer review 'I love the food here! It's always fresh and delicious.'."}]], "function": [{"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}, {"name": "sentiment_analysis", "description": "Perform sentiment analysis on a given piece of text.", "parameters": {"type": "dict", "properties": {"text": {"type": "string", "description": "The text on which to perform sentiment analysis."}, "language": {"type": "string", "description": "The language in which the text is written."}}, "required": ["text", "language"]}}, {"name": "get_time_difference", "description": "Get the time difference between two places.", "parameters": {"type": "dict", "properties": {"place1": {"type": "string", "description": "The first place for time difference."}, "place2": {"type": "string", "description": "The second place for time difference."}}, "required": ["place1", "place2"]}}, {"name": "calculate_bmi", "description": "Calculate the Body Mass Index (BMI) for a person based on their weight and height.", "parameters": {"type": "dict", "properties": {"weight": {"type": "integer", "description": "The weight of the person in kilograms."}, "height": {"type": "integer", "description": "The height of the person in centimeters."}, "system": {"type": "string", "description": "The system of units to be used, 'metric' or 'imperial'. Default is 'metric'."}}, "required": ["weight", "height"]}}]}, "model_result_raw": "```\n[{\"function\":\"sentiment_analysis\", \"parameters\": {\"text\": \"I love the food here! It's always fresh and delicious.\", \"language\": \"en\"}}]\n```", "model_result_decoded": [{"sentiment_analysis": {"text": "I love the food here! It's always fresh and delicious.", "language": "en"}}], "possible_answer": [{"sentiment_analysis": {"text": ["I love the food here! It's always fresh and delicious."], "language": ["english", "English"]}}]}
{"id": "multiple_152", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Optional parameter 'event_type' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "multiple_152", "question": [[{"role": "user", "content": "Provide key war events in German history from 1871 to 1945."}]], "function": [{"name": "history.get_key_events", "description": "Retrieve key historical events within a specific period for a certain country.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The name of the country for which history is queried."}, "start_year": {"type": "integer", "description": "Start year of the period for which history is queried."}, "end_year": {"type": "integer", "description": "End year of the period for which history is queried."}, "event_type": {"type": "array", "items": {"type": "string", "enum": ["War", "Revolutions", "Diplomacy", "Economy"]}, "description": "Types of event. If none is provided, all types will be considered. Default is ['all']."}}, "required": ["country", "start_year", "end_year"]}}, {"name": "get_sculpture_value", "description": "Retrieve the current market value of a particular sculpture by a specific artist.", "parameters": {"type": "dict", "properties": {"sculpture": {"type": "string", "description": "The name of the sculpture."}, "artist": {"type": "string", "description": "The name of the artist who created the sculpture."}, "year": {"type": "integer", "description": "The year the sculpture was created. This is optional and is not required for all sculptures. Default is the 2024."}}, "required": ["sculpture", "artist"]}}]}, "model_result_raw": "```\n[{\"function\":\"history.get_key_events\", \"parameters\": {\"country\": \"Germany\", \"start_year\": 1871, \"end_year\": 1945}}]\n```", "model_result_decoded": [{"history.get_key_events": {"country": "Germany", "start_year": 1871, "end_year": 1945}}], "possible_answer": [{"history.get_key_events": {"country": ["Germany"], "start_year": [1871], "end_year": [1945], "event_type": [["War"]]}}]}
{"id": "multiple_157", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Optional parameter 'source' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "multiple_157", "question": [[{"role": "user", "content": "What is the earliest reference of Jesus Christ in history from historical record?"}]], "function": [{"name": "sports_ranking.get_current", "description": "Retrieve the current ranking of a specific team in a particular league.", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "The name of the team whose ranking is sought."}, "league": {"type": "string", "description": "The league in which the team participates."}, "season": {"type": "string", "description": "The season for which the ranking is sought. Defaults to the current season if not provided."}}, "required": ["team", "league"]}}, {"name": "get_earliest_reference", "description": "Retrieve the earliest historical reference of a person.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the person."}, "source": {"type": "string", "enum": ["scriptures", "historical records"], "description": "Source to fetch the reference. Default is 'scriptures'"}}, "required": ["name"]}}]}, "model_result_raw": "[{\"function\":\"get_earliest_reference\", \"parameters\": {\"name\": \"Jesus Christ\"}}]", "model_result_decoded": [{"get_earliest_reference": {"name": "Jesus Christ"}}], "possible_answer": [{"get_earliest_reference": {"name": ["Jesus Christ"], "source": ["historical records"]}}]}
{"id": "multiple_164", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_164", "question": [[{"role": "user", "content": "What's the retail price of a Fender American Professional II Stratocaster in Rosewood Finish?"}]], "function": [{"name": "grocery_store.find_nearby", "description": "Locate nearby grocery stores based on specific criteria like organic fruits and vegetables.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Houston, TX"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["Organic", "Vegetables", "Fruits", "Dairy", "Seafood", "Bakery"]}, "description": "Categories of items to be found in the grocery store. Default is empty array"}}, "required": ["location"]}}, {"name": "calculate_NPV", "description": "Calculate the NPV (Net Present Value) of an investment, considering a series of future cash flows, discount rate, and an initial investment.", "parameters": {"type": "dict", "properties": {"cash_flows": {"type": "array", "items": {"type": "float"}, "description": "Series of future cash flows."}, "discount_rate": {"type": "float", "description": "The discount rate to use."}, "initial_investment": {"type": "float", "description": "The initial investment. Default is 0 if not specified."}}, "required": ["cash_flows", "discount_rate"]}}, {"name": "get_stock_price", "description": "Get the closing stock price for a specific company on a specified date.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "Name of the company."}, "date": {"type": "string", "description": "Date of when to get the stock price. Format: yyyy-mm-dd."}, "exchange": {"type": "string", "description": "Name of the stock exchange market where the company's stock is listed. Default is 'NASDAQ'"}}, "required": ["company_name", "date"]}}, {"name": "instrument_price.get", "description": "Retrieve the current retail price of a specific musical instrument.", "parameters": {"type": "dict", "properties": {"brand": {"type": "string", "description": "The brand of the instrument."}, "model": {"type": "string", "description": "The specific model of the instrument."}, "finish": {"type": "string", "description": "The color or type of finish on the instrument."}}, "required": ["brand", "model", "finish"]}}]}, "model_result_raw": "[instrument_price.get({\"brand\": \"Fender\", \"model\": \"American Professional II Stratocaster\", \"finish\": \"Rosewood\"})", "model_result_decoded": [], "possible_answer": [{"instrument_price.get": {"brand": ["Fender"], "model": ["American Professional II Stratocaster"], "finish": ["Rosewood"]}}]}
{"id": "multiple_165", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_165", "question": [[{"role": "user", "content": "Find the price of a used Gibson Les Paul guitar in excellent condition in the Chicago area."}]], "function": [{"name": "identify_color_rgb", "description": "This function identifies the RGB values of a named color.", "parameters": {"type": "dict", "properties": {"color_name": {"type": "string", "description": "Name of the color."}, "standard": {"type": "string", "description": "The color standard (e.g. basic, pantone). Default is 'basic'"}}, "required": ["color_name"]}}, {"name": "board_game.chess.get_top_players", "description": "Find top chess players in a location based on rating.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city you want to find the players from."}, "minimum_rating": {"type": "integer", "description": "Minimum rating to filter the players."}, "number_of_players": {"type": "integer", "default": 10, "description": "Number of players you want to retrieve, default value is 10"}}, "required": ["location", "minimum_rating"]}}, {"name": "guitar_price.find", "description": "Retrieve the price of a specific used guitar model based on its condition and location.", "parameters": {"type": "dict", "properties": {"model": {"type": "string", "description": "The model of the guitar."}, "condition": {"type": "string", "enum": ["Poor", "Good", "Excellent"], "description": "The condition of the guitar."}, "location": {"type": "string", "description": "The location where the guitar is being sold."}}, "required": ["model", "condition", "location"]}}]}, "model_result_raw": "```\n[guitar_price.find(model=\"Gibson Les Paul\", condition=\"excellent\", location=\"Chicago\")]", "model_result_decoded": [], "possible_answer": [{"guitar_price.find": {"model": ["Gibson Les Paul"], "condition": ["Excellent"], "location": ["Chicago", "Chicago area"]}}]}
{"id": "multiple_167", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_167", "question": [[{"role": "user", "content": "Generate a melody in C major scale, starting with the note C4, 16 measures long, at 120 beats per minute."}]], "function": [{"name": "calculate_density", "description": "Calculate the population density of a specific country in a specific year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country for which the density needs to be calculated."}, "year": {"type": "string", "description": "The year in which the density is to be calculated."}, "population": {"type": "integer", "description": "The population of the country."}, "land_area": {"type": "float", "description": "The land area of the country in square kilometers."}}, "required": ["country", "year", "population", "land_area"]}}, {"name": "get_directions", "description": "Retrieve directions from one location to another.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting point of the journey."}, "end_location": {"type": "string", "description": "The destination point of the journey."}, "route_type": {"type": "string", "description": "Type of route to use (e.g., fastest, scenic). Default is fastest.", "enum": ["fastest", "scenic"]}}, "required": ["start_location", "end_location"]}}, {"name": "music_generator.generate_melody", "description": "Generate a melody based on certain musical parameters.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The key of the melody. E.g., 'C' for C major."}, "start_note": {"type": "string", "description": "The first note of the melody, specified in scientific pitch notation. E.g., 'C4'."}, "length": {"type": "integer", "description": "The number of measures in the melody."}, "tempo": {"type": "integer", "description": "The tempo of the melody, in beats per minute. Optional parameter. If not specified, defaults to 120."}}, "required": ["key", "start_note", "length"]}}]}, "model_result_raw": "```\n[music_generator.generate_melody(key=\"C\", start_note=\"C4\", length=16, tempo=120)]", "model_result_decoded": [], "possible_answer": [{"music_generator.generate_melody": {"key": ["C"], "start_note": ["C4"], "length": [16], "tempo": [120, ""]}}]}
{"id": "multiple_169", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'key': 'C sharp major'. Expected one of ['C#', 'C sharp']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_169", "question": [[{"role": "user", "content": "What is the musical scale associated with C sharp major?"}]], "function": [{"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is an empty array"}}, "required": ["loc", "product_list"]}}, {"name": "musical_scale", "description": "Get the musical scale of a specific key in music theory.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The musical key for which the scale will be found."}, "scale_type": {"type": "string", "default": "major", "description": "The type of musical scale."}}, "required": ["key"]}}]}, "model_result_raw": "```\n[{\"function\":\"musical_scale\", \"parameters\": {\"key\": \"C sharp major\"}}]\n```", "model_result_decoded": [{"musical_scale": {"key": "C sharp major"}}], "possible_answer": [{"musical_scale": {"key": ["C#", "C sharp"], "scale_type": ["major", ""]}}]}
{"id": "multiple_170", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_170", "question": [[{"role": "user", "content": "Get the player stats of Cristiano Ronaldo in the 2019-2020 season"}]], "function": [{"name": "park_information", "description": "Retrieve the basic information such as elevation and area of a national park.", "parameters": {"type": "dict", "properties": {"park_name": {"type": "string", "description": "The name of the national park."}, "information": {"type": "array", "items": {"type": "string", "enum": ["Elevation", "Area", "Location", "Established Year"]}, "description": "The type of information you want about the park."}}, "required": ["park_name", "information"]}}, {"name": "us_history.get_president", "description": "Retrieve the U.S. president during a specific event in American history.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The event in U.S. history."}, "year": {"type": "integer", "description": "The specific year of the event."}}, "required": ["event", "year"]}}, {"name": "monopoly_odds_calculator", "description": "Calculates the probability of rolling a certain sum with two dice, commonly used in board game like Monopoly.", "parameters": {"type": "dict", "properties": {"number": {"type": "integer", "description": "The number for which the odds are calculated."}, "dice_number": {"type": "integer", "description": "The number of dice involved in the roll."}, "dice_faces": {"type": "integer", "description": "The number of faces on a single die. Default is 6 for standard six-faced die."}}, "required": ["number", "dice_number"]}}, {"name": "soccer_stat.get_player_stats", "description": "Retrieve soccer player statistics for a given season.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "Name of the player."}, "season": {"type": "string", "description": "Soccer season, usually specified by two years."}, "league": {"type": "string", "description": "Optional - the soccer league, defaults to all leagues. Default 'all'"}}, "required": ["player_name", "season"]}}]}, "model_result_raw": "```\n[soccer_stat.get_player_stats(player_name=\"Cristiano Ronaldo\", season=\"2019-2020\")]", "model_result_decoded": [], "possible_answer": [{"soccer_stat.get_player_stats": {"player_name": ["Cristiano Ronaldo"], "season": ["2019-2020"], "league": ["all", ""]}}]}
{"id": "multiple_172", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_172", "question": [[{"role": "user", "content": "Find me the detailed profile of basketball player Lebron James"}]], "function": [{"name": "get_traffic_info", "description": "Retrieve current traffic conditions for a specified route.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting point of the route."}, "end_location": {"type": "string", "description": "The destination of the route."}, "mode": {"type": "string", "enum": ["driving", "walking", "bicycling", "transit"], "description": "Preferred method of transportation, default to 'driving'."}}, "required": ["start_location", "end_location"]}}, {"name": "calculate_compound_interest", "description": "Calculates the compound interest of an investment over a given time period.", "parameters": {"type": "dict", "properties": {"principle": {"type": "float", "description": "The initial amount of the investment."}, "interest_rate": {"type": "float", "description": "The yearly interest rate of the investment."}, "time": {"type": "integer", "description": "The time, in years, the money is invested or borrowed for."}, "compounds_per_year": {"type": "integer", "description": "The number of times the interest is compounded per year. Default is 1 (interest is compounded yearly)."}}, "required": ["principle", "interest_rate", "time"]}}, {"name": "cooking_conversion.convert", "description": "Convert cooking measurements from one unit to another.", "parameters": {"type": "dict", "properties": {"quantity": {"type": "integer", "description": "The quantity to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from."}, "to_unit": {"type": "string", "description": "The unit to convert to."}, "item": {"type": "string", "description": "The item to be converted."}}, "required": ["quantity", "from_unit", "to_unit", "item"]}}, {"name": "sports_db.find_athlete", "description": "Find the profile information of a sports athlete based on their full name.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The full name of the athlete."}, "team": {"type": "string", "description": "The team the athlete belong to. Default is ''"}, "sport": {"type": "string", "description": "The sport that athlete plays.", "enum": ["Basketball", "Baseball", "Football", "Soccer"]}}, "required": ["name", "sport"]}}]}, "model_result_raw": "```\n[sports_db.find_athlete(name=\"Lebron James\", sport=\"basketball\")]", "model_result_decoded": [], "possible_answer": [{"sports_db.find_athlete": {"name": ["Lebron James"], "sport": ["Basketball"], "team": [""]}}]}
{"id": "multiple_175", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_175", "question": [[{"role": "user", "content": "Who is ranked as the top player in woman tennis?"}]], "function": [{"name": "find_instrument", "description": "Search for a musical instrument within specified budget and of specific type.", "parameters": {"type": "dict", "properties": {"budget": {"type": "float", "description": "Your budget for the instrument."}, "type": {"type": "string", "description": "Type of the instrument"}, "make": {"type": "string", "description": "Maker of the instrument, Optional parameter. Default is ''"}}, "required": ["budget", "type"]}}, {"name": "calculate_binomial_probability", "description": "Calculates the binomial probability given the number of trials, successes and the probability of success on an individual trial.", "parameters": {"type": "dict", "properties": {"number_of_trials": {"type": "integer", "description": "The total number of trials."}, "number_of_successes": {"type": "integer", "description": "The desired number of successful outcomes."}, "probability_of_success": {"type": "float", "description": "The probability of a successful outcome on any given trial.", "default": 0.5}}, "required": ["number_of_trials", "number_of_successes"]}}, {"name": "electromagnetic_force", "description": "Calculate the electromagnetic force between two charges placed at a certain distance.", "parameters": {"type": "dict", "properties": {"charge1": {"type": "float", "description": "The magnitude of the first charge in coulombs."}, "charge2": {"type": "float", "description": "The magnitude of the second charge in coulombs."}, "distance": {"type": "float", "description": "The distance between the two charges in meters."}, "medium_permittivity": {"type": "float", "description": "The relative permittivity of the medium in which the charges are present. Default is 8.854 x 10^-12 F/m (vacuum permittivity)."}}, "required": ["charge1", "charge2", "distance"]}}, {"name": "sports_ranking.get_top_player", "description": "Get the top player in a specific sport.", "parameters": {"type": "dict", "properties": {"sport": {"type": "string", "description": "The type of sport."}, "gender": {"type": "string", "description": "The gender of the sport category. Optional.", "default": "men"}}, "required": ["sport"]}}]}, "model_result_raw": "[sports_ranking.get_top_player(sport=\"tennis\", gender=\"female\")]", "model_result_decoded": [], "possible_answer": [{"sports_ranking.get_top_player": {"sport": ["tennis"], "gender": ["women"]}}]}
{"id": "multiple_176", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_176", "question": [[{"role": "user", "content": "Give me the schedule of Manchester United for the next 6 games in Premier League."}]], "function": [{"name": "vegan_restaurant.find_nearby", "description": "Locate nearby vegan restaurants based on specific criteria like operating hours.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. New York, NY"}, "operating_hours": {"type": "integer", "description": "Preferred latest closing time of the restaurant. E.g. if 11 is given, then restaurants that close at or after 11 PM will be considered. This is in 24 hour format. Default is 9."}}, "required": ["location"]}}, {"name": "hotel_booking", "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you want to book the hotel."}, "room_type": {"type": "string", "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."}, "duration": {"type": "integer", "description": "The number of nights you want to book the hotel for."}, "start_date": {"type": "string", "description": "The date when your stay begins."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["pet_friendly", "gym", "swimming_pool", "free_breakfast", "parking"]}, "description": "Optional preferences of stay at the hotel. Default is empty array"}}, "required": ["location", "room_type", "duration", "start_date"]}}, {"name": "find_card_in_deck", "description": "Locate a particular card in a deck based on rank and suit.", "parameters": {"type": "dict", "properties": {"rank": {"type": "string", "description": "Rank of the card (e.g. Ace, Two, King)."}, "suit": {"type": "string", "description": "Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs)."}, "deck": {"type": "array", "items": {"type": "dict", "properties": {"rank": {"type": "string"}, "suit": {"type": "string"}}}, "description": "Deck of cards. If not provided, the deck will be a standard 52 card deck by default"}}, "required": ["rank", "suit"]}}, {"name": "sports_team.get_schedule", "description": "Fetches the schedule of the specified sports team for the specified number of games in the given league.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "num_of_games": {"type": "integer", "description": "Number of games for which to fetch the schedule."}, "league": {"type": "string", "description": "The name of the sports league. If not provided, the function will fetch the schedule for all games, regardless of the league."}, "location": {"type": "string", "description": "Optional. The city or venue where games are to be held. If not provided, all venues will be considered. Default to ''."}}, "required": ["team_name", "num_of_games", "league"]}}]}, "model_result_raw": "```\n[sports_team.get_schedule(team_name=\"Manchester United\", num_of_games=6, league=\"Premier League\")]", "model_result_decoded": [], "possible_answer": [{"sports_team.get_schedule": {"team_name": ["Manchester United", "Man United", "Man U", "MUFC"], "num_of_games": [6], "league": ["Premier League", "PL"], "location": [""]}}]}
{"id": "multiple_179", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_179", "question": [[{"role": "user", "content": "What is the probability of getting a full house in poker?"}]], "function": [{"name": "poker_probability.full_house", "description": "Calculate the probability of getting a full house in a poker game.", "parameters": {"type": "dict", "properties": {"deck_size": {"type": "integer", "description": "The size of the deck. Default is 52."}, "hand_size": {"type": "integer", "description": "The size of the hand. Default is 5."}}, "required": ["deck_size", "hand_size"]}}, {"name": "hospital.locate", "description": "Locate nearby hospitals based on location and radius. Options to include specific departments are available.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Denver, CO"}, "radius": {"type": "integer", "description": "The radius within which you want to find the hospital in kms."}, "department": {"type": "string", "description": "Specific department within the hospital. Default is ''.", "enum": ["General Medicine", "Emergency", "Pediatrics", "Cardiology", "Orthopedics"]}}, "required": ["location", "radius"]}}, {"name": "find_recipe", "description": "Find a recipe based on the dietary restrictions, recipe type, and time constraints.", "parameters": {"type": "dict", "properties": {"dietary_restrictions": {"type": "string", "description": "Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free."}, "recipe_type": {"type": "string", "description": "Type of the recipe. E.g. dessert, main course, breakfast."}, "time": {"type": "integer", "description": "Time limit in minutes to prep the meal."}}, "required": ["dietary_restrictions", "recipe_type", "time"]}}]}, "model_result_raw": "The function \"poker_probability.full_house\" can calculate the probability of getting a full house in poker, but it lacks the required \"deck_size\" and \"hand_size\" parameters. Please provide the size of the deck and the size of the hand.", "model_result_decoded": [], "possible_answer": [{"poker_probability.full_house": {"deck_size": [52], "hand_size": [5]}}]}
{"id": "multiple_181", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_181", "question": [[{"role": "user", "content": "Get me the details of the last game played by Liverpool F.C. Include its statistics."}]], "function": [{"name": "building.get_dimensions", "description": "Retrieve the dimensions of a specific building based on its name.", "parameters": {"type": "dict", "properties": {"building_name": {"type": "string", "description": "The name of the building."}, "unit": {"type": "string", "description": "The unit in which you want the dimensions. Default is meter.", "enum": ["meter", "feet"]}}, "required": ["building_name", "unit"]}}, {"name": "plot_sine_wave", "description": "Plot a sine wave for a given frequency in a given range.", "parameters": {"type": "dict", "properties": {"start_range": {"type": "float", "description": "Start of the range in radians."}, "end_range": {"type": "float", "description": "End of the range in radians."}, "frequency": {"type": "float", "description": "Frequency of the sine wave in Hz."}, "amplitude": {"type": "float", "description": "Amplitude of the sine wave. Default is 1."}, "phase_shift": {"type": "float", "description": "Phase shift of the sine wave in radians. Default is 0."}}, "required": ["start_range", "end_range", "frequency"]}}, {"name": "random_forest.train", "description": "Train a Random Forest Model on given data", "parameters": {"type": "dict", "properties": {"n_estimators": {"type": "integer", "description": "The number of trees in the forest."}, "max_depth": {"type": "integer", "description": "The maximum depth of the tree."}, "data": {"type": "any", "description": "The training data for the model."}}, "required": ["n_estimators", "max_depth", "data"]}}, {"name": "soccer.get_last_match", "description": "Retrieve the details of the last match played by a specified soccer club.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the soccer club."}, "include_stats": {"type": "boolean", "description": "If true, include match statistics like possession, shots on target etc. Default is false."}}, "required": ["team_name"]}}]}, "model_result_raw": "```\n[soccer.get_last_match(team_name=\"Liverpool F.C.\", include_stats=True)]", "model_result_decoded": [], "possible_answer": [{"soccer.get_last_match": {"team_name": ["Liverpool F.C.", "Liverpool"], "include_stats": [true]}}]}
{"id": "multiple_182", "model_name": "uiuc-convai_CoALM-8B", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_182", "question": [[{"role": "user", "content": "Find me a multiplayer game with rating above 4.5 and compatible with Windows 10."}]], "function": [{"name": "geo_distance.calculate", "description": "Calculate the geographic distance between two given locations.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting location for the distance calculation."}, "end_location": {"type": "string", "description": "The destination location for the distance calculation."}, "units": {"type": "string", "description": "Optional. The desired units for the resulting distance ('miles' or 'kilometers'). Defaults to 'miles'."}}, "required": ["start_location", "end_location"]}}, {"name": "multiplayer_game_finder", "description": "Locate multiplayer games that match specific criteria such as rating, platform compatibility, genre, etc.", "parameters": {"type": "dict", "properties": {"platform": {"type": "string", "description": "The platform you want the game to be compatible with, e.g. Windows 10, PS5."}, "rating": {"type": "float", "description": "Desired minimum game rating on a 5.0 scale."}, "genre": {"type": "string", "description": "Desired game genre, e.g. Action, Adventure, Racing. Default is ''.", "enum": ["Action", "Adventure", "Racing", "Strategy", "Simulation"]}}, "required": ["platform", "rating"]}}, {"name": "send_email", "description": "Send an email to the specified email address.", "parameters": {"type": "dict", "properties": {"to": {"type": "string", "description": "The email address to send to."}, "subject": {"type": "string", "description": "The subject of the email."}, "body": {"type": "string", "description": "The body content of the email."}, "cc": {"type": "string", "description": "The email address to carbon copy. Default is ''."}, "bcc": {"type": "string", "description": "The email address to blind carbon copy. Default is ''."}}, "required": ["to", "subject", "body"]}}, {"name": "calculate_area_under_curve", "description": "Calculate the area under a mathematical function within a given interval.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The mathematical function as a string."}, "interval": {"type": "array", "items": {"type": "float"}, "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."}, "method": {"type": "string", "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, "required": ["function", "interval"]}}]}, "model_result_raw": "[multiplayer_game_finder(platform=\"Windows 10\", rating=4.5)]", "model_result_decoded": [], "possible_answer": [{"multiplayer_game_finder": {"platform": ["Windows 10"], "rating": [4.5], "genre": [""]}}]}