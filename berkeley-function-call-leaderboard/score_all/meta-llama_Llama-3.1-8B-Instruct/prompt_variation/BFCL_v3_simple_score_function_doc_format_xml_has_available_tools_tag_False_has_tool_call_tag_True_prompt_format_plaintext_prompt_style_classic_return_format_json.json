{"accuracy": 0.815, "correct_count": 326, "total_count": 400}
{"id": "simple_13", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'interval'. Expected outer type array with inner type <class 'float'>. Parameter value: [1, 3]."], "error_type": "type_error:nested", "prompt": {"id": "simple_13", "question": [[{"role": "user", "content": "Calculate the area under the curve y=x^2 from x=1 to x=3."}]], "function": [{"name": "calculate_area_under_curve", "description": "Calculate the area under a mathematical function within a given interval.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The mathematical function as a string."}, "interval": {"type": "array", "items": {"type": "float"}, "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."}, "method": {"type": "string", "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, "required": ["function", "interval"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"calculate_area_under_curve\",\"parameters\":{\"function\":\"x**2\",\"interval\":[1,3],\"method\":\"trapezoidal\"}}]\n</TOOLCALL>", "model_result_decoded": [{"calculate_area_under_curve": {"function": "x**2", "interval": [1, 3], "method": "trapezoidal"}}], "possible_answer": [{"calculate_area_under_curve": {"function": ["x**2", "lambda x: x**2", "y=x**2"], "interval": [[1.0, 3.0]], "method": ["", "trapezoidal"]}}]}
{"id": "simple_30", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'initial_velocity'. Expected type float, got int. Parameter value: 0."], "error_type": "type_error:simple", "prompt": {"id": "simple_30", "question": [[{"role": "user", "content": "What is the final velocity of a vehicle that started from rest and accelerated at 4 m/s^2 for a distance of 300 meters?"}]], "function": [{"name": "kinematics.final_velocity_from_distance", "description": "Calculate the final velocity of an object given the acceleration and distance travelled, assuming initial velocity is 0.", "parameters": {"type": "dict", "properties": {"acceleration": {"type": "integer", "description": "Acceleration of the object, m/s^2."}, "distance": {"type": "integer", "description": "Distance traveled by the object, m."}, "initial_velocity": {"type": "float", "description": "Initial velocity of the object. Default is 0, m/s"}}, "required": ["acceleration", "distance"]}}]}, "model_result_raw": "<TOOLCALL>[{\"function\":\"kinematics.final_velocity_from_distance\",\"parameters\":{\"acceleration\":4,\"distance\":300,\"initial_velocity\":0}}]</TOOLCALL>", "model_result_decoded": [{"kinematics.final_velocity_from_distance": {"acceleration": 4, "distance": 300, "initial_velocity": 0}}], "possible_answer": [{"kinematics.final_velocity_from_distance": {"acceleration": [4], "distance": [300], "initial_velocity": ["", 0.0]}}]}
{"id": "simple_38", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'charge1'. Expected type float, got str. Parameter value: '1e-9'."], "error_type": "type_error:simple", "prompt": {"id": "simple_38", "question": [[{"role": "user", "content": "What is the electrostatic potential between two charged bodies of 1e-9 and 2e-9 of distance 0.05?"}]], "function": [{"name": "calculate_electrostatic_potential", "description": "Calculate the electrostatic potential between two charged bodies using the principle of Coulomb's Law.", "parameters": {"type": "dict", "properties": {"charge1": {"type": "float", "description": "The quantity of charge on the first body."}, "charge2": {"type": "float", "description": "The quantity of charge on the second body."}, "distance": {"type": "float", "description": "The distance between the two bodies."}, "constant": {"type": "float", "description": "The value of the electrostatic constant. Default is 8.99e9."}}, "required": ["charge1", "charge2", "distance"]}}]}, "model_result_raw": "<TOOLCALL>[{\"function\":\"calculate_electrostatic_potential\",\"parameters\":{\"charge1\":\"1e-9\",\"charge2\":\"2e-9\",\"distance\":\"0.05\"}}]</TOOLCALL>", "model_result_decoded": [{"calculate_electrostatic_potential": {"charge1": "1e-9", "charge2": "2e-9", "distance": "0.05"}}], "possible_answer": [{"calculate_electrostatic_potential": {"charge1": [1e-09], "charge2": [2e-09], "distance": [0.05], "constant": ["", 8990000000.0]}}]}
{"id": "simple_44", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'charge'. Expected type float, got str. Parameter value: '0.01'."], "error_type": "type_error:simple", "prompt": {"id": "simple_44", "question": [[{"role": "user", "content": "Calculate the electric field strength 4 meters away from a charge of 0.01 Coulombs."}]], "function": [{"name": "calculate_electric_field_strength", "description": "Calculate the electric field strength at a certain distance from a point charge.", "parameters": {"type": "dict", "properties": {"charge": {"type": "float", "description": "The charge in Coulombs."}, "distance": {"type": "integer", "description": "The distance from the charge in meters."}, "medium": {"type": "string", "description": "The medium in which the charge and the point of calculation is located. Default is 'vacuum'."}}, "required": ["charge", "distance"]}}]}, "model_result_raw": "<TOOLCALL>[{\"function\":\"calculate_electric_field_strength\",\"parameters\":{\"charge\":\"0.01\",\"distance\":\"4\"}}]</TOOLCALL>", "model_result_decoded": [{"calculate_electric_field_strength": {"charge": "0.01", "distance": "4"}}], "possible_answer": [{"calculate_electric_field_strength": {"charge": [0.01], "distance": [4], "medium": ["", "vacuum"]}}]}
{"id": "simple_45", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'mass'. Expected type integer, got str. Parameter value: '100'."], "error_type": "type_error:simple", "prompt": {"id": "simple_45", "question": [[{"role": "user", "content": "Calculate the energy (in Joules) absorbed or released during the phase change of 100g of water from liquid to steam at its boiling point."}]], "function": [{"name": "thermo.calculate_energy", "description": "Calculate the energy required or released during a phase change using mass, the phase transition temperature and the specific latent heat.", "parameters": {"type": "dict", "properties": {"mass": {"type": "integer", "description": "Mass of the substance in grams."}, "phase_transition": {"type": "string", "description": "Phase transition. Can be 'melting', 'freezing', 'vaporization', 'condensation'."}, "substance": {"type": "string", "description": "The substance which is undergoing phase change, default is 'water'"}}, "required": ["mass", "phase_transition"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"thermo.calculate_energy\",\"parameters\":{\"mass\":\"100\",\"phase_transition\":\"vaporization\",\"substance\":\"water\"}}]\n</TOOLCALL>", "model_result_decoded": [{"thermo.calculate_energy": {"mass": "100", "phase_transition": "vaporization", "substance": "water"}}], "possible_answer": [{"thermo.calculate_energy": {"mass": [100], "phase_transition": ["vaporization"], "substance": ["water", ""]}}]}
{"id": "simple_55", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'cell_type': 'human cell'. Expected one of ['human']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_55", "question": [[{"role": "user", "content": "Find me detailed information about the structure of human cell"}]], "function": [{"name": "biology.get_cell_info", "description": "Retrieve information about the structure and functioning of a specified type of cell", "parameters": {"type": "dict", "properties": {"cell_type": {"type": "string", "description": "Type of cell you want information about"}, "detailed": {"type": "boolean", "description": "Indicate if you want a detailed description of the cell", "default": "false"}}, "required": ["cell_type"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"biology.get_cell_info\",\"parameters\":{\"cell_type\":\"human cell\",\"detailed\":true}}]\n</TOOLCALL>", "model_result_decoded": [{"biology.get_cell_info": {"cell_type": "human cell", "detailed": true}}], "possible_answer": [{"biology.get_cell_info": {"cell_type": ["human"], "detailed": [true]}}]}
{"id": "simple_58", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'specific_function'. Expected type boolean, got str. Parameter value: 'true'."], "error_type": "type_error:simple", "prompt": {"id": "simple_58", "question": [[{"role": "user", "content": "What is the function of ATP synthase in mitochondria?"}]], "function": [{"name": "cell_biology.function_lookup", "description": "Look up the function of a given molecule in a specified organelle.", "parameters": {"type": "dict", "properties": {"molecule": {"type": "string", "description": "The molecule of interest."}, "organelle": {"type": "string", "description": "The organelle of interest."}, "specific_function": {"type": "boolean", "description": "If set to true, a specific function of the molecule within the organelle will be provided, if such information exists."}}, "required": ["molecule", "organelle", "specific_function"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"cell_biology.function_lookup\",\"parameters\":{\"molecule\":\"ATP synthase\",\"organelle\":\"mitochondria\",\"specific_function\":\"true\"}}]", "model_result_decoded": [{"cell_biology.function_lookup": {"molecule": "ATP synthase", "organelle": "mitochondria", "specific_function": "true"}}], "possible_answer": [{"cell_biology.function_lookup": {"molecule": ["ATP synthase"], "organelle": ["mitochondria"], "specific_function": [true]}}]}
{"id": "simple_66", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'time_frame': 'last 6 months'. Expected one of ['six_months']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_66", "question": [[{"role": "user", "content": "Get me data on average precipitation in the Amazon rainforest for the last six months."}]], "function": [{"name": "ecology_data.precipitation_stats", "description": "Retrieve precipitation data for a specified location and time period.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The name of the location, e.g., 'Amazon rainforest'."}, "time_frame": {"type": "string", "enum": ["six_months", "year", "five_years"], "description": "The time period for which data is required."}}, "required": ["location", "time_frame"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"ecology_data.precipitation_stats\",\"parameters\":{\"location\":\"Amazon rainforest\",\"time_frame\":\"last 6 months\"}}]", "model_result_decoded": [{"ecology_data.precipitation_stats": {"location": "Amazon rainforest", "time_frame": "last 6 months"}}], "possible_answer": [{"ecology_data.precipitation_stats": {"location": ["Amazon rainforest"], "time_frame": ["six_months"]}}]}
{"id": "simple_72", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'trait_values'. Expected outer type array with inner type <class 'float'>. Parameter value: ['0.8', '0.7']."], "error_type": "type_error:nested", "prompt": {"id": "simple_72", "question": [[{"role": "user", "content": "Calculate the expected evolutionary fitness of a creature, with trait A contributing to 40% of the fitness and trait B contributing 60%, if trait A has a value of 0.8 and trait B a value of 0.7."}]], "function": [{"name": "calculate_fitness", "description": "Calculate the expected evolutionary fitness of a creature based on the individual values and contributions of its traits.", "parameters": {"type": "dict", "properties": {"trait_values": {"type": "array", "items": {"type": "float"}, "description": "List of trait values, which are decimal numbers between 0 and 1, where 1 represents the trait maximally contributing to fitness."}, "trait_contributions": {"type": "array", "items": {"type": "float"}, "description": "List of the percentage contributions of each trait to the overall fitness, which must sum to 1."}}, "required": ["trait_values", "trait_contributions"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"calculate_fitness\",\"parameters\":{\"trait_values\":[\"0.8\",\"0.7\"],\"trait_contributions\":[\"0.4\",\"0.6\"]}}]\n</TOOLCALL>", "model_result_decoded": [{"calculate_fitness": {"trait_values": ["0.8", "0.7"], "trait_contributions": ["0.4", "0.6"]}}], "possible_answer": [{"calculate_fitness": {"trait_values": [[0.8, 0.7]], "trait_contributions": [[0.4, 0.6]]}}]}
{"id": "simple_81", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'avoid_tolls'. Expected type boolean, got str. Parameter value: 'true'."], "error_type": "type_error:simple", "prompt": {"id": "simple_81", "question": [[{"role": "user", "content": "Find the fastest route from San Francisco to Los Angeles with toll roads avoided."}]], "function": [{"name": "map_routing.fastest_route", "description": "Finds the fastest route from one location to another, with an option to avoid toll roads.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting location for the journey."}, "end_location": {"type": "string", "description": "The destination for the journey."}, "avoid_tolls": {"type": "boolean", "description": "Option to avoid toll roads during the journey. Default is false."}}, "required": ["start_location", "end_location"]}}]}, "model_result_raw": "<TOOLCALL>[{\"function\":\"map_routing.fastest_route\",\"parameters\":{\"start_location\":\"San Francisco\",\"end_location\":\"Los Angeles\",\"avoid_tolls\":\"true\"}}]</TOOLCALL>", "model_result_decoded": [{"map_routing.fastest_route": {"start_location": "San Francisco", "end_location": "Los Angeles", "avoid_tolls": "true"}}], "possible_answer": [{"map_routing.fastest_route": {"start_location": ["San Francisco", "SF"], "end_location": ["Los Angeles", "LA"], "avoid_tolls": [true]}}]}
{"id": "simple_82", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'numbers'. Expected outer type array with inner type <class 'float'>. Parameter value: [12, 15, 18, 20, 21, 26, 30]."], "error_type": "type_error:nested", "prompt": {"id": "simple_82", "question": [[{"role": "user", "content": "Calculate the average of list of integers [12, 15, 18, 20, 21, 26, 30]."}]], "function": [{"name": "calculate_average", "description": "Calculates the average of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to calculate the average of."}}, "required": ["numbers"]}}]}, "model_result_raw": "TOOLCALL\n[{\"function\":\"calculate_average\",\"parameters\":{\"numbers\":[12, 15, 18, 20, 21, 26, 30]}}]", "model_result_decoded": [{"calculate_average": {"numbers": [12, 15, 18, 20, 21, 26, 30]}}], "possible_answer": [{"calculate_average": {"numbers": [[12.0, 15.0, 18.0, 20.0, 21.0, 26.0, 30.0]]}}]}
{"id": "simple_83", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'coord1'. Expected type tuple, got str. Parameter value: '(33.4484, -112.0740)'."], "error_type": "type_error:simple", "prompt": {"id": "simple_83", "question": [[{"role": "user", "content": "Calculate the distance between two GPS coordinates (33.4484 N, 112.0740 W) and (34.0522 N, 118.2437 W) in miles."}]], "function": [{"name": "calculate_distance", "description": "Calculate the distance between two GPS coordinates.", "parameters": {"type": "dict", "properties": {"coord1": {"type": "tuple", "description": "The first coordinate as (latitude, longitude).", "items": {"type": "float"}}, "coord2": {"type": "tuple", "description": "The second coordinate as (latitude, longitude).", "items": {"type": "float"}}, "unit": {"type": "string", "description": "The unit of distance. Options: 'miles', 'kilometers'."}}, "required": ["coord1", "coord2", "unit"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"calculate_distance\",\"parameters\":{\"coord1\":\"(33.4484, -112.0740)\",\"coord2\":\"(34.0522, -118.2437)\",\"unit\":\"miles\"}}]", "model_result_decoded": [{"calculate_distance": {"coord1": "(33.4484, -112.0740)", "coord2": "(34.0522, -118.2437)", "unit": "miles"}}], "possible_answer": [{"calculate_distance": {"coord1": [[33.4484, -112.074]], "coord2": [[34.0522, -118.2437]], "unit": ["miles"]}}]}
{"id": "simple_86", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'allow_transfer'. Expected type boolean, got str. Parameter value: 'true'."], "error_type": "type_error:simple", "prompt": {"id": "simple_86", "question": [[{"role": "user", "content": "Find the shortest distance between two cities, New York and Los Angeles, through the train and you can transfer."}]], "function": [{"name": "city_distance.find_shortest", "description": "Calculates the shortest distance between two cities via available public transportation.", "parameters": {"type": "dict", "properties": {"start_city": {"type": "string", "description": "The city you are starting from. The parameter is in the format of city name."}, "end_city": {"type": "string", "description": "The city you are heading to.The parameter is in the format of city name."}, "transportation": {"type": "string", "description": "Preferred mode of public transportation. Default is 'bus'."}, "allow_transfer": {"type": "boolean", "description": "Allows transfer between different transportation if true. Default is false."}}, "required": ["start_city", "end_city"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"city_distance.find_shortest\",\"parameters\":{\"start_city\":\"New York\",\"end_city\":\"Los Angeles\",\"transportation\":\"train\",\"allow_transfer\":\"true\"}}]\n</TOOLCALL>", "model_result_decoded": [{"city_distance.find_shortest": {"start_city": "New York", "end_city": "Los Angeles", "transportation": "train", "allow_transfer": "true"}}], "possible_answer": [{"city_distance.find_shortest": {"start_city": ["New York"], "end_city": ["Los Angeles"], "transportation": ["train"], "allow_transfer": [true]}}]}
{"id": "simple_87", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'list'. Expected outer type array with inner type <class 'float'>. Parameter value: [5, 3, 4, 1, 2]."], "error_type": "type_error:nested", "prompt": {"id": "simple_87", "question": [[{"role": "user", "content": "Sort the list [5, 3, 4, 1, 2] in ascending order."}]], "function": [{"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "dict", "properties": {"list": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting."}}, "required": ["list", "order"]}}]}, "model_result_raw": "<TOOLCALL>[{\"function\":\"array_sort\",\"parameters\":{\"list\":[5, 3, 4, 1, 2],\"order\":\"ascending\"}}]</TOOLCALL>", "model_result_decoded": [{"array_sort": {"list": [5, 3, 4, 1, 2], "order": "ascending"}}], "possible_answer": [{"array_sort": {"list": [[5.0, 3.0, 4.0, 1.0, 2.0]], "order": ["ascending"]}}]}
{"id": "simple_88", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'weight_kg'. Expected type integer, got str. Parameter value: '70'."], "error_type": "type_error:simple", "prompt": {"id": "simple_88", "question": [[{"role": "user", "content": "Calculate the BMI (Body Mass Index) of a person who weighs 70kg and is 1.75m tall."}]], "function": [{"name": "calculate_BMI", "description": "Calculate the Body Mass Index (BMI) given a person's weight and height.", "parameters": {"type": "dict", "properties": {"weight_kg": {"type": "integer", "description": "The weight of the person in kilograms."}, "height_m": {"type": "float", "description": "The height of the person in meters."}}, "required": ["weight_kg", "height_m"]}}]}, "model_result_raw": "<TOOLCALL>[{\"function\":\"calculate_BMI\",\"parameters\":{\"weight_kg\":\"70\",\"height_m\":\"1.75\"}}]</TOOLCALL>", "model_result_decoded": [{"calculate_BMI": {"weight_kg": "70", "height_m": "1.75"}}], "possible_answer": [{"calculate_BMI": {"weight_kg": [70], "height_m": [1.75]}}]}
{"id": "simple_89", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Unexpected dict key parameter: 'subject'.", "Missing dict key parameter: 'department'."], "error_type": "value_error:dict_key", "prompt": {"id": "simple_89", "question": [[{"role": "user", "content": "Fetch all records for students studying Science in 'Bluebird High School' from the StudentDB."}]], "function": [{"name": "db_fetch_records", "description": "Fetch records from a specified database table based on certain conditions.", "parameters": {"type": "dict", "properties": {"database_name": {"type": "string", "description": "The name of the database."}, "table_name": {"type": "string", "description": "The name of the table from which records need to be fetched."}, "conditions": {"type": "dict", "properties": {"department": {"type": "string", "description": "The name of the department of students."}, "school": {"type": "string", "description": "The name of the school students are enrolled in."}}, "description": "The conditions based on which records are to be fetched."}, "fetch_limit": {"type": "integer", "description": "Limits the number of records to be fetched. Default is 0, which means no limit."}}, "required": ["database_name", "table_name", "conditions"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"db_fetch_records\",\"parameters\":{\"database_name\":\"StudentDB\",\"table_name\":\"students\",\"conditions\":{\"subject\":\"Science\",\"school_name\":\"Bluebird High School\"},\"fetch_limit\":null}}]\n</TOOLCALL>", "model_result_decoded": [{"db_fetch_records": {"database_name": "StudentDB", "table_name": "students", "conditions": {"subject": "Science", "school_name": "Bluebird High School"}, "fetch_limit": null}}], "possible_answer": [{"db_fetch_records": {"database_name": ["StudentDB"], "table_name": ["students"], "conditions": [{"department": ["Science"], "school": ["Bluebird High School", "Bluebird HS"]}], "fetch_limit": ["", 0]}}]}
{"id": "simple_91", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'condition': 'operates on Sundays'. Expected one of ['open on Sundays', 'opens on Sundays']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_91", "question": [[{"role": "user", "content": "Get the highest rated sushi restaurant in Boston, that opens on Sundays."}]], "function": [{"name": "get_restaurant", "description": "Retrieve highest rated restaurant given cuisine, location, and a condition.", "parameters": {"type": "dict", "properties": {"cuisine": {"type": "string", "description": "Cuisine of the restaurant."}, "location": {"type": "string", "description": "City where restaurant is located."}, "condition": {"type": "string", "description": "Condition to be met by the restaurant (e.g., operating days, amenities, etc.)"}}, "required": ["cuisine", "location", "condition"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"get_restaurant\",\"parameters\":{\"cuisine\":\"sushi\",\"location\":\"Boston\",\"condition\":\"operates on Sundays\"}}]\n</TOOLCALL>", "model_result_decoded": [{"get_restaurant": {"cuisine": "sushi", "location": "Boston", "condition": "operates on Sundays"}}], "possible_answer": [{"get_restaurant": {"cuisine": ["sushi"], "location": ["Boston"], "condition": ["open on Sundays", "opens on Sundays"]}}]}
{"id": "simple_94", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'database': 'default'. Expected one of ['CustomerInfo', '']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_94", "question": [[{"role": "user", "content": "Update my customer information with user id 43523 'name':'John Doe', 'email':'johndoe@email.com' in the database."}]], "function": [{"name": "update_user_info", "description": "Update user information in the database.", "parameters": {"type": "dict", "properties": {"user_id": {"type": "integer", "description": "The user ID of the customer."}, "update_info": {"type": "dict", "properties": {"name": {"type": "string", "description": "The customer's updated name."}, "email": {"type": "string", "description": "The customer's updated email."}}, "description": "The new information to update."}, "database": {"type": "string", "description": "The database where the user's information is stored.", "default": "CustomerInfo"}}, "required": ["user_id", "update_info"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"update_user_info\",\"parameters\":{\"user_id\":43523,\"update_info\":{\"name\":\"John Doe\",\"email\":\"johndoe@email.com\"},\"database\":\"default\"}}]\n</TOOLCALL>", "model_result_decoded": [{"update_user_info": {"user_id": 43523, "update_info": {"name": "John Doe", "email": "johndoe@email.com"}, "database": "default"}}], "possible_answer": [{"update_user_info": {"user_id": [43523], "update_info": [{"name": ["John Doe"], "email": ["johndoe@email.com"]}], "database": ["CustomerInfo", ""]}}]}
{"id": "simple_96", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_96", "question": [[{"role": "user", "content": "Find records in database in user table where age is greater than 25 and job is 'engineer'."}]], "function": [{"name": "database.query", "description": "Query the database based on certain conditions.", "parameters": {"type": "dict", "properties": {"table": {"type": "string", "description": "Name of the table to query."}, "conditions": {"type": "array", "items": {"type": "dict", "properties": {"field": {"type": "string", "description": "The field to apply the condition."}, "operation": {"type": "string", "description": "The operation to be performed.", "enum": ["<", ">", "=", ">=", "<="]}, "value": {"type": "string", "description": "The value to be compared."}}, "required": ["field", "operation", "value"]}, "description": "Conditions for the query."}}, "required": ["table", "conditions"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"database.query\",\"parameters\":{\"table\":\"user\",\"conditions\":[{\"column\":\"age\",\"operator\":\"gt\",\"value\":25},{\"column\":\"job\",\"operator\":\"eq\",\"value\":\"engineer\"}]}]}\n</TOOLCALL>", "model_result_decoded": [], "possible_answer": [{"database.query": {"table": ["user"], "conditions": [[{"field": ["age"], "operation": [">"], "value": ["25"]}, {"field": ["job"], "operation": ["="], "value": ["engineer"]}]]}}]}
{"id": "simple_98", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'hours': 18. Expected one of [6]."], "error_type": "value_error:others", "prompt": {"id": "simple_98", "question": [[{"role": "user", "content": "What will be the angle between the hour and minute hands of a clock at 6:30 PM?"}]], "function": [{"name": "calculate_clock_angle", "description": "Calculate the angle between the hour and minute hands of a clock at a given time.", "parameters": {"type": "dict", "properties": {"hours": {"type": "integer", "description": "The hour on the clock face."}, "minutes": {"type": "integer", "description": "The minutes on the clock face."}, "round_to": {"type": "integer", "description": "The number of decimal places to round the result to, default is 2."}}, "required": ["hours", "minutes"]}}]}, "model_result_raw": "<TOOLCALL>[{\"function\":\"calculate_clock_angle\",\"parameters\":{\"hours\":18,\"minutes\":30,\"round_to\":0}}]</TOOLCALL>", "model_result_decoded": [{"calculate_clock_angle": {"hours": 18, "minutes": 30, "round_to": 0}}], "possible_answer": [{"calculate_clock_angle": {"hours": [6], "minutes": [30], "round_to": ["", 2]}}]}
{"id": "simple_99", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'start_range'. Expected type float, got str. Parameter value: '0'."], "error_type": "type_error:simple", "prompt": {"id": "simple_99", "question": [[{"role": "user", "content": "Plot a sine wave from 0 to 2 pi with a frequency of 5 Hz."}]], "function": [{"name": "plot_sine_wave", "description": "Plot a sine wave for a given frequency in a given range.", "parameters": {"type": "dict", "properties": {"start_range": {"type": "float", "description": "Start of the range in radians. Four decimal places."}, "end_range": {"type": "float", "description": "End of the range in radians. Four decimal places."}, "frequency": {"type": "integer", "description": "Frequency of the sine wave in Hz."}, "amplitude": {"type": "integer", "description": "Amplitude of the sine wave. Default is 1."}, "phase_shift": {"type": "integer", "description": "Phase shift of the sine wave in radians. Default is 0."}}, "required": ["start_range", "end_range", "frequency"]}}]}, "model_result_raw": "<TOOLCALL>[{\"function\":\"plot_sine_wave\",\"parameters\":{\"start_range\":\"0\",\"end_range\":\"6.2832\",\"frequency\":\"5\"}}]</TOOLCALL>", "model_result_decoded": [{"plot_sine_wave": {"start_range": "0", "end_range": "6.2832", "frequency": "5"}}], "possible_answer": [{"plot_sine_wave": {"start_range": [0.0], "end_range": [6.2832], "frequency": [5], "amplitude": [1, ""], "phase_shift": [0, ""]}}]}
{"id": "simple_103", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'polynomial'. Expected outer type array with inner type <class 'float'>. Parameter value: [3, 2, -4]."], "error_type": "type_error:nested", "prompt": {"id": "simple_103", "question": [[{"role": "user", "content": "Calculate the area under the curve y=3x^2 + 2x - 4, between x = -1 and x = 2."}]], "function": [{"name": "mathematics.calculate_area_under_curve", "description": "Calculate the area under the curve for a given polynomial function within a specified interval.", "parameters": {"type": "dict", "properties": {"polynomial": {"type": "array", "items": {"type": "float"}, "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."}, "limits": {"type": "array", "items": {"type": "float"}, "description": "A list of two numbers specifying the lower and upper limit for the integration interval."}}, "required": ["polynomial", "limits"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"mathematics.calculate_area_under_curve\",\"parameters\":{\"polynomial\":[3,2,-4],\"limits\":[-1,2]}}]\n</TOOLCALL>", "model_result_decoded": [{"mathematics.calculate_area_under_curve": {"polynomial": [3, 2, -4], "limits": [-1, 2]}}], "possible_answer": [{"mathematics.calculate_area_under_curve": {"polynomial": [[3.0, 2.0, -4.0]], "limits": [[-1.0, 2.0]]}}]}
{"id": "simple_105", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'base'. Expected type integer, got str. Parameter value: '3'."], "error_type": "type_error:simple", "prompt": {"id": "simple_105", "question": [[{"role": "user", "content": "Calculate the power of 3 raised to the power 4."}]], "function": [{"name": "math.power", "description": "Calculate the power of one number raised to another.", "parameters": {"type": "dict", "properties": {"base": {"type": "integer", "description": "The base number."}, "exponent": {"type": "integer", "description": "The exponent."}, "mod": {"type": "integer", "description": "The modulus. Default is 1. Calculates pow(base, exponent) % mod when provided."}}, "required": ["base", "exponent"]}}]}, "model_result_raw": "TOOLCALL\n[{\"function\":\"math.power\",\"parameters\":{\"base\":\"3\",\"exponent\":\"4\"}}]", "model_result_decoded": [{"math.power": {"base": "3", "exponent": "4"}}], "possible_answer": [{"math.power": {"base": [3], "exponent": [4], "mod": ["", 1]}}]}
{"id": "simple_110", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'bedrooms'. Expected type integer, got str. Parameter value: '3'."], "error_type": "type_error:simple", "prompt": {"id": "simple_110", "question": [[{"role": "user", "content": "Predict the price of the house in San Francisco with 3 bedrooms, 2 bathrooms and area of 1800 square feet."}]], "function": [{"name": "predict_house_price", "description": "Predict the price of a house in a given area based on number of bedrooms, bathrooms and area.", "parameters": {"type": "dict", "properties": {"bedrooms": {"type": "integer", "description": "The number of bedrooms in the house."}, "bathrooms": {"type": "integer", "description": "The number of bathrooms in the house."}, "area": {"type": "integer", "description": "The area of the house in square feet."}, "location": {"type": "string", "description": "The location of the house in the format of city name."}}, "required": ["bedrooms", "bathrooms", "area", "location"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"predict_house_price\",\"parameters\":{\"bedrooms\":\"3\",\"bathrooms\":\"2\",\"area\":\"1800\",\"location\":\"San Francisco\"}}]\n</TOOLCALL>", "model_result_decoded": [{"predict_house_price": {"bedrooms": "3", "bathrooms": "2", "area": "1800", "location": "San Francisco"}}], "possible_answer": [{"predict_house_price": {"bedrooms": [3], "bathrooms": [2], "area": [1800], "location": ["San Francisco", "San Francisco, CA"]}}]}
{"id": "simple_117", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'success_outcomes'. Expected type integer, got str. Parameter value: '13'."], "error_type": "type_error:simple", "prompt": {"id": "simple_117", "question": [[{"role": "user", "content": "What are the odds of pulling a heart suit from a well-shuffled standard deck of 52 cards? Format it as ratio."}]], "function": [{"name": "probability_of_event", "description": "Calculates the probability of an event.", "parameters": {"type": "dict", "properties": {"success_outcomes": {"type": "integer", "description": "The number of successful outcomes."}, "total_outcomes": {"type": "integer", "description": "The total number of possible outcomes."}, "format_as_ratio": {"type": "boolean", "description": "When true, formats the output as a ratio instead of a decimal. Default is false."}}, "required": ["success_outcomes", "total_outcomes"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"probability_of_event\",\"parameters\":{\"success_outcomes\":\"13\",\"total_outcomes\":\"52\",\"format_as_ratio\":\"true\"}}]", "model_result_decoded": [{"probability_of_event": {"success_outcomes": "13", "total_outcomes": "52", "format_as_ratio": "true"}}], "possible_answer": [{"probability_of_event": {"success_outcomes": [13], "total_outcomes": [52], "format_as_ratio": [true]}}]}
{"id": "simple_136", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'annual_rate'. Expected type float, got int. Parameter value: 5."], "error_type": "type_error:simple", "prompt": {"id": "simple_136", "question": [[{"role": "user", "content": "Find the compound interest for an investment of $10000 with an annual interest rate of 5% compounded monthly for 5 years."}]], "function": [{"name": "compound_interest", "description": "Calculate compound interest for a certain time period.", "parameters": {"type": "dict", "properties": {"principal": {"type": "integer", "description": "The initial amount of money that was invested or loaned out."}, "annual_rate": {"type": "float", "description": "The interest rate for a year as a percentage."}, "compounding_freq": {"type": "string", "enum": ["monthly", "quarterly", "annually"], "description": "The number of times that interest is compounded per unit period."}, "time_in_years": {"type": "integer", "description": "The time the money is invested for in years."}}, "required": ["principal", "annual_rate", "compounding_freq", "time_in_years"]}}]}, "model_result_raw": "<TOOLCALL>[{\"function\":\"compound_interest\",\"parameters\":{\"principal\":10000,\"annual_rate\":5,\"compounding_freq\":\"monthly\",\"time_in_years\":5}}]</TOOLCALL>", "model_result_decoded": [{"compound_interest": {"principal": 10000, "annual_rate": 5, "compounding_freq": "monthly", "time_in_years": 5}}], "possible_answer": [{"compound_interest": {"principal": [10000], "annual_rate": [5.0], "compounding_freq": ["monthly"], "time_in_years": [5]}}]}
{"id": "simple_139", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'yearly_yield'. Expected type float, got int. Parameter value: 5."], "error_type": "type_error:simple", "prompt": {"id": "simple_139", "question": [[{"role": "user", "content": "What is the estimated return on a mutual fund, given that it has a yearly yield of 5%, an investment amount of $2000 and a time period of 3 years?"}]], "function": [{"name": "estimate_mutual_fund_return", "description": "Calculate the estimated return on a mutual fund given the yearly yield, the investment amount and the time period.", "parameters": {"type": "dict", "properties": {"yearly_yield": {"type": "float", "description": "The yearly yield of the mutual fund as a percentage."}, "investment_amount": {"type": "integer", "description": "The initial investment amount in the mutual fund."}, "years": {"type": "integer", "description": "The time period for which the investment is made in years."}}, "required": ["yearly_yield", "investment_amount", "years"]}}]}, "model_result_raw": "TOOLCALL\n[{\"function\":\"estimate_mutual_fund_return\",\"parameters\":{\"yearly_yield\":5,\"investment_amount\":2000,\"years\":3}}]", "model_result_decoded": [{"estimate_mutual_fund_return": {"yearly_yield": 5, "investment_amount": 2000, "years": 3}}], "possible_answer": [{"estimate_mutual_fund_return": {"yearly_yield": [5.0], "investment_amount": [2000], "years": [3]}}]}
{"id": "simple_150", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'deposit'. Expected type integer, got str. Parameter value: '1000'."], "error_type": "type_error:simple", "prompt": {"id": "simple_150", "question": [[{"role": "user", "content": "Calculate the return of investment of a bank's savings account with a deposit of $1000, annual interest rate of 3% for 1 year."}]], "function": [{"name": "calculate_roi", "description": "Calculate the return on investment for a given deposit amount, annual interest rate, and time frame.", "parameters": {"type": "dict", "properties": {"deposit": {"type": "integer", "description": "The initial deposit amount."}, "annual_interest_rate": {"type": "float", "description": "The annual interest rate provided by the bank."}, "years": {"type": "integer", "description": "The period for which the money is invested."}}, "required": ["deposit", "annual_interest_rate", "years"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"calculate_roi\",\"parameters\":{\"deposit\":\"1000\",\"annual_interest_rate\":\"0.03\",\"years\":\"1\"}}]\n</TOOLCALL>", "model_result_decoded": [{"calculate_roi": {"deposit": "1000", "annual_interest_rate": "0.03", "years": "1"}}], "possible_answer": [{"calculate_roi": {"deposit": [1000], "annual_interest_rate": [0.03], "years": [1]}}]}
{"id": "simple_153", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'rate'. Expected type float, got int. Parameter value: 3."], "error_type": "type_error:simple", "prompt": {"id": "simple_153", "question": [[{"role": "user", "content": "Calculate the compounded interest on an initial deposit of $5000 at an annual interest rate of 3% for 5 years, compounded quarterly."}]], "function": [{"name": "calculate_compounded_interest", "description": "Calculate the compounded interest for a given initial deposit, interest rate, time and number of times the interest is compounded per unit time.", "parameters": {"type": "dict", "properties": {"principal": {"type": "integer", "description": "The initial amount of money that is being invested or loaned."}, "rate": {"type": "float", "description": "The annual interest rate."}, "time": {"type": "integer", "description": "The number of time periods the money is invested or loaned for."}, "n": {"type": "integer", "description": "The number of times that interest is compounded per unit time."}}, "required": ["principal", "rate", "time", "n"]}}]}, "model_result_raw": "TOOLCALL\n[{\"function\":\"calculate_compounded_interest\",\"parameters\":{\"principal\":5000,\"rate\":3,\"time\":5,\"n\":4}}]", "model_result_decoded": [{"calculate_compounded_interest": {"principal": 5000, "rate": 3, "time": 5, "n": 4}}], "possible_answer": [{"calculate_compounded_interest": {"principal": [5000], "rate": [0.03], "time": [5], "n": [4]}}]}
{"id": "simple_155", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'initial_investment'. Expected type integer, got str. Parameter value: '1000'."], "error_type": "type_error:simple", "prompt": {"id": "simple_155", "question": [[{"role": "user", "content": "Calculate the future value of my investment of $1000 with an annual interest rate of 5% over 2 years."}]], "function": [{"name": "calculate_future_value", "description": "Calculate the future value of an investment given the initial amount, interest rate, and investment duration.", "parameters": {"type": "dict", "properties": {"initial_investment": {"type": "integer", "description": "The initial investment amount."}, "interest_rate": {"type": "float", "description": "The annual interest rate in decimal form."}, "duration": {"type": "integer", "description": "The investment duration in years."}, "compounded": {"type": "integer", "description": "The number of times the interest is compounded per year. Default is 1 (annual compounding)."}}, "required": ["initial_investment", "interest_rate", "duration"]}}]}, "model_result_raw": "<TOOLCALL>[{\"function\":\"calculate_future_value\",\"parameters\":{\"initial_investment\":\"1000\",\"interest_rate\":\"0.05\",\"duration\":\"2\"}}]</TOOLCALL>", "model_result_decoded": [{"calculate_future_value": {"initial_investment": "1000", "interest_rate": "0.05", "duration": "2"}}], "possible_answer": [{"calculate_future_value": {"initial_investment": [1000], "interest_rate": [0.05], "duration": [2], "compounded": ["", 1]}}]}
{"id": "simple_161", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'detail_level': 'detail'. Expected one of ['detailed']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_161", "question": [[{"role": "user", "content": "Find out the possible punishments for the crime of theft in California in detail."}]], "function": [{"name": "crime_statute_lookup", "description": "Look up the criminal statutes in a specific jurisdiction to find possible punishments for a specific crime.", "parameters": {"type": "dict", "properties": {"jurisdiction": {"type": "string", "description": "The jurisdiction to search in, usually a state or country."}, "crime": {"type": "string", "description": "The crime to search for."}, "detail_level": {"type": "string", "enum": ["basic", "detailed"], "description": "How detailed of a report to return. Optional, default is 'basic'."}}, "required": ["jurisdiction", "crime"]}}]}, "model_result_raw": "TOOLCALL\n[{\"function\":\"crime_statute_lookup\",\"parameters\":{\"jurisdiction\":\"California\",\"crime\":\"theft\",\"detail_level\":\"detail\"}}]", "model_result_decoded": [{"crime_statute_lookup": {"jurisdiction": "California", "crime": "theft", "detail_level": "detail"}}], "possible_answer": [{"crime_statute_lookup": {"jurisdiction": ["California", "CA"], "crime": ["theft"], "detail_level": ["detailed"]}}]}
{"id": "simple_163", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'include_owner'. Expected type boolean, got str. Parameter value: 'true'."], "error_type": "type_error:simple", "prompt": {"id": "simple_163", "question": [[{"role": "user", "content": "Provide me with the property records of my house located at 123 main street, with parcel number 1234567890 in Santa Clara county. Include owners information in the response."}]], "function": [{"name": "property_records.get", "description": "Fetch property records based on location, parcel number and county.", "parameters": {"type": "dict", "properties": {"address": {"type": "string", "description": "Address of the property."}, "parcel_number": {"type": "string", "description": "Parcel number of the property."}, "county": {"type": "string", "description": "County where the property is located."}, "include_owner": {"type": "boolean", "description": "Include owner's name in the property record. Default is false.", "default": false}}, "required": ["address", "parcel_number", "county"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"property_records.get\",\"parameters\":{\"address\":\"123 main street\",\"parcel_number\":\"1234567890\",\"county\":\"Santa Clara\",\"include_owner\":\"true\"}}]\n</TOOLCALL>", "model_result_decoded": [{"property_records.get": {"address": "123 main street", "parcel_number": "1234567890", "county": "Santa Clara", "include_owner": "true"}}], "possible_answer": [{"property_records.get": {"address": ["123 main street"], "parcel_number": ["1234567890"], "county": ["Santa Clara"], "include_owner": [true]}}]}
{"id": "simple_166", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'city': 'Chicago'. Expected one of ['Chicago, IL.', 'Chicago, IL']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_166", "question": [[{"role": "user", "content": "Find a lawyer specializing in divorce cases and charge fee less than 400 dollars per hour in Chicago."}]], "function": [{"name": "lawyer.find_nearby", "description": "Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city and state, e.g. Chicago, IL."}, "specialty": {"type": "array", "items": {"type": "string", "enum": ["Civil", "Divorce", "Immigration", "Business", "Criminal"]}, "description": "Specialization of the lawyer."}, "fee": {"type": "integer", "description": "Hourly fee charged by lawyer"}}, "required": ["city", "specialty", "fee"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"lawyer.find_nearby\",\"parameters\":{\"city\":\"Chicago\",\"specialty\":[\"divorce\"],\"fee\":400}}]\n</TOOLCALL>", "model_result_decoded": [{"lawyer.find_nearby": {"city": "Chicago", "specialty": ["divorce"], "fee": 400}}], "possible_answer": [{"lawyer.find_nearby": {"city": ["Chicago, IL.", "Chicago, IL"], "specialty": [["Divorce"]], "fee": [400]}}]}
{"id": "simple_174", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'top_number'. Expected type integer, got str. Parameter value: '10'."], "error_type": "type_error:simple", "prompt": {"id": "simple_174", "question": [[{"role": "user", "content": "Get me the top 10 landmark cases in constitutional law in China."}]], "function": [{"name": "get_top_cases", "description": "Retrieve a list of the most influential or landmark cases in a specific field of law.", "parameters": {"type": "dict", "properties": {"field_of_law": {"type": "string", "description": "The specific field of law e.g., constitutional law, criminal law, etc."}, "top_number": {"type": "integer", "description": "The number of top cases to retrieve."}, "country": {"type": "string", "description": "The country where the law cases should be retrieved from. Default is United States of America."}}, "required": ["field_of_law", "top_number"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"get_top_cases\",\"parameters\":{\"field_of_law\":\"constitutional law\",\"top_number\":\"10\",\"country\":\"China\"}}]\n</TOOLCALL>", "model_result_decoded": [{"get_top_cases": {"field_of_law": "constitutional law", "top_number": "10", "country": "China"}}], "possible_answer": [{"get_top_cases": {"field_of_law": ["constitutional law", "constitutional"], "top_number": [10], "country": ["China", "CN"]}}]}
{"id": "simple_177", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'status': 'Patent'. Expected one of ['all', '']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_177", "question": [[{"role": "user", "content": "Find all Patent lawsuit cases of Facebook in 2018."}]], "function": [{"name": "get_lawsuit_cases", "description": "Retrieve all lawsuit cases related to a specific company during a particular year.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "year": {"type": "integer", "description": "The specific year to search for lawsuit cases."}, "status": {"type": "string", "enum": ["open", "closed", "all"], "description": "The status of the lawsuit cases to retrieve. If not specified, defaults to 'all'."}}, "required": ["company_name", "year"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"get_lawsuit_cases\",\"parameters\":{\"company_name\":\"Facebook\",\"year\":2018,\"status\":\"Patent\"}}]", "model_result_decoded": [{"get_lawsuit_cases": {"company_name": "Facebook", "year": 2018, "status": "Patent"}}], "possible_answer": [{"get_lawsuit_cases": {"company_name": ["Facebook"], "year": [2018], "status": ["all", ""]}}]}
{"id": "simple_181", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'with_verdict'. Expected type boolean, got str. Parameter value: 'true'."], "error_type": "type_error:simple", "prompt": {"id": "simple_181", "question": [[{"role": "user", "content": "Get details of a lawsuit with case number '123456-ABC' filed in Los Angeles court with verdict"}]], "function": [{"name": "get_lawsuit_details", "description": "Retrieve details of a lawsuit based on its case number and court location.", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "Case number of the lawsuit."}, "court_location": {"type": "string", "description": "The location of the court where the lawsuit was filed."}, "with_verdict": {"type": "boolean", "description": "Flag to include verdict details if available. Default is False"}}, "required": ["case_number", "court_location"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"get_lawsuit_details\",\"parameters\":{\"case_number\":\"123456-ABC\",\"court_location\":\"Los Angeles\",\"with_verdict\":\"true\"}}]", "model_result_decoded": [{"get_lawsuit_details": {"case_number": "123456-ABC", "court_location": "Los Angeles", "with_verdict": "true"}}], "possible_answer": [{"get_lawsuit_details": {"case_number": ["123456-ABC"], "court_location": ["Los Angeles"], "with_verdict": [true]}}]}
{"id": "simple_187", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'include_temperature'. Expected type boolean, got str. Parameter value: 'true'."], "error_type": "type_error:simple", "prompt": {"id": "simple_187", "question": [[{"role": "user", "content": "What's the current temperature and humidity in Seattle, Washington?"}]], "function": [{"name": "get_current_weather", "description": "Retrieves the current temperature and humidity for a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city name to get the weather for."}, "include_temperature": {"type": "boolean", "description": "Whether to include the temperature in the result. Default is true."}, "include_humidity": {"type": "boolean", "description": "Whether to include the humidity in the result. Default is true."}}, "required": ["location"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"get_current_weather\",\"parameters\":{\"location\":\"Seattle, Washington\",\"include_temperature\":\"true\",\"include_humidity\":\"true\"}}]\n</TOOLCALL>", "model_result_decoded": [{"get_current_weather": {"location": "Seattle, Washington", "include_temperature": "true", "include_humidity": "true"}}], "possible_answer": [{"get_current_weather": {"location": ["Seattle", "Seattle, Washington"], "include_temperature": [true, ""], "include_humidity": [true, ""]}}]}
{"id": "simple_193", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'plant_types': ['annual plants']. Expected one of [['Annual']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_193", "question": [[{"role": "user", "content": "Find the best local nurseries in Toronto with a good variety of annual plants."}]], "function": [{"name": "local_nursery.find", "description": "Locate local nurseries based on location and plant types availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city or locality where the nursery needs to be located."}, "plant_types": {"type": "array", "items": {"type": "string", "enum": ["Annual", "Perennial", "Shrub", "Tree", "Herbs", "Fruits"]}, "description": "Type of plants the nursery should provide."}}, "required": ["location", "plant_types"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"local_nursery.find\",\"parameters\":{\"location\":\"Toronto\",\"plant_types\":[\"annual plants\"]}}]\n</TOOLCALL>", "model_result_decoded": [{"local_nursery.find": {"location": "Toronto", "plant_types": ["annual plants"]}}], "possible_answer": [{"local_nursery.find": {"location": ["Toronto"], "plant_types": [["Annual"]]}}]}
{"id": "simple_196", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'date': '2022-08-16'. Expected one of ['08-16-2022']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_196", "question": [[{"role": "user", "content": "What is the air quality index in London 2022/08/16?"}]], "function": [{"name": "air_quality", "description": "Retrieve the air quality index for a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality index for."}, "date": {"type": "string", "description": "The date (month-day-year) you want to get the air quality index for."}}, "required": ["location", "date"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"air_quality\",\"parameters\":{\"location\":\"London\",\"date\":\"2022-08-16\"}}]", "model_result_decoded": [{"air_quality": {"location": "London", "date": "2022-08-16"}}], "possible_answer": [{"air_quality": {"location": ["London"], "date": ["08-16-2022"]}}]}
{"id": "simple_200", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'fuel_efficiency'. Expected type float, got int. Parameter value: 25."], "error_type": "type_error:simple", "prompt": {"id": "simple_200", "question": [[{"role": "user", "content": "How much CO2 is produced annually by a gas-fueled car that travels 12,000 miles per year, with fuel efficiency of 25 MPG ?"}]], "function": [{"name": "calculate_emissions", "description": "Calculates the annual carbon dioxide emissions produced by a vehicle based on the distance traveled, the fuel type and the fuel efficiency of the vehicle.", "parameters": {"type": "dict", "properties": {"distance": {"type": "integer", "description": "The distance travelled in miles."}, "fuel_type": {"type": "string", "description": "Type of fuel used by the vehicle."}, "fuel_efficiency": {"type": "float", "description": "The vehicle's fuel efficiency in miles per gallon."}, "efficiency_reduction": {"type": "integer", "description": "The percentage decrease in fuel efficiency per year (optional). Default is 0"}}, "required": ["distance", "fuel_type", "fuel_efficiency"]}}]}, "model_result_raw": "<TOOLCALL>[{\"function\":\"calculate_emissions\",\"parameters\":{\"distance\":12000,\"fuel_type\":\"gas\",\"fuel_efficiency\":25,\"efficiency_reduction\":0}}]</TOOLCALL>", "model_result_decoded": [{"calculate_emissions": {"distance": 12000, "fuel_type": "gas", "fuel_efficiency": 25, "efficiency_reduction": 0}}], "possible_answer": [{"calculate_emissions": {"distance": [12000], "fuel_type": ["gas"], "fuel_efficiency": ["", 25.0], "efficiency_reduction": [0, ""]}}]}
{"id": "simple_207", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'route_preference': 'driving'. Expected one of ['Shortest']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_207", "question": [[{"role": "user", "content": "Get the shortest driving distance between New York, USA and Miami, USA."}]], "function": [{"name": "calculate_shortest_distance", "description": "Calculate the shortest driving distance between two locations.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting location for the drive."}, "end_location": {"type": "string", "description": "The destination location for the drive."}, "route_preference": {"type": "string", "enum": ["Shortest", "Scenic"], "description": "The preferred type of route."}}, "required": ["start_location", "end_location", "route_preference"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"calculate_shortest_distance\",\"parameters\":{\"start_location\":\"New York, USA\",\"end_location\":\"Miami, USA\",\"route_preference\":\"driving\"}}]", "model_result_decoded": [{"calculate_shortest_distance": {"start_location": "New York, USA", "end_location": "Miami, USA", "route_preference": "driving"}}], "possible_answer": [{"calculate_shortest_distance": {"start_location": ["New York, USA", "New York City", "New York City, NY", "NYC", "NY"], "end_location": ["Miami, USA", "Miami", "Miami, FL", "FL"], "route_preference": ["Shortest"]}}]}
{"id": "simple_208", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'avoid': ['highways', 'toll']. Expected one of [['highways', 'tolls'], ['tolls', 'highways']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_208", "question": [[{"role": "user", "content": "Get me the directions from New York to Los Angeles avoiding highways and toll roads."}]], "function": [{"name": "map_service.get_directions", "description": "Retrieve directions from a starting location to an ending location, including options for route preferences.", "parameters": {"type": "dict", "properties": {"start": {"type": "string", "description": "Starting location for the route."}, "end": {"type": "string", "description": "Ending location for the route."}, "avoid": {"type": "array", "items": {"type": "string", "enum": ["tolls", "highways", "ferries"]}, "description": "Route features to avoid. Default is ['highways', 'ferries']"}}, "required": ["start", "end"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"map_service.get_directions\",\"parameters\":{\"start\":\"New York\",\"end\":\"Los Angeles\",\"avoid\":[\"highways\",\"toll\"]}}]\n</TOOLCALL>", "model_result_decoded": [{"map_service.get_directions": {"start": "New York", "end": "Los Angeles", "avoid": ["highways", "toll"]}}], "possible_answer": [{"map_service.get_directions": {"start": ["New York", "NYC"], "end": ["Los Angeles", "LA"], "avoid": [["highways", "tolls"], ["tolls", "highways"]]}}]}
{"id": "simple_209", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'facilities': ['English fiction', 'free Wi-Fi']. Expected one of [['Fiction', 'Wi-Fi'], ['Wi-Fi', 'Fiction']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_209", "question": [[{"role": "user", "content": "Locate the nearest public library in Boston, Massachusetts with English fiction section and free Wi-Fi."}]], "function": [{"name": "public_library.find_nearby", "description": "Locate nearby public libraries based on specific criteria like English fiction availability and Wi-Fi.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Boston, MA"}, "facilities": {"type": "array", "items": {"type": "string", "enum": ["Wi-Fi", "Reading Room", "Fiction", "Children Section", "Cafe"]}, "description": "Facilities and sections in public library."}}, "required": ["location", "facilities"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"public_library.find_nearby\",\"parameters\":{\"location\":\"Boston, MA\",\"facilities\":[\"English fiction\",\"free Wi-Fi\"]}}]\n</TOOLCALL>", "model_result_decoded": [{"public_library.find_nearby": {"location": "Boston, MA", "facilities": ["English fiction", "free Wi-Fi"]}}], "possible_answer": [{"public_library.find_nearby": {"location": ["Boston, MA", "Boston, Massachusetts"], "facilities": [["Fiction", "Wi-Fi"], ["Wi-Fi", "Fiction"]]}}]}
{"id": "simple_215", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'extra_info': True. Expected one of ['', False]."], "error_type": "value_error:others", "prompt": {"id": "simple_215", "question": [[{"role": "user", "content": "Give me a brief on movie 'Interstellar'"}]], "function": [{"name": "movie_details.brief", "description": "This function retrieves a brief about a specified movie.", "parameters": {"type": "dict", "properties": {"title": {"type": "string", "description": "Title of the movie"}, "extra_info": {"type": "boolean", "description": "Option to get additional information like Director, Cast, Awards etc.", "default": "false"}}, "required": ["title"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"movie_details.brief\",\"parameters\":{\"title\":\"Interstellar\",\"extra_info\":true}}]\n</TOOLCALL>", "model_result_decoded": [{"movie_details.brief": {"title": "Interstellar", "extra_info": true}}], "possible_answer": [{"movie_details.brief": {"title": ["Interstellar"], "extra_info": ["", false]}}]}
{"id": "simple_234", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'century'. Expected type integer, got str. Parameter value: '19'."], "error_type": "type_error:simple", "prompt": {"id": "simple_234", "question": [[{"role": "user", "content": "Find important Wars in European history during the 19th century."}]], "function": [{"name": "history_eu.fetch_events", "description": "Fetches significant historical events within a specific time period in European history.", "parameters": {"type": "dict", "properties": {"century": {"type": "integer", "description": "The century you are interested in."}, "region": {"type": "string", "description": "The region of Europe you are interested in.", "enum": ["Northern", "Southern", "Eastern", "Western"]}, "category": {"type": "string", "description": "Category of the historical events. Default is 'Culture'.", "enum": ["Wars", "Culture", "Politics", "Scientific", "Others"]}}, "required": ["century", "region"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"history_eu.fetch_events\",\"parameters\":{\"century\":\"19\",\"region\":\"Europe\",\"category\":\"War\"}}]", "model_result_decoded": [{"history_eu.fetch_events": {"century": "19", "region": "Europe", "category": "War"}}], "possible_answer": [{"history_eu.fetch_events": {"century": [19], "region": ["Northern", "Southern", "Eastern", "Western"], "category": ["Wars"]}}]}
{"id": "simple_241", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'event': 'American Civil War'. Expected one of ['Civil War']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_241", "question": [[{"role": "user", "content": "Who was the U.S. president during the Civil War?"}]], "function": [{"name": "US_President_During_Event", "description": "Returns the U.S. president during a specified historical event.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The historical event."}, "country": {"type": "string", "description": "The country the president leads (optional parameter, defaults to 'USA' if not specified)."}}, "required": ["event"]}}]}, "model_result_raw": "TOOLCALL\n[{\"function\":\"US_President_During_Event\",\"parameters\":{\"event\":\"American Civil War\"}}]", "model_result_decoded": [{"US_President_During_Event": {"event": "American Civil War"}}], "possible_answer": [{"US_President_During_Event": {"event": ["Civil War"], "country": ["USA", ""]}}]}
{"id": "simple_249", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'include_people': True. Expected one of [False, '']."], "error_type": "value_error:others", "prompt": {"id": "simple_249", "question": [[{"role": "user", "content": "Tell me more about Christianity and its history till the 14th century"}]], "function": [{"name": "religion.history_info", "description": "Provides comprehensive historical details about a specified religion till a specified century.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "The name of the religion for which historical details are needed."}, "till_century": {"type": "integer", "description": "The century till which historical details are needed."}, "include_people": {"type": "boolean", "description": "To include influential people related to the religion during that time period, default is False"}}, "required": ["religion", "till_century"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"religion.history_info\",\"parameters\":{\"religion\":\"Christianity\",\"till_century\":14,\"include_people\":true}}]", "model_result_decoded": [{"religion.history_info": {"religion": "Christianity", "till_century": 14, "include_people": true}}], "possible_answer": [{"religion.history_info": {"religion": ["Christianity"], "till_century": [14], "include_people": [false, ""]}}]}
{"id": "simple_251", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Optional parameter 'source' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_251", "question": [[{"role": "user", "content": "What is the earliest reference of Jesus Christ in history from historical record?"}]], "function": [{"name": "get_earliest_reference", "description": "Retrieve the earliest historical reference of a person.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the person."}, "source": {"type": "string", "enum": ["scriptures", "historical records"], "description": "Source to fetch the reference. Default is 'scriptures'"}}, "required": ["name"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"get_earliest_reference\",\"parameters\":{\"name\":\"Jesus Christ\"}}]", "model_result_decoded": [{"get_earliest_reference": {"name": "Jesus Christ"}}], "possible_answer": [{"get_earliest_reference": {"name": ["Jesus Christ"], "source": ["historical records"]}}]}
{"id": "simple_260", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Unexpected dict key parameter: 'width'.", "Missing dict key parameter: 'type'."], "error_type": "value_error:dict_key", "prompt": {"id": "simple_260", "question": [[{"role": "user", "content": "Calculate how many gallons of paint is required to paint a wall with width of 20ft and height of 12ft, assuming 1 gallon covers approximately 350 sq.ft. Don't include window area of 15 sq.ft."}]], "function": [{"name": "paint_requirement.calculate", "description": "Calculate the amount of paint required to paint a given area. Account for coverage efficiency of the paint and exclusions (like windows).", "parameters": {"type": "dict", "properties": {"area": {"type": "dict", "properties": {"width": {"type": "integer", "description": "The width of the area to be painted in feet."}, "height": {"type": "integer", "description": "The height of the area to be painted in feet."}}, "description": "The area to be painted."}, "paint_coverage": {"type": "integer", "description": "Coverage area per gallon of the paint in square feet.", "default": 350}, "exclusion": {"type": "dict", "properties": {"type": {"type": "string", "description": "The type of the exclusion e.g window, door etc."}, "area": {"type": "integer", "description": "The area of the exclusion in square feet."}}, "description": "Area not to be painted. Default to not use any exclusion if not specified."}}, "required": ["area", "paint_coverage"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"paint_requirement.calculate\",\"parameters\":{\"area\":{\"width\":20,\"height\":12},\"paint_coverage\":350,\"exclusion\":{\"width\":0,\"height\":12,\"length\":15}}}]\n</TOOLCALL>", "model_result_decoded": [{"paint_requirement.calculate": {"area": {"width": 20, "height": 12}, "paint_coverage": 350, "exclusion": {"width": 0, "height": 12, "length": 15}}}], "possible_answer": [{"paint_requirement.calculate": {"area": [{"width": [20], "height": [12]}], "paint_coverage": [350], "exclusion": [{"type": ["window"], "area": [15]}]}}]}
{"id": "simple_267", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York'. Expected one of ['New York City, NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_267", "question": [[{"role": "user", "content": "Find the top rated modern sculpture exhibition happening in New York in the upcoming month."}]], "function": [{"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state where the exhibition is held, e.g., New York City, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events if not specified."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold. Default is 'low'"}}, "required": ["location", "art_form"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"find_exhibition\",\"parameters\":{\"location\":\"New York\",\"art_form\":\"modern sculpture\",\"month\":\"upcoming\"}}]\n</TOOLCALL>", "model_result_decoded": [{"find_exhibition": {"location": "New York", "art_form": "modern sculpture", "month": "upcoming"}}], "possible_answer": [{"find_exhibition": {"location": ["New York City, NY"], "art_form": ["sculpture", "modern sculpture"], "month": [""], "user_ratings": ["high"]}}]}
{"id": "simple_275", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'number'. Expected type integer, got str. Parameter value: '5'."], "error_type": "type_error:simple", "prompt": {"id": "simple_275", "question": [[{"role": "user", "content": "Get the list of top 5 popular artworks at the Metropolitan Museum of Art. Please sort by popularity."}]], "function": [{"name": "metropolitan_museum.get_top_artworks", "description": "Fetches the list of popular artworks at the Metropolitan Museum of Art. Results can be sorted based on popularity.", "parameters": {"type": "dict", "properties": {"number": {"type": "integer", "description": "The number of artworks to fetch"}, "sort_by": {"type": "string", "description": "The criteria to sort the results on. Default is 'popularity'.", "enum": ["popularity", "chronological", "alphabetical"]}}, "required": ["number"]}}]}, "model_result_raw": "TOOLCALL\n[{\"function\":\"metropolitan_museum.get_top_artworks\",\"parameters\":{\"number\":\"5\",\"sort_by\":\"popularity\"}}]", "model_result_decoded": [{"metropolitan_museum.get_top_artworks": {"number": "5", "sort_by": "popularity"}}], "possible_answer": [{"metropolitan_museum.get_top_artworks": {"number": [5], "sort_by": ["popularity", ""]}}]}
{"id": "simple_278", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'features': ['price', 'ratings']. Expected one of [['price', 'rating']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_278", "question": [[{"role": "user", "content": "Find me the average price and ratings of piano from Yamaha."}]], "function": [{"name": "get_instrument_details", "description": "Retrieve the average price and ratings of an instrument from a particular manufacturer.", "parameters": {"type": "dict", "properties": {"instrument": {"type": "string", "description": "The name of the instrument."}, "manufacturer": {"type": "string", "description": "The manufacturer of the instrument."}, "features": {"type": "array", "items": {"type": "string", "enum": ["price", "rating"]}, "description": "The features to retrieve about the instrument. Default is 'price'"}}, "required": ["instrument", "manufacturer"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"get_instrument_details\",\"parameters\":{\"instrument\":\"piano\",\"manufacturer\":\"Yamaha\",\"features\":[\"price\",\"ratings\"]}}]\n</TOOLCALL>", "model_result_decoded": [{"get_instrument_details": {"instrument": "piano", "manufacturer": "Yamaha", "features": ["price", "ratings"]}}], "possible_answer": [{"get_instrument_details": {"instrument": ["piano"], "manufacturer": ["Yamaha"], "features": [["price", "rating"]]}}]}
{"id": "simple_299", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'key': 'C# major'. Expected one of ['C#', 'C sharp']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_299", "question": [[{"role": "user", "content": "What is the musical scale associated with C sharp major?"}]], "function": [{"name": "musical_scale", "description": "Get the musical scale of a specific key in music theory.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The musical key for which the scale will be found."}, "scale_type": {"type": "string", "default": "major", "description": "The type of musical scale."}}, "required": ["key"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"musical_scale\",\"parameters\":{\"key\":\"C# major\",\"scale_type\":\"major\"}}]", "model_result_decoded": [{"musical_scale": {"key": "C# major", "scale_type": "major"}}], "possible_answer": [{"musical_scale": {"key": ["C#", "C sharp"], "scale_type": ["major", ""]}}]}
{"id": "simple_302", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'hits'. Expected type integer, got str. Parameter value: '180'."], "error_type": "type_error:simple", "prompt": {"id": "simple_302", "question": [[{"role": "user", "content": "Calculate the batting average for a baseball player who has 180 hits and 600 at-bats. Round to 3 decimals."}]], "function": [{"name": "calculate_batting_average", "description": "Calculate the batting average for a baseball player based on their number of hits and at-bats.", "parameters": {"type": "dict", "properties": {"hits": {"type": "integer", "description": "The number of hits."}, "at_bats": {"type": "integer", "description": "The number of at-bats."}, "decimal_places": {"type": "integer", "description": "The number of decimal places to return in the batting average. Default is 3."}}, "required": ["hits", "at_bats"]}}]}, "model_result_raw": "<TOOLCALL>[{\"function\":\"calculate_batting_average\",\"parameters\":{\"hits\":\"180\",\"at_bats\":\"600\",\"decimal_places\":\"3\"}}]</TOOLCALL>", "model_result_decoded": [{"calculate_batting_average": {"hits": "180", "at_bats": "600", "decimal_places": "3"}}], "possible_answer": [{"calculate_batting_average": {"hits": [180], "at_bats": [600], "decimal_places": [3, ""]}}]}
{"id": "simple_305", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'performance_indicator': ['goals', 'assists']. Expected one of [['Goals Scored', 'Assists Made']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_305", "question": [[{"role": "user", "content": "Calculate the overall goal and assist of soccer player Messi in La Liga 2020-2021 season"}]], "function": [{"name": "sports_stats.get_performance", "description": "Compute the performance score of a soccer player given his game stats for a specific tournament in a season.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "Name of the player."}, "tournament": {"type": "string", "description": "Name of the soccer tournament."}, "season": {"type": "string", "description": "Specific season in format 'YYYY-YYYY'."}, "performance_indicator": {"type": "array", "items": {"type": "string", "enum": ["Goals Scored", "Assists Made", "Saves Made", "Cards Received"]}, "description": "Array of performance indicators. Use as much as possible. Default to use all if not specified."}}, "required": ["player_name", "tournament", "season"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"sports_stats.get_performance\",\"parameters\":{\"player_name\":\"Messi\",\"tournament\":\"La Liga\",\"season\":\"2020-2021\",\"performance_indicator\":[\"goals\",\"assists\"]}}]\n</TOOLCALL>", "model_result_decoded": [{"sports_stats.get_performance": {"player_name": "Messi", "tournament": "La Liga", "season": "2020-2021", "performance_indicator": ["goals", "assists"]}}], "possible_answer": [{"sports_stats.get_performance": {"player_name": ["Messi", "Lionel Messi"], "tournament": ["La Liga"], "season": ["2020-2021"], "performance_indicator": [["Goals Scored", "Assists Made"]]}}]}
{"id": "simple_320", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'detailed'. Expected type boolean, got str. Parameter value: 'true'."], "error_type": "type_error:simple", "prompt": {"id": "simple_320", "question": [[{"role": "user", "content": "Fetch the basketball league standings, where Golden State Warriors stand in current 2022-2023 season with details"}]], "function": [{"name": "sports_ranking.get_team_position", "description": "Retrieve a team's position and stats in the basketball league for a given season.", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "The name of the team."}, "season": {"type": "string", "description": "The season for which data should be fetched."}, "detailed": {"type": "boolean", "description": "Flag to retrieve detailed stats or just the position.", "default": false}}, "required": ["team", "season"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"sports_ranking.get_team_position\",\"parameters\":{\"team\":\"Golden State Warriors\",\"season\":\"2022-2023\",\"detailed\":\"true\"}}]", "model_result_decoded": [{"sports_ranking.get_team_position": {"team": "Golden State Warriors", "season": "2022-2023", "detailed": "true"}}], "possible_answer": [{"sports_ranking.get_team_position": {"team": ["Golden State Warriors", "GSW"], "season": ["2022-2023"], "detailed": [true]}}]}
{"id": "simple_323", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'gender': 'woman'. Expected one of ['women']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_323", "question": [[{"role": "user", "content": "Who is ranked as the top player in woman tennis?"}]], "function": [{"name": "sports_ranking.get_top_player", "description": "Get the top player in a specific sport.", "parameters": {"type": "dict", "properties": {"sport": {"type": "string", "description": "The type of sport."}, "gender": {"type": "string", "description": "The gender of the sport category. Optional.", "default": "men"}}, "required": ["sport"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"sports_ranking.get_top_player\",\"parameters\":{\"sport\":\"tennis\",\"gender\":\"woman\"}}]", "model_result_decoded": [{"sports_ranking.get_top_player": {"sport": "tennis", "gender": "woman"}}], "possible_answer": [{"sports_ranking.get_top_player": {"sport": ["tennis"], "gender": ["women"]}}]}
{"id": "simple_324", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'include_opponent'. Expected type boolean, got str. Parameter value: 'true'."], "error_type": "type_error:simple", "prompt": {"id": "simple_324", "question": [[{"role": "user", "content": "Find the score of last game for Los Angeles Lakers including its opponent name."}]], "function": [{"name": "team_score.get_latest", "description": "Retrieve the score of the most recent game for a specified sports team.", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "Name of the sports team."}, "include_opponent": {"type": "boolean", "description": "Include the name of the opponent team in the return.", "default": false}}, "required": ["team"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"team_score.get_latest\",\"parameters\":{\"team\":\"Los Angeles Lakers\",\"include_opponent\":\"true\"}}]", "model_result_decoded": [{"team_score.get_latest": {"team": "Los Angeles Lakers", "include_opponent": "true"}}], "possible_answer": [{"team_score.get_latest": {"team": ["Los Angeles Lakers", "Lakers"], "include_opponent": [true]}}]}
{"id": "simple_333", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'details': ['high', 'low', 'humidity', 'precipitation']. Expected one of [['high_low_temperature', 'humidity', 'precipitation']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_333", "question": [[{"role": "user", "content": "Find the high and low temperatures, humidity, and precipitation for London, United Kingdom for the next 3 days."}]], "function": [{"name": "detailed_weather_forecast", "description": "Retrieve a detailed weather forecast for a specific location and time frame, including high/low temperatures, humidity, and precipitation.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}, "details": {"type": "array", "items": {"type": "string", "enum": ["high_low_temperature", "humidity", "precipitation"]}, "description": "Specific weather details required in the forecast."}}, "required": ["location", "days", "details"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"detailed_weather_forecast\",\"parameters\":{\"location\":\"London, United Kingdom\",\"days\":3,\"details\":[\"high\",\"low\",\"humidity\",\"precipitation\"]}}]\n</TOOLCALL>", "model_result_decoded": [{"detailed_weather_forecast": {"location": "London, United Kingdom", "days": 3, "details": ["high", "low", "humidity", "precipitation"]}}], "possible_answer": [{"detailed_weather_forecast": {"location": ["London, United Kingdom", "London"], "days": [3], "details": [["high_low_temperature", "humidity", "precipitation"]]}}]}
{"id": "simple_347", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'include_stats'. Expected type boolean, got str. Parameter value: 'true'."], "error_type": "type_error:simple", "prompt": {"id": "simple_347", "question": [[{"role": "user", "content": "Get me the details of the last game played by Liverpool F.C. Include its statistics."}]], "function": [{"name": "soccer.get_last_match", "description": "Retrieve the details of the last match played by a specified soccer club.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the soccer club."}, "include_stats": {"type": "boolean", "description": "If true, include match statistics like possession, shots on target etc. Default is false."}}, "required": ["team_name"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"soccer.get_last_match\",\"parameters\":{\"team_name\":\"Liverpool F.C.\",\"include_stats\":\"true\"}}]", "model_result_decoded": [{"soccer.get_last_match": {"team_name": "Liverpool F.C.", "include_stats": "true"}}], "possible_answer": [{"soccer.get_last_match": {"team_name": ["Liverpool F.C.", "Liverpool"], "include_stats": [true]}}]}
{"id": "simple_356", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'servings'. Expected type integer, got str. Parameter value: '2'."], "error_type": "type_error:simple", "prompt": {"id": "simple_356", "question": [[{"role": "user", "content": "Find me a recipe that serves 2 people, is vegan, and takes under 30 minutes to prepare."}]], "function": [{"name": "recipe_finder.find", "description": "Find a recipe based on dietary preferences, number of servings, and preparation time.", "parameters": {"type": "dict", "properties": {"servings": {"type": "integer", "description": "The number of people that the recipe should serve."}, "diet": {"type": "string", "description": "Any dietary restrictions like 'vegan', 'vegetarian', 'gluten-free' etc."}, "prep_time": {"type": "integer", "description": "The maximum amount of time (in minutes) the preparation should take. Default is 60 minutes."}}, "required": ["servings", "diet"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"recipe_finder.find\",\"parameters\":{\"servings\":\"2\",\"diet\":\"vegan\",\"prep_time\":\"30\"}}]\n</TOOLCALL>", "model_result_decoded": [{"recipe_finder.find": {"servings": "2", "diet": "vegan", "prep_time": "30"}}], "possible_answer": [{"recipe_finder.find": {"servings": [2], "diet": ["vegan"], "prep_time": [30]}}]}
{"id": "simple_365", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'quantity'. Expected type integer, got str. Parameter value: '2'."], "error_type": "type_error:simple", "prompt": {"id": "simple_365", "question": [[{"role": "user", "content": "How many ounces in 2 pounds of butter?"}]], "function": [{"name": "cooking_conversion.convert", "description": "Convert cooking measurements from one unit to another.", "parameters": {"type": "dict", "properties": {"quantity": {"type": "integer", "description": "The quantity to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from."}, "to_unit": {"type": "string", "description": "The unit to convert to."}, "item": {"type": "string", "description": "The item to be converted."}}, "required": ["quantity", "from_unit", "to_unit", "item"]}}]}, "model_result_raw": "<TOOLCALL>[{\"function\":\"cooking_conversion.convert\",\"parameters\":{\"quantity\":\"2\",\"from_unit\":\"pounds\",\"to_unit\":\"ounces\",\"item\":\"butter\"}}]</TOOLCALL>", "model_result_decoded": [{"cooking_conversion.convert": {"quantity": "2", "from_unit": "pounds", "to_unit": "ounces", "item": "butter"}}], "possible_answer": [{"cooking_conversion.convert": {"quantity": [2], "from_unit": ["pound", "pounds", "lb", "lbs"], "to_unit": ["ounce", "ounces", "oz"], "item": ["butter"]}}]}
{"id": "simple_366", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'value'. Expected type integer, got str. Parameter value: '2'."], "error_type": "type_error:simple", "prompt": {"id": "simple_366", "question": [[{"role": "user", "content": "How many teaspoons are in 2 tablespoons for measurement in my recipe?"}]], "function": [{"name": "recipe.unit_conversion", "description": "Convert a value from one kitchen unit to another for cooking purposes.", "parameters": {"type": "dict", "properties": {"value": {"type": "integer", "description": "The value to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from. Supports 'teaspoon', 'tablespoon', 'cup', etc."}, "to_unit": {"type": "string", "description": "The unit to convert to. Supports 'teaspoon', 'tablespoon', 'cup', etc."}, "precision": {"type": "integer", "description": "The precision to round the output to, in case of a non-integer result. Optional, default is 1."}}, "required": ["value", "from_unit", "to_unit"]}}]}, "model_result_raw": "<TOOLCALL>[{\"function\":\"recipe.unit_conversion\",\"parameters\":{\"value\":\"2\",\"from_unit\":\"tablespoon\",\"to_unit\":\"teaspoon\"}}]</TOOLCALL>", "model_result_decoded": [{"recipe.unit_conversion": {"value": "2", "from_unit": "tablespoon", "to_unit": "teaspoon"}}], "possible_answer": [{"recipe.unit_conversion": {"value": [2], "from_unit": ["tablespoon", "tbsp"], "to_unit": ["teaspoon", "tsp"], "precision": [1, ""]}}]}
{"id": "simple_368", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'weight_kg'. Expected type float, got str. Parameter value: '1.5'."], "error_type": "type_error:simple", "prompt": {"id": "simple_368", "question": [[{"role": "user", "content": "How much time will it take to cook a roast chicken of 1.5 kg?"}]], "function": [{"name": "calculate_cooking_time", "description": "Calculate the cooking time for a roast chicken.", "parameters": {"type": "dict", "properties": {"weight_kg": {"type": "float", "description": "The weight of the chicken in kilograms."}, "cooking_method": {"type": "string", "description": "The method of cooking, defaults to 'roast'."}, "temp_celsius": {"type": "integer", "description": "The cooking temperature in degrees celsius, defaults to 180."}}, "required": ["weight_kg"]}}]}, "model_result_raw": "<TOOLCALL>[{\"function\":\"calculate_cooking_time\",\"parameters\":{\"weight_kg\":\"1.5\"}}]</TOOLCALL>", "model_result_decoded": [{"calculate_cooking_time": {"weight_kg": "1.5"}}], "possible_answer": [{"calculate_cooking_time": {"weight_kg": [1.5], "cooking_method": ["", "roast"], "temp_celsius": ["", 180]}}]}
{"id": "simple_369", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'categories': ['organic fruits', 'organic vegetables']. Expected one of [['Organic', 'Vegetables', 'Fruits'], ['Organic', 'Fruits', 'Vegetables'], ['Vegetables', 'Fruits', 'Organic'], ['Fruits', 'Vegetables', 'Organic'], ['Fruits', 'Organic', 'Vegetables'], ['Vegetables', 'Organic', 'Fruits']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_369", "question": [[{"role": "user", "content": "Find a grocery store near me with organic fruits and vegetables in Houston."}]], "function": [{"name": "grocery_store.find_nearby", "description": "Locate nearby grocery stores based on specific criteria like organic fruits and vegetables.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Houston, TX"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["Organic", "Vegetables", "Fruits", "Dairy", "Seafood", "Bakery"]}, "description": "Categories of items to be found in the grocery store. Default is all if not specified."}}, "required": ["location"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"grocery_store.find_nearby\",\"parameters\":{\"location\":\"Houston, TX\",\"categories\":[\"organic fruits\",\"organic vegetables\"]}}]\n</TOOLCALL>", "model_result_decoded": [{"grocery_store.find_nearby": {"location": "Houston, TX", "categories": ["organic fruits", "organic vegetables"]}}], "possible_answer": [{"grocery_store.find_nearby": {"location": ["Houston", "Houston, TX"], "categories": [["Organic", "Vegetables", "Fruits"], ["Organic", "Fruits", "Vegetables"], ["Vegetables", "Fruits", "Organic"], ["Fruits", "Vegetables", "Organic"], ["Fruits", "Organic", "Vegetables"], ["Vegetables", "Organic", "Fruits"]]}}]}
{"id": "simple_370", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'quantity': [3, 5]. Expected one of [[3, 1]]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_370", "question": [[{"role": "user", "content": "Order three bottles of olive oil and a five pound bag of rice from Safeway in Palo Alto."}]], "function": [{"name": "safeway.order", "description": "Order specified items from a Safeway location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location of the Safeway store, e.g. Palo Alto, CA."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order."}, "quantity": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item in the order list."}}, "required": ["location", "items", "quantity"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"safeway.order\",\"parameters\":{\"location\":\"Palo Alto\",\"items\":[\"olive oil\",\"rice\"],\"quantity\":[3,5]}}]\n</TOOLCALL>", "model_result_decoded": [{"safeway.order": {"location": "Palo Alto", "items": ["olive oil", "rice"], "quantity": [3, 5]}}], "possible_answer": [{"safeway.order": {"location": ["Palo Alto", "Palo Alto, CA"], "items": [["olive oil", "rice"], ["olive oil", "bag of rice"]], "quantity": [[3, 1]]}}]}
{"id": "simple_373", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'pack_size': [12]. Expected one of [[1, 1, 12]]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_373", "question": [[{"role": "user", "content": "I want to buy apples, rice, and 12 pack of bottled water from a Walmart near San Jose. Show me the product information and stock availability."}]], "function": [{"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified."}}, "required": ["loc", "product_list"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"walmart.purchase\",\"parameters\":{\"loc\":\"San Jose\",\"product_list\":[\"apples\",\"rice\",\"bottled water\"],\"pack_size\":[12]}}]\n</TOOLCALL>", "model_result_decoded": [{"walmart.purchase": {"loc": "San Jose", "product_list": ["apples", "rice", "bottled water"], "pack_size": [12]}}], "possible_answer": [{"walmart.purchase": {"loc": ["San Jose", "San Jose, CA"], "product_list": [["apples", "rice", "bottled water"], ["apples", "rice", "water"]], "pack_size": [[1, 1, 12]]}}]}
{"id": "simple_374", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'information': ['protein', 'calories', 'carbs']. Expected one of [['Protein', 'Calories', 'Carbohydrates']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_374", "question": [[{"role": "user", "content": "Check the amount of protein, calories and carbs in an avocado from Walmart."}]], "function": [{"name": "grocery_info.nutritional_info", "description": "Retrieve nutritional information for a given food item from a particular store", "parameters": {"type": "dict", "properties": {"store": {"type": "string", "description": "The store where the item is available"}, "food": {"type": "string", "description": "Food item for which information is needed."}, "information": {"type": "array", "items": {"type": "string", "enum": ["Protein", "Calories", "Carbohydrates", "Fat", "Fiber"]}, "description": "Nutritional details required."}}, "required": ["store", "food", "information"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"grocery_info.nutritional_info\",\"parameters\":{\"store\":\"Walmart\",\"food\":\"avocado\",\"information\":[\"protein\",\"calories\",\"carbs\"]}}]\n</TOOLCALL>", "model_result_decoded": [{"grocery_info.nutritional_info": {"store": "Walmart", "food": "avocado", "information": ["protein", "calories", "carbs"]}}], "possible_answer": [{"grocery_info.nutritional_info": {"store": ["Walmart"], "food": ["avocado", "Avocado"], "information": [["Protein", "Calories", "Carbohydrates"]]}}]}
{"id": "simple_375", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_375", "question": [[{"role": "user", "content": "Check the total price for three pumpkins and two dozen eggs at Walmart."}]], "function": [{"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "dict", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional). Default to all if not specified."}}, "required": ["items", "quantities"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"walmart.check_price\",\"parameters\":{\"items\":[\"pumpkin\",\"pumpkin\",\"pumpkin\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs\",\"eggs", "model_result_decoded": [], "possible_answer": [{"walmart.check_price": {"items": [["pumpkins", "eggs"], ["pumpkin", "dozen eggs"]], "quantities": [[3, 24], [3, 2]], "store_location": [""]}}]}
{"id": "simple_384", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'adults'. Expected type integer, got str. Parameter value: '2'."], "error_type": "type_error:simple", "prompt": {"id": "simple_384", "question": [[{"role": "user", "content": "Book a hotel room for two adults and one child in Paris, France from July 10, 2022 to July 20, 2022."}]], "function": [{"name": "hotel_booking.book", "description": "Book a hotel room given the city, date, and the number of adults and children.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city where the hotel is located."}, "from_date": {"type": "string", "description": "The start date of the booking. The format is MM-DD-YYYY."}, "to_date": {"type": "string", "description": "The end date of the booking. The format is MM-DD-YYYY."}, "adults": {"type": "integer", "description": "The number of adults for the booking."}, "children": {"type": "integer", "description": "The number of children for the booking."}, "room_type": {"type": "string", "description": "The type of the room, default is 'Standard'. Options are 'Standard', 'Deluxe', 'Suite'.", "default": "Standard"}}, "required": ["city", "from_date", "to_date", "adults", "children"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"hotel_booking.book\",\"parameters\":{\"city\":\"Paris, France\",\"from_date\":\"07-10-2022\",\"to_date\":\"07-20-2022\",\"adults\":\"2\",\"children\":\"1\"}}]", "model_result_decoded": [{"hotel_booking.book": {"city": "Paris, France", "from_date": "07-10-2022", "to_date": "07-20-2022", "adults": "2", "children": "1"}}], "possible_answer": [{"hotel_booking.book": {"city": ["Paris", "Paris, France"], "from_date": ["07-10-2022", "2022-07-10", "10/07/2022", "Jul.10,2022"], "to_date": ["07-20-2022", "2022-07-20", "20/07/2022", "Jul.20,2022"], "adults": [2], "children": [1], "room_type": ["Standard", ""]}}]}
{"id": "simple_390", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'amount'. Expected type integer, got str. Parameter value: '150'."], "error_type": "type_error:simple", "prompt": {"id": "simple_390", "question": [[{"role": "user", "content": "Convert 150 Euros to Canadian dollars."}]], "function": [{"name": "currency_conversion.convert", "description": "Convert a value from one currency to another.", "parameters": {"type": "dict", "properties": {"amount": {"type": "integer", "description": "The amount to be converted."}, "from_currency": {"type": "string", "description": "The currency to convert from."}, "to_currency": {"type": "string", "description": "The currency to convert to."}}, "required": ["amount", "from_currency", "to_currency"]}}]}, "model_result_raw": "<TOOLCALL>[{\"function\":\"currency_conversion.convert\",\"parameters\":{\"amount\":\"150\",\"from_currency\":\"Euros\",\"to_currency\":\"Canadian dollars\"}}]</TOOLCALL>", "model_result_decoded": [{"currency_conversion.convert": {"amount": "150", "from_currency": "Euros", "to_currency": "Canadian dollars"}}], "possible_answer": [{"currency_conversion.convert": {"amount": [150], "from_currency": ["EUR", "Euros"], "to_currency": ["CAD", "Canadian dollars"]}}]}
{"id": "simple_397", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'consider_terrain'. Expected type boolean, got str. Parameter value: 'true'."], "error_type": "type_error:simple", "prompt": {"id": "simple_397", "question": [[{"role": "user", "content": "Find the distance between New York and Boston, accounting for terrain."}]], "function": [{"name": "distance_calculator.calculate", "description": "Calculate the distance between two locations, considering terrain.", "parameters": {"type": "dict", "properties": {"origin": {"type": "string", "description": "Starting location of the distance measurement."}, "destination": {"type": "string", "description": "Destination location of the distance measurement."}, "consider_terrain": {"type": "boolean", "description": "Whether to account for terrain in distance calculation, defaults to false."}}, "required": ["origin", "destination"]}}]}, "model_result_raw": "TOOLCALL\n[{\"function\":\"distance_calculator.calculate\",\"parameters\":{\"origin\":\"New York\",\"destination\":\"Boston\",\"consider_terrain\":\"true\"}}]", "model_result_decoded": [{"distance_calculator.calculate": {"origin": "New York", "destination": "Boston", "consider_terrain": "true"}}], "possible_answer": [{"distance_calculator.calculate": {"origin": ["New York", "New York City", "New York City, NY", "New York, NY", "NYC"], "destination": ["Boston"], "consider_terrain": [true]}}]}
{"id": "simple_398", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'museum_name': 'The Metropolitan Museum of Art'. Expected one of ['Metropolitan Museum of Art', 'The Met']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_398", "question": [[{"role": "user", "content": "What are the opening hours of the Metropolitan Museum of Art on Saturday?"}]], "function": [{"name": "get_museum_hours", "description": "Retrieve opening hours of a specified museum for the specified day.", "parameters": {"type": "dict", "properties": {"museum_name": {"type": "string", "description": "The name of the museum."}, "day": {"type": "string", "description": "Day of the week.", "enum": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]}}, "required": ["museum_name", "day"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"get_museum_hours\",\"parameters\":{\"museum_name\":\"The Metropolitan Museum of Art\",\"day\":\"Saturday\"}}]", "model_result_decoded": [{"get_museum_hours": {"museum_name": "The Metropolitan Museum of Art", "day": "Saturday"}}], "possible_answer": [{"get_museum_hours": {"museum_name": ["Metropolitan Museum of Art", "The Met"], "day": ["Saturday"]}}]}
{"id": "simple_399", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'rating': 5. Expected one of [4]."], "error_type": "value_error:others", "prompt": {"id": "simple_399", "question": [[{"role": "user", "content": "Find me the best Italian restaurants in New York City with average customer ratings of more than 4 and accepts credit cards."}]], "function": [{"name": "restaurant_search", "description": "Locates top rated restaurants based on specific criteria such as type of cuisine, ratings, and facilities.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. New York City, NY"}, "cuisine": {"type": "string", "description": "Preferred type of cuisine e.g., Italian, Indian, American, etc."}, "rating": {"type": "integer", "description": "Minimum average customer rating out of 5"}, "accepts_credit_cards": {"type": "boolean", "description": "If the restaurant should accept credit cards."}}, "required": ["location", "cuisine", "rating", "accepts_credit_cards"]}}]}, "model_result_raw": "<TOOLCALL>\n[{\"function\":\"restaurant_search\",\"parameters\":{\"location\":\"New York City, NY\",\"cuisine\":\"Italian\",\"rating\":5,\"accepts_credit_cards\":true}}]\n</TOOLCALL>", "model_result_decoded": [{"restaurant_search": {"location": "New York City, NY", "cuisine": "Italian", "rating": 5, "accepts_credit_cards": true}}], "possible_answer": [{"restaurant_search": {"location": ["New York City", "New York City, NY", "NYC"], "cuisine": ["Italian"], "rating": [4], "accepts_credit_cards": [true]}}]}