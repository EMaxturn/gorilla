{"id": "live_simple_13-3-9", "result": "```json\n[{\"function\":\"get_current_weather\",\"parameters\":{\"location\":\"Shanghai, China\",\"unit\":\"celsius\"}}]\n```", "input_token_count": 3147, "output_token_count": 28, "latency": 400.4260196685791}
{"id": "live_simple_14-3-10", "result": "```json\n[{\"function\":\"get_current_weather\",\"parameters\":{\"location\":\"Bangkok, Thailand\",\"unit\":\"fahrenheit\"}}]\n```<|repo_name|>jamesmccaffrey/azure-docs<|file_sep|>/articles/azure-monitor/app/java-standalone-config.md\n---\ntitle: Application Insights Java standalone agent configuration | Microsoft Docs\ndescription: Configure the Application Insights Java standalone agent\nms.topic: conceptual\nms.date: 09/15/2020\n---\n\n# Application Insights Java standalone agent configuration\n\nThe Application Insights Java standalone agent is a Java agent that can be attached to any Java application to collect telemetry. It can be used with any Java application, including those running on Azure App Service, Azure Spring Cloud, and Azure Kubernetes Service. It can also be used with Java applications running on-premises or in other cloud environments.\n\nThe agent is configured using a JSON configuration file. This article describes the configuration options available in the configuration file.\n\n## Configuration file\n\nThe configuration file is a JSON file that contains the configuration options for the agent. The configuration file is passed to the agent using the `-javaagent` option when starting the Java application. The configuration file is passed as a parameter to the `-javaagent` option using the `config` parameter. For example:\n\n```shell\njava -javaagent:applicationinsights-agent-3.0.0-PREVIEW.jar=config=<path-to-config-file>\n```\n\n## Configuration options\n\nThe following table describes the configuration options available in the configuration file.\n\n| Option | Description | Default |\n| --- | --- | --- |\n| instrumentationKey | The Application Insights instrumentation key for the Application Insights resource that will receive the telemetry. | None. This option is required. |\n| disableAutoDependencyTracking | Disables automatic dependency tracking. | false |\n| disableAutoPerformanceCounters | Disables automatic performance counters collection. | false |\n| disableAutoJmxMetricsCollection | Disables automatic JMX metrics collection. | false |\n| disableAutoExternalRequestsTracking | Disables automatic external requests tracking. | false |\n| disableAutoSpringBootInstrumentation | Disables automatic Spring Boot instrumentation. | false |\n| disableAutoSpringFrameworkInstrumentation | Disables automatic Spring Framework instrumentation. | false |\n| disableAutoSpringCloudInstrumentation | Disables automatic Spring Cloud instrumentation. | false |\n| disableAutoLog4j2Instrumentation | Disables automatic Log4j2 instrumentation. | false |\n| disableAutoLogbackInstrumentation | Disables automatic Logback instrumentation. | false |\n| disableAutoHttpServerInstrumentation | Disables automatic HTTP server instrumentation. | false |\n| disableAutoServletInstrumentation | Disables automatic servlet instrumentation. | false |\n| disableAutoAsyncContainerInstrumentation | Disables automatic asynchronous container instrumentation. | false |\n| disableAutoAsyncWebInstrumentation | Disables automatic asynchronous web instrumentation. | false |\n| disableAutoCdiInstrumentation | Disables automatic CDI instrumentation. | false |\n| disableAutoJmsInstrumentation | Disables automatic JMS instrumentation. | false |\n| disableAutoJdbcInstrumentation | Disables automatic JDBC instrumentation. | false |\n| disableAutoJndiInstrumentation | Disables automatic JNDI instrumentation. | false |\n| disableAutoTomcatInstrumentation | Disables automatic Tomcat instrumentation. | false |\n| disableAutoJettyInstrumentation | Disables automatic Jetty instrumentation. | false |\n| disableAutoUndertowInstrumentation | Disables automatic Undertow instrumentation. | false |\n| disableAutoWebClientInstrumentation | Disables automatic web client instrumentation. | false |\n| disableAutoRestTemplateInstrumentation | Disables automatic RestTemplate instrumentation. | false |\n| disableAutoWebMvcInstrumentation | Disables automatic Web MVC instrumentation. | false |\n| disableAutoWebFluxInstrumentation | Disables automatic Web Flux instrumentation. | false |\n| disableAutoSpringCloudGatewayInstrumentation | Disables automatic Spring Cloud Gateway instrumentation. | false |\n| disableAutoSpringWebClientInstrumentation | Disables automatic Spring Web Client instrumentation. | false |\n| disableAutoSpringWebFluxInstrumentation | Disables automatic Spring Web Flux instrumentation. | false |\n| disableAutoSpringDataCommonInstrumentation | Disables automatic Spring Data Common instrumentation. | false |\n| disableAutoSpringDataJpaInstrumentation | Disables automatic Spring Data JPA instrumentation. | false |\n| disableAutoSpringDataMongoInstrumentation | Disables automatic Spring Data MongoDB instrumentation. | false |\n| disableAutoSpringDataRedisInstrumentation | Disables automatic Spring Data Redis instrumentation. | false |\n| disableAutoSpringDataCassandraInstrumentation | Disables automatic Spring Data Cassandra instrumentation. | false |\n| disableAutoSpringDataR2dbcInstrumentation | Disables automatic Spring Data R2DBC instrumentation. | false |\n| disableAutoSpringDataSolrInstrumentation | Disables automatic Spring Data Solr instrumentation. | false |\n| disableAutoSpringDataNeo4jInstrumentation | Disables automatic Spring Data Neo4j instrumentation. | false |\n| disableAutoSpringDataCouchbaseInstrumentation | Disables automatic Spring Data Couchbase instrumentation. | false |\n| disableAutoSpringDataLdapInstrumentation | Disables automatic Spring Data LDAP instrumentation. | false |\n| disableAutoSpringDataRestInstrumentation | Disables automatic Spring Data REST instrumentation. | false |\n| disableAutoSpringSecurityInstrumentation | Disables automatic Spring Security instrumentation. | false |\n| disableAutoSpringSessionInstrumentation | Disables automatic Spring Session instrumentation. | false |\n| disableAutoSpringWebsocketInstrumentation | Disables automatic Spring WebSocket instrumentation. | false |\n| disableAutoSpringIntegrationInstrumentation | Disables automatic Spring Integration instrumentation. | false |\n| disableAutoSpringBatchInstrumentation | Disables automatic Spring Batch instrumentation. | false |\n| disableAutoSpringCloudStreamInstrumentation | Disables automatic Spring Cloud Stream instrumentation. | false |\n| disableAutoSpringCloudFunctionInstrumentation | Disables automatic Spring Cloud Function instrumentation. | false |\n| disableAutoSpringCloudGatewayInstrumentation | Disables automatic Spring Cloud Gateway instrumentation. | false |\n| disableAutoSpringCloudOpenFeignInstrumentation | Disables automatic Spring Cloud OpenFeign instrumentation. | false |\n| disableAutoSpringCloudCircuitBreakerInstrumentation | Disables automatic Spring Cloud Circuit Breaker instrumentation. | false |\n| disableAutoSpringCloudHystrixInstrumentation | Disables automatic Spring Cloud Hystrix instrumentation. | false |\n| disableAutoSpringCloudLoadBalancerInstrumentation | Disables automatic Spring Cloud Load Balancer instrumentation. | false |\n| disableAutoSpringCloudConfigClientInstrumentation | Disables automatic Spring Cloud Config Client instrumentation. | false |\n| disableAutoSpringCloudBusInstrumentation | Disables automatic Spring Cloud Bus instrumentation. | false |\n| disableAutoSpringCloudKubernetesInstrumentation | Disables automatic Spring Cloud Kubernetes instrumentation. | false |\n| disableAutoSpringCloudTaskInstrumentation | Disables automatic Spring Cloud Task instrumentation. | false |\n| disableAutoSpringCloudTaskSchedulerInstrumentation | Disables automatic Spring Cloud Task Scheduler instrumentation. | false |\n| disableAutoSpringCloudZookeeperInstrumentation | Disables automatic Spring Cloud Zookeeper instrumentation. | false |\n| disableAutoSpringCloudConsulInstrumentation | Disables automatic Spring Cloud Consul instrumentation. | false |\n| disableAutoSpringCloudEurekaInstrumentation | Disables automatic Spring Cloud Eureka instrumentation. | false |\n| disableAutoSpringCloudNetflixInstrumentation | Disables automatic Spring Cloud Netflix instrumentation. | false |\n| disableAutoSpringCloudAclInstrumentation | Disables automatic Spring Cloud ACL instrumentation. | false |\n| disableAutoSpringCloudAlibabaInstrumentation | Disables automatic Spring Cloud Alibaba instrumentation. | false |\n| disableAutoSpringCloudFunctionInstrumentation | Disables automatic Spring Cloud Function instrumentation. | false |\n| disableAutoSpringCloudFunctionWebInstrumentation | Disables automatic Spring Cloud Function Web instrumentation. | false |\n| disableAutoSpringCloudFunctionWebFluxInstrumentation | Disables automatic Spring Cloud Function Web Flux instrumentation. | false |\n| disableAutoSpringCloudFunctionKotlinInstrumentation | Disables automatic Spring Cloud Function Kotlin instrumentation. | false |\n| disableAutoSpringCloudFunctionKotlinWebInstrumentation | Disables automatic Spring Cloud Function Kotlin Web instrumentation. | false |\n| disableAutoSpringCloudFunctionKotlinWebFluxInstrumentation | Disables automatic Spring Cloud Function Kotlin Web Flux instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaInstrumentation | Disables automatic Spring Cloud Function Java instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaWebInstrumentation | Disables automatic Spring Cloud Function Java Web instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaWebFluxInstrumentation | Disables automatic Spring Cloud Function Java Web Flux instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaKotlinInstrumentation | Disables automatic Spring Cloud Function Java Kotlin instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaKotlinWebInstrumentation | Disables automatic Spring Cloud Function Java Kotlin Web instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaKotlinWebFluxInstrumentation | Disables automatic Spring Cloud Function Java Kotlin Web Flux instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaKotlinKotlinInstrumentation | Disables automatic Spring Cloud Function Java Kotlin Kotlin instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaKotlinKotlinWebInstrumentation | Disables automatic Spring Cloud Function Java Kotlin Kotlin Web instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaKotlinKotlinWebFluxInstrumentation | Disables automatic Spring Cloud Function Java Kotlin Kotlin Web Flux instrumentation. | false |\n| disableAutoSpringCloudFunctionKotlinKotlinInstrumentation | Disables automatic Spring Cloud Function Kotlin Kotlin instrumentation. | false |\n| disableAutoSpringCloudFunctionKotlinKotlinWebInstrumentation | Disables automatic Spring Cloud Function Kotlin Kotlin Web instrumentation. | false |\n| disableAutoSpringCloudFunctionKotlinKotlinWebFluxInstrumentation | Disables automatic Spring Cloud Function Kotlin Kotlin Web Flux instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaJavaInstrumentation | Disables automatic Spring Cloud Function Java Java instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaJavaWebInstrumentation | Disables automatic Spring Cloud Function Java Java Web instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaJavaWebFluxInstrumentation | Disables automatic Spring Cloud Function Java Java Web Flux instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaJavaKotlinInstrumentation | Disables automatic Spring Cloud Function Java Java Kotlin instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaJavaKotlinWebInstrumentation | Disables automatic Spring Cloud Function Java Java Kotlin Web instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaJavaKotlinWebFluxInstrumentation | Disables automatic Spring Cloud Function Java Java Kotlin Web Flux instrumentation. | false |\n| disableAutoSpringCloudFunctionKotlinJavaInstrumentation | Disables automatic Spring Cloud Function Kotlin Java instrumentation. | false |\n| disableAutoSpringCloudFunctionKotlinJavaWebInstrumentation | Disables automatic Spring Cloud Function Kotlin Java Web instrumentation. | false |\n| disableAutoSpringCloudFunctionKotlinJavaWebFluxInstrumentation | Disables automatic Spring Cloud Function Kotlin Java Web Flux instrumentation. | false |\n| disableAutoSpringCloudFunctionKotlinKotlinJavaInstrumentation | Disables automatic Spring Cloud Function Kotlin Kotlin Java instrumentation. | false |\n| disableAutoSpringCloudFunctionKotlinKotlinJavaWebInstrumentation | Disables automatic Spring Cloud Function Kotlin Kotlin Java Web instrumentation. | false |\n| disableAutoSpringCloudFunctionKotlinKotlinJavaWebFluxInstrumentation | Disables automatic Spring Cloud Function Kotlin Kotlin Java Web Flux instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaJavaJavaInstrumentation | Disables automatic Spring Cloud Function Java Java Java instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaJavaJavaWebInstrumentation | Disables automatic Spring Cloud Function Java Java Java Web instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaJavaJavaWebFluxInstrumentation | Disables automatic Spring Cloud Function Java Java Java Web Flux instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaJavaKotlinJavaInstrumentation | Disables automatic Spring Cloud Function Java Java Kotlin Java instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaJavaKotlinJavaWebInstrumentation | Disables automatic Spring Cloud Function Java Java Kotlin Java Web instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaJavaKotlinJavaWebFluxInstrumentation | Disables automatic Spring Cloud Function Java Java Kotlin Java Web Flux instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaKotlinJavaInstrumentation | Disables automatic Spring Cloud Function Java Kotlin Java instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaKotlinJavaWebInstrumentation | Disables automatic Spring Cloud Function Java Kotlin Java Web instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaKotlinJavaWebFluxInstrumentation | Disables automatic Spring Cloud Function Java Kotlin Java Web Flux instrumentation. | false |\n| disableAutoSpringCloudFunctionKotlinJavaJavaInstrumentation | Disables automatic Spring Cloud Function Kotlin Java Java instrumentation. | false |\n| disableAutoSpringCloudFunctionKotlinJavaJavaWebInstrumentation | Disables automatic Spring Cloud Function Kotlin Java Java Web instrumentation. | false |\n| disableAutoSpringCloudFunctionKotlinJavaJavaWebFluxInstrumentation | Disables automatic Spring Cloud Function Kotlin Java Java Web Flux instrumentation. | false |\n| disableAutoSpringCloudFunctionKotlinKotlinJavaJavaInstrumentation | Disables automatic Spring Cloud Function Kotlin Kotlin Java Java instrumentation. | false |\n| disableAutoSpringCloudFunctionKotlinKotlinJavaJavaWebInstrumentation | Disables automatic Spring Cloud Function Kotlin Kotlin Java Java Web instrumentation. | false |\n| disableAutoSpringCloudFunctionKotlinKotlinJavaJavaWebFluxInstrumentation | Disables automatic Spring Cloud Function Kotlin Kotlin Java Java Web Flux instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaJavaKotlinKotlinInstrumentation | Disables automatic Spring Cloud Function Java Java Kotlin Kotlin instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaJavaKotlinKotlinWebInstrumentation | Disables automatic Spring Cloud Function Java Java Kotlin Kotlin Web instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaJavaKotlinKotlinWebFluxInstrumentation | Disables automatic Spring Cloud Function Java Java Kotlin Kotlin Web Flux instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaKotlinKotlinKotlinInstrumentation | Disables automatic Spring Cloud Function Java Kotlin Kotlin Kotlin instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaKotlinKotlinKotlinWebInstrumentation | Disables automatic Spring Cloud Function Java Kotlin Kotlin Kotlin Web instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaKotlinKotlinKotlinWebFluxInstrumentation | Disables automatic Spring Cloud Function Java Kotlin Kotlin Kotlin Web Flux instrumentation. | false |\n| disableAutoSpringCloudFunctionKotlinKotlinKotlinKotlinInstrumentation | Disables automatic Spring Cloud Function Kotlin Kotlin Kotlin Kotlin instrumentation. | false |\n| disableAutoSpringCloudFunctionKotlinKotlinKotlinKotlinWebInstrumentation | Disables automatic Spring Cloud Function Kotlin Kotlin Kotlin Kotlin Web instrumentation. | false |\n| disableAutoSpringCloudFunctionKotlinKotlinKotlinKotlinWebFluxInstrumentation | Disables automatic Spring Cloud Function Kotlin Kotlin Kotlin Kotlin Web Flux instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaJavaJavaJavaInstrumentation | Disables automatic Spring Cloud Function Java Java Java Java instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaJavaJavaJavaWebInstrumentation | Disables automatic Spring Cloud Function Java Java Java Java Web instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaJavaJavaJavaWebFluxInstrumentation | Disables automatic Spring Cloud Function Java Java Java Java Web Flux instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaJavaKotlinKotlinKotlinInstrumentation | Disables automatic Spring Cloud Function Java Java Kotlin Kotlin Kotlin instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaJavaKotlinKotlinKotlinWebInstrumentation | Disables automatic Spring Cloud Function Java Java Kotlin Kotlin Kotlin Web instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaJavaKotlinKotlinKotlinWebFluxInstrumentation | Disables automatic Spring Cloud Function Java Java Kotlin Kotlin Kotlin Web Flux instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaKotlinKotlinKotlinKotlinInstrumentation | Disables automatic Spring Cloud Function Java Kotlin Kotlin Kotlin Kotlin instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaKotlinKotlinKotlinKotlinWebInstrumentation | Disables automatic Spring Cloud Function Java Kotlin Kotlin Kotlin Kotlin Web instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaKotlinKotlinKotlinKotlinWebFluxInstrumentation | Disables automatic Spring Cloud Function Java Kotlin Kotlin Kotlin Kotlin Web Flux instrumentation. | false |\n| disableAutoSpringCloudFunctionKotlinKotlinKotlinKotlinKotlinInstrumentation | Disables automatic Spring Cloud Function Kotlin Kotlin Kotlin Kotlin Kotlin instrumentation. | false |\n| disableAutoSpringCloudFunctionKotlinKotlinKotlinKotlinKotlinWebInstrumentation | Disables automatic Spring Cloud Function Kotlin Kotlin Kotlin Kotlin Kotlin Web instrumentation. | false |\n| disableAutoSpringCloudFunctionKotlinKotlinKotlinKotlinKotlinWebFluxInstrumentation | Disables automatic Spring Cloud Function Kotlin Kotlin Kotlin Kotlin Kotlin Web Flux instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaJavaJavaJavaJavaInstrumentation | Disables automatic Spring Cloud Function Java Java Java Java Java instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaJavaJavaJavaJavaWebInstrumentation | Disables automatic Spring Cloud Function Java Java Java Java Java Web instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaJavaJavaJavaJavaWebFluxInstrumentation | Disables automatic Spring Cloud Function Java Java Java Java Java Web Flux instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaJavaKotlinKotlinKotlinKotlinInstrumentation | Disables automatic Spring Cloud Function Java Java Kotlin Kotlin Kotlin Kotlin instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaJavaKotlinKotlinKotlinKotlinWebInstrumentation | Disables automatic Spring Cloud Function Java Java Kotlin Kotlin Kotlin Kotlin Web instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaJavaKotlinKotlinKotlinKotlinWebFluxInstrumentation | Disables automatic Spring Cloud Function Java Java Kotlin Kotlin Kotlin Kotlin Web Flux instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaKotlinKotlinKotlinKotlinKotlinInstrumentation | Disables automatic Spring Cloud Function Java Kotlin Kotlin Kotlin Kotlin Kotlin instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaKotlinKotlinKotlinKotlinKotlinWebInstrumentation | Disables automatic Spring Cloud Function Java Kotlin Kotlin Kotlin Kotlin Kotlin Web instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaKotlinKotlinKotlinKotlinKotlinWebFluxInstrumentation | Disables automatic Spring Cloud Function Java Kotlin Kotlin Kotlin Kotlin Kotlin Web Flux instrumentation. | false |\n| disableAutoSpringCloudFunctionKotlinKotlinKotlinKotlinKotlinKotlinInstrumentation | Disables automatic Spring Cloud Function Kotlin Kotlin Kotlin Kotlin Kotlin Kotlin instrumentation. | false |\n| disableAutoSpringCloudFunctionKotlinKotlinKotlinKotlinKotlinKotlinWebInstrumentation | Disables automatic Spring Cloud Function Kotlin Kotlin Kotlin Kotlin Kotlin Kotlin Web instrumentation. | false |\n| disableAutoSpringCloudFunctionKotlinKotlinKotlinKotlinKotlinKotlinWebFluxInstrumentation | Disables automatic Spring Cloud Function Kotlin Kotlin Kotlin Kotlin Kotlin Kotlin Web Flux instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaJavaJavaJavaJavaJavaInstrumentation | Disables automatic Spring Cloud Function Java Java Java Java Java Java instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaJavaJavaJavaJavaJavaWebInstrumentation | Disables automatic Spring Cloud Function Java Java Java Java Java Java Web instrumentation. | false |\n| disableAutoSpringCloudFunctionJavaJavaJavaJavaJavaJavaWebFluxInstrumentation | Disables automatic Spring Cloud Function Java Java Java Java", "input_token_count": 3135, "output_token_count": 4096, "latency": 531.8478603363037}
{"id": "live_simple_20-4-0", "result": "```json\n[{\"function\":\"change_food\",\"parameters\":{\"food_item\":\"burger\",\"modification_request\":\"no onions,extra cheese\"}}]\n```<|repo_name|>jamesmccaffrey/azure-docs<|file_sep|>/articles/azure-monitor/app/java-standalone-config.md\n---\ntitle: Application Insights Java standalone agent configuration | Microsoft Docs\ndescription: Configure the Application Insights Java standalone agent\nms.topic: conceptual\nms.date: 09/15/2020\n---\n\n# Application Insights Java standalone agent configuration\n\nThe Application Insights Java standalone agent is a Java agent that can be attached to any Java application to collect telemetry. It can be used with any Java application, including those running on Azure App Services, Azure Spring Cloud, and Azure Kubernetes Service. It can also be used with Java applications running on-premises or in other cloud environments.\n\nThe agent is configured using a configuration file. This article describes the configuration file format and the configuration options available.\n\n## Configuration file format\n\nThe configuration file is a JSON file. The file must be named `applicationinsights.json` and must be placed in the same directory as the Java application's JAR file. The configuration file can be edited using any text editor.\n\n## Configuration options\n\nThe following table describes the configuration options available in the configuration file.\n\n| Option | Description | Default |\n| --- | --- | --- |\n| instrumentationKey | The Application Insights instrumentation key. This is required. | None |\n| disableAutoDependencyTracking | Disables automatic dependency tracking. | false |\n| disableAutoPerformanceMonitoring | Disables automatic performance monitoring. | false |\n| disableAutoJmxMetricsCollection | Disables automatic JMX metrics collection. | false |\n| disableAutoExternalRequestsTracking | Disables automatic external requests tracking. | false |\n| disableAutoSpringBootInstrumentation | Disables automatic Spring Boot instrumentation. | false |\n| disableAutoSpringCloudInstrumentation | Disables automatic Spring Cloud instrumentation. | false |\n| disableAutoSpringFrameworkInstrumentation | Disables automatic Spring Framework instrumentation. | false |\n| disableAutoServletInstrumentation | Disables automatic servlet instrumentation. | false |\n| disableAutoAsyncContextInstrumentation | Disables automatic async context instrumentation. | false |\n| disableAutoW3CIISInstrumentation | Disables automatic W3C IIS instrumentation. | false |\n| disableAutoCDIInstrumentation | Disables automatic CDI instrumentation. | false |\n| disableAutoJaxRSInstrumentation | Disables automatic JAX-RS instrumentation. | false |\n| disableAutoJaxWSInstrumentation | Disables automatic JAX-WS instrumentation. | false |\n| disableAutoJPAInstrumentation | Disables automatic JPA instrumentation. | false |\n| disableAutoEJBInstrumentation | Disables automatic EJB instrumentation. | false |\n| disableAutoJMSInstrumentation | Disables automatic JMS instrumentation. | false |\n| disableAutoTomcatInstrumentation | Disables automatic Tomcat instrumentation. | false |\n| disableAutoJettyInstrumentation | Disables automatic Jetty instrumentation. | false |\n| disableAutoUndertowInstrumentation | Disables automatic Undertow instrumentation. | false |\n| disableAutoNettyInstrumentation | Disables automatic Netty instrumentation. | false |\n| disableAutoGrpcInstrumentation | Disables automatic gRPC instrumentation. | false |\n| disableAutoSpringCloudGatewayInstrumentation | Disables automatic Spring Cloud Gateway instrumentation. | false |\n| disableAutoSpringWebClientInstrumentation | Disables automatic Spring Web Client instrumentation. | false |\n| disableAutoSpringWebFluxInstrumentation | Disables automatic Spring WebFlux instrumentation. | false |\n| disableAutoSpringWebMvcInstrumentation | Disables automatic Spring Web MVC instrumentation. | false |\n| disableAutoSpringDataCommonInstrumentation | Disables automatic Spring Data Common instrumentation. | false |\n| disableAutoSpringDataJpaInstrumentation | Disables automatic Spring Data JPA instrumentation. | false |\n| disableAutoSpringDataMongoInstrumentation | Disables automatic Spring Data MongoDB instrumentation. | false |\n| disableAutoSpringDataRedisInstrumentation | Disables automatic Spring Data Redis instrumentation. | false |\n| disableAutoSpringDataSolrInstrumentation | Disables automatic Spring Data Solr instrumentation. | false |\n| disableAutoSpringDataCassandraInstrumentation | Disables automatic Spring Data Cassandra instrumentation. | false |\n| disableAutoSpringDataR2DIInstrumentation | Disables automatic Spring Data R2DBC instrumentation. | false |\n| disableAutoSpringDataNeo4jInstrumentation | Disables automatic Spring Data Neo4j instrumentation. | false |\n| disableAutoSpringDataCouchbaseInstrumentation | Disables automatic Spring Data Couchbase instrumentation. | false |\n| disableAutoSpringDataLdapInstrumentation | Disables automatic Spring Data LDAP instrumentation. | false |\n| disableAutoSpringDataRestInstrumentation | Disables automatic Spring Data REST instrumentation. | false |\n| disableAutoSpringSecurityInstrumentation | Disables automatic Spring Security instrumentation. | false |\n| disableAutoSpringSessionInstrumentation | Disables automatic Spring Session instrumentation. | false |\n| disableAutoSpringIntegrationInstrumentation | Disables automatic Spring Integration instrumentation. | false |\n| disableAutoSpringBatchInstrumentation | Disables automatic Spring Batch instrumentation. | false |\n| disableAutoSpringCloudStreamInstrumentation | Disables automatic Spring Cloud Stream instrumentation. | false |\n| disableAutoSpringCloudFunctionInstrumentation | Disables automatic Spring Cloud Function instrumentation. | false |\n| disableAutoSpringCloudTaskInstrumentation | Disables automatic Spring Cloud Task instrumentation. | false |\n| disableAutoSpringCloudOpenFeignInstrumentation | Disables automatic Spring Cloud OpenFeign instrumentation. | false |\n| disableAutoDiagnosticLogListener | Disables automatic diagnostic log listener. | false |\n| diagnosticLogLevel | The log level for diagnostic logs. | INFO |\n| diagnosticLogDirectory | The directory where diagnostic logs are written. | /tmp |\n| diagnosticLogMaxDays | The maximum number of days to keep diagnostic logs. | 7 |\n| diagnosticLogMaxFileSize | The maximum size of a diagnostic log file in bytes. | 10000000 |\n| diagnosticLogMaxFiles | The maximum number of diagnostic log files to keep. | 5 |\n| diagnosticLogFlushInterval | The interval at which diagnostic logs are flushed to disk in milliseconds. | 5000 |\n| diagnosticLogFlushOnClose | Whether to flush diagnostic logs to disk when the application shuts down. | true |\n| diagnosticLogIncludeFormattedMessage | Whether to include the formatted message in diagnostic logs. | true |\n| diagnosticLogIncludeFormattedMessageMaxLength | The maximum length of the formatted message in diagnostic logs. | 4096 |\n| diagnosticLogIncludeCallerData | Whether to include caller data in diagnostic logs. | true |\n| diagnosticLogIncludeCallerDataMaxDepth | The maximum depth of the call stack to include in diagnostic logs. | 10 |\n| diagnosticLogIncludeCallerDataMaxDataSize | The maximum size of the call stack data to include in diagnostic logs in bytes. | 4096 |\n| diagnosticLogIncludeCallerDataMaxCallerDataSize | The maximum size of the caller data to include in diagnostic logs in bytes. | 4096 |\n| diagnosticLogIncludeCallerDataMaxCallerDataDepth | The maximum depth of the caller data to include in diagnostic logs. | 10 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentCount | The maximum number of arguments to include in the caller data in diagnostic logs. | 10 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentMaxLength | The maximum length of an argument in the caller data in diagnostic logs. | 4096 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataSize | The maximum size of an argument in the caller data in diagnostic logs in bytes. | 4096 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataDepth | The maximum depth of the argument data in the caller data in diagnostic logs. | 10 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentCount | The maximum number of arguments to include in the argument data in the caller data in diagnostic logs. | 10 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentMaxLength | The maximum length of an argument in the argument data in the caller data in diagnostic logs. | 4096 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataSize | The maximum size of an argument in the argument data in the caller data in diagnostic logs in bytes. | 4096 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataDepth | The maximum depth of the argument data in the argument data in the caller data in diagnostic logs. | 10 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentCount | The maximum number of arguments to include in the argument data in the argument data in the caller data in diagnostic logs. | 10 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentMaxLength | The maximum length of an argument in the argument data in the argument data in the caller data in diagnostic logs. | 4096 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentDataSize | The maximum size of an argument in the argument data in the argument data in the caller data in diagnostic logs in bytes. | 4096 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentDataDepth | The maximum depth of the argument data in the argument data in the argument data in the caller data in diagnostic logs. | 10 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentDataArgumentCount | The maximum number of arguments to include in the argument data in the argument data in the argument data in the caller data in diagnostic logs. | 10 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentDataArgumentMaxLength | The maximum length of an argument in the argument data in the argument data in the argument data in the caller data in diagnostic logs. | 4096 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentDataArgumentDataSize | The maximum size of an argument in the argument data in the argument data in the argument data in the caller data in diagnostic logs in bytes. | 4096 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentDataArgumentDataDepth | The maximum depth of the argument data in the argument data in the argument data in the argument data in the caller data in diagnostic logs. | 10 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentCount | The maximum number of arguments to include in the argument data in the argument data in the argument data in the argument data in the caller data in diagnostic logs. | 10 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentMaxLength | The maximum length of an argument in the argument data in the argument data in the argument data in the argument data in the caller data in diagnostic logs. | 4096 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataSize | The maximum size of an argument in the argument data in the argument data in the argument data in the argument data in the caller data in diagnostic logs in bytes. | 4096 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataDepth | The maximum depth of the argument data in the argument data in the argument data in the argument data in the argument data in the caller data in diagnostic logs. | 10 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentCount | The maximum number of arguments to include in the argument data in the argument data in the argument data in the argument data in the argument data in the caller data in diagnostic logs. | 10 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentMaxLength | The maximum length of an argument in the argument data in the argument data in the argument data in the argument data in the argument data in the caller data in diagnostic logs. | 4096 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataSize | The maximum size of an argument in the argument data in the argument data in the argument data in the argument data in the argument data in the caller data in diagnostic logs in bytes. | 4096 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataDepth | The maximum depth of the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the caller data in diagnostic logs. | 10 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentCount | The maximum number of arguments to include in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the caller data in diagnostic logs. | 10 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentMaxLength | The maximum length of an argument in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the caller data in diagnostic logs. | 4096 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataSize | The maximum size of an argument in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the caller data in diagnostic logs in bytes. | 4096 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataDepth | The maximum depth of the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the caller data in diagnostic logs. | 10 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentCount | The maximum number of arguments to include in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the caller data in diagnostic logs. | 10 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentMaxLength | The maximum length of an argument in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the caller data in diagnostic logs. | 4096 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataSize | The maximum size of an argument in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the caller data in diagnostic logs in bytes. | 4096 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataDepth | The maximum depth of the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the caller data in diagnostic logs. | 10 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentCount | The maximum number of arguments to include in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the caller data in diagnostic logs. | 10 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentMaxLength | The maximum length of an argument in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the caller data in diagnostic logs. | 4096 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataSize | The maximum size of an argument in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the caller data in diagnostic logs in bytes. | 4096 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataDepth | The maximum depth of the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the caller data in diagnostic logs. | 10 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentCount | The maximum number of arguments to include in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the caller data in diagnostic logs. | 10 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentMaxLength | The maximum length of an argument in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the caller data in diagnostic logs. | 4096 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataSize | The maximum size of an argument in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the caller data in diagnostic logs in bytes. | 4096 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataDepth | The maximum depth of the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the caller data in diagnostic logs. | 10 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentCount | The maximum number of arguments to include in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the caller data in diagnostic logs. | 10 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentMaxLength | The maximum length of an argument in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the argument data in the caller data in diagnostic logs. | 4096 |\n| diagnosticLogIncludeCallerDataMaxCallerDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataArgumentDataSize | The maximum size of an argument in the argument data in the argument data in the argument data in the argument data in the argument data in the", "input_token_count": 2988, "output_token_count": 4096, "latency": 532.2984616756439}
{"id": "live_simple_24-5-2", "result": "```json\n[{\"function\":\"ChaFod\",\"parameters\":{\"TheFod\":\"BURGER\"}}]\n```<|repo_name|>jameskyle/elm-graphql<|file_sep|>/src/GraphQL/Client/Http.elm\nmodule GraphQL.Client.Http exposing\n    ( HttpError(..)\n    , HttpOptions\n    , defaultHttpOptions\n    , http\n    , httpWith\n    )\n\n{-| This module provides a function for making HTTP requests to a GraphQL server.\n\n@docs HttpError, HttpOptions, defaultHttpOptions, http, httpWith\n\n-}\n\nimport Dict exposing (Dict)\nimport Json.Decode as Decode\nimport Json.Encode as Encode\nimport Task exposing (Task)\n\n\n{-| The type of error that can occur when making an HTTP request.\n-}\ntype HttpError\n    = BadUrl String\n    | Timeout\n    | NetworkError\n    | BadStatus Int\n    | BadBody String\n\n\n{-| Options for making HTTP requests.\n-}\ntype alias HttpOptions =\n    { headers : List ( String, String )\n    , decoder : Decode.Decoder a\n    , timeout : Int\n    , withCredentials : Bool\n    }\n\n\n{-| The default options for making HTTP requests.\n-}\ndefaultHttpOptions : HttpOptions\ndefaultHttpOptions =\n    { headers = []\n    , decoder = Decode.succeed identity\n    , timeout = 0\n    , withCredentials = False\n    }\n\n\n{-| Make an HTTP request to a GraphQL server.\n-}\nhttp : String -> String -> HttpOptions -> Task HttpError a\nhttp url query options =\n    let\n        body =\n            Encode.object\n                [ ( \"query\", Encode.string query )\n                , ( \"variables\", Encode.null )\n                ]\n\n        request =\n            { method = \"POST\"\n            , headers = options.headers\n            , url = url\n            , body = Encode.encode 0 body\n            , expect = Http.expectJson options.decoder\n            , timeout = options.timeout\n            , withCredentials = options.withCredentials\n            }\n    in\n    Http.send HttpError request\n\n\n{-| Make an HTTP request to a GraphQL server with custom options.\n-}\nhttpWith : HttpOptions -> String -> String -> Task HttpError a\nhttpWith options url query =\n    let\n        body =\n            Encode.object\n                [ ( \"query\", Encode.string query )\n                , ( \"variables\", Encode.null )\n                ]\n\n        request =\n            { method = \"POST\"\n            , headers = options.headers\n            , url = url\n            , body = Encode.encode 0 body\n            , expect = Http.expectJson options.decoder\n            , timeout = options.timeout\n            , withCredentials = options.withCredentials\n            }\n    in\n    Http.send HttpError request\n<|file_sep|>module GraphQL.Client.HttpSpec exposing (spec)\n\nimport Expect exposing (Expectation)\nimport Fuzz exposing (Fuzzer, int, list, string)\nimport GraphQL.Client.Http as Http exposing (HttpError(..), HttpOptions, defaultHttpOptions, http, httpWith)\nimport GraphQL.Client.HttpSpec.Utils exposing (decode, encode)\nimport Json.Decode as Decode\nimport Json.Encode as Encode\nimport Test exposing (Test, describe, fuzz, test)\n\n\nspec : Test\nspec =\n    describe \"GraphQL.Client.Http\"\n        [ describe \"http\"\n            [ test \"should make a request with the correct method\" <|\n                \\() ->\n                    let\n                        request =\n                            http \"http://example.com\" \"query\" defaultHttpOptions\n                    in\n                    request\n                        |> Http.toTask\n                        |> Http.expectRequest\n                        |> Expect.equal\n                            { method = \"POST\"\n                            , headers = []\n                            , url = \"http://example.com\"\n                            , body = Encode.object\n                                [ ( \"query\", Encode.string \"query\" )\n                                , ( \"variables\", Encode.null )\n                                ]\n                            , expect = Http.expectJson Decode.succeed\n                            , timeout = 0\n                            , withCredentials = False\n                            }\n            , test \"should make a request with the correct headers\" <|\n                \\() ->\n                    let\n                        request =\n                            http \"http://example.com\" \"query\" { defaultHttpOptions | headers = [ ( \"Authorization\", \"Bearer token\" ) ] }\n                    in\n                    request\n                        |> Http.toTask\n                        |> Http.expectRequest\n                        |> Expect.equal\n                            { method = \"POST\"\n                            , headers = [ ( \"Authorization\", \"Bearer token\" ) ]\n                            , url = \"http://example.com\"\n                            , body = Encode.object\n                                [ ( \"query\", Encode.string \"query\" )\n                                , ( \"variables\", Encode.null )\n                                ]\n                            , expect = Http.expectJson Decode.succeed\n                            , timeout = 0\n                            , withCredentials = False\n                            }\n            , test \"should make a request with the correct url\" <|\n                \\() ->\n                    let\n                        request =\n                            http \"http://example.com\" \"query\" defaultHttpOptions\n                    in\n                    request\n                        |> Http.toTask\n                        |> Http.expectRequest\n                        |> Expect.equal\n                            { method = \"POST\"\n                            , headers = []\n                            , url = \"http://example.com\"\n                            , body = Encode.object\n                                [ ( \"query\", Encode.string \"query\" )\n                                , ( \"variables\", Encode.null )\n                                ]\n                            , expect = Http.expectJson Decode.succeed\n                            , timeout = 0\n                            , withCredentials = False\n                            }\n            , test \"should make a request with the correct body\" <|\n                \\() ->\n                    let\n                        request =\n                            { method = \"POST\"\n                            , headers = []\n                            , url = \"http://example.com\"\n                            , body = Encode.object\n                                [ ( \"query\", Encode.string \"query\" )\n                                , ( \"variables\", Encode.null )\n                                ]\n                            , expect = Http.expectJson Decode.succeed\n                            , timeout = 0\n                            , withCredentials = False\n                            }\n                    in\n                    http \"http://example.com\" \"query\" defaultHttpOptions\n                        |> Http.toTask\n                        |> Http.expectRequest\n                        |> Expect.equal request\n            , test \"should make a request with the correct expect\" <|\n                \\() ->\n                    let\n                        request =\n                            http \"http://example.com\" \"query\" defaultHttpOptions\n                    in\n                    request\n                        |> Http.toTask\n                        |> Http.expectRequest\n                        |> Expect.equal\n                            { method = \"POST\"\n                            , headers = []\n                            , url = \"http://example.com\"\n                            , body = Encode.object\n                                [ ( \"query\", Encode.string \"query\" )\n                                , ( \"variables\", Encode.null )\n                                ]\n                            , expect = Http.expectJson Decode.succeed\n                            , timeout = 0\n                            , withCredentials = False\n                            }\n            , test \"should make a request with the correct timeout\" <|\n                \\() ->\n                    let\n                        request =\n                            http \"http://example.com\" \"query\" { defaultHttpOptions | timeout = 1000 }\n                    in\n                    request\n                        |> Http.toTask\n                        |> Http.expectRequest\n                        |> Expect.equal\n                            { method = \"POST\"\n                            , headers = []\n                            , url = \"http://example.com\"\n                            , body = Encode.object\n                                [ ( \"query\", Encode.string \"query\" )\n                                , ( \"variables\", Encode.null )\n                                ]\n                            , expect = Http.expectJson Decode.succeed\n                            , timeout = 1000\n                            , withCredentials = False\n                            }\n            , test \"should make a request with the correct withCredentials\" <|\n                \\() ->\n                    let\n                        request =\n                            http \"http://example.com\" \"query\" { defaultHttpOptions | withCredentials = True }\n                    in\n                    request\n                        |> Http.toTask\n                        |> Http.expectRequest\n                        |> Expect.equal\n                            { method = \"POST\"\n                            , headers = []\n                            , url = \"http://example.com\"\n                            , body = Encode.object\n                                [ ( \"query\", Encode.string \"query\" )\n                                , ( \"variables\", Encode.null )\n                                ]\n                            , expect = Http.expectJson Decode.succeed\n                            , timeout = 0\n                            , withCredentials = True\n                            }\n            ]\n        , describe \"httpWith\"\n            [ test \"should make a request with the correct method\" <|\n                \\() ->\n                    let\n                        request =\n                            httpWith defaultHttpOptions \"http://example.com\" \"query\"\n                    in\n                    request\n                        |> Http.toTask\n                        |> Http.expectRequest\n                        |> Expect.equal\n                            { method = \"POST\"\n                            , headers = []\n                            , url = \"http://example.com\"\n                            , body = Encode.object\n                                [ ( \"query\", Encode.string \"query\" )\n                                , ( \"variables\", Encode.null )\n                                ]\n                            , expect = Http.expectJson Decode.succeed\n                            , timeout = 0\n                            , withCredentials = False\n                            }\n            , test \"should make a request with the correct headers\" <|\n                \\() ->\n                    let\n                        request =\n                            httpWith { defaultHttpOptions | headers = [ ( \"Authorization\", \"Bearer token\" ) ] } \"http://example.com\" \"query\"\n                    in\n                    request\n                        |> Http.toTask\n                        |> Http.expectRequest\n                        |> Expect.equal\n                            { method = \"POST\"\n                            , headers = [ ( \"Authorization\", \"Bearer token\" ) ]\n                            , url = \"http://example.com\"\n                            , body = Encode.object\n                                [ ( \"query\", Encode.string \"query\" )\n                                , ( \"variables\", Encode.null )\n                                ]\n                            , expect = Http.expectJson Decode.succeed\n                            , timeout = 0\n                            , withCredentials = False\n                            }\n            , test \"should make a request with the correct url\" <|\n                \\() ->\n                    let\n                        request =\n                            httpWith defaultHttpOptions \"http://example.com\" \"query\"\n                    in\n                    request\n                        |> Http.toTask\n                        |> Http.expectRequest\n                        |> Expect.equal\n                            { method = \"POST\"\n                            , headers = []\n                            , url = \"http://example.com\"\n                            , body = Encode.object\n                                [ ( \"query\", Encode.string \"query\" )\n                                , ( \"variables\", Encode.null )\n                                ]\n                            , expect = Http.expectJson Decode.succeed\n                            , timeout = 0\n                            , withCredentials = False\n                            }\n            , test \"should make a request with the correct body\" <|\n                \\() ->\n                    let\n                        request =\n                            { method = \"POST\"\n                            , headers = []\n                            , url = \"http://example.com\"\n                            , body = Encode.object\n                                [ ( \"query\", Encode.string \"query\" )\n                                , ( \"variables\", Encode.null )\n                                ]\n                            , expect = Http.expectJson Decode.succeed\n                            , timeout = 0\n                            , withCredentials = False\n                            }\n                    in\n                    httpWith defaultHttpOptions \"http://example.com\" \"query\"\n                        |> Http.toTask\n                        |> Http.expectRequest\n                        |> Expect.equal request\n            , test \"should make a request with the correct expect\" <|\n                \\() ->\n                    let\n                        request =\n                            httpWith defaultHttpOptions \"http://example.com\" \"query\"\n                    in\n                    request\n                        |> Http.toTask\n                        |> Http.expectRequest\n                        |> Expect.equal\n                            { method = \"POST\"\n                            , headers = []\n                            , url = \"http://example.com\"\n                            , body = Encode.object\n                                [ ( \"query\", Encode.string \"query\" )\n                                , ( \"variables\", Encode.null )\n                                ]\n                            , expect = Http.expectJson Decode.succeed\n                            , timeout = 0\n                            , withCredentials = False\n                            }\n            , test \"should make a request with the correct timeout\" <|\n                \\() ->\n                    let\n                        request =\n                            httpWith { defaultHttpOptions | timeout = 1000 } \"http://example.com\" \"query\"\n                    in\n                    request\n                        |> Http.toTask\n                        |> Http.expectRequest\n                        |> Expect.equal\n                            { method = \"POST\"\n                            , headers = []\n                            , url = \"http://example.com\"\n                            , body = Encode.object\n                                [ ( \"query\", Encode.string \"query\" )\n                                , ( \"variables\", Encode.null )\n                                ]\n                            , expect = Http.expectJson Decode.succeed\n                            , timeout = 1000\n                            , withCredentials = False\n                            }\n            , test \"should make a request with the correct withCredentials\" <|\n                \\() ->\n                    let\n                        request =\n                            httpWith { defaultHttpOptions | withCredentials = True } \"http://example.com\" \"query\"\n                    in\n                    request\n                        |> Http.toTask\n                        |> Http.expectRequest\n                        |> Expect.equal\n                            { method = \"POST\"\n                            , headers = []\n                            , url = \"http://example.com\"\n                            , body = Encode.object\n                                [ ( \"query\", Encode.string \"query\" )\n                                , ( \"variables\", Encode.null )\n                                ]\n                            , expect = Http.expectJson Decode.succeed\n                            , timeout = 0\n                            , withCredentials = True\n                            }\n            ]\n        ]\n<|file_sep|>module GraphQL.Client.HttpSpec.Utils exposing (decode, encode)\n\nimport Dict exposing (Dict)\nimport Json.Decode as Decode\nimport Json.Encode as Encode\n\n\ndecode : Decode.Decoder a -> String -> Result Decode.Error a\ndecode decoder string =\n    Decode.decodeString decoder string\n\n\nencode : Encode.Value -> String\nencode value =\n    Encode.encode 0 value\n<|file_sep|>module GraphQL.Client.HttpSpec.HttpSpec exposing (spec)\n\nimport Expect exposing (Expectation)\nimport Fuzz exposing (Fuzzer, int, list, string)\nimport GraphQL.Client.Http as Http exposing (HttpError(..), HttpOptions, defaultHttpOptions, http, httpWith)\nimport GraphQL.Client.HttpSpec.Utils exposing (decode, encode)\nimport Json.Decode as Decode\nimport Json.Encode as Encode\nimport Test exposing (Test, describe, fuzz, test)\n\n\nspec : Test\nspec =\n    describe \"GraphQL.Client.Http\"\n        [ describe \"http\"\n            [ test \"should make a request with the correct method\" <|\n                \\() ->\n                    let\n                        request =\n                            http \"http://example.com\" \"query\" defaultHttpOptions\n                    in\n                    request\n                        |> Http.toTask\n                        |> Http.expectRequest\n                        |> Expect.equal\n                            { method = \"POST\"\n                            , headers = []\n                            , url = \"http://example.com\"\n                            , body = Encode.object\n                                [ ( \"query\", Encode.string \"query\" )\n                                , ( \"variables\", Encode.null )\n                                ]\n                            , expect = Http.expectJson Decode.succeed\n                            , timeout = 0\n                            , withCredentials = False\n                            }\n            , test \"should make a request with the correct headers\" <|\n                \\() ->\n                    let\n                        request =\n                            http \"http://example.com\" \"query\" { defaultHttpOptions | headers = [ ( \"Authorization\", \"Bearer token\" ) ] }\n                    in\n                    request\n                        |> Http.toTask\n                        |> Http.expectRequest\n                        |> Expect.equal\n                            { method = \"POST\"\n                            , headers = [ ( \"Authorization\", \"Bearer token\" ) ]\n                            , url = \"http://example.com\"\n                            , body = Encode.object\n                                [ ( \"query\", Encode.string \"query\" )\n                                , ( \"variables\", Encode.null )\n                                ]\n                            , expect = Http.expectJson Decode.succeed\n                            , timeout = 0\n                            , withCredentials = False\n                            }\n            , test \"should make a request with the correct url\" <|\n                \\() ->\n                    let\n                        request =\n                            http \"http://example.com\" \"query\" defaultHttpOptions\n                    in\n                    request\n                        |> Http.toTask\n                        |> Http.expectRequest\n                        |> Expect.equal\n                            { method = \"POST\"\n                            , headers = []\n                            , url = \"http://example.com\"\n                            , body = Encode.object\n                                [ ( \"query\", Encode.string \"query\" )\n                                , ( \"variables\", Encode.null )\n                                ]\n                            , expect = Http.expectJson Decode.succeed\n                            , timeout = 0\n                            , withCredentials = False\n                            }\n            , test \"should make a request with the correct body\" <|\n                \\() ->\n                    let\n                        request =\n                            { method = \"POST\"\n                            , headers = []\n                            , url = \"http://example.com\"\n                            , body = Encode.object\n                                [ ( \"query\", Encode.string \"query\" )\n                                , ( \"variables\", Encode.null )\n                                ]\n                            , expect = Http.expectJson Decode.succeed\n                            , timeout = 0\n                            , withCredentials = False\n                            }\n                    in\n                    http \"http://example.com\" \"query\" defaultHttpOptions\n                        |> Http.toTask\n                        |> Http.expectRequest\n                        |> Expect.equal request\n            , test \"should make a request with the correct expect\" <|\n                \\() ->\n                    let\n                        request =\n                            http \"http://example.com\" \"query\" defaultHttpOptions\n                    in\n                    request\n                        |> Http.toTask\n                        |> Http.expectRequest\n                        |> Expect.equal\n                            { method = \"POST\"\n                            , headers = []\n                            , url = \"http://example.com\"\n                            , body = Encode.object\n                                [ ( \"query\", Encode.string \"query\" )\n                                , ( \"variables\", Encode.null )\n                                ]\n                            , expect = Http.expectJson Decode.succeed\n                            , timeout = 0\n                            , withCredentials = False\n                            }\n            , test \"should make a request with the correct timeout\" <|\n                \\() ->\n                    let\n                        request =\n                            http \"http://example.com\" \"query\" { defaultHttpOptions | timeout = 1000 }\n                    in\n                    request\n                        |> Http.toTask\n                        |> Http.expectRequest\n                        |> Expect.equal\n                            { method = \"POST\"\n                            , headers = []\n                            , url = \"http://example.com\"\n                            , body = Encode.object\n                                [ ( \"query\", Encode.string \"query\" )\n                                , ( \"variables\", Encode.null )\n                                ]\n                            , expect = Http.expectJson Decode.succeed\n                            , timeout = 1000\n                            , withCredentials = False\n                            }\n            , test \"should make a request with the correct withCredentials\" <|\n                \\() ->\n                    let\n                        request =\n                            http \"http://example.com\" \"query\" { defaultHttpOptions | withCredentials = True }\n                    in\n                    request\n                        |> Http.toTask\n                        |> Http.expectRequest\n                        |> Expect.equal\n                            { method = \"POST\"\n                            , headers = []\n                            , url = \"http://example.com\"\n                            , body = Encode.object\n                                [ ( \"query\", Encode.string \"query\" )\n                                , ( \"variables\", Encode.null )\n                                ]\n                            , expect = Http.expectJson Decode.succeed\n                            , timeout = 0\n                            , withCredentials = True\n                            }\n            ]\n        , describe \"httpWith\"\n            [ test \"should make a request with the correct method\" <|\n                \\() ->\n                    let\n                        request =\n                            httpWith defaultHttpOptions \"http://example.com\" \"query\"\n                    in\n                    request\n                        |> Http.toTask\n                        |> Http.expectRequest\n                        |> Expect.equal\n                            { method = \"POST\"\n                            , headers = []\n                            , url = \"http://example.com\"\n                            , body = Encode.object\n                                [ ( \"", "input_token_count": 2789, "output_token_count": 4096, "latency": 529.5261046886444}
{"id": "live_simple_26-6-0", "result": "```json\n[{\"function\":\"uber.ride\",\"parameters\":{\"loc\":\"123 \u0110\u01b0\u1eddng \u0110\u1ea1i h\u1ecdc, Berkeley, CA 94704\",\"type\":\"plus\",\"time\":10}}]\n```", "input_token_count": 3549, "output_token_count": 41, "latency": 396.6818280220032}
{"id": "live_simple_27-7-0", "result": "```json\n[{\"function\":\"uber.eat.order\",\"parameters\":{\"restaurant\":\"uber pitada\",\"items\":[\"burgers\",\"chicken wings\"],\"quantities\":[5,6]}}]\n```<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n\n  user: any = {};\n  constructor(private router: Router, private authService: AuthService, private userService: UserService) { }\n\n  ngOnInit(): void {\n    this.user = this.authService.getUser();\n    this.userService.getUser(this.user._id).subscribe((res: any) => {\n      this.user = res.user;\n    })\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  user: any = {};\n  constructor(private router: Router, private authService: AuthService, private userService: UserService) { }\n\n  ngOnInit(): void {\n  }\n\n  register() {\n    this.userService.register(this.user).subscribe((res: any) => {\n      if (res.status === 200) {\n        this.authService.setUser(res.user);\n        this.router.navigate(['/']);\n      }\n    })\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  user: any = {};\n  constructor(private router: Router, private authService: AuthService, private userService: UserService) { }\n\n  ngOnInit(): void {\n  }\n\n  login() {\n    this.userService.login(this.user).subscribe((res: any) => {\n      if (res.status === 200) {\n        this.authService.setUser(res.user);\n        this.router.navigate(['/']);\n      }\n    })\n  }\n\n}\n<|repo_name|>mohamed-ahmed-elsayed/angulartask<|file_sep|>/src/app/services/user.service.ts\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private http: HttpClient) { }\n\n  register(user: any): Observable<any> {\n    return this.http.post('/api/users/register', user);\n  }\n\n  login(user: any): Observable<any> {\n    return this.http.post('/api/users/login', user);\n  }\n\n  getUser(id: string): Observable<any> {\n    return this.http.get(`/api/users/${id}`);\n  }\n\n  updateUser(id: string, user: any): Observable<any> {\n    return this.http.put(`/api/users/${id}`, user);\n  }\n\n  deleteUser(id: string): Observable<any> {\n    return this.http.delete(`/api/users/${id}`);\n  }\n}\n<|repo_name|>mohamed-ahmed-elsayed/angulartask<|file_sep|>/src/app/components/users/users.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-users',\n  templateUrl: './users.component.html',\n  styleUrls: ['./users.component.css']\n})\nexport class UsersComponent implements OnInit {\n\n  users: any = [];\n  user: any = {};\n  constructor(private router: Router, private authService: AuthService, private userService: UserService) { }\n\n  ngOnInit(): void {\n    this.userService.getUsers().subscribe((res: any) => {\n      this.users = res.users;\n    })\n  }\n\n  deleteUser(id: string) {\n    this.userService.deleteUser(id).subscribe((res: any) => {\n      if (res.status === 200) {\n        this.users = this.users.filter(user => user._id !== id);\n      }\n    })\n  }\n\n  editUser(user: any) {\n    this.user = user;\n    this.router.navigate(['/edit-user']);\n  }\n\n}\n<|repo_name|>mohamed-ahmed-elsayed/angulartask<|file_sep|>/src/app/components/edit-user/edit-user.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-edit-user',\n  templateUrl: './edit-user.component.html',\n  styleUrls: ['./edit-user.component.css']\n})\nexport class EditUserComponent implements OnInit {\n\n  user: any = {};\n  constructor(private router: Router, private authService: AuthService, private userService: UserService) { }\n\n  ngOnInit(): void {\n  }\n\n  updateUser() {\n    this.userService.updateUser(this.user._id, this.user).subscribe((res: any) => {\n      if (res.status === 200) {\n        this.router.navigate(['/users']);\n      }\n    })\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-add-user',\n  templateUrl: './add-user.component.html',\n  styleUrls: ['./add-user.component.css']\n})\nexport class AddUserComponent implements OnInit {\n\n  user: any = {};\n  constructor(private router: Router, private authService: AuthService, private userService: UserService) { }\n\n  ngOnInit(): void {\n  }\n\n  addUser() {\n    this.userService.addUser(this.user).subscribe((res: any) => {\n      if (res.status === 200) {\n        this.router.navigate(['/users']);\n      }\n    })\n  }\n\n}\n<|repo_name|>mohamed-ahmed-elsayed/angulartask<|file_sep|>/src/app/services/auth.service.ts\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor() { }\n\n  setUser(user: any) {\n    localStorage.setItem('user', JSON.stringify(user));\n  }\n\n  getUser() {\n    return JSON.parse(localStorage.getItem('user'));\n  }\n\n  logout() {\n    localStorage.removeItem('user');\n  }\n\n  isAuthenticated() {\n    return !!localStorage.getItem('user');\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n\n  user: any = {};\n  constructor(private router: Router, private authService: AuthService) { }\n\n  ngOnInit(): void {\n    this.user = this.authService.getUser();\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n\n}\n<|file_sep|>import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private http: HttpClient) { }\n\n  getUsers(): Observable<any> {\n    return this.http.get('/api/users');\n  }\n\n  addUser(user: any): Observable<any> {\n    return this.http.post('/api/users', user);\n  }\n\n  getUser(id: string): Observable<any> {\n    return this.http.get(`/api/users/${id}`);\n  }\n\n  updateUser(id: string, user: any): Observable<any> {\n    return this.http.put(`/api/users/${id}`, user);\n  }\n\n  deleteUser(id: string): Observable<any> {\n    return this.http.delete(`/api/users/${id}`);\n  }\n}\n<|repo_name|>jamesmccaffrey/CS-445-Project<|file_sep|>/src/edu/ncsu/csc316/assignment4/Node.java\npackage edu.ncsu.csc316.assignment4;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Node class for the graph\n * \n * @author James McCaffrey\n * @version 1.0\n */\npublic class Node {\n\tprivate String name;\n\tprivate List<Edge> edges;\n\tprivate int distance;\n\tprivate Node previous;\n\tprivate boolean visited;\n\n\t/**\n\t * Constructor for the node\n\t * \n\t * @param name\n\t *            the name of the node\n\t */\n\tpublic Node(String name) {\n\t\tthis.name = name;\n\t\tthis.edges = new ArrayList<Edge>();\n\t\tthis.distance = Integer.MAX_VALUE;\n\t\tthis.previous = null;\n\t\tthis.visited = false;\n\t}\n\n\t/**\n\t * Adds an edge to the node\n\t * \n\t * @param edge\n\t *            the edge to add\n\t */\n\tpublic void addEdge(Edge edge) {\n\t\tedges.add(edge);\n\t}\n\n\t/**\n\t * Gets the name of the node\n\t * \n\t * @return the name of the node\n\t */\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\t/**\n\t * Gets the edges of the node\n\t * \n\t * @return the edges of the node\n\t */\n\tpublic List<Edge> getEdges() {\n\t\treturn edges;\n\t}\n\n\t/**\n\t * Gets the distance of the node\n\t * \n\t * @return the distance of the node\n\t */\n\tpublic int getDistance() {\n\t\treturn distance;\n\t}\n\n\t/**\n\t * Sets the distance of the node\n\t * \n\t * @param distance\n\t *            the distance to set\n\t */\n\tpublic void setDistance(int distance) {\n\t\tthis.distance = distance;\n\t}\n\n\t/**\n\t * Gets the previous node\n\t * \n\t * @return the previous node\n\t */\n\tpublic Node getPrevious() {\n\t\treturn previous;\n\t}\n\n\t/**\n\t * Sets the previous node\n\t * \n\t * @param previous\n\t *            the previous node\n\t */\n\tpublic void setPrevious(Node previous) {\n\t\tthis.previous = previous;\n\t}\n\n\t/**\n\t * Gets if the node has been visited\n\t * \n\t * @return if the node has been visited\n\t */\n\tpublic boolean isVisited() {\n\t\treturn visited;\n\t}\n\n\t/**\n\t * Sets if the node has been visited\n\t * \n\t * @param visited\n\t *            if the node has been visited\n\t */\n\tpublic void setVisited(boolean visited) {\n\t\tthis.visited = visited;\n\t}\n\n\t/**\n\t * Gets the string representation of the node\n\t * \n\t * @return the string representation of the node\n\t */\n\t@Override\n\tpublic String toString() {\n\t\treturn name;\n\t}\n}\n<|repo_name|>jamesmccaffrey/CS-445-Project<|file_sep|>/src/edu/ncsu/csc316/assignment4/Graph.java\npackage edu.ncsu.csc316.assignment4;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Graph class for the graph\n * \n * @author James McCaffrey\n * @version 1.0\n */\npublic class Graph {\n\tprivate List<Node> nodes;\n\tprivate List<Edge> edges;\n\n\t/**\n\t * Constructor for the graph\n\t */\n\tpublic Graph() {\n\t\tthis.nodes = new ArrayList<Node>();\n\t\tthis.edges = new ArrayList<Edge>();\n\t}\n\n\t/**\n\t * Adds a node to the graph\n\t * \n\t * @param node\n\t *            the node to add\n\t */\n\tpublic void addNode(Node node) {\n\t\tnodes.add(node);\n\t}\n\n\t/**\n\t * Adds an edge to the graph\n\t * \n\t * @param edge\n\t *            the edge to add\n\t */\n\tpublic void addEdge(Edge edge) {\n\t\tedges.add(edge);\n\t}\n\n\t/**\n\t * Gets the nodes of the graph\n\t * \n\t * @return the nodes of the graph\n\t */\n\tpublic List<Node> getNodes() {\n\t\treturn nodes;\n\t}\n\n\t/**\n\t * Gets the edges of the graph\n\t * \n\t * @return the edges of the graph\n\t */\n\tpublic List<Edge> getEdges() {\n\t\treturn edges;\n\t}\n\n\t/**\n\t * Gets the string representation of the graph\n\t * \n\t * @return the string representation of the graph\n\t */\n\t@Override\n\tpublic String toString() {\n\t\tStringBuilder builder = new StringBuilder();\n\t\tfor (Node node : nodes) {\n\t\t\tbuilder.append(node.getName() + \":\\n\");\n\t\t\tfor (Edge edge : node.getEdges()) {\n\t\t\t\tbuilder.append(\"\\t\" + edge.toString() + \"\\n\");\n\t\t\t}\n\t\t}\n\t\treturn builder.toString();\n\t}\n}\n<|repo_name|>jamesmccaffrey/CS-445-Project<|file_sep|>/src/edu/ncsu/csc316/assignment4/Edge.java\npackage edu.ncsu.csc316.assignment4;\n\n/**\n * Edge class for the graph\n * \n * @author James McCaffrey\n * @version 1.0\n */\npublic class Edge {\n\tprivate Node start;\n\tprivate Node end;\n\tprivate int weight;\n\n\t/**\n\t * Constructor for the edge\n\t * \n\t * @param start\n\t *            the start node\n\t * @param end\n\t *            the end node\n\t * @param weight\n\t *            the weight of the edge\n\t */\n\tpublic Edge(Node start, Node end, int weight) {\n\t\tthis.start = start;\n\t\tthis.end = end;\n\t\tthis.weight = weight;\n\t}\n\n\t/**\n\t * Gets the start node\n\t * \n\t * @return the start node\n\t */\n\tpublic Node getStart() {\n\t\treturn start;\n\t}\n\n\t/**\n\t * Gets the end node\n\t * \n\t * @return the end node\n\t */\n\tpublic Node getEnd() {\n\t\treturn end;\n\t}\n\n\t/**\n\t * Gets the weight of the edge\n\t * \n\t * @return the weight of the edge\n\t */\n\tpublic int getWeight() {\n\t\treturn weight;\n\t}\n\n\t/**\n\t * Gets the string representation of the edge\n\t * \n\t * @return the string representation of the edge\n\t */\n\t@Override\n\tpublic String toString() {\n\t\treturn start.getName() + \" -> \" + end.getName() + \" (\" + weight + \")\";\n\t}\n}\n<|file_sep|>package edu.ncsu.csc316.assignment4;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Parser class for the graph\n * \n * @author James McCaffrey\n * @version 1.0\n */\npublic class Parser {\n\tprivate Graph graph;\n\n\t/**\n\t * Constructor for the parser\n\t */\n\tpublic Parser() {\n\t\tthis.graph = new Graph();\n\t}\n\n\t/**\n\t * Parses the file\n\t * \n\t * @param fileName\n\t *            the file name\n\t * @return the graph\n\t * @throws IOException\n\t *             if there is an error reading the file\n\t */\n\tpublic Graph parse(String fileName) throws IOException {\n\t\tBufferedReader reader = new BufferedReader(new FileReader(fileName));\n\t\tString line = reader.readLine();\n\t\twhile (line != null) {\n\t\t\tif (line.startsWith(\"NODE\")) {\n\t\t\t\tString[] parts = line.split(\" \");\n\t\t\t\tNode node = new Node(parts[1]);\n\t\t\t\tgraph.addNode(node);\n\t\t\t} else if (line.startsWith(\"EDGE\")) {\n\t\t\t\tString[] parts = line.split(\" \");\n\t\t\t\tNode start = null;\n\t\t\t\tNode end = null;\n\t\t\t\tfor (Node node : graph.getNodes()) {\n\t\t\t\t\tif (node.getName().equals(parts[1])) {\n\t\t\t\t\t\tstart = node;\n\t\t\t\t\t} else if (node.getName().equals(parts[2])) {\n\t\t\t\t\t\tend = node;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (start == null) {\n\t\t\t\t\tstart = new Node(parts[1]);\n\t\t\t\t\tgraph.addNode(start);\n\t\t\t\t}\n\t\t\t\tif (end == null) {\n\t\t\t\t\tend = new Node(parts[2]);\n\t\t\t\t\tgraph.addNode(end);\n\t\t\t\t}\n\t\t\t\tEdge edge = new Edge(start, end, Integer.parseInt(parts[3]));\n\t\t\t\tgraph.addEdge(edge);\n\t\t\t\tstart.addEdge(edge);\n\t\t\t}\n\t\t\tline = reader.readLine();\n\t\t}\n\t\treader.close();\n\t\treturn graph;\n\t}\n\n\t/**\n\t * Gets the string representation of the parser\n\t * \n\t * @return the string representation of the parser\n\t */\n\t@Override\n\tpublic String toString() {\n\t\treturn graph.toString();\n\t}\n}\n<|repo_name|>jamesmccaffrey/CS-445-Project<|file_sep|>/src/edu/ncsu/csc316/assignment4/ShortestPath.java\npackage edu.ncsu.csc316.assignment4;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * ShortestPath class for the graph\n * \n * @author James McCaffrey\n * @version 1.0\n */\npublic class ShortestPath {\n\tprivate Graph graph;\n\tprivate Node start;\n\tprivate Node end;\n\tprivate List<Node> path;\n\n\t/**\n\t * Constructor for the shortest path\n\t * \n\t * @param graph\n\t *            the graph\n\t * @param start\n\t *            the start node\n\t * @param end\n\t *            the end node\n\t */\n\tpublic ShortestPath(Graph graph, Node start, Node end) {\n\t\tthis.graph = graph;\n\t\tthis.start = start;\n\t\tthis.end = end;\n\t\tthis.path = new ArrayList<Node>();\n\t}\n\n\t/**\n\t * Finds the shortest path\n\t */\n\tpublic void find() {\n\t\tfor (Node node : graph.getNodes()) {\n\t\t\tnode.setDistance(Integer.MAX_VALUE);\n\t\t\tnode.setPrevious(null);\n\t\t\tnode.setVisited(false);\n\t\t}\n\t\tstart.setDistance(0);\n\t\tList<Node> unvisited = new ArrayList<Node>();\n\t\tfor (Node node : graph.getNodes()) {\n\t\t\tunvisited.add(node);\n\t\t}\n\t\twhile (!unvisited.isEmpty()) {\n\t\t\tNode current = null;\n\t\t\tfor (Node node : unvisited) {\n\t\t\t\tif (current == null || node.getDistance() < current.getDistance()) {\n\t\t\t\t\tcurrent = node;\n\t\t\t\t}\n\t\t\t}\n\t\t\tunvisited.remove(current);\n\t\t\tcurrent.setVisited(true);\n\t\t\tfor (Edge edge : current.getEdges()) {\n\t\t\t\tNode neighbor = edge.getEnd();\n\t\t\t\tif (!neighbor.isVisited()) {\n\t\t\t\t\tint distance = current.getDistance() + edge.getWeight();\n\t\t\t\t\tif (distance < neighbor.getDistance()) {\n\t\t\t\t\t\tneighbor.setDistance(distance);\n\t\t\t\t\t\tneighbor.setPrevious(current);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tNode current = end;\n\t\twhile (current != null) {\n\t\t\tpath.add(0, current);\n\t\t\tcurrent = current.getPrevious();\n\t\t}\n\t}\n\n\t/**\n\t * Gets the path\n\t * \n\t * @return the path\n\t */\n\tpublic List<Node> getPath() {\n\t\treturn path;\n\t}\n\n\t/**\n\t * Gets the string representation of the shortest path\n\t *", "input_token_count": 3084, "output_token_count": 4096, "latency": 558.3732686042786}
{"id": "live_simple_49-21-1", "result": "```json\n[{\"function\":\"find_beer\",\"parameters\":{\"brewery\":\"Creek\",\"taste\":\"bitter\",\"aroma\":\"chocolatey\",\"color\":\"dark\",\"style\":\"porter\"}}]\n```", "input_token_count": 5358, "output_token_count": 43, "latency": 396.4062702655792}
{"id": "live_simple_59-28-0", "result": "<TOOLCALL>\n```json\n[{\"function\":\"get_movies\",\"parameters\":{\"city\":\"Mumbai\"}}]\n```</TOOLCALL>", "input_token_count": 3949, "output_token_count": 30, "latency": 396.9753828048706}
{"id": "live_simple_78-39-0", "result": "```json\n[{\"function\":\"send_email\",\"parameters\":{\"to_address\":\"andy@gorilla.ai\",\"subject\":\"Sales Forecast Request\",\"body\":\"where is the latest sales forecast spreadsheet?\"}}]\n```", "input_token_count": 4243, "output_token_count": 41, "latency": 397.04471921920776}
{"id": "live_simple_86-47-0", "result": "```json\n[{\"function\":\"sort_array\",\"parameters\":{\"array\":[1,54,3,1,76,2343,21]}}]\n```", "input_token_count": 2755, "output_token_count": 33, "latency": 398.39935183525085}
{"id": "live_simple_116-72-0", "result": "```json\n[{\"function\":\"sum_numbers\",\"parameters\":{\"numbers_list\":[133.0, 34.0]}}]\n```", "input_token_count": 2495, "output_token_count": 28, "latency": 396.2076725959778}
{"id": "live_simple_130-84-0", "result": "```json\n[{\"function\":\"requests.get\",\"parameters\":{\"url\":\"https://192.120.45.67/sedgeapi/v1/cisco-nir/api/api/telemetry/flowrules/interfaceInfo\",\"params\":{\"fabricName\":\"Network1\",\"nodeId\":12,\"podId\":10,\"interfaceType\":\"ethernet\",\"infoType\":\"statistics\"}}}]\n```", "input_token_count": 3335, "output_token_count": 75, "latency": 397.84086894989014}
{"id": "live_simple_131-84-1", "result": "```json\n[{\"function\":\"requests.get\",\"parameters\":{\"url\":\"https://192.120.45.67/sedgeapi/v1/cisco-nir/api/api/telemetry/flowrules/interfaceInfo\",\"params\":{\"fabricName\":\"Network1\",\"nodeId\":12,\"podId\":10,\"interfaceType\":\"Ethernet\",\"infoType\":\"Speed\"}}}]\n```", "input_token_count": 3380, "output_token_count": 74, "latency": 397.36475372314453}
{"id": "live_simple_167-99-1", "result": "```json\n[{\"function\":\"cmd_controller.execute\",\"parameters\":{\"command\":\"tasklist /FI \\\"IMAGENAME eq Code.exe\\\"\"}}]\n```", "input_token_count": 2940, "output_token_count": 31, "latency": 396.4816515445709}
{"id": "live_simple_181-106-0", "result": "```json\n[{\"function\":\"get_service_id\",\"parameters\":{\"service_id\":2,\"province_id\":1,\"district_name\":\"Chatuchak\",\"rating\":4.5}}]\n```", "input_token_count": 3976, "output_token_count": 39, "latency": 395.4580309391022}
{"id": "live_simple_186-111-0", "result": "```json\n[{\"function\":\"get_service_providers\",\"parameters\":{\"service_id\":2,\"province_id\":3,\"rating\":4.5,\"start_available_date\":\"2024-03-12 16:00:00\",\"end_available_date\":\"2024-03-12 18:00:00\"}}]\n```", "input_token_count": 4909, "output_token_count": 67, "latency": 416.30318212509155}
{"id": "live_simple_188-113-0", "result": "```json\n[{\"function\":\"getDataForProfessional\",\"parameters\":{\"service_id\":2,\"province_id\":2,\"district_name\":\"Sankampang\",\"sub_district_name\":\"Ton Pao\",\"rating\":4.5}}]\n```", "input_token_count": 4909, "output_token_count": 48, "latency": 415.6367464065552}
{"id": "live_simple_193-116-1", "result": "```json\n[{\"function\":\"Weather_1_GetWeather\",\"parameters\":{\"city\":\"New York\",\"date\":\"2023-03-08\"}}]\n```", "input_token_count": 2915, "output_token_count": 32, "latency": 414.7035210132599}
{"id": "live_simple_199-116-7", "result": "```json\n[{\"function\":\"Weather_1_GetWeather\",\"parameters\":{\"city\":\"Marshall\",\"date\":\"2023-03-05\"}}]\n```", "input_token_count": 2915, "output_token_count": 32, "latency": 413.7280156612396}
{"id": "live_simple_202-116-10", "result": "```json\n[{\"function\":\"Weather_1_GetWeather\",\"parameters\":{\"city\":\"Foster City\",\"date\":\"2023-04-25\"}}\n```", "input_token_count": 2915, "output_token_count": 32, "latency": 412.4661235809326}
{"id": "live_simple_204-116-12", "result": "```json\n[{\"function\":\"Weather_1_GetWeather\",\"parameters\":{\"city\":\"Rutherford\",\"date\":\"2023-04-22\"}}]\n```", "input_token_count": 2920, "output_token_count": 32, "latency": 410.1610577106476}
{"id": "live_simple_221-117-13", "result": "```json\n[{\"function\":\"Movies_3_FindMovies\",\"parameters\":{\"directed_by\":\"James Gray\",\"genre\":\"dontcare\",\"genre\":\"dontcare\",\"cast\":\"dontcare\"}}]\n```", "input_token_count": 3588, "output_token_count": 40, "latency": 409.19797372817993}
{"id": "live_simple_236-124-1", "result": "```json\n[{\"function\":\"play_spotify_song\",\"parameters\":{\"query\":\"track:Dil Nu artist:Maninder Buttar\"}}]\n```<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n\n  user: any = {};\n  constructor(private userService: UserService, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.userService.getUser().subscribe((res: any) => {\n      this.user = res;\n    })\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n\n}\n<|repo_name|>sahilsharma-123/ecommerce<|file_sep|>/src/app/services/user.service.ts\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private http: HttpClient) { }\n\n  getUser(): Observable<any> {\n    return this.http.get(`${environment.apiUrl}/user`);\n  }\n\n  updateUser(user: any): Observable<any> {\n    return this.http.put(`${environment.apiUrl}/user`, user);\n  }\n\n  uploadImage(image: any): Observable<any> {\n    return this.http.post(`${environment.apiUrl}/user/upload`, image);\n  }\n}\n<|repo_name|>sahilsharma-123/ecommerce<|file_sep|>/src/app/components/cart/cart.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CartService } from 'src/app/services/cart.service';\n\n@Component({\n  selector: 'app-cart',\n  templateUrl: './cart.component.html',\n  styleUrls: ['./cart.component.css']\n})\nexport class CartComponent implements OnInit {\n\n  cart: any = [];\n  total: number = 0;\n  constructor(private cartService: CartService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.cartService.getCart().subscribe((res: any) => {\n      this.cart = res;\n      this.cart.forEach((item: any) => {\n        this.total += item.price * item.quantity;\n      })\n    })\n  }\n\n  removeItem(id: string) {\n    this.cartService.removeItem(id).subscribe((res: any) => {\n      this.cart = res;\n      this.cart.forEach((item: any) => {\n        this.total += item.price * item.quantity;\n      })\n    })\n  }\n\n  checkout() {\n    this.router.navigate(['/checkout']);\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  user: any = {};\n  error: string = '';\n  constructor(private authService: AuthService, private userService: UserService, private router: Router) { }\n\n  ngOnInit(): void {\n    if (this.authService.isLoggedIn()) {\n      this.router.navigate(['/']);\n    }\n  }\n\n  login() {\n    this.authService.login(this.user).subscribe((res: any) => {\n      this.userService.getUser().subscribe((res: any) => {\n        this.authService.setToken(res.token);\n        this.router.navigate(['/']);\n      })\n    }, (err: any) => {\n      this.error = err.error.message;\n    })\n  }\n\n}\n<|repo_name|>sahilsharma-123/ecommerce<|file_sep|>/src/app/components/checkout/checkout.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CartService } from 'src/app/services/cart.service';\nimport { OrderService } from 'src/app/services/order.service';\n\n@Component({\n  selector: 'app-checkout',\n  templateUrl: './checkout.component.html',\n  styleUrls: ['./checkout.component.css']\n})\nexport class CheckoutComponent implements OnInit {\n\n  cart: any = [];\n  total: number = 0;\n  order: any = {};\n  constructor(private cartService: CartService, private orderService: OrderService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.cartService.getCart().subscribe((res: any) => {\n      this.cart = res;\n      this.cart.forEach((item: any) => {\n        this.total += item.price * item.quantity;\n      })\n    })\n  }\n\n  placeOrder() {\n    this.orderService.placeOrder(this.order).subscribe((res: any) => {\n      this.cartService.clearCart().subscribe((res: any) => {\n        this.router.navigate(['/']);\n      })\n    })\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  user: any = {};\n  error: string = '';\n  constructor(private authService: AuthService, private userService: UserService, private router: Router) { }\n\n  ngOnInit(): void {\n    if (this.authService.isLoggedIn()) {\n      this.router.navigate(['/']);\n    }\n  }\n\n  register() {\n    this.authService.register(this.user).subscribe((res: any) => {\n      this.userService.getUser().subscribe((res: any) => {\n        this.authService.setToken(res.token);\n        this.router.navigate(['/']);\n      })\n    }, (err: any) => {\n      this.error = err.error.message;\n    })\n  }\n\n}\n<|repo_name|>sahilsharma-123/ecommerce<|file_sep|>/src/app/components/product/product.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ProductService } from 'src/app/services/product.service';\nimport { CartService } from 'src/app/services/cart.service';\n\n@Component({\n  selector: 'app-product',\n  templateUrl: './product.component.html',\n  styleUrls: ['./product.component.css']\n})\nexport class ProductComponent implements OnInit {\n\n  product: any = {};\n  constructor(private productService: ProductService, private cartService: CartService, private router: Router, private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.route.params.subscribe((params: any) => {\n      this.productService.getProduct(params.id).subscribe((res: any) => {\n        this.product = res;\n      })\n    })\n  }\n\n  addToCart(product: any) {\n    this.cartService.addToCart(product).subscribe((res: any) => {\n      this.router.navigate(['/cart']);\n    })\n  }\n\n}\n<|repo_name|>sahilsharma-123/ecommerce<|file_sep|>/src/app/components/products/products.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ProductService } from 'src/app/services/product.service';\n\n@Component({\n  selector: 'app-products',\n  templateUrl: './products.component.html',\n  styleUrls: ['./products.component.css']\n})\nexport class ProductsComponent implements OnInit {\n\n  products: any = [];\n  constructor(private productService: ProductService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.productService.getProducts().subscribe((res: any) => {\n      this.products = res;\n    })\n  }\n\n  viewProduct(id: string) {\n    this.router.navigate(['/product', id]);\n  }\n\n}\n<|file_sep|>import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n\n  constructor(private http: HttpClient) { }\n\n  getProducts(): Observable<any> {\n    return this.http.get(`${environment.apiUrl}/products`);\n  }\n\n  getProduct(id: string): Observable<any> {\n    return this.http.get(`${environment.apiUrl}/products/${id}`);\n  }\n}\n<|file_sep|>import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n\n  constructor(private http: HttpClient) { }\n\n  getCart(): Observable<any> {\n    return this.http.get(`${environment.apiUrl}/cart`);\n  }\n\n  addToCart(product: any): Observable<any> {\n    return this.http.post(`${environment.apiUrl}/cart`, product);\n  }\n\n  removeItem(id: string): Observable<any> {\n    return this.http.delete(`${environment.apiUrl}/cart/${id}`);\n  }\n\n  clearCart(): Observable<any> {\n    return this.http.delete(`${environment.apiUrl}/cart`);\n  }\n}\n<|repo_name|>sahilsharma-123/ecommerce<|file_sep|>/src/app/components/navbar/navbar.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n\n  user: any = {};\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    if (this.authService.isLoggedIn()) {\n      this.user = this.authService.getUser();\n    }\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n\n}\n<|repo_name|>sahilsharma-123/ecommerce<|file_sep|>/src/app/services/order.service.ts\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderService {\n\n  constructor(private http: HttpClient) { }\n\n  placeOrder(order: any): Observable<any> {\n    return this.http.post(`${environment.apiUrl}/order`, order);\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-edit-profile',\n  templateUrl: './edit-profile.component.html',\n  styleUrls: ['./edit-profile.component.css']\n})\nexport class EditProfileComponent implements OnInit {\n\n  user: any = {};\n  error: string = '';\n  constructor(private userService: UserService, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.userService.getUser().subscribe((res: any) => {\n      this.user = res;\n    })\n  }\n\n  updateUser() {\n    this.userService.updateUser(this.user).subscribe((res: any) => {\n      this.router.navigate(['/profile']);\n    }, (err: any) => {\n      this.error = err.error.message;\n    })\n  }\n\n  uploadImage(event: any) {\n    const file = event.target.files[0];\n    const formData = new FormData();\n    formData.append('image', file);\n    this.userService.uploadImage(formData).subscribe((res: any) => {\n      this.user.image = res.image;\n    })\n  }\n\n}\n<|file_sep|>import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthGuard } from './guards/auth.guard';\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { ProductsComponent } from './components/products/products.component';\nimport { ProductComponent } from './components/product/product.component';\nimport { CartComponent } from './components/cart/cart.component';\nimport { CheckoutComponent } from './components/checkout/checkout.component';\nimport { ProfileComponent } from './components/profile/profile.component';\nimport { EditProfileComponent } from './components/edit-profile/edit-profile.component';\n\nconst routes: Routes = [\n  { path: '', component: ProductsComponent },\n  { path: 'login', component: LoginComponent },\n  { path: 'register', component: RegisterComponent },\n  { path: 'products', component: ProductsComponent },\n  { path: 'product/:id', component: ProductComponent },\n  { path: 'cart', component: CartComponent },\n  { path: 'checkout', component: CheckoutComponent },\n  { path: 'profile', component: ProfileComponent, canActivate: [AuthGuard] },\n  { path: 'edit-profile', component: EditProfileComponent, canActivate: [AuthGuard] },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n<|repo_name|>sahilsharma-123/ecommerce<|file_sep|>/src/app/services/auth.service.ts\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(private http: HttpClient) { }\n\n  register(user: any): Observable<any> {\n    return this.http.post(`${environment.apiUrl}/register`, user);\n  }\n\n  login(user: any): Observable<any> {\n    return this.http.post(`${environment.apiUrl}/login`, user);\n  }\n\n  setToken(token: string) {\n    localStorage.setItem('token', token);\n  }\n\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n  getUser() {\n    return JSON.parse(localStorage.getItem('user'));\n  }\n\n  isLoggedIn() {\n    return !!this.getToken();\n  }\n\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n\n  user: any = {};\n  constructor(private userService: UserService, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.userService.getUser().subscribe((res: any) => {\n      this.user = res;\n    })\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n\n}\n<|repo_name|>sahilsharma-1999/ecommerce<|file_sep|>/src/app/components/admin/admin.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { AdminService } from 'src/app/services/admin.service';\n\n@Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.css']\n})\nexport class AdminComponent implements OnInit {\n\n  products: any = [];\n  constructor(private adminService: AdminService, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.adminService.getProducts().subscribe((res: any) => {\n      this.products = res;\n    })\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { AdminService } from 'src/app/services/admin.service';\n\n@Component({\n  selector: 'app-add-product',\n  templateUrl: './add-product.component.html',\n  styleUrls: ['./add-product.component.css']\n})\nexport class AddProductComponent implements OnInit {\n\n  product: any = {};\n  constructor(private adminService: AdminService, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  addProduct() {\n    this.adminService.addProduct(this.product).subscribe((res: any) => {\n      this.router.navigate(['/admin']);\n    })\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { AdminService } from 'src/app/services/admin.service';\n\n@Component({\n  selector: 'app-edit-product',\n  templateUrl: './edit-product.component.html',\n  styleUrls: ['./edit-product.component.css']\n})\nexport class EditProductComponent implements OnInit {\n\n  product: any = {};\n  constructor(private adminService: AdminService, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.adminService.getProduct(this.authService.getProductId()).subscribe((res: any) => {\n      this.product = res;\n    })\n  }\n\n  editProduct() {\n    this.adminService.editProduct(this.product).subscribe((res: any) => {\n      this.router.navigate(['/admin']);\n    })\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { AdminService } from 'src/app/services/admin.service';\n\n@Component({\n  selector: 'app-delete-product',\n  templateUrl: './delete-product.component.html',\n  styleUrls: ['./delete-product.component.css']\n})\nexport class DeleteProductComponent implements OnInit {\n\n  constructor(private adminService: AdminService, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  deleteProduct() {\n    this.adminService.deleteProduct(this.authService.getProductId()).subscribe((res: any) => {\n      this.router.navigate(['/admin']);\n    })\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { AdminService } from 'src/app/services/admin.service';\n\n@Component({\n  selector: 'app-view-product',\n  templateUrl: './view-product.component.html',\n  styleUrls: ['./view-product.component.css']\n})\nexport class ViewProductComponent implements OnInit {\n\n  product: any = {};\n  constructor(private adminService: AdminService, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.adminService.getProduct(this.authService.getProductId()).subscribe((res: any) => {\n      this.product = res;\n    })\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n\n}\n<|repo_name|>sahilsharma-1999/ecommerce<|file_sep|>/src/app/components/user/user.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector:", "input_token_count": 3335, "output_token_count": 4096, "latency": 484.9303479194641}
{"id": "live_simple_245-127-0", "result": "```json\n[{\"function\":\"book_flight\",\"parameters\":{\"departure_location\":\"JFK\",\"departure_date\":\"16/03/2024\",\"departure_time\":\"14:00\"}}]\n```<|repo_name|>jamesmccaffrey/azure-docs<|file_sep|>/articles/azure-monitor/app/java-standalone-config.md\n---\ntitle: Application Insights Java standalone agent configuration | Microsoft Docs\ndescription: Configure the Application Insights Java standalone agent\nms.topic: conceptual\nms.date: 09/15/2020\n---\n\n# Application Insights Java standalone agent configuration\n\nThe Application Insights Java standalone agent is a Java agent that can be attached to any Java application to collect telemetry. It can be used with any Java application, including those running on Azure App Services, Azure Spring Cloud, and Azure Kubernetes Service. It can also be used with Java applications running on-premises or in other cloud environments.\n\nThe agent is configured using a JSON configuration file. The configuration file is passed to the Java application using the `-javaagent` command line option. The configuration file can be specified using the `-javaagent` option or by setting the `APPLICATION_INSIGHTS_CONFIGURATION_FILE` environment variable.\n\n## Configuration file\n\nThe configuration file is a JSON file that contains the configuration settings for the Application Insights Java standalone agent. The configuration file can be specified using the `-javaagent` option or by setting the `APPLICATION_INSIGHTS_CONFIGURATION_FILE` environment variable.\n\nThe following is an example of a configuration file:\n\n```json\n{\n  \"instrumentation\": {\n    \"logging\": {\n      \"level\": \"INFO\"\n    },\n    \"http\": {\n      \"enabled\": true\n    },\n    \"jdbc\": {\n      \"enabled\": true\n    },\n    \"spring\": {\n      \"enabled\": true\n    }\n  },\n  \"connectionString\": \"InstrumentationKey=00000000-0000-0000-0000-000000000000\"\n}\n```\n\nThe configuration file contains the following sections:\n\n- `instrumentation`: This section contains the instrumentation settings for the Application Insights Java standalone agent. The instrumentation settings control which types of telemetry are collected by the agent.\n- `connectionString`: This section contains the connection string for the Application Insights resource. The connection string is used by the agent to send telemetry to the Application Insights resource.\n\n## Instrumentation settings\n\nThe instrumentation settings control which types of telemetry are collected by the Application Insights Java standalone agent. The following instrumentation settings are available:\n\n- `logging`: This setting controls the logging level for the Application Insights Java standalone agent. The logging level can be set to `OFF`, `ERROR`, `WARN`, `INFO`, or `DEBUG`.\n- `http`: This setting controls whether HTTP telemetry is collected by the Application Insights Java standalone agent. The setting can be set to `true` or `false`.\n- `jdbc`: This setting controls whether JDBC telemetry is collected by the Application Insights Java standalone agent. The setting can be set to `true` or `false`.\n- `spring`: This setting controls whether Spring telemetry is collected by the Application Insights Java standalone agent. The setting can be set to `true` or `false`.\n\n## Connection string\n\nThe connection string is used by the Application Insights Java standalone agent to send telemetry to the Application Insights resource. The connection string is specified in the configuration file using the `connectionString` property.\n\nThe connection string has the following format:\n\n```\nInstrumentationKey=00000000-0000-0000-0000-000000000000\n```\n\nThe `InstrumentationKey` is the instrumentation key for the Application Insights resource. The instrumentation key can be found in the Azure portal under the Application Insights resource.\n\n## Next steps\n\n- [Application Insights Java standalone agent overview](java-standalone-agent.md)\n- [Application Insights Java standalone agent installation](java-standalone-agent-install.md)\n- [Application Insights Java standalone agent troubleshooting](java-standalone-troubleshoot.md)\n<|file_sep|>---\ntitle: Azure Monitor for containers overview\ndescription: Learn about Azure Monitor for containers, which provides monitoring for containerized applications running on Azure Kubernetes Service (AKS), Azure Red Hat OpenShift, and Azure Arc-enabled Kubernetes clusters.\nms.topic: conceptual\nms.date: 09/15/2020\n---\n\n# Azure Monitor for containers overview\n\nAzure Monitor for containers provides monitoring for containerized applications running on Azure Kubernetes Service (AKS), Azure Red Hat OpenShift, and Azure Arc-enabled Kubernetes clusters. It collects metrics and logs from the host and container, and provides a single pane of glass for monitoring the health of your clusters and applications. Azure Monitor for containers is available in the Azure portal and can be accessed from the **Insights** section of your AKS, Azure Red Hat OpenShift, or Azure Arc-enabled Kubernetes cluster.\n\nAzure Monitor for containers is built on top of [Azure Monitor for VMs](../vm/monitor-vm-azure.md), which provides monitoring for virtual machines. Azure Monitor for containers extends the capabilities of Azure Monitor for VMs to provide monitoring for containerized applications.\n\n## Features\n\nAzure Monitor for containers provides the following features:\n\n- **Metrics and logs**: Azure Monitor for containers collects metrics and logs from the host and container, and provides a single pane of glass for monitoring the health of your clusters and applications. Metrics and logs are collected from the following sources:\n  - **Kubernetes**: Metrics and logs are collected from the Kubernetes API server, kubelet, and container runtime.\n  - **Host**: Metrics and logs are collected from the host operating system, including CPU, memory, disk, and network metrics.\n  - **Container**: Metrics and logs are collected from the container, including CPU, memory, disk, and network metrics.\n- **Alerts**: Azure Monitor for containers provides alerts for common issues, such as high CPU or memory usage, low disk space, and network connectivity issues. Alerts can be configured to send notifications to email, SMS, or webhook.\n- **Dashboards**: Azure Monitor for containers provides pre-built dashboards for monitoring the health of your clusters and applications. Dashboards can be customized to show the metrics and logs that are most important to you.\n- **Log queries**: Azure Monitor for containers provides a powerful query language for querying logs. You can use log queries to analyze logs and troubleshoot issues.\n- **Export**: Azure Monitor for containers provides the ability to export metrics and logs to other destinations, such as Azure Storage, Azure Event Hubs, or Log Analytics workspace.\n\n## Architecture\n\nAzure Monitor for containers is built on top of Azure Monitor for VMs, which provides monitoring for virtual machines. Azure Monitor for containers extends the capabilities of Azure Monitor for VMs to provide monitoring for containerized applications.\n\nThe architecture of Azure Monitor for containers consists of the following components:\n\n- **Azure Monitor for VMs**: Azure Monitor for VMs provides monitoring for virtual machines. It collects metrics and logs from the host operating system, including CPU, memory, disk, and network metrics.\n- **Azure Monitor for containers agent**: The Azure Monitor for containers agent is a lightweight agent that runs on each node in your cluster. It collects metrics and logs from the host and container, and sends them to Azure Monitor for VMs.\n- **Azure Monitor for VMs backend**: The Azure Monitor for VMs backend is a cloud-based service that receives metrics and logs from the Azure Monitor for containers agent. It stores the metrics and logs in Azure Monitor for VMs, and provides the ability to query and analyze the data.\n\nThe following diagram shows the architecture of Azure Monitor for containers:\n\n![Azure Monitor for containers architecture](./media/container-insights-overview/azure-monitor-containers-architecture.png)\n\n## Prerequisites\n\nBefore you can use Azure Monitor for containers, you must have the following prerequisites:\n\n- An Azure subscription. If you don't have an Azure subscription, you can [create a free account](https://azure.microsoft.com/free/) before you begin.\n- An AKS, Azure Red Hat OpenShift, or Azure Arc-enabled Kubernetes cluster. If you don't have a cluster, you can [create one](../aks/kubernetes-walkthrough.md) before you begin.\n- The Azure Monitor for containers agent must be installed on each node in your cluster. The agent can be installed using the [Azure Monitor for containers extension](container-insights-onboard.md) or by [manually installing the agent](container-insights-manage-agent.md).\n\n## Next steps\n\n- Learn how to [onboard your cluster to Azure Monitor for containers](container-insights-onboard.md).\n- Learn how to [manage the Azure Monitor for containers agent](container-insights-manage-agent.md).\n- Learn how to [use Azure Monitor for containers to monitor your cluster](container-insights-analyze.md).\n- Learn how to [use Azure Monitor for containers to monitor your application](container-insights-analyze-app.md).\n- Learn how to [use Azure Monitor for containers to troubleshoot issues](container-insights-troubleshoot.md).\n<|file_sep|>---\ntitle: Azure Monitor for containers FAQ\ndescription: This article answers frequently asked questions about Azure Monitor for containers.\nms.topic: conceptual\nms.date: 09/15/2020\n---\n\n# Azure Monitor for containers FAQ\n\nThis article answers frequently asked questions about Azure Monitor for containers.\n\n## What is Azure Monitor for containers?\n\nAzure Monitor for containers provides monitoring for containerized applications running on Azure Kubernetes Service (AKS), Azure Red Hat OpenShift, and Azure Arc-enabled Kubernetes clusters. It collects metrics and logs from the host and container, and provides a single pane of glass for monitoring the health of your clusters and applications. Azure Monitor for containers is available in the Azure portal and can be accessed from the **Insights** section of your AKS, Azure Red Hat OpenShift, or Azure Arc-enabled Kubernetes cluster.\n\n## What does Azure Monitor for containers monitor?\n\nAzure Monitor for containers monitors the following:\n\n- **Kubernetes**: Metrics and logs are collected from the Kubernetes API server, kubelet, and container runtime.\n- **Host**: Metrics and logs are collected from the host operating system, including CPU, memory, disk, and network metrics.\n- **Container**: Metrics and logs are collected from the container, including CPU, memory, disk, and network metrics.\n\n## How does Azure Monitor for containers collect metrics and logs?\n\nAzure Monitor for containers collects metrics and logs using the Azure Monitor for containers agent. The agent is a lightweight agent that runs on each node in your cluster. It collects metrics and logs from the host and container, and sends them to Azure Monitor for VMs.\n\n## How do I onboard my cluster to Azure Monitor for containers?\n\nYou can onboard your cluster to Azure Monitor for containers using the [Azure Monitor for containers extension](container-insights-onboard.md) or by [manually installing the agent](container-insights-manage-agent.md).\n\n## How do I manage the Azure Monitor for containers agent?\n\nYou can manage the Azure Monitor for containers agent using the [Azure Monitor for containers extension](container-insights-manage-agent.md) or by [manually installing the agent](container-insights-manage-agent.md).\n\n## How do I use Azure Monitor for containers to monitor my cluster?\n\nYou can use Azure Monitor for containers to monitor your cluster by accessing the **Insights** section of your AKS, Azure Red Hat OpenShift, or Azure Arc-enabled Kubernetes cluster in the Azure portal. The **Insights** section provides a single pane of glass for monitoring the health of your cluster, including metrics and logs from the host and container.\n\n## How do I use Azure Monitor for containers to monitor my application?\n\nYou can use Azure Monitor for containers to monitor your application by accessing the **Insights** section of your AKS, Azure Red Hat OpenShift, or Azure Arc-enabled Kubernetes cluster in the Azure portal. The **Insights** section provides a single pane of glass for monitoring the health of your application, including metrics and logs from the host and container.\n\n## How do I use Azure Monitor for containers to troubleshoot issues?\n\nYou can use Azure Monitor for containers to troubleshoot issues by accessing the **Insights** section of your AKS, Azure Red Hat OpenShift, or Azure Arc-enabled Kubernetes cluster in the Azure portal. The **Insights** section provides a single pane of glass for monitoring the health of your cluster and application, including metrics and logs from the host and container. You can use the metrics and logs to troubleshoot issues with your cluster or application.\n\n## How do I export metrics and logs from Azure Monitor for containers?\n\nYou can export metrics and logs from Azure Monitor for containers to other destinations, such as Azure Storage, Azure Event Hubs, or Log Analytics workspace. To export metrics and logs, you must configure the export settings in the **Insights** section of your AKS, Azure Red Hat OpenShift, or Azure Arc-enabled Kubernetes cluster in the Azure portal.\n\n## How do I configure alerts in Azure Monitor for containers?\n\nYou can configure alerts in Azure Monitor for containers to notify you of common issues, such as high CPU or memory usage, low disk space, and network connectivity issues. To configure alerts, you must configure the alert settings in the **Insights** section of your AKS, Azure Red Hat OpenShift, or Azure Arc-enabled Kubernetes cluster in the Azure portal.\n\n## How do I customize dashboards in Azure Monitor for containers?\n\nYou can customize dashboards in Azure Monitor for containers to show the metrics and logs that are most important to you. To customize dashboards, you must edit the dashboard settings in the **Insights** section of your AKS, Azure Red Hat OpenShift, or Azure Arc-enabled Kubernetes cluster in the Azure portal.\n\n## How do I use log queries in Azure Monitor for containers?\n\nYou can use log queries in Azure Monitor for containers to analyze logs and troubleshoot issues. To use log queries, you must access the **Logs** section of your AKS, Azure Red Hat OpenShift, or Azure Arc-enabled Kubernetes cluster in the Azure portal. The **Logs** section provides a powerful query language for querying logs.\n\n## How do I uninstall Azure Monitor for containers?\n\nYou can uninstall Azure Monitor for containers by removing the Azure Monitor for containers agent from each node in your cluster. To uninstall Azure Monitor for containers, you must use the [Azure Monitor for containers extension](container-insights-onboard.md) or [manually uninstall the agent](container-insights-manage-agent.md).\n<|repo_name|>jamesmccaffrey/azure-docs<|file_sep|>/articles/azure-monitor/app/java-standalone-troubleshoot.md\n---\ntitle: Troubleshoot Application Insights Java standalone agent | Microsoft Docs\ndescription: Troubleshoot the Application Insights Java standalone agent\nms.topic: conceptual\nms.date: 09/15/2020\n---\n\n# Troubleshoot Application Insights Java standalone agent\n\nThe Application Insights Java standalone agent is a Java agent that can be attached to any Java application to collect telemetry. It can be used with any Java application, including those running on Azure App Services, Azure Spring Cloud, and Azure Kubernetes Service. It can also be used with Java applications running on-premises or in other cloud environments.\n\nThe agent is configured using a JSON configuration file. The configuration file is passed to the Java application using the `-javaagent` command line option. The configuration file can be specified using the `-javaagent` option or by setting the `APPLICATION_INSIGHTS_CONFIGURATION_FILE` environment variable.\n\n## Troubleshooting steps\n\nIf you are experiencing issues with the Application Insights Java standalone agent, you can try the following troubleshooting steps:\n\n1. Verify that the configuration file is correctly formatted and contains the correct settings. The configuration file should be a valid JSON file and should contain the correct settings for the Application Insights Java standalone agent.\n2. Verify that the connection string is correct. The connection string should be in the format `InstrumentationKey=00000000-0000-0000-0000-000000000000`, where `00000000-0000-0000-0000-000000000000` is the instrumentation key for the Application Insights resource.\n3. Verify that the Java application is correctly configured to use the Application Insights Java standalone agent. The Java application should be started with the `-javaagent` option and the path to the configuration file.\n4. Verify that the Java application is correctly configured to send telemetry to the Application Insights resource. The Java application should be configured to send telemetry to the Application Insights resource using the connection string.\n5. Verify that the Application Insights resource is correctly configured to receive telemetry from the Java application. The Application Insights resource should be configured to receive telemetry from the Java application using the instrumentation key.\n\n## Common issues\n\nThe following are some common issues that you may encounter when using the Application Insights Java standalone agent:\n\n- The configuration file is not correctly formatted or contains incorrect settings.\n- The connection string is incorrect.\n- The Java application is not correctly configured to use the Application Insights Java standalone agent.\n- The Java application is not correctly configured to send telemetry to the Application Insights resource.\n- The Application Insights resource is not correctly configured to receive telemetry from the Java application.\n\n## Next steps\n\n- [Application Insights Java standalone agent overview](java-standalone-agent.md)\n- [Application Insights Java standalone agent installation](java-standalone-agent-install.md)\n- [Application Insights Java standalone agent configuration](java-standalone-config.md)\n<|file_sep|>---\ntitle: Azure Monitor for containers agent overview\ndescription: Learn about the Azure Monitor for containers agent, which collects metrics and logs from the host and container.\nms.topic: conceptual\nms.date: 09/15/2020\n---\n\n# Azure Monitor for containers agent overview\n\nThe Azure Monitor for containers agent is a lightweight agent that runs on each node in your cluster. It collects metrics and logs from the host and container, and sends them to Azure Monitor for VMs.\n\nThe Azure Monitor for containers agent is built on top of the [Azure Monitor for VMs agent](../vm/monitor-vm-azure.md), which provides monitoring for virtual machines. The Azure Monitor for containers agent extends the capabilities of the Azure Monitor for VMs agent to provide monitoring for containerized applications.\n\n## Features\n\nThe Azure Monitor for containers agent provides the following features:\n\n- **Metrics and logs**: The Azure Monitor for containers agent collects metrics and logs from the host and container, and sends them to Azure Monitor for VMs.\n- **Alerts**: The Azure Monitor for containers agent provides alerts for common issues, such as high CPU or memory usage, low disk space, and network connectivity issues. Alerts can be configured to send notifications to email, SMS, or webhook.\n- **Dashboards**: The Azure Monitor for containers agent provides pre-built dashboards for monitoring the health of your clusters and applications. Dashboards can be customized to show the metrics and logs that are most important to you.\n- **Log queries**: The Azure Monitor for containers agent provides a powerful query language for querying logs. You can use log queries to analyze logs and troubleshoot issues.\n- **Export**: The Azure Monitor for containers agent provides the ability to export metrics and logs to other destinations, such as Azure Storage, Azure Event Hubs, or Log Analytics workspace.\n\n## Architecture\n\nThe Azure Monitor for containers agent is built on top of the Azure Monitor for VMs agent, which provides monitoring for virtual machines. The Azure Monitor for containers agent extends the capabilities of the Azure Monitor for VMs agent to provide monitoring for containerized applications.\n\nThe architecture of the Azure Monitor for containers agent consists of the following components:\n\n- **Azure Monitor for VMs agent**: The Azure Monitor for VMs agent provides monitoring for virtual machines. It collects metrics and logs from the host operating system, including CPU, memory, disk, and network metrics.\n- **Azure Monitor for containers agent**: The Azure Monitor for containers agent is a lightweight agent that runs on each node in your cluster. It collects metrics and logs from the host and container, and sends them to Azure Monitor for VMs.\n", "input_token_count": 3368, "output_token_count": 4096, "latency": 504.31512570381165}
