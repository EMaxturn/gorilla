{"accuracy": 0.73, "correct_count": 146, "total_count": 200}
{"id": "multiple_7", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_7", "question": [[{"role": "user", "content": "How to assess the population growth in deer and their impact on woodland in Washington state over the past decade?"}]], "function": [{"name": "wildlife_population.assess_growth", "description": "Assesses the population growth of a specific species in a specified location over a period.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species for which the growth is to be calculated."}, "location": {"type": "string", "description": "The area where the species is present."}, "duration": {"type": "integer", "description": "The time period for which the population growth should be calculated in years."}}, "required": ["species", "location", "duration"]}}, {"name": "ecological_impact.analyze", "description": "Analyzes the impact of a species on a particular ecosystem.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species whose impact is to be calculated."}, "ecosystem": {"type": "string", "description": "The ecosystem being affected."}, "location": {"type": "string", "description": "The area where the impact is analyzed."}, "timeframe": {"type": "integer", "description": "The time period for which the impact analysis should be carried out in years.", "default": 5}}, "required": ["species", "ecosystem", "location"]}}]}, "model_result_raw": "[wildlife_population.assess_growth(species='deer', location='Washington state', duration=10), ecological_impact.analyze(species='deer', ecosystem='woodland', location='Washington state', timeframe=10)]", "model_result_decoded": [{"wildlife_population.assess_growth": {"species": "deer", "location": "Washington state", "duration": 10}}, {"ecological_impact.analyze": {"species": "deer", "ecosystem": "woodland", "location": "Washington state", "timeframe": 10}}], "possible_answer": [{"wildlife_population.assess_growth": {"species": ["deer", "Deer"], "location": ["Washington state", "WA", "Washington"], "duration": [10]}}]}
{"id": "multiple_8", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_8", "question": [[{"role": "user", "content": "Find a 3 bedroom villa for sale within $300,000 to $400,000 budget in San Diego."}]], "function": [{"name": "property_valuation.get", "description": "Get estimated value of a property based on location, specifications and age", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the property is located, e.g. San Diego, CA."}, "propertyType": {"type": "string", "description": "Type of property such as villa, condo, apartment, etc."}, "bedrooms": {"type": "integer", "description": "Number of bedrooms required in the property."}, "age": {"type": "integer", "description": "Age of the property in years."}}, "required": ["location", "propertyType", "bedrooms", "age"]}}, {"name": "realestate.find_properties", "description": "Find properties based on location, budget, and specifications", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the property is located, e.g. San Diego, CA."}, "propertyType": {"type": "string", "description": "Type of property such as villa, condo, apartment, etc."}, "bedrooms": {"type": "integer", "description": "Number of bedrooms required in the property."}, "budget": {"type": "dict", "properties": {"min": {"type": "float", "description": "Minimum budget limit."}, "max": {"type": "float", "description": "Maximum budget limit."}}, "description": "Budget range for the property."}}, "required": ["location", "propertyType", "bedrooms", "budget"]}}]}, "model_result_raw": "[property_valuation.get(location='San Diego, CA', propertyType='villa', bedrooms=3, age=0), realestate.find_properties(location='San Diego, CA', propertyType='villa', bedrooms=3, budget={'min': 300000.0, 'max': 400000.0})]", "model_result_decoded": [{"property_valuation.get": {"location": "San Diego, CA", "propertyType": "villa", "bedrooms": 3, "age": 0}}, {"realestate.find_properties": {"location": "San Diego, CA", "propertyType": "villa", "bedrooms": 3, "budget": {"min": 300000.0, "max": 400000.0}}}], "possible_answer": [{"realestate.find_properties": {"location": ["SD", "San Diego", "San Diego, CA", "CA"], "propertyType": ["villa"], "bedrooms": [3], "budget": [{"min": [300000], "max": [400000]}]}}]}
{"id": "multiple_20", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_20", "question": [[{"role": "user", "content": "What is the price to commission a sculpture made of marble with a size of 3 feet?"}]], "function": [{"name": "sculptor_info.get", "description": "Get information about a specific sculptor.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the sculptor."}}, "required": ["name"]}}, {"name": "sculpture_price.calculate", "description": "Calculate the estimated price to commission a sculpture based on the material and size.", "parameters": {"type": "dict", "properties": {"material": {"type": "string", "description": "The material used for the sculpture."}, "size": {"type": "integer", "description": "The size of the sculpture in feet."}, "complexity": {"type": "string", "enum": ["low", "medium", "high"], "description": "The complexity level of the sculpture. Default is 'medium'.", "default": "medium"}}, "required": ["material", "size"]}}, {"name": "sculpture_availability.check", "description": "Check the availability of a specific sculpture in the inventory.", "parameters": {"type": "dict", "properties": {"sculpture_name": {"type": "string", "description": "The name of the sculpture."}, "material": {"type": "string", "description": "The material of the sculpture."}}, "required": ["sculpture_name", "material"]}}]}, "model_result_raw": "['sculpture_price.calculate(material=\"marble\", size=3)']", "possible_answer": [{"sculpture_price.calculate": {"material": ["marble"], "size": [3], "complexity": ["medium", ""]}}]}
{"id": "multiple_26", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_26", "question": [[{"role": "user", "content": "Find out the rewards for playing Fortnite on Playstation platform with different missions and trophies"}]], "function": [{"name": "game_scores.get", "description": "Retrieve scores and rankings based on player\u2019s performance in a certain game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The gaming platform e.g. Xbox, Playstation, PC"}, "level": {"type": "integer", "description": "The level of the game for which you want to retrieve the scores."}, "player": {"type": "string", "description": "The name of the player for whom you want to retrieve scores. Default ''", "optional": true}}, "required": ["game", "platform", "level"]}}, {"name": "game_rewards.get", "description": "Retrieve information about different types of rewards that you can receive when playing a certain game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The gaming platform e.g. Xbox, Playstation, PC"}, "mission": {"type": "string", "description": "The mission for which you want to know the rewards. Default to ''", "optional": true}, "trophy": {"type": "string", "description": "The trophy level for which you want to know the rewards. Default to ''", "optional": true}}, "required": ["game", "platform"]}}, {"name": "game_missions.list", "description": "List all missions for a certain game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the game."}}, "required": ["game"]}}]}, "model_result_raw": "[game_rewards.get(game='Fortnite', platform='Playstation', mission='Mission 1', trophy='Trophy 1'), game_rewards.get(game='Fortnite', platform='Playstation', mission='Mission 2', trophy='Trophy 2')]", "model_result_decoded": [{"game_rewards.get": {"game": "Fortnite", "platform": "Playstation", "mission": "Mission 1", "trophy": "Trophy 1"}}, {"game_rewards.get": {"game": "Fortnite", "platform": "Playstation", "mission": "Mission 2", "trophy": "Trophy 2"}}], "possible_answer": [{"game_rewards.get": {"game": ["Fortnite"], "platform": ["Playstation", "PS"], "mission": [""], "trophy": [""]}}]}
{"id": "multiple_30", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_30", "question": [[{"role": "user", "content": "What is the area of a rectangle with length 12 meters and width 5 meters?"}]], "function": [{"name": "rectangle.area", "description": "Calculate the area of a rectangle with given length and width", "parameters": {"type": "dict", "properties": {"length": {"type": "integer", "description": "Length of the rectangle"}, "width": {"type": "integer", "description": "Width of the rectangle"}}, "required": ["length", "width"]}}, {"name": "circle.area", "description": "Calculate the area of a circle with given radius", "parameters": {"type": "dict", "properties": {"radius": {"type": "float", "description": "Radius of the circle"}, "isDiameter": {"type": "boolean", "description": "Whether the given length is the diameter of the circle, default is false", "default": false}}, "required": ["radius"]}}, {"name": "triangle.area", "description": "Calculate the area of a triangle with given base and height", "parameters": {"type": "dict", "properties": {"base": {"type": "float", "description": "Base of the triangle"}, "height": {"type": "float", "description": "Height of the triangle"}}, "required": ["base", "height"]}}]}, "model_result_raw": "['rectangle.area(length=12, width=5)']", "possible_answer": [{"rectangle.area": {"length": [12], "width": [5]}}]}
{"id": "multiple_37", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_37", "question": [[{"role": "user", "content": "Find the final velocity of an object thrown up at 40 m/s after 6 seconds."}]], "function": [{"name": "physics.wave_velocity", "description": "Calculate the velocity of a wave based on its frequency and wavelength.", "parameters": {"type": "dict", "properties": {"frequency": {"type": "float", "description": "The frequency of the wave in Hz."}, "wavelength": {"type": "float", "description": "The wavelength of the wave in m."}}, "required": ["frequency", "wavelength"]}}, {"name": "kinematics.final_velocity", "description": "Find the final velocity of an object moving under constant acceleration.", "parameters": {"type": "dict", "properties": {"initial_velocity": {"type": "integer", "description": "The initial velocity of the object in m/s."}, "time": {"type": "integer", "description": "The time in seconds the object has been moving."}, "acceleration": {"type": "float", "description": "The acceleration of the object in m/s^2. Default value is -9.81 (Earth's gravity)"}}, "required": ["initial_velocity", "time"]}}, {"name": "kinematics.distance", "description": "Find the distance traveled by an object moving under constant acceleration.", "parameters": {"type": "dict", "properties": {"initial_velocity": {"type": "float", "description": "The initial velocity of the object in m/s."}, "time": {"type": "integer", "description": "The time in seconds the object has been moving."}, "acceleration": {"type": "float", "description": "The acceleration of the object in m/s^2. Default value is -9.81 (Earth's gravity)"}}, "required": ["initial_velocity", "time"]}}]}, "model_result_raw": "['kinematics.final_velocity(initial_velocity=40, time=6, acceleration=-9.81)']", "possible_answer": [{"kinematics.final_velocity": {"initial_velocity": [40], "time": [6], "acceleration": [-9.81, ""]}}]}
{"id": "multiple_46", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax. Perhaps you forgot a comma? (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_46", "question": [[{"role": "user", "content": "Sort this list of names in ascending order: ['Sam', 'Alice', 'Jack']"}]], "function": [{"name": "filter_list", "description": "Filters elements of a list based on a given condition", "parameters": {"type": "dict", "properties": {"elements": {"type": "array", "items": {"type": "string"}, "description": "The list of elements to filter."}, "condition": {"type": "string", "description": "The condition to filter the elements on."}}, "required": ["elements", "condition"]}}, {"name": "sum_elements", "description": "Add all elements of a numeric list", "parameters": {"type": "dict", "properties": {"elements": {"type": "array", "items": {"type": "integer"}, "description": "The list of numeric elements to add."}}, "required": ["elements"]}}, {"name": "sort_list", "description": "Sort the elements of a list in ascending or descending order", "parameters": {"type": "dict", "properties": {"elements": {"type": "array", "items": {"type": "string"}, "description": "The list of elements to sort."}, "order": {"type": "string", "description": "The order in which to sort the elements. This can be 'asc' for ascending order, or 'desc' for descending order.", "default": "asc"}}, "required": ["elements"]}}]}, "model_result_raw": "['sort_list(elements=['Alice', 'Jack', 'Sam'], order='asc')']", "possible_answer": [{"sort_list": {"elements": [["Sam", "Alice", "Jack"]], "order": ["asc", ""]}}]}
{"id": "multiple_58", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'expertise': 'Marriage'. Expected one of ['Divorce']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_58", "question": [[{"role": "user", "content": "Search for divorce law specialists in Los Angeles"}]], "function": [{"name": "doctor.search", "description": "Search for a doctor based on area of expertise and location", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Los Angeles, CA"}, "specialization": {"type": "string", "description": "Medical specialization. For example, 'Cardiology', 'Orthopedics', 'Gynecology'."}}, "required": ["location", "specialization"]}}, {"name": "lawyer.search", "description": "Search for a lawyer based on area of expertise and location", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Los Angeles, CA"}, "expertise": {"type": "string", "description": "Area of legal expertise. For example, 'Marriage', 'Criminal', 'Business'."}}, "required": ["location", "expertise"]}}]}, "model_result_raw": "[lawyer.search(location='Los Angeles, CA', expertise='Marriage')]", "model_result_decoded": [{"lawyer.search": {"location": "Los Angeles, CA", "expertise": "Marriage"}}], "possible_answer": [{"lawyer.search": {"location": ["Los Angeles", "Los Angeles, CA", "LA"], "expertise": ["Divorce"]}}]}
{"id": "multiple_59", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_59", "question": [[{"role": "user", "content": "Find lawyers specializing in criminal law near me in New York."}]], "function": [{"name": "car_rental", "description": "Rent a car near you based on your preference.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Your location"}, "car_type": {"type": "array", "items": {"type": "string"}, "description": "Type of cars that you want to rent."}, "fuel_type": {"type": "string", "description": "Preferred fuel type of car. Gas, diesel, electric, hybrid etc. Default 'gas'"}}, "required": ["location", "car_type"]}}, {"name": "lawyer_finder", "description": "Locate lawyers near you based on their specialization.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Your location"}, "specialization": {"type": "array", "items": {"type": "string"}, "description": "Specializations of lawyer that you are looking for."}, "experience": {"type": "integer", "description": "Experience in years that lawyer has. Default 1"}}, "required": ["location", "specialization"]}}]}, "model_result_raw": "['lawyer_finder(location=\"New York\", specialization=[\"criminal law\"])']", "possible_answer": [{"lawyer_finder": {"location": ["New York", "New York, NY", "NY", "New York City", "NYC"], "specialization": [["Criminal Law"], ["criminal law"]], "experience": ["", 1]}}]}
{"id": "multiple_72", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_72", "question": [[{"role": "user", "content": "What was the population of California in 1970?"}]], "function": [{"name": "us_history.population_by_state_year", "description": "Retrieve historical population data for a specific U.S. state and year.", "parameters": {"type": "dict", "properties": {"state": {"type": "string", "description": "The U.S. state for which to retrieve the population."}, "year": {"type": "integer", "description": "The year for which to retrieve the population."}}, "required": ["state", "year"]}}, {"name": "us_economy.gdp_by_state_year", "description": "Retrieve historical GDP data for a specific U.S. state and year.", "parameters": {"type": "dict", "properties": {"state": {"type": "string", "description": "The U.S. state for which to retrieve the GDP."}, "year": {"type": "integer", "description": "The year for which to retrieve the GDP."}, "adjustment": {"type": "string", "description": "The type of adjustment for inflation, 'Real' or 'Nominal'. Optional, 'Nominal' by default.", "enum": ["Real", "Nominal"]}}, "required": ["state", "year"]}}]}, "model_result_raw": "['us_history.population_by_state_year(state=\"California\", year=1970)']", "possible_answer": [{"us_history.population_by_state_year": {"state": ["California", "CA"], "year": [1970]}}]}
{"id": "multiple_73", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_73", "question": [[{"role": "user", "content": "Who was the founder of Buddhism and where was it originated?"}]], "function": [{"name": "religion.get_core_beliefs", "description": "Retrieves the core beliefs and practices of a specified religion.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "Name of the religion for which to retrieve the core beliefs and practices."}}, "required": ["religion"]}}, {"name": "religion.get_origin", "description": "Retrieves the origin and founder information of a specified religion.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "Name of the religion for which to retrieve the founder and origin."}}, "required": ["religion"]}}]}, "model_result_raw": "[religion.get_origin(religion='Buddhism'), religion.get_core_beliefs(religion='Buddhism')]", "model_result_decoded": [{"religion.get_origin": {"religion": "Buddhism"}}, {"religion.get_core_beliefs": {"religion": "Buddhism"}}], "possible_answer": [{"religion.get_origin": {"religion": ["Buddhism"]}}]}
{"id": "multiple_76", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_76", "question": [[{"role": "user", "content": "I want to order a custom bronze sculpture of a horse. What material options are available?"}]], "function": [{"name": "painting.create_custom", "description": "Order a custom painting with your preferred color.", "parameters": {"type": "dict", "properties": {"subject": {"type": "string", "description": "The subject of the painting, e.g. horse"}, "color": {"type": "string", "enum": ["Red", "Blue", "Green", "Yellow", "Black"], "description": "Preferred main color for the painting."}, "size": {"type": "integer", "description": "The desired size for the painting in inches. This parameter is optional. Default 12"}}, "required": ["subject", "color"]}}, {"name": "sculpture.create_custom", "description": "Order a custom sculpture with your preferred material.", "parameters": {"type": "dict", "properties": {"item": {"type": "string", "description": "The subject of the sculpture, e.g. horse"}, "material": {"type": "string", "enum": ["Bronze", "Marble", "Terracotta", "Wood", "Stone"], "description": "Preferred material for the sculpture."}, "size": {"type": "integer", "description": "The desired size for the sculpture in inches. This parameter is optional. Default 12"}}, "required": ["item", "material"]}}]}, "model_result_raw": "[painting.create_custom(subject='horse', color='Red', size=12), painting.create_custom(subject='horse', color='Blue', size=12), painting.create_custom(subject='horse', color='Green', size=12), painting.create_custom(subject='horse', color='Yellow', size=12), painting.create_custom(subject='horse', color='Black', size=12), sculpture.create_custom(item='horse', material='Bronze', size=12), sculpture.create_custom(item='horse', material='Marble', size=12), sculpture.create_custom(item='horse', material='Terracotta', size=12), sculpture.create_custom(item='horse', material='Wood', size=12), sculpture.create_custom(item='horse', material='Stone', size=12)]", "model_result_decoded": [{"painting.create_custom": {"subject": "horse", "color": "Red", "size": 12}}, {"painting.create_custom": {"subject": "horse", "color": "Blue", "size": 12}}, {"painting.create_custom": {"subject": "horse", "color": "Green", "size": 12}}, {"painting.create_custom": {"subject": "horse", "color": "Yellow", "size": 12}}, {"painting.create_custom": {"subject": "horse", "color": "Black", "size": 12}}, {"sculpture.create_custom": {"item": "horse", "material": "Bronze", "size": 12}}, {"sculpture.create_custom": {"item": "horse", "material": "Marble", "size": 12}}, {"sculpture.create_custom": {"item": "horse", "material": "Terracotta", "size": 12}}, {"sculpture.create_custom": {"item": "horse", "material": "Wood", "size": 12}}, {"sculpture.create_custom": {"item": "horse", "material": "Stone", "size": 12}}], "possible_answer": [{"sculpture.create_custom": {"item": ["horse", "Horse"], "material": ["Bronze", "bronze"], "size": ["", 12]}}]}
{"id": "multiple_77", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Function name 'artwork_search.find' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "multiple_77", "question": [[{"role": "user", "content": "Search for famous contemporary sculptures in New York."}]], "function": [{"name": "tourist_attraction.find", "description": "Search for tourist attractions based on type and location.", "parameters": {"type": "dict", "properties": {"attractionType": {"type": "string", "description": "Type of the attraction. E.g., monument, museum, park."}, "location": {"type": "string", "description": "Location or city where the attraction is."}}, "required": ["attractionType", "location"]}}, {"name": "artwork_search.find", "description": "Search for artworks based on type and location.", "parameters": {"type": "dict", "properties": {"type": {"type": "string", "description": "Type of the artwork. E.g., painting, sculpture, installation."}, "location": {"type": "string", "description": "Location or city where the artwork is."}, "era": {"type": "string", "description": "Time period of the artwork, can be 'contemporary', 'modern', 'renaissance', etc. Default 'contemporary'", "optional": "True"}}, "required": ["type", "location"]}}, {"name": "park_search.find", "description": "Search for parks based on facilities and location.", "parameters": {"type": "dict", "properties": {"facilities": {"type": "array", "items": {"type": "string"}, "description": "List of facilities in the park."}, "location": {"type": "string", "description": "Location or city where the park is."}}, "required": ["facilities", "location"]}}]}, "model_result_raw": "[tourist_attraction.find(attractionType='sculpture', location='New York')]", "model_result_decoded": [{"tourist_attraction.find": {"attractionType": "sculpture", "location": "New York"}}], "possible_answer": [{"artwork_search.find": {"type": ["sculpture"], "location": ["New York", "New York, NY", "New York City", "NYC"], "era": ["contemporary", ""]}}]}
{"id": "multiple_78", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Function name 'museum_info' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "multiple_78", "question": [[{"role": "user", "content": "Get me information about Natural History Museum in London including timings, exhibitions, and accessibility."}]], "function": [{"name": "tourist_spot_info", "description": "Retrieve information about a specific tourist spot.", "parameters": {"type": "dict", "properties": {"spot": {"type": "string", "description": "The name of the tourist spot you want to get information for."}, "city": {"type": "string", "description": "The city where the tourist spot is located."}, "details": {"type": "array", "items": {"type": "string", "enum": ["timing", "attractions", "tickets", "accessibility", "history"]}, "description": "Details of the tourist spot to get information on. For multiple details, separate them by comma.", "default": "timing, attractions"}}, "required": ["spot", "city"]}}, {"name": "museum_info", "description": "Retrieve information about a specific museum.", "parameters": {"type": "dict", "properties": {"museum": {"type": "string", "description": "The name of the museum you want to get information for."}, "city": {"type": "string", "description": "The city where the museum is located."}, "features": {"type": "array", "items": {"type": "string", "enum": ["timings", "exhibitions", "accessibility", "events", "history"]}, "description": "Features of the museum to get information on. For multiple features, separate them by comma.", "default": "timings, exhibitions"}}, "required": ["museum", "city"]}}]}, "model_result_raw": "[tourist_spot_info(spot='Natural History Museum', city='London', details='timing,exhibitions,accessibility')]", "model_result_decoded": [{"tourist_spot_info": {"spot": "Natural History Museum", "city": "London", "details": "timing,exhibitions,accessibility"}}], "possible_answer": [{"museum_info": {"museum": ["Natural History Museum"], "city": ["London"], "features": [["timings", "exhibitions", "accessibility"], ["exhibitions", "timings", "accessibility"], ["exhibitions", "accessibility", "timings"], ["accessibility", "timings", "exhibitions"], ["accessibility", "exhibitions", "timings"], ["timings", "accessibility", "exhibitions"]]}}]}
{"id": "multiple_79", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_79", "question": [[{"role": "user", "content": "Find art exhibitions for the upcoming month in the Museum of Modern Art, New York."}]], "function": [{"name": "restaurant_info", "description": "Get restaurant information for a specific area.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Location for which to find restaurants."}, "food_type": {"type": "string", "description": "Type of cuisine for which to find restaurants. Default 'any'", "enum": ["Italian", "Chinese", "Mexican", "American"]}}, "required": ["location"]}}, {"name": "exhibition_info", "description": "Get exhibition information for a specific museum.", "parameters": {"type": "dict", "properties": {"museum_name": {"type": "string", "description": "Name of the museum for which to find exhibitions."}, "month": {"type": "integer", "description": "Number of upcoming months for which to retrieve exhibition details. Default 1"}}, "required": ["museum_name"]}}]}, "model_result_raw": "['exhibition_info(museum_name=\"Museum of Modern Art, New York\", month=1)]", "possible_answer": [{"exhibition_info": {"museum_name": ["Museum of Modern Art", "MOMA", "Museum of Modern Art, New York"], "month": ["", 1]}}]}
{"id": "multiple_80", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'services': ['Guitar Lessons', 'Violin Lessons']. Expected one of [['Violin Lessons']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "multiple_80", "question": [[{"role": "user", "content": "Find a local guitar shop that also offers violin lessons in Nashville."}]], "function": [{"name": "music_shop.find_nearby", "description": "Locate nearby music shops based on specific criteria like instrument lessons availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Nashville, TN"}, "services": {"type": "array", "items": {"type": "string", "enum": ["Guitar Lessons", "Violin Lessons", "Piano Lessons", "Ukulele Lessons"]}, "description": "Types of instrument lessons offered in the shop. Default empty array"}, "instruments": {"type": "array", "items": {"type": "string", "enum": ["Guitars", "Violins", "Pianos", "Drums"]}, "description": "Types of instruments sold in the shop. Default empty array"}}, "required": ["location"]}}, {"name": "gym.find_nearby", "description": "Locate nearby gyms based on specific criteria like types of fitness classes availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Nashville, TN"}, "classes": {"type": "array", "items": {"type": "string", "enum": ["Yoga", "Spin", "Zumba", "CrossFit"]}, "description": "Types of fitness classes offered in the gym. Default empty array"}, "equipment": {"type": "array", "items": {"type": "string", "enum": ["Treadmills", "Ellipticals", "Weight Machines", "Free Weights"]}, "description": "Types of gym equipment available. Default empty array"}}, "required": ["location"]}}]}, "model_result_raw": "music_shop.find_nearby(location='Nashville, TN', services=['Guitar Lessons', 'Violin Lessons'])", "model_result_decoded": [{"music_shop.find_nearby": {"location": "Nashville, TN", "services": ["Guitar Lessons", "Violin Lessons"]}}], "possible_answer": [{"music_shop.find_nearby": {"location": ["Nashville, TN", "Nashville"], "services": [["Violin Lessons"]], "instruments": [["Guitars"]]}}]}
{"id": "multiple_83", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_83", "question": [[{"role": "user", "content": "How many goals has Lionel Messi scored for Barcelona till date?"}]], "function": [{"name": "team_stats.get_top_scorer", "description": "Fetch the top scorer of a specified football team.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the football team."}, "competition": {"type": "string", "description": "Competition for which to fetch stats (optional). Default ''"}}, "required": ["team_name"]}}, {"name": "league_stats.get_top_scorer", "description": "Fetch the top scorer of a specified football league.", "parameters": {"type": "dict", "properties": {"league_name": {"type": "string", "description": "The name of the football league."}, "season": {"type": "string", "description": "Season for which to fetch stats (optional). Default ''"}}, "required": ["league_name"]}}, {"name": "player_stats.get_all_time_goals", "description": "Fetch all-time goals scored by a particular football player for a specified team.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The name of the football player."}, "team_name": {"type": "string", "description": "The name of the team for which player has played."}, "competition": {"type": "string", "description": "Competition for which to fetch stats (optional). Default ''"}}, "required": ["player_name", "team_name"]}}]}, "model_result_raw": "['player_stats.get_all_time_goals(player_name=\"Lionel Messi\", team_name=\"Barcelona\")']", "possible_answer": [{"player_stats.get_all_time_goals": {"player_name": ["Lionel Messi"], "team_name": ["Barcelona"], "competition": [""]}}]}
{"id": "multiple_85", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Function name 'soccer_scores.get_scores' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "multiple_85", "question": [[{"role": "user", "content": "Get the soccer scores for Real Madrid games in La Liga for the last 5 rounds."}]], "function": [{"name": "basketball_scores.get_scores", "description": "Retrieve basketball scores for a specific team and league within a certain range of rounds.", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "The basketball team whose scores are to be retrieved."}, "league": {"type": "string", "description": "The league in which the team competes."}, "rounds": {"type": "integer", "description": "Number of past rounds for which to retrieve the scores."}}, "required": ["team", "league", "rounds"]}}, {"name": "soccer_scores.get_scores", "description": "Retrieve soccer scores for a specific team and league within a certain range of rounds.", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "The soccer team whose scores are to be retrieved."}, "league": {"type": "string", "description": "The league in which the team competes."}, "rounds": {"type": "integer", "description": "Number of past rounds for which to retrieve the scores."}}, "required": ["team", "league", "rounds"]}}]}, "model_result_raw": "[basketball_scores.get_scores(team='Real Madrid', league='La Liga', rounds=5)]", "model_result_decoded": [{"basketball_scores.get_scores": {"team": "Real Madrid", "league": "La Liga", "rounds": 5}}], "possible_answer": [{"soccer_scores.get_scores": {"team": ["Real Madrid"], "league": ["La Liga"], "rounds": [5]}}]}
{"id": "multiple_91", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_91", "question": [[{"role": "user", "content": "Can I find a good cooking recipe for apple pie using less than 5 ingredients?"}]], "function": [{"name": "restaurant.find", "description": "Locate restaurants based on specific criteria such as cuisine and price range", "parameters": {"type": "dict", "properties": {"cuisine": {"type": "string", "description": "The type of cuisine preferred."}, "price": {"type": "array", "items": {"type": "string"}, "description": "Price range of the restaurant in format ['low', 'mid', 'high']. Default ['low', 'mid', 'high']"}}, "required": ["cuisine"]}}, {"name": "recipe.find", "description": "Locate cooking recipes based on specific criteria such as main ingredient and number of ingredients", "parameters": {"type": "dict", "properties": {"mainIngredient": {"type": "string", "description": "Main ingredient for the recipe."}, "ingredientLimit": {"type": "integer", "description": "Max number of ingredients the recipe should use."}}, "required": ["mainIngredient", "ingredientLimit"]}}]}, "model_result_raw": "['recipe.find(mainIngredient=\"apple\", ingredientLimit=4)']", "possible_answer": [{"recipe.find": {"mainIngredient": ["apple pie", "apple"], "ingredientLimit": [4]}}]}
{"id": "multiple_92", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_92", "question": [[{"role": "user", "content": "Get me a list of available vegetarian and gluten-free foods at the Walmart near Denver."}]], "function": [{"name": "safeway.vegan_products", "description": "Get available vegan products at specified Safeway store", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the Safeway store is located, e.g. Denver, CO"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["vegan", "gluten-free"]}, "description": "Product categories to search within. Default empty array"}}, "required": ["location"]}}, {"name": "wholefoods.vegan_products", "description": "Get available vegan products at specified Whole Foods store", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the Whole Foods store is located, e.g. Denver, CO"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["vegan", "gluten-free"]}, "description": "Product categories to search within. Default empty array"}}, "required": ["location"]}}, {"name": "walmart.vegan_products", "description": "Get available vegan products at specified Walmart store", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the Walmart store is located, e.g. Denver, CO"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["vegan", "gluten-free"]}, "description": "Product categories to search within. Default empty array"}}, "required": ["location"]}}]}, "model_result_raw": "[safeway.vegan_products(location='Denver, CO', categories=['vegetarian', 'gluten-free']), walmart.vegan_products(location='Denver, CO', categories=['vegetarian', 'gluten-free'])]", "model_result_decoded": [{"safeway.vegan_products": {"location": "Denver, CO", "categories": ["vegetarian", "gluten-free"]}}, {"walmart.vegan_products": {"location": "Denver, CO", "categories": ["vegetarian", "gluten-free"]}}], "possible_answer": [{"walmart.vegan_products": {"location": ["Denver, CO", "Denver"], "categories": [["vegan", "gluten-free"], ["gluten-free", "vegan"]]}}]}
{"id": "multiple_104", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_104", "question": [[{"role": "user", "content": "Find the shortest driving distance between New York City and Washington D.C."}]], "function": [{"name": "instrument_price.get", "description": "Retrieve the current retail price of a specific musical instrument.", "parameters": {"type": "dict", "properties": {"brand": {"type": "string", "description": "The brand of the instrument."}, "model": {"type": "string", "description": "The specific model of the instrument."}, "finish": {"type": "string", "description": "The color or type of finish on the instrument."}}, "required": ["brand", "model", "finish"]}}, {"name": "get_shortest_driving_distance", "description": "Calculate the shortest driving distance between two locations.", "parameters": {"type": "dict", "properties": {"origin": {"type": "string", "description": "Starting point of the journey."}, "destination": {"type": "string", "description": "End point of the journey."}, "unit": {"type": "string", "description": "Preferred unit of distance (optional, default is kilometers)."}}, "required": ["origin", "destination"]}}, {"name": "cell_biology.function_lookup", "description": "Look up the function of a given molecule in a specified organelle.", "parameters": {"type": "dict", "properties": {"molecule": {"type": "string", "description": "The molecule of interest."}, "organelle": {"type": "string", "description": "The organelle of interest."}, "specific_function": {"type": "boolean", "description": "If set to true, a specific function of the molecule within the organelle will be provided, if such information exists."}}, "required": ["molecule", "organelle", "specific_function"]}}, {"name": "get_scientist_for_discovery", "description": "Retrieve the scientist's name who is credited for a specific scientific discovery or theory.", "parameters": {"type": "dict", "properties": {"discovery": {"type": "string", "description": "The scientific discovery or theory."}}, "required": ["discovery"]}}]}, "model_result_raw": "['get_shortest_driving_distance(origin=\"New York City\", destination=\"Washington D.C.\")']", "possible_answer": [{"get_shortest_driving_distance": {"origin": ["New York City", "NYC"], "destination": ["Washington D.C.", "D.C.", "DC"], "unit": ["", "kilometers"]}}]}
{"id": "multiple_107", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_107", "question": [[{"role": "user", "content": "What is the density of a substance with a mass of 45 kg and a volume of 15 m\u00b3?"}]], "function": [{"name": "mix_paint_color", "description": "Combine two primary paint colors and adjust the resulting color's lightness level.", "parameters": {"type": "dict", "properties": {"color1": {"type": "string", "description": "The first primary color to be mixed."}, "color2": {"type": "string", "description": "The second primary color to be mixed."}, "lightness": {"type": "integer", "description": "The desired lightness level of the resulting color in percentage. The default level is set to 50%."}}, "required": ["color1", "color2"]}}, {"name": "calculate_density", "description": "Calculate the density of a substance based on its mass and volume.", "parameters": {"type": "dict", "properties": {"mass": {"type": "integer", "description": "The mass of the substance in kilograms."}, "volume": {"type": "integer", "description": "The volume of the substance in cubic meters."}, "unit": {"type": "string", "description": "The unit of density. Default is kg/m\u00b3"}}, "required": ["mass", "volume"]}}]}, "model_result_raw": "['calculate_density(mass=45, volume=15)']", "possible_answer": [{"calculate_density": {"mass": [45], "volume": [15], "unit": ["kg/m\u00b3", ""]}}]}
{"id": "multiple_111", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_111", "question": [[{"role": "user", "content": "What is the genotype frequency of AA genotype in a population, given that allele frequency of A is 0.3?"}]], "function": [{"name": "calculate_genotype_frequency", "description": "Calculate the frequency of homozygous dominant genotype based on the allele frequency using Hardy Weinberg Principle.", "parameters": {"type": "dict", "properties": {"allele_frequency": {"type": "float", "description": "The frequency of the dominant allele in the population."}, "genotype": {"type": "string", "description": "The genotype which frequency is needed, default is homozygous dominant. ", "enum": ["AA", "Aa", "aa"]}}, "required": ["allele_frequency", "genotype"]}}, {"name": "math.factorial", "description": "Calculate the factorial of a given number.", "parameters": {"type": "dict", "properties": {"number": {"type": "integer", "description": "The number for which factorial needs to be calculated."}}, "required": ["number"]}}, {"name": "find_flute", "description": "Locate a flute for sale based on specific requirements.", "parameters": {"type": "dict", "properties": {"brand": {"type": "string", "description": "The brand of the flute. Example, 'Yamaha'"}, "specs": {"type": "array", "items": {"type": "string", "enum": ["open hole", "C foot", "silver headjoint"]}, "description": "The specifications of the flute desired."}}, "required": ["brand", "specs"]}}]}, "model_result_raw": "['calculate_genotype_frequency(allele_frequency=0.3, genotype=\"AA\")']", "possible_answer": [{"calculate_genotype_frequency": {"allele_frequency": [0.3], "genotype": ["AA"]}}]}
{"id": "multiple_112", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_112", "question": [[{"role": "user", "content": "Predict the growth of forest in Yellowstone National Park for the next 5 years including human impact."}]], "function": [{"name": "forest_growth_forecast", "description": "Predicts the forest growth over the next N years based on current trends.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location where you want to predict forest growth."}, "years": {"type": "integer", "description": "The number of years for the forecast."}, "include_human_impact": {"type": "boolean", "description": "Whether or not to include the impact of human activities in the forecast. If not provided, defaults to false."}}, "required": ["location", "years"]}}, {"name": "get_scientist_for_discovery", "description": "Retrieve the scientist's name who is credited for a specific scientific discovery or theory.", "parameters": {"type": "dict", "properties": {"discovery": {"type": "string", "description": "The scientific discovery or theory."}}, "required": ["discovery"]}}]}, "model_result_raw": "['forest_growth_forecast(location=\"Yellowstone National Park\", years=5, include_human_impact=True)]", "possible_answer": [{"forest_growth_forecast": {"location": ["Yellowstone National Park"], "years": [5], "include_human_impact": [true]}}]}
{"id": "multiple_117", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_117", "question": [[{"role": "user", "content": "Calculate the BMI (Body Mass Index) of a person who weighs 70kg and is 1.75m tall."}]], "function": [{"name": "calculate_BMI", "description": "Calculate the Body Mass Index (BMI) given a person's weight and height.", "parameters": {"type": "dict", "properties": {"weight_kg": {"type": "integer", "description": "The weight of the person in kilograms."}, "height_m": {"type": "float", "description": "The height of the person in meters."}}, "required": ["weight_kg", "height_m"]}}, {"name": "soccer.get_last_match", "description": "Retrieve the details of the last match played by a specified soccer club.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the soccer club."}, "include_stats": {"type": "boolean", "description": "If true, include match statistics like possession, shots on target etc. Default is false."}}, "required": ["team_name"]}}, {"name": "hotel_booking", "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you want to book the hotel."}, "room_type": {"type": "string", "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."}, "duration": {"type": "integer", "description": "The number of nights you want to book the hotel for."}, "start_date": {"type": "string", "description": "The date when your stay begins."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["pet_friendly", "gym", "swimming_pool", "free_breakfast", "parking"]}, "description": "Optional preferences of stay at the hotel. Default is empty array."}}, "required": ["location", "room_type", "duration", "start_date"]}}]}, "model_result_raw": "['calculate_BMI(weight_kg=70, height_m=1.75)']", "possible_answer": [{"calculate_BMI": {"weight_kg": [70], "height_m": [1.75]}}]}
{"id": "multiple_122", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_122", "question": [[{"role": "user", "content": "Run a linear regression model with predictor variables 'Age', 'Income' and 'Education' and a target variable 'Purchase_Amount'. Also apply standardization."}]], "function": [{"name": "cooking_conversion.convert", "description": "Convert cooking measurements from one unit to another.", "parameters": {"type": "dict", "properties": {"quantity": {"type": "integer", "description": "The quantity to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from."}, "to_unit": {"type": "string", "description": "The unit to convert to."}, "item": {"type": "string", "description": "The item to be converted."}}, "required": ["quantity", "from_unit", "to_unit", "item"]}}, {"name": "run_linear_regression", "description": "Build a linear regression model using given predictor variables and a target variable.", "parameters": {"type": "dict", "properties": {"predictors": {"type": "array", "items": {"type": "string"}, "description": "Array containing the names of predictor variables."}, "target": {"type": "string", "description": "The name of target variable."}, "standardize": {"type": "boolean", "description": "Option to apply standardization on the predictors. Defaults to False."}}, "required": ["predictors", "target"]}}, {"name": "find_recipe", "description": "Locate a recipe based on name and its calorie content", "parameters": {"type": "dict", "properties": {"recipeName": {"type": "string", "description": "The recipe's name."}, "maxCalories": {"type": "integer", "description": "The maximum calorie content of the recipe.", "default": 1000}}, "required": ["recipeName"]}}, {"name": "travel_itinerary_generator", "description": "Generate a travel itinerary based on specific destination, duration and daily budget, with preferred exploration type.", "parameters": {"type": "dict", "properties": {"destination": {"type": "string", "description": "Destination city of the trip."}, "days": {"type": "integer", "description": "Number of days for the trip."}, "daily_budget": {"type": "float", "description": "The maximum daily budget for the trip."}, "exploration_type": {"type": "string", "enum": ["nature", "urban", "history", "culture"], "description": "The preferred exploration type.", "default": "urban"}}, "required": ["destination", "days", "daily_budget"]}}]}, "model_result_raw": "['run_linear_regression(predictors=[\"Age\", \"Income\", \"Education\"], target=\"Purchase_Amount\", standardize=True)']", "possible_answer": [{"run_linear_regression": {"predictors": [["Age", "Income", "Education"], ["Age", "Education", "Income"], ["Income", "Age", "Education"], ["Income", "Education", "Age"], ["Education", "Age", "Income"], ["Education", "Income", "Age"]], "target": ["Purchase_Amount"], "standardize": [true]}}]}
{"id": "multiple_127", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_127", "question": [[{"role": "user", "content": "What's the quarterly dividend per share of a company with 100 million outstanding shares and total dividend payout of 50 million USD?"}]], "function": [{"name": "get_song_lyrics", "description": "Retrieve the lyrics of a song based on the artist's name and song title.", "parameters": {"type": "dict", "properties": {"song_title": {"type": "string", "description": "The title of the song."}, "artist_name": {"type": "string", "description": "The name of the artist who performed the song."}, "lang": {"type": "string", "description": "The language of the lyrics. Default is English.", "enum": ["English", "French", "Spanish", "German", "Italian"]}}, "required": ["song_title", "artist_name"]}}, {"name": "mix_paint_color", "description": "Combine two primary paint colors and adjust the resulting color's lightness level.", "parameters": {"type": "dict", "properties": {"color1": {"type": "string", "description": "The first primary color to be mixed."}, "color2": {"type": "string", "description": "The second primary color to be mixed."}, "lightness": {"type": "integer", "description": "The desired lightness level of the resulting color in percentage. The default level is set to 50%."}}, "required": ["color1", "color2"]}}, {"name": "finance.calculate_quarterly_dividend_per_share", "description": "Calculate quarterly dividend per share for a company given total dividend payout and outstanding shares", "parameters": {"type": "dict", "properties": {"total_payout": {"type": "integer", "description": "The total amount of dividends paid out in USD"}, "outstanding_shares": {"type": "integer", "description": "Total number of outstanding shares"}}, "required": ["total_payout", "outstanding_shares"]}}, {"name": "movie_details.brief", "description": "This function retrieves a brief about a specified movie.", "parameters": {"type": "dict", "properties": {"title": {"type": "string", "description": "Title of the movie"}, "extra_info": {"type": "boolean", "description": "Option to get additional information like Director, Cast, Awards etc.", "default": "false"}}, "required": ["title"]}}]}, "model_result_raw": "['finance.calculate_quarterly_dividend_per_share(total_payout=50000000, outstanding_shares=100000000)']", "possible_answer": [{"finance.calculate_quarterly_dividend_per_share": {"total_payout": [50000000], "outstanding_shares": [100000000]}}]}
{"id": "multiple_131", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_131", "question": [[{"role": "user", "content": "Find the market performance of the S&P 500 and the Dow Jones over the past 5 days."}]], "function": [{"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific dietary preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Los Angeles, CA"}, "dietary_preference": {"type": "array", "items": {"type": "string", "enum": ["Vegan", "Vegetarian", "Gluten-free", "Dairy-free", "Nut-free"]}, "description": "Dietary preference. Default is empty array."}}, "required": ["location"]}}, {"name": "market_performance.get_data", "description": "Retrieve the market performance data for specified indexes over a specified time period.", "parameters": {"type": "dict", "properties": {"indexes": {"type": "array", "items": {"type": "string"}, "description": "Array of stock market indexes. Supported indexes are 'S&P 500', 'Dow Jones', 'NASDAQ', 'FTSE 100', 'DAX' etc."}, "days": {"type": "integer", "description": "Number of days in the past for which the performance data is required."}, "detailed": {"type": "boolean", "description": "Whether to return detailed performance data. If set to true, returns high, low, opening, and closing prices. If false, returns only closing prices. Default is false."}}, "required": ["indexes", "days"]}}, {"name": "sports.match_results", "description": "Returns the results of a given match between two teams.", "parameters": {"type": "dict", "properties": {"team1": {"type": "string", "description": "The name of the first team."}, "team2": {"type": "string", "description": "The name of the second team."}, "season": {"type": "string", "description": "The season when the match happened. Default is the current season."}}, "required": ["team1", "team2"]}}]}, "model_result_raw": "['market_performance.get_data(indexes=[\"S&P 500\", \"Dow Jones\"], days=5, detailed=False)]", "possible_answer": [{"market_performance.get_data": {"indexes": [["S&P 500", "Dow Jones"]], "days": [5], "detailed": ["", false]}}]}
{"id": "multiple_135", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_135", "question": [[{"role": "user", "content": "Who was the victim in the case docket numbered 2022/AL2562 in California?"}]], "function": [{"name": "get_case_info", "description": "Retrieve case details using a specific case docket number and court location.", "parameters": {"type": "dict", "properties": {"docket": {"type": "string", "description": "Docket number for the specific court case."}, "court": {"type": "string", "description": "Court in which the case was heard."}, "info_type": {"type": "string", "description": "Specify the information type needed for the case. i.e., victim, accused, verdict etc."}}, "required": ["docket", "court", "info_type"]}}, {"name": "calculate_triangle_area", "description": "Calculate the area of a triangle given its base and height.", "parameters": {"type": "dict", "properties": {"base": {"type": "float", "description": "The base of the triangle."}, "height": {"type": "float", "description": "The height of the triangle."}, "unit": {"type": "string", "description": "The unit of measure (defaults to 'units' if not specified)"}}, "required": ["base", "height"]}}]}, "model_result_raw": "['get_case_info(docket=\"2022/AL2562\", court=\"California\", info_type=\"victim\")']", "possible_answer": [{"get_case_info": {"docket": ["2022/AL2562"], "court": ["California", "CA"], "info_type": ["victim"]}}]}
{"id": "multiple_136", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_136", "question": [[{"role": "user", "content": "Provide me the official crime rate of violent crime in San Francisco in 2020."}]], "function": [{"name": "get_crime_rate", "description": "Retrieve the official crime rate of a city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The name of the city."}, "state": {"type": "string", "description": "The state where the city is located."}, "type": {"type": "string", "description": "Optional. The type of crime. Default ''"}, "year": {"type": "integer", "description": "Optional. The year for the crime rate data. Defaults to 2024."}}, "required": ["city", "state"]}}, {"name": "poker_game_winner", "description": "Identify the winner in a poker game based on the cards.", "parameters": {"type": "dict", "properties": {"players": {"type": "array", "items": {"type": "string"}, "description": "Names of the players in a list."}, "cards": {"type": "dict", "description": "An object containing the player name as key and the cards as values in a list."}, "type": {"type": "string", "description": "Type of poker game. Defaults to 'Texas Holdem'"}}, "required": ["players", "cards"]}}]}, "model_result_raw": "['get_crime_rate(city=\"San Francisco\", state=\"California\", type=\"violent\", year=2020)']", "possible_answer": [{"get_crime_rate": {"city": ["San Francisco", "San Francisco, CA", "SF"], "state": ["California", "CA"], "type": ["violent", "Violent"], "year": [2020]}}]}
{"id": "multiple_138", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_138", "question": [[{"role": "user", "content": "How to obtain the detailed case information of the R vs Adams legal case?"}]], "function": [{"name": "park_information", "description": "Retrieve the basic information such as elevation and area of a national park.", "parameters": {"type": "dict", "properties": {"park_name": {"type": "string", "description": "The name of the national park."}, "information": {"type": "array", "items": {"type": "string", "enum": ["Elevation", "Area", "Location", "Established Year"]}, "description": "The type of information you want about the park."}}, "required": ["park_name", "information"]}}, {"name": "legal_case.fetch", "description": "Fetch detailed legal case information from database.", "parameters": {"type": "dict", "properties": {"case_id": {"type": "string", "description": "The ID of the legal case."}, "details": {"type": "boolean", "description": "True if need the detail info. Default is false."}}, "required": ["case_id", "details"]}}, {"name": "calculate_stock_return", "description": "Calculate the projected return of a stock investment given the investment amount, the annual growth rate and holding period in years.", "parameters": {"type": "dict", "properties": {"investment_amount": {"type": "float", "description": "The amount of money to invest."}, "annual_growth_rate": {"type": "float", "description": "The expected annual growth rate of the stock."}, "holding_period": {"type": "integer", "description": "The number of years you intend to hold the stock."}, "include_dividends": {"type": "boolean", "description": "Optional. True if the calculation should take into account potential dividends. Default is false."}}, "required": ["investment_amount", "annual_growth_rate", "holding_period"]}}]}, "model_result_raw": "['legal_case.fetch(case_id=\"R vs Adams\", details=True)'", "possible_answer": [{"legal_case.fetch": {"case_id": ["R vs Adams", "R_vs_Adams"], "details": [true]}}]}
{"id": "multiple_142", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_142", "question": [[{"role": "user", "content": "What is the humidity level in Miami, Florida in the upcoming 7 days?"}]], "function": [{"name": "weather.humidity_forecast", "description": "Retrieve a humidity forecast for a specific location and time frame.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the humidity for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}, "min_humidity": {"type": "integer", "description": "Minimum level of humidity (in percentage) to filter the result. Optional parameter. Default is 0."}}, "required": ["location", "days"]}}, {"name": "get_team_score", "description": "Retrieves the latest game score, individual player stats, and team stats for a specified sports team.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "league": {"type": "string", "description": "The league that the team is part of."}, "include_player_stats": {"type": "boolean", "default": false, "description": "Indicates if individual player statistics should be included in the result. Default is false."}}, "required": ["team_name", "league"]}}]}, "model_result_raw": "['weather.humidity_forecast(location=\"Miami, Florida\", days=7)]", "possible_answer": [{"weather.humidity_forecast": {"location": ["Miami", "Miami, Florida", "FL"], "days": [7], "min_humidity": ["", 0]}}]}
{"id": "multiple_144", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_144", "question": [[{"role": "user", "content": "What is the air quality index in London 2022/08/16?"}]], "function": [{"name": "sports_ranking", "description": "Fetch the ranking of a specific sports team in a specific league", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "The name of the team."}, "league": {"type": "string", "description": "The name of the league."}, "season": {"type": "integer", "description": "Optional parameter to specify the season, default is the current season."}}, "required": ["team", "league"]}}, {"name": "air_quality", "description": "Retrieve the air quality index for a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality index for."}, "date": {"type": "string", "description": "The date you want to get the air quality index for. Default is today."}}, "required": ["location", "date"]}}]}, "model_result_raw": "['air_quality(location=\"London\", date=\"2022/08/16\")']", "possible_answer": [{"air_quality": {"location": ["London"], "date": ["2022-08-16", "16/08/2022", "Aug.16,2022", "2022/08/16", "16\\08\\2022"]}}]}
{"id": "multiple_148", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_148", "question": [[{"role": "user", "content": "Give me detail information about stocks of Apple Inc."}]], "function": [{"name": "get_current_time", "description": "Retrieve the current time in a specific time zone.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The name of the city."}, "country": {"type": "string", "description": "The name of the country."}, "timezone": {"type": "string", "description": "The optional timezone to get current time. Default ''"}}, "required": ["location", "country"]}}, {"name": "get_stock_info", "description": "Retrieves information about a specific stock based on company's name.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "detail_level": {"type": "string", "description": "Level of detail for stock information. Can be 'summary' or 'detailed'."}, "market": {"type": "string", "description": "The stock market of interest. Default is 'NASDAQ'"}}, "required": ["company_name", "detail_level"]}}]}, "model_result_raw": "['get_stock_info(company_name=\"Apple Inc.\", detail_level=\"detailed\", market=\"NASDAQ\")']", "possible_answer": [{"get_stock_info": {"company_name": ["Apple Inc.", "Apple"], "detail_level": ["detailed"], "market": ["NASDAQ", ""]}}]}
{"id": "multiple_149", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_149", "question": [[{"role": "user", "content": "Analyze the sentiment of a customer review 'I love the food here! It's always fresh and delicious.'."}]], "function": [{"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}, {"name": "sentiment_analysis", "description": "Perform sentiment analysis on a given piece of text.", "parameters": {"type": "dict", "properties": {"text": {"type": "string", "description": "The text on which to perform sentiment analysis."}, "language": {"type": "string", "description": "The language in which the text is written."}}, "required": ["text", "language"]}}, {"name": "get_time_difference", "description": "Get the time difference between two places.", "parameters": {"type": "dict", "properties": {"place1": {"type": "string", "description": "The first place for time difference."}, "place2": {"type": "string", "description": "The second place for time difference."}}, "required": ["place1", "place2"]}}, {"name": "calculate_bmi", "description": "Calculate the Body Mass Index (BMI) for a person based on their weight and height.", "parameters": {"type": "dict", "properties": {"weight": {"type": "integer", "description": "The weight of the person in kilograms."}, "height": {"type": "integer", "description": "The height of the person in centimeters."}, "system": {"type": "string", "description": "The system of units to be used, 'metric' or 'imperial'. Default is 'metric'."}}, "required": ["weight", "height"]}}]}, "model_result_raw": "['sentiment_analysis(text=\"I love the food here! It\\'s always fresh and delicious.\", language=\"English\")']", "possible_answer": [{"sentiment_analysis": {"text": ["I love the food here! It's always fresh and delicious."], "language": ["english", "English"]}}]}
{"id": "multiple_151", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_151", "question": [[{"role": "user", "content": "Find the most followed person on twitter who tweets about psychology related to behaviour and group dynamics."}]], "function": [{"name": "social_media_analytics.most_followed", "description": "Find the most followed Twitter user related to certain topics.", "parameters": {"type": "dict", "properties": {"topic": {"type": "string", "description": "The main topic of interest."}, "sub_topics": {"type": "array", "items": {"type": "string"}, "description": "Sub-topics related to main topic, Optional. Default is an empty list."}, "region": {"type": "string", "description": "Region of interest for twitter search, Optional. Default is 'global'."}}, "required": ["topic"]}}, {"name": "calculate_probability", "description": "Calculate the probability of an event.", "parameters": {"type": "dict", "properties": {"total_outcomes": {"type": "integer", "description": "Total number of possible outcomes."}, "favorable_outcomes": {"type": "integer", "description": "Number of outcomes considered as 'successful'."}, "round_to": {"type": "integer", "description": "Number of decimal places to round the result to.", "default": 2}}, "required": ["total_outcomes", "favorable_outcomes"]}}, {"name": "concert_info.get", "description": "Retrieve information about concerts based on specific genre, location and date.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the concert will take place."}, "date": {"type": "string", "description": "Time frame to get the concert for."}, "genre": {"type": "string", "description": "Genre of the concert.", "enum": ["Pop", "Rock", "Country", "Classical", "Electronic", "Hip-Hop"]}}, "required": ["location", "date", "genre"]}}]}, "model_result_raw": "['social_media_analytics.most_followed(topic=\"psychology\", sub_topics=[\"behaviour\", \"group dynamics\"])']", "possible_answer": [{"social_media_analytics.most_followed": {"topic": ["psychology", "Psychology"], "sub_topics": [["behaviour", "group dynamics"], ["group dynamics", "behaviour"]], "region": ["", "global"]}}]}
{"id": "multiple_152", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_152", "question": [[{"role": "user", "content": "Provide key war events in German history from 1871 to 1945."}]], "function": [{"name": "history.get_key_events", "description": "Retrieve key historical events within a specific period for a certain country.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The name of the country for which history is queried."}, "start_year": {"type": "integer", "description": "Start year of the period for which history is queried."}, "end_year": {"type": "integer", "description": "End year of the period for which history is queried."}, "event_type": {"type": "array", "items": {"type": "string", "enum": ["War", "Revolutions", "Diplomacy", "Economy"]}, "description": "Types of event. If none is provided, all types will be considered. Default is ['all']."}}, "required": ["country", "start_year", "end_year"]}}, {"name": "get_sculpture_value", "description": "Retrieve the current market value of a particular sculpture by a specific artist.", "parameters": {"type": "dict", "properties": {"sculpture": {"type": "string", "description": "The name of the sculpture."}, "artist": {"type": "string", "description": "The name of the artist who created the sculpture."}, "year": {"type": "integer", "description": "The year the sculpture was created. This is optional and is not required for all sculptures. Default is the 2024."}}, "required": ["sculpture", "artist"]}}]}, "model_result_raw": "['history.get_key_events(country=\"Germany\", start_year=1871, end_year=1945, event_type=[\"War\"])']", "possible_answer": [{"history.get_key_events": {"country": ["Germany"], "start_year": [1871], "end_year": [1945], "event_type": [["War"]]}}]}
{"id": "multiple_154", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_154", "question": [[{"role": "user", "content": "Who was the full name of the president of the United States in 1861?"}]], "function": [{"name": "US_president.in_year", "description": "Retrieve the name of the U.S. president in a given year.", "parameters": {"type": "dict", "properties": {"year": {"type": "integer", "description": "The year in question."}, "full_name": {"type": "boolean", "default": true, "description": "Option to return full name with middle initial, if applicable."}}, "required": ["year"]}}, {"name": "find_card_in_deck", "description": "Locate a particular card in a deck based on rank and suit.", "parameters": {"type": "dict", "properties": {"rank": {"type": "string", "description": "Rank of the card (e.g. Ace, Two, King)."}, "suit": {"type": "string", "description": "Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs)."}, "deck": {"type": "array", "items": {"type": "dict", "properties": {"rank": {"type": "string"}, "suit": {"type": "string"}}}, "description": "Deck of cards. If not provided, the deck will be a standard 52 card deck by default"}}, "required": ["rank", "suit"]}}, {"name": "soccer.get_last_match", "description": "Retrieve the details of the last match played by a specified soccer club.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the soccer club."}, "include_stats": {"type": "boolean", "description": "If true, include match statistics like possession, shots on target etc. Default is false."}}, "required": ["team_name"]}}, {"name": "update_user_info", "description": "Update user information in the database.", "parameters": {"type": "dict", "properties": {"user_id": {"type": "integer", "description": "The user ID of the customer."}, "update_info": {"type": "dict", "properties": {"name": {"type": "string", "description": "The customer's updated name."}, "email": {"type": "string", "description": "The customer's updated email."}}, "description": "The new information to update."}, "database": {"type": "string", "description": "The database where the user's information is stored.", "default": "CustomerInfo"}}, "required": ["user_id", "update_info"]}}]}, "model_result_raw": "['US_president.in_year(year=1861, full_name=True)']", "possible_answer": [{"US_president.in_year": {"year": [1861], "full_name": [true, ""]}}]}
{"id": "multiple_156", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_156", "question": [[{"role": "user", "content": "What was Albert Einstein's contribution to science on March 17, 1915?"}]], "function": [{"name": "historical_contrib.get_contrib", "description": "Retrieve historical contribution made by a scientist on a specific date.", "parameters": {"type": "dict", "properties": {"scientist": {"type": "string", "description": "The scientist whose contributions need to be searched."}, "date": {"type": "string", "description": "The date when the contribution was made in yyyy-mm-dd format."}, "category": {"type": "string", "description": "The field of the contribution, such as 'Physics' or 'Chemistry'. Default is all fields."}}, "required": ["scientist", "date"]}}, {"name": "music.calculate_note_duration", "description": "Calculate the duration between two notes based on their frequencies and harmonic rhythm.", "parameters": {"type": "dict", "properties": {"first_note_frequency": {"type": "float", "description": "The frequency of the first note in Hz."}, "second_note_frequency": {"type": "float", "description": "The frequency of the second note in Hz."}, "tempo": {"type": "integer", "description": "The tempo of the music in beats per minute. Defaults to 120 beats per minute."}}, "required": ["first_note_frequency", "second_note_frequency"]}}, {"name": "math.gcd", "description": "Calculate the greatest common divisor of two integers.", "parameters": {"type": "dict", "properties": {"num1": {"type": "integer", "description": "First number."}, "num2": {"type": "integer", "description": "Second number."}}, "required": ["num1", "num2"]}}]}, "model_result_raw": "['historical_contrib.get_contrib(scientist=\"Albert Einstein\", date=\"1915-03-17\", category=\"Science\")]", "possible_answer": [{"historical_contrib.get_contrib": {"scientist": ["Albert Einstein"], "date": ["1915-03-17", "03/17/1915", "Mar.17,1915"], "category": ["", "all"]}}]}
{"id": "multiple_157", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_157", "question": [[{"role": "user", "content": "What is the earliest reference of Jesus Christ in history from historical record?"}]], "function": [{"name": "sports_ranking.get_current", "description": "Retrieve the current ranking of a specific team in a particular league.", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "The name of the team whose ranking is sought."}, "league": {"type": "string", "description": "The league in which the team participates."}, "season": {"type": "string", "description": "The season for which the ranking is sought. Defaults to the current season if not provided."}}, "required": ["team", "league"]}}, {"name": "get_earliest_reference", "description": "Retrieve the earliest historical reference of a person.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the person."}, "source": {"type": "string", "enum": ["scriptures", "historical records"], "description": "Source to fetch the reference. Default is 'scriptures'"}}, "required": ["name"]}}]}, "model_result_raw": "['get_earliest_reference(name=\"Jesus Christ\", source=\"historical records\")']", "possible_answer": [{"get_earliest_reference": {"name": ["Jesus Christ"], "source": ["historical records"]}}]}
{"id": "multiple_162", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_162", "question": [[{"role": "user", "content": "What is the structural dynamic analysis of the building with building Id B1004 for 2nd, 3rd and 4th floors?"}]], "function": [{"name": "player_statistic", "description": "Retrieves detailed player's statistics for a specific year.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The player's name."}, "year": {"type": "integer", "description": "Year for which the statistics will be displayed."}, "team_name": {"type": "string", "description": "The name of the team(optional). Default is 'all'"}}, "required": ["player_name", "year"]}}, {"name": "analyze_structure", "description": "Analyze a structure of a building based on its Id and floor numbers.", "parameters": {"type": "dict", "properties": {"building_id": {"type": "string", "description": "The unique identification number of the building."}, "floors": {"type": "array", "items": {"type": "integer"}, "description": "Floor numbers to be analyzed."}, "mode": {"type": "string", "description": "Mode of analysis, e.g. 'static' or 'dynamic'. Default is 'static'."}}, "required": ["building_id", "floors"]}}]}, "model_result_raw": "['analyze_structure(building_id=\"B1004\", floors=[2, 3, 4], mode=\"dynamic\")']", "possible_answer": [{"analyze_structure": {"building_id": ["B1004"], "floors": [[2, 3, 4]], "mode": ["dynamic"]}}]}
{"id": "multiple_163", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_163", "question": [[{"role": "user", "content": "Get the list of top 5 popular artworks at the Metropolitan Museum of Art. Please sort by popularity."}]], "function": [{"name": "metropolitan_museum.get_top_artworks", "description": "Fetches the list of popular artworks at the Metropolitan Museum of Art. Results can be sorted based on popularity.", "parameters": {"type": "dict", "properties": {"number": {"type": "integer", "description": "The number of artworks to fetch"}, "sort_by": {"type": "string", "description": "The criteria to sort the results on. Default is ''.", "enum": ["popularity", "chronological", "alphabetical"]}}, "required": ["number"]}}, {"name": "lawsuit_search", "description": "Search for lawsuits related to a specific company within a specific date range and location.", "parameters": {"type": "dict", "properties": {"company": {"type": "string", "description": "The company related to the lawsuit."}, "start_date": {"type": "string", "description": "Start of the date range for when the lawsuit was filed."}, "location": {"type": "string", "description": "Location where the lawsuit was filed."}, "status": {"type": "string", "enum": ["ongoing", "settled", "dismissed"], "description": "The status of the lawsuit. Default is 'ongoing'."}}, "required": ["company", "start_date", "location"]}}]}, "model_result_raw": "['metropolitan_museum.get_top_artworks(number=5, sort_by=\"popularity\")']", "possible_answer": [{"metropolitan_museum.get_top_artworks": {"number": [5], "sort_by": ["popularity"]}}]}
{"id": "multiple_167", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_167", "question": [[{"role": "user", "content": "Generate a melody in C major scale, starting with the note C4, 16 measures long, at 120 beats per minute."}]], "function": [{"name": "calculate_density", "description": "Calculate the population density of a specific country in a specific year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country for which the density needs to be calculated."}, "year": {"type": "string", "description": "The year in which the density is to be calculated."}, "population": {"type": "integer", "description": "The population of the country."}, "land_area": {"type": "float", "description": "The land area of the country in square kilometers."}}, "required": ["country", "year", "population", "land_area"]}}, {"name": "get_directions", "description": "Retrieve directions from one location to another.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting point of the journey."}, "end_location": {"type": "string", "description": "The destination point of the journey."}, "route_type": {"type": "string", "description": "Type of route to use (e.g., fastest, scenic). Default is fastest.", "enum": ["fastest", "scenic"]}}, "required": ["start_location", "end_location"]}}, {"name": "music_generator.generate_melody", "description": "Generate a melody based on certain musical parameters.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The key of the melody. E.g., 'C' for C major."}, "start_note": {"type": "string", "description": "The first note of the melody, specified in scientific pitch notation. E.g., 'C4'."}, "length": {"type": "integer", "description": "The number of measures in the melody."}, "tempo": {"type": "integer", "description": "The tempo of the melody, in beats per minute. Optional parameter. If not specified, defaults to 120."}}, "required": ["key", "start_note", "length"]}}]}, "model_result_raw": "['music_generator.generate_melody(key=\"C\", start_note=\"C4\", length=16, tempo=120)']", "possible_answer": [{"music_generator.generate_melody": {"key": ["C"], "start_note": ["C4"], "length": [16], "tempo": [120, ""]}}]}
{"id": "multiple_168", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_168", "question": [[{"role": "user", "content": "Find the lyrics to the song 'Bohemian Rhapsody' by Queen."}]], "function": [{"name": "get_stock_price", "description": "Retrieves the current stock price of the specified companies", "parameters": {"type": "dict", "properties": {"company_names": {"type": "array", "items": {"type": "string"}, "description": "The list of companies for which to retrieve the stock price."}}, "required": ["company_names"]}}, {"name": "get_song_lyrics", "description": "Retrieve the lyrics of a song based on the artist's name and song title.", "parameters": {"type": "dict", "properties": {"song_title": {"type": "string", "description": "The title of the song."}, "artist_name": {"type": "string", "description": "The name of the artist who performed the song."}, "lang": {"type": "string", "description": "The language of the lyrics. Default is English.", "enum": ["English", "French", "Spanish", "German", "Italian"]}}, "required": ["song_title", "artist_name"]}}, {"name": "park_information", "description": "Retrieve the basic information such as elevation and area of a national park.", "parameters": {"type": "dict", "properties": {"park_name": {"type": "string", "description": "The name of the national park."}, "information": {"type": "array", "items": {"type": "string", "enum": ["Elevation", "Area", "Location", "Established Year"]}, "description": "The type of information you want about the park."}}, "required": ["park_name", "information"]}}]}, "model_result_raw": "['get_song_lyrics(song_title=\"Bohemian Rhapsody\", artist_name=\"Queen\", lang=\"English\")']", "possible_answer": [{"get_song_lyrics": {"song_title": ["Bohemian Rhapsody"], "artist_name": ["Queen"], "lang": ["English", ""]}}]}
{"id": "multiple_169", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_169", "question": [[{"role": "user", "content": "What is the musical scale associated with C sharp major?"}]], "function": [{"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is an empty array"}}, "required": ["loc", "product_list"]}}, {"name": "musical_scale", "description": "Get the musical scale of a specific key in music theory.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The musical key for which the scale will be found."}, "scale_type": {"type": "string", "default": "major", "description": "The type of musical scale."}}, "required": ["key"]}}]}, "model_result_raw": "['musical_scale(key=\"C#\", scale_type=\"major\")']", "possible_answer": [{"musical_scale": {"key": ["C#", "C sharp"], "scale_type": ["major", ""]}}]}
{"id": "multiple_175", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_175", "question": [[{"role": "user", "content": "Who is ranked as the top player in woman tennis?"}]], "function": [{"name": "find_instrument", "description": "Search for a musical instrument within specified budget and of specific type.", "parameters": {"type": "dict", "properties": {"budget": {"type": "float", "description": "Your budget for the instrument."}, "type": {"type": "string", "description": "Type of the instrument"}, "make": {"type": "string", "description": "Maker of the instrument, Optional parameter. Default is ''"}}, "required": ["budget", "type"]}}, {"name": "calculate_binomial_probability", "description": "Calculates the binomial probability given the number of trials, successes and the probability of success on an individual trial.", "parameters": {"type": "dict", "properties": {"number_of_trials": {"type": "integer", "description": "The total number of trials."}, "number_of_successes": {"type": "integer", "description": "The desired number of successful outcomes."}, "probability_of_success": {"type": "float", "description": "The probability of a successful outcome on any given trial.", "default": 0.5}}, "required": ["number_of_trials", "number_of_successes"]}}, {"name": "electromagnetic_force", "description": "Calculate the electromagnetic force between two charges placed at a certain distance.", "parameters": {"type": "dict", "properties": {"charge1": {"type": "float", "description": "The magnitude of the first charge in coulombs."}, "charge2": {"type": "float", "description": "The magnitude of the second charge in coulombs."}, "distance": {"type": "float", "description": "The distance between the two charges in meters."}, "medium_permittivity": {"type": "float", "description": "The relative permittivity of the medium in which the charges are present. Default is 8.854 x 10^-12 F/m (vacuum permittivity)."}}, "required": ["charge1", "charge2", "distance"]}}, {"name": "sports_ranking.get_top_player", "description": "Get the top player in a specific sport.", "parameters": {"type": "dict", "properties": {"sport": {"type": "string", "description": "The type of sport."}, "gender": {"type": "string", "description": "The gender of the sport category. Optional.", "default": "men"}}, "required": ["sport"]}}]}, "model_result_raw": "['sports_ranking.get_top_player(sport=\"tennis\", gender=\"women\")']", "possible_answer": [{"sports_ranking.get_top_player": {"sport": ["tennis"], "gender": ["women"]}}]}
{"id": "multiple_179", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_179", "question": [[{"role": "user", "content": "What is the probability of getting a full house in poker?"}]], "function": [{"name": "poker_probability.full_house", "description": "Calculate the probability of getting a full house in a poker game.", "parameters": {"type": "dict", "properties": {"deck_size": {"type": "integer", "description": "The size of the deck. Default is 52."}, "hand_size": {"type": "integer", "description": "The size of the hand. Default is 5."}}, "required": ["deck_size", "hand_size"]}}, {"name": "hospital.locate", "description": "Locate nearby hospitals based on location and radius. Options to include specific departments are available.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Denver, CO"}, "radius": {"type": "integer", "description": "The radius within which you want to find the hospital in kms."}, "department": {"type": "string", "description": "Specific department within the hospital. Default is ''.", "enum": ["General Medicine", "Emergency", "Pediatrics", "Cardiology", "Orthopedics"]}}, "required": ["location", "radius"]}}, {"name": "find_recipe", "description": "Find a recipe based on the dietary restrictions, recipe type, and time constraints.", "parameters": {"type": "dict", "properties": {"dietary_restrictions": {"type": "string", "description": "Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free."}, "recipe_type": {"type": "string", "description": "Type of the recipe. E.g. dessert, main course, breakfast."}, "time": {"type": "integer", "description": "Time limit in minutes to prep the meal."}}, "required": ["dietary_restrictions", "recipe_type", "time"]}}]}, "model_result_raw": "['poker_probability.full_house(deck_size=52, hand_size=5)']", "possible_answer": [{"poker_probability.full_house": {"deck_size": [52], "hand_size": [5]}}]}
{"id": "multiple_182", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_182", "question": [[{"role": "user", "content": "Find me a multiplayer game with rating above 4.5 and compatible with Windows 10."}]], "function": [{"name": "geo_distance.calculate", "description": "Calculate the geographic distance between two given locations.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting location for the distance calculation."}, "end_location": {"type": "string", "description": "The destination location for the distance calculation."}, "units": {"type": "string", "description": "Optional. The desired units for the resulting distance ('miles' or 'kilometers'). Defaults to 'miles'."}}, "required": ["start_location", "end_location"]}}, {"name": "multiplayer_game_finder", "description": "Locate multiplayer games that match specific criteria such as rating, platform compatibility, genre, etc.", "parameters": {"type": "dict", "properties": {"platform": {"type": "string", "description": "The platform you want the game to be compatible with, e.g. Windows 10, PS5."}, "rating": {"type": "float", "description": "Desired minimum game rating on a 5.0 scale."}, "genre": {"type": "string", "description": "Desired game genre, e.g. Action, Adventure, Racing. Default is ''.", "enum": ["Action", "Adventure", "Racing", "Strategy", "Simulation"]}}, "required": ["platform", "rating"]}}, {"name": "send_email", "description": "Send an email to the specified email address.", "parameters": {"type": "dict", "properties": {"to": {"type": "string", "description": "The email address to send to."}, "subject": {"type": "string", "description": "The subject of the email."}, "body": {"type": "string", "description": "The body content of the email."}, "cc": {"type": "string", "description": "The email address to carbon copy. Default is ''."}, "bcc": {"type": "string", "description": "The email address to blind carbon copy. Default is ''."}}, "required": ["to", "subject", "body"]}}, {"name": "calculate_area_under_curve", "description": "Calculate the area under a mathematical function within a given interval.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The mathematical function as a string."}, "interval": {"type": "array", "items": {"type": "float"}, "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."}, "method": {"type": "string", "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, "required": ["function", "interval"]}}]}, "model_result_raw": "['multiplayer_game_finder(platform=\"Windows 10\", rating=4.5)']", "possible_answer": [{"multiplayer_game_finder": {"platform": ["Windows 10"], "rating": [4.5], "genre": [""]}}]}
{"id": "multiple_183", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_183", "question": [[{"role": "user", "content": "How many calories in the Beef Lasagna Recipe from Foodnetwork.com?"}]], "function": [{"name": "get_stock_price", "description": "Retrieves the current stock price of the specified companies", "parameters": {"type": "dict", "properties": {"company_names": {"type": "array", "items": {"type": "string"}, "description": "The list of companies for which to retrieve the stock price."}}, "required": ["company_names"]}}, {"name": "get_team_ranking", "description": "Retrieve the FIFA ranking of a specific soccer team for a certain year.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the soccer team."}, "year": {"type": "integer", "description": "The year for which the ranking is to be retrieved."}, "gender": {"type": "string", "description": "The gender of the team. It can be either 'men' or 'women'. Default is 'men'."}}, "required": ["team_name", "year"]}}, {"name": "recipe_info.get_calories", "description": "Retrieve the amount of calories from a specific recipe in a food website.", "parameters": {"type": "dict", "properties": {"website": {"type": "string", "description": "The food website that has the recipe."}, "recipe": {"type": "string", "description": "Name of the recipe."}, "optional_meal_time": {"type": "string", "description": "Specific meal time of the day for the recipe (optional, could be 'Breakfast', 'Lunch', 'Dinner') Default is ''"}}, "required": ["website", "recipe"]}}]}, "model_result_raw": "['recipe_info.get_calories(website=\"Foodnetwork.com\", recipe=\"Beef Lasagna\")']", "possible_answer": [{"recipe_info.get_calories": {"website": ["Foodnetwork.com"], "recipe": ["Beef Lasagna", "Beef Lasagna Recipe"], "optional_meal_time": [""]}}]}
{"id": "multiple_190", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_190", "question": [[{"role": "user", "content": "Book a single room for two nights at the Hilton Hotel in Chicago, starting from 10th December 2022."}]], "function": [{"name": "get_stock_price", "description": "Retrieves the current stock price of the specified companies", "parameters": {"type": "dict", "properties": {"company_names": {"type": "array", "items": {"type": "string"}, "description": "The list of companies for which to retrieve the stock price."}}, "required": ["company_names"]}}, {"name": "currency_converter", "description": "Calculates the cost in target currency given the amount in base currency and exchange rate", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The currency to convert from."}, "target_currency": {"type": "string", "description": "The currency to convert to."}, "amount": {"type": "float", "description": "The amount in base currency"}}, "required": ["base_currency", "target_currency", "amount"]}}, {"name": "book_hotel", "description": "Book a room of specified type for a particular number of nights at a specific hotel, starting from a specified date.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city in which the hotel is located."}, "room_type": {"type": "string", "description": "The type of room to be booked."}, "start_date": {"type": "string", "description": "The start date for the booking."}, "nights": {"type": "integer", "description": "The number of nights for which the booking is to be made."}}, "required": ["hotel_name", "location", "room_type", "start_date", "nights"]}}]}, "model_result_raw": "['book_hotel(hotel_name=\"Hilton Hotel\", location=\"Chicago\", room_type=\"single\", start_date=\"2022-12-10\", nights=2)']", "possible_answer": [{"book_hotel": {"hotel_name": ["Hilton Hotel", "Hilton"], "location": ["Chicago"], "room_type": ["single", "Single"], "start_date": ["2022-12-10", "10/12/2022", "Dec.10,2022", "10th December 2022", "10 December 2022"], "nights": [2]}}]}
{"id": "multiple_192", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Function name 'currency_conversion.convert' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "multiple_192", "question": [[{"role": "user", "content": "Convert 150 Euros to Canadian dollars."}]], "function": [{"name": "currency_conversion.convert", "description": "Convert a value from one currency to another.", "parameters": {"type": "dict", "properties": {"amount": {"type": "integer", "description": "The amount to be converted."}, "from_currency": {"type": "string", "description": "The currency to convert from."}, "to_currency": {"type": "string", "description": "The currency to convert to."}}, "required": ["amount", "from_currency", "to_currency"]}}, {"name": "calc_absolute_pressure", "description": "Calculates the absolute pressure from gauge and atmospheric pressures.", "parameters": {"type": "dict", "properties": {"atm_pressure": {"type": "float", "description": "The atmospheric pressure in atmospheres (atm). Default is 1 atm if not provided."}, "gauge_pressure": {"type": "float", "description": "The gauge pressure in atmospheres (atm). Must be provided."}}, "required": ["gauge_pressure"]}}, {"name": "calculate_displacement", "description": "Calculates the displacement of an object in motion given initial velocity, time, and acceleration.", "parameters": {"type": "dict", "properties": {"initial_velocity": {"type": "float", "description": "The initial velocity of the object in m/s."}, "time": {"type": "float", "description": "The time in seconds that the object has been in motion."}, "acceleration": {"type": "float", "description": "The acceleration of the object in m/s^2.", "default": 0}}, "required": ["initial_velocity", "time"]}}]}, "model_result_raw": "[currency_conversion(amount=150, from_currency='EUR', to_currency='CAD')]", "model_result_decoded": [{"currency_conversion": {"amount": 150, "from_currency": "EUR", "to_currency": "CAD"}}], "possible_answer": [{"currency_conversion.convert": {"amount": [150], "from_currency": ["EUR"], "to_currency": ["CAD"]}}]}
{"id": "multiple_194", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_194", "question": [[{"role": "user", "content": "What are the opening hours of the Metropolitan Museum of Art on Saturday?"}]], "function": [{"name": "discoverer.get", "description": "Retrieve the name of the discoverer of an element based on its name.", "parameters": {"type": "dict", "properties": {"element_name": {"type": "string", "description": "The name of the element."}, "year": {"type": "integer", "description": "Optional parameter that refers to the year of discovery. It could be helpful in case an element was discovered more than once. Default is 0."}, "first": {"type": "boolean", "default": true, "description": "Optional parameter indicating if the first discoverer's name should be retrieved."}}, "required": ["element_name"]}}, {"name": "lawsuit.check_case", "description": "Verify the details of a lawsuit case and check its status using case ID.", "parameters": {"type": "dict", "properties": {"case_id": {"type": "integer", "description": "The identification number of the lawsuit case."}, "closed_status": {"type": "boolean", "description": "The status of the lawsuit case to be verified."}}, "required": ["case_id", "closed_status"]}}, {"name": "get_museum_hours", "description": "Retrieve opening hours of a specified museum for the specified day.", "parameters": {"type": "dict", "properties": {"museum_name": {"type": "string", "description": "The name of the museum."}, "day": {"type": "string", "description": "Day of the week.", "enum": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]}}, "required": ["museum_name", "day"]}}, {"name": "monopoly_odds_calculator", "description": "Calculates the probability of rolling a certain sum with two dice, commonly used in board game like Monopoly.", "parameters": {"type": "dict", "properties": {"number": {"type": "integer", "description": "The number for which the odds are calculated."}, "dice_number": {"type": "integer", "description": "The number of dice involved in the roll."}, "dice_faces": {"type": "integer", "description": "The number of faces on a single die. Default is 6 for standard six-faced die."}}, "required": ["number", "dice_number"]}}]}, "model_result_raw": "['get_museum_hours(museum_name=\"Metropolitan Museum of Art\", day=\"Saturday\")']", "possible_answer": [{"get_museum_hours": {"museum_name": ["Metropolitan Museum of Art", "The Met", "Met Museum"], "day": ["Saturday"]}}]}
{"id": "multiple_198", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_198", "question": [[{"role": "user", "content": "What is the genotype frequency of AA genotype in a population, given that allele frequency of A is 0.3?"}]], "function": [{"name": "calculate_genotype_frequency", "description": "Calculate the frequency of homozygous dominant genotype based on the allele frequency using Hardy Weinberg Principle.", "parameters": {"type": "dict", "properties": {"allele_frequency": {"type": "float", "description": "The frequency of the dominant allele in the population."}, "genotype": {"type": "string", "description": "The genotype which frequency is needed, default is homozygous dominant. ", "enum": ["AA", "Aa", "aa"]}}, "required": ["allele_frequency", "genotype"]}}, {"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}, {"name": "get_highest_scoring_player", "description": "Retrieve the highest scoring player in a specific game and season.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The game in which you want to find the highest scoring player."}, "season": {"type": "string", "description": "The season during which the high score was achieved."}, "region": {"type": "string", "description": "The geographical region in which the game is being played (Optional). Default is 'all'"}}, "required": ["game", "season"]}}, {"name": "science_history.get_invention", "description": "Retrieve the inventor and year of invention based on the invention's name.", "parameters": {"type": "dict", "properties": {"invention_name": {"type": "string", "description": "The name of the invention."}, "want_year": {"type": "boolean", "default": false, "description": "Return the year of invention if set to true."}}, "required": ["invention_name", "want_year"]}}]}, "model_result_raw": "['calculate_genotype_frequency(allele_frequency=0.3, genotype=\"AA\")']", "possible_answer": [{"calculate_genotype_frequency": {"allele_frequency": [0.3], "genotype": ["AA"]}}]}
{"id": "multiple_199", "model_name": "meta-llama_Llama-3.1-8B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. "], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_199", "question": [[{"role": "user", "content": "Predict the growth of forest in Yellowstone for the next 5 years including human impact."}]], "function": [{"name": "forest_growth_forecast", "description": "Predicts the forest growth over the next N years based on current trends.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location where you want to predict forest growth."}, "years": {"type": "integer", "description": "The number of years for the forecast."}, "include_human_impact": {"type": "boolean", "description": "Whether or not to include the impact of human activities in the forecast. If not provided, defaults to false."}}, "required": ["location", "years"]}}, {"name": "db_fetch_records", "description": "Fetch records from a specified database table based on certain conditions.", "parameters": {"type": "dict", "properties": {"database_name": {"type": "string", "description": "The name of the database."}, "table_name": {"type": "string", "description": "The name of the table from which records need to be fetched."}, "conditions": {"type": "dict", "properties": {"department": {"type": "string", "description": "The name of the department of students."}, "school": {"type": "string", "description": "The name of the school students are enrolled in."}}, "description": "The conditions based on which records are to be fetched."}, "fetch_limit": {"type": "integer", "description": "Limits the number of records to be fetched. If left empty, it fetches all records. (Optional) Default is 0."}}, "required": ["database_name", "table_name", "conditions"]}}]}, "model_result_raw": "['forest_growth_forecast(location=\"Yellowstone\", years=5, include_human_impact=True)']", "possible_answer": [{"forest_growth_forecast": {"location": ["Yellowstone", "yellowstone"], "years": [5], "include_human_impact": [true]}}]}