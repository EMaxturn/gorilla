{"accuracy": 0.4, "correct_count": 12, "total_count": 30}
{"id": "simple_25", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'height'. Expected type integer, got str. Parameter value: '150'."], "error_type": "type_error:simple", "prompt": {"id": "simple_25", "question": [[{"role": "user", "content": "Calculate the final velocity of an object falling from a 150 meter building, assuming initial velocity is zero."}]], "function": [{"name": "calculate_final_velocity", "description": "Calculate the final velocity of a free falling object given the height it's dropped from, the initial velocity and acceleration due to gravity. Ignore air resistance.", "parameters": {"type": "dict", "properties": {"height": {"type": "integer", "description": "The height the object is dropped from, in meters."}, "initial_velocity": {"type": "integer", "description": "The initial velocity of the object in m/s. Default is zero."}, "gravity": {"type": "float", "description": "Acceleration due to gravity. Default value is 9.81 m/s^2, earth's gravity."}}, "required": ["height"]}}]}, "model_result_raw": "```tool_code\n<functions>\n  <function name=\"calculate_final_velocity\">\n    <param name=\"height\" type=\"int\">150</param>\n    <param name=\"initial_velocity\" type=\"int\">0</param>\n  </function>\n</functions>\n```", "model_result_decoded": [{"calculate_final_velocity": {"height": "150", "initial_velocity": "0"}}], "possible_answer": [{"calculate_final_velocity": {"height": [150], "initial_velocity": [0, ""], "gravity": [9.81, ""]}}]}
{"id": "simple_94", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'update_info'. Expected type dict, got str. Parameter value: \"{'name':'John Doe', 'email':'johndoe@email.com'}\"."], "error_type": "type_error:simple", "prompt": {"id": "simple_94", "question": [[{"role": "user", "content": "Update my customer information with user id 43523 'name':'John Doe', 'email':'johndoe@email.com' in the database."}]], "function": [{"name": "update_user_info", "description": "Update user information in the database.", "parameters": {"type": "dict", "properties": {"user_id": {"type": "integer", "description": "The user ID of the customer."}, "update_info": {"type": "dict", "properties": {"name": {"type": "string", "description": "The customer's updated name."}, "email": {"type": "string", "description": "The customer's updated email."}}, "description": "The new information to update."}, "database": {"type": "string", "description": "The database where the user's information is stored.", "default": "CustomerInfo"}}, "required": ["user_id", "update_info"]}}]}, "model_result_raw": "<functions><function name=\"update_user_info\"><param name=\"user_id\" type=\"integer\">43523</param><param name=\"update_info\" type=\"dict\">{'name':'John Doe', 'email':'johndoe@email.com'}</param></function></functions>", "model_result_decoded": [{"update_user_info": {"user_id": 43523, "update_info": "{'name':'John Doe', 'email':'johndoe@email.com'}"}}], "possible_answer": [{"update_user_info": {"user_id": [43523], "update_info": [{"name": ["John Doe"], "email": ["johndoe@email.com"]}], "database": ["CustomerInfo", ""]}}]}
{"id": "simple_96", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'conditions'. Expected type array, got str. Parameter value: '[\"age > 25\", \"job = \\'engineer\\'\"]'."], "error_type": "type_error:simple", "prompt": {"id": "simple_96", "question": [[{"role": "user", "content": "Find records in database in user table where age is greater than 25 and job is 'engineer'."}]], "function": [{"name": "database.query", "description": "Query the database based on certain conditions.", "parameters": {"type": "dict", "properties": {"table": {"type": "string", "description": "Name of the table to query."}, "conditions": {"type": "array", "items": {"type": "dict", "properties": {"field": {"type": "string", "description": "The field to apply the condition."}, "operation": {"type": "string", "description": "The operation to be performed.", "enum": ["<", ">", "=", ">=", "<="]}, "value": {"type": "string", "description": "The value to be compared."}}, "required": ["field", "operation", "value"]}, "description": "Conditions for the query."}}, "required": ["table", "conditions"]}}]}, "model_result_raw": "```tool_code\n<functions>\n  <function name=\"database.query\">\n    <param name=\"table\" type=\"string\">user</param>\n    <param name=\"conditions\" type=\"list\">[\"age > 25\", \"job = 'engineer'\"]</param>\n  </function>\n</functions>\n```", "model_result_decoded": [{"database.query": {"table": "user", "conditions": "[\"age > 25\", \"job = 'engineer'\"]"}}], "possible_answer": [{"database.query": {"table": ["user"], "conditions": [[{"field": ["age"], "operation": [">"], "value": ["25"]}, {"field": ["job"], "operation": ["="], "value": ["engineer"]}]]}}]}
{"id": "simple_105", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'base'. Expected type integer, got str. Parameter value: '3'."], "error_type": "type_error:simple", "prompt": {"id": "simple_105", "question": [[{"role": "user", "content": "Calculate the power of 3 raised to the power 4."}]], "function": [{"name": "math.power", "description": "Calculate the power of one number raised to another.", "parameters": {"type": "dict", "properties": {"base": {"type": "integer", "description": "The base number."}, "exponent": {"type": "integer", "description": "The exponent."}, "mod": {"type": "integer", "description": "The modulus. Default is 1. Calculates pow(base, exponent) % mod when provided."}}, "required": ["base", "exponent"]}}]}, "model_result_raw": "```tool_code\n<functions>\n  <function name=\"math.power\">\n    <param name=\"base\" type=\"int\">3</param>\n    <param name=\"exponent\" type=\"int\">4</param>\n    <param name=\"mod\" type=\"int\">1</param>\n  </function>\n</functions>\n```", "model_result_decoded": [{"math.power": {"base": "3", "exponent": "4", "mod": "1"}}], "possible_answer": [{"math.power": {"base": [3], "exponent": [4], "mod": ["", 1]}}]}
{"id": "simple_113", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'desired_number'. Expected type integer, got str. Parameter value: '6'."], "error_type": "type_error:simple", "prompt": {"id": "simple_113", "question": [[{"role": "user", "content": "What's the probability of rolling a six on a six-sided die twice in a row?"}]], "function": [{"name": "probability.dice_roll", "description": "Calculate the probability of rolling a certain number on a six-sided die a certain number of times in a row.", "parameters": {"type": "dict", "properties": {"desired_number": {"type": "integer", "description": "The number you want to roll."}, "number_of_rolls": {"type": "integer", "description": "How many times you want to roll that number in a row."}, "die_sides": {"type": "integer", "description": "The number of sides on the die (optional; default is 6)."}}, "required": ["desired_number", "number_of_rolls"]}}]}, "model_result_raw": "```tool_code\n<functions>\n  <function name=\"probability.dice_roll\">\n    <param name=\"desired_number\" type=\"int\">6</param>\n    <param name=\"number_of_rolls\" type=\"int\">2</param>\n    <param name=\"die_sides\" type=\"int\">6</param>\n  </function>\n</functions>\n```", "model_result_decoded": [{"probability.dice_roll": {"desired_number": "6", "number_of_rolls": "2", "die_sides": "6"}}], "possible_answer": [{"probability.dice_roll": {"desired_number": [6], "number_of_rolls": [2], "die_sides": [6, ""]}}]}
{"id": "simple_155", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'initial_investment'. Expected type integer, got str. Parameter value: '1000'."], "error_type": "type_error:simple", "prompt": {"id": "simple_155", "question": [[{"role": "user", "content": "Calculate the future value of my investment of $1000 with an annual interest rate of 5% over 2 years."}]], "function": [{"name": "calculate_future_value", "description": "Calculate the future value of an investment given the initial amount, interest rate, and investment duration.", "parameters": {"type": "dict", "properties": {"initial_investment": {"type": "integer", "description": "The initial investment amount."}, "interest_rate": {"type": "float", "description": "The annual interest rate in decimal form."}, "duration": {"type": "integer", "description": "The investment duration in years."}, "compounded": {"type": "integer", "description": "The number of times the interest is compounded per year. Default is 1 (annual compounding)."}}, "required": ["initial_investment", "interest_rate", "duration"]}}]}, "model_result_raw": "```tool_code\n<functions>\n  <function name=\"calculate_future_value\">\n    <param name=\"initial_investment\" type=\"int\">1000</param>\n    <param name=\"interest_rate\" type=\"float\">0.05</param>\n    <param name=\"duration\" type=\"int\">2</param>\n    <param name=\"compounded\" type=\"int\">1</param>\n  </function>\n</functions>\n```", "model_result_decoded": [{"calculate_future_value": {"initial_investment": "1000", "interest_rate": 0.05, "duration": "2", "compounded": "1"}}], "possible_answer": [{"calculate_future_value": {"initial_investment": [1000], "interest_rate": [0.05], "duration": [2], "compounded": ["", 1]}}]}
{"id": "simple_165", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'year'. Expected type integer, got str. Parameter value: '2020'."], "error_type": "type_error:simple", "prompt": {"id": "simple_165", "question": [[{"role": "user", "content": "Retrieve cases from 2020 about theft crimes in Los Angeles, California"}]], "function": [{"name": "civil_cases.retrieve", "description": "Retrieve civil cases based on given parameters, including year, crime type, and location.", "parameters": {"type": "dict", "properties": {"year": {"type": "integer", "description": "Year of the cases"}, "crime_type": {"type": "string", "description": "Type of the crime."}, "location": {"type": "string", "description": "Location of the case in the format of city name."}}, "required": ["year", "crime_type", "location"]}}]}, "model_result_raw": "```tool_code\n<functions>\n  <function name=\"civil_cases.retrieve\">\n    <param name=\"year\" type=\"int\">2020</param>\n    <param name=\"crime_type\" type=\"str\">theft</param>\n    <param name=\"location\" type=\"str\">Los Angeles</param>\n  </function>\n</functions>\n```", "model_result_decoded": [{"civil_cases.retrieve": {"year": "2020", "crime_type": "theft", "location": "Los Angeles"}}], "possible_answer": [{"civil_cases.retrieve": {"year": [2020], "crime_type": ["theft"], "location": ["Los Angeles", "Los Angeles, California"]}}]}
{"id": "simple_174", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'top_number'. Expected type integer, got str. Parameter value: '10'."], "error_type": "type_error:simple", "prompt": {"id": "simple_174", "question": [[{"role": "user", "content": "Get me the top 10 landmark cases in constitutional law in China."}]], "function": [{"name": "get_top_cases", "description": "Retrieve a list of the most influential or landmark cases in a specific field of law.", "parameters": {"type": "dict", "properties": {"field_of_law": {"type": "string", "description": "The specific field of law e.g., constitutional law, criminal law, etc."}, "top_number": {"type": "integer", "description": "The number of top cases to retrieve."}, "country": {"type": "string", "description": "The country where the law cases should be retrieved from. Default is United States of America."}}, "required": ["field_of_law", "top_number"]}}]}, "model_result_raw": "<functions><function name=\"get_top_cases\"><param name=\"field_of_law\" type=\"string\">constitutional law</param><param name=\"top_number\" type=\"int\">10</param><param name=\"country\" type=\"string\">China</param></function></functions>", "model_result_decoded": [{"get_top_cases": {"field_of_law": "constitutional law", "top_number": "10", "country": "China"}}], "possible_answer": [{"get_top_cases": {"field_of_law": ["constitutional law", "constitutional"], "top_number": [10], "country": ["China", "CN"]}}]}
{"id": "simple_208", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'avoid'. Expected type array, got str. Parameter value: \"['highways', 'toll roads']\"."], "error_type": "type_error:simple", "prompt": {"id": "simple_208", "question": [[{"role": "user", "content": "Get me the directions from New York to Los Angeles avoiding highways and toll roads."}]], "function": [{"name": "map_service.get_directions", "description": "Retrieve directions from a starting location to an ending location, including options for route preferences.", "parameters": {"type": "dict", "properties": {"start": {"type": "string", "description": "Starting location for the route."}, "end": {"type": "string", "description": "Ending location for the route."}, "avoid": {"type": "array", "items": {"type": "string", "enum": ["tolls", "highways", "ferries"]}, "description": "Route features to avoid. Default is ['highways', 'ferries']"}}, "required": ["start", "end"]}}]}, "model_result_raw": "<functions><function name=\"map_service.get_directions\"><param name=\"start\" type=\"string\">New York</param><param name=\"end\" type=\"string\">Los Angeles</param><param name=\"avoid\" type=\"list\">['highways', 'toll roads']</param></function></functions>", "model_result_decoded": [{"map_service.get_directions": {"start": "New York", "end": "Los Angeles", "avoid": "['highways', 'toll roads']"}}], "possible_answer": [{"map_service.get_directions": {"start": ["New York", "NYC"], "end": ["Los Angeles", "LA"], "avoid": [["highways", "tolls"], ["tolls", "highways"]]}}]}
{"id": "simple_281", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'year'. Expected type integer, got str. Parameter value: '1721'."], "error_type": "type_error:simple", "prompt": {"id": "simple_281", "question": [[{"role": "user", "content": "Find the details about the musical instrument 'Violin' from 'Stradivarius' maker, made in the year 1721."}]], "function": [{"name": "get_instrument_info", "description": "Retrieve the details about a specific musical instrument based on its name, maker, and manufacturing year.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the instrument."}, "maker": {"type": "string", "description": "The name of the maker who created the instrument."}, "year": {"type": "integer", "description": "The year the instrument was made."}}, "required": ["name", "maker", "year"]}}]}, "model_result_raw": "```tool_code\n<functions>\n  <function name=\"get_instrument_info\">\n    <param name=\"name\" type=\"string\">Violin</param>\n    <param name=\"maker\" type=\"string\">Stradivarius</param>\n    <param name=\"year\" type=\"int\">1721</param>\n  </function>\n</functions>\n```", "model_result_decoded": [{"get_instrument_info": {"name": "Violin", "maker": "Stradivarius", "year": "1721"}}], "possible_answer": [{"get_instrument_info": {"name": ["Violin"], "maker": ["Stradivarius"], "year": [1721]}}]}
{"id": "simple_284", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_284", "question": [[{"role": "user", "content": "Get information about the pop concerts in New York for next month."}]], "function": [{"name": "concert_info.get", "description": "Retrieve information about concerts based on specific genre, location and date.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the concert will take place."}, "date": {"type": "string", "description": "Time frame to get the concert for."}, "genre": {"type": "string", "description": "Genre of the concert.", "enum": ["Pop", "Rock", "Country", "Classical", "Electronic", "Hip-Hop"]}}, "required": ["location", "date", "genre"]}}]}, "model_result_raw": "I need a specific date or time frame for \"next month\". Could you please provide the exact date or time frame?\n", "model_result_decoded": [], "possible_answer": [{"concert_info.get": {"location": ["New York City, NY", "New York"], "date": ["next month", "2023-06-01", "06/01/2023", "Jun.1,2023", "June 2023"], "genre": ["Pop"]}}]}
{"id": "simple_297", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'progression'. Expected type array, got str. Parameter value: \"['I', 'V', 'vi', 'IV']\"."], "error_type": "type_error:simple", "prompt": {"id": "simple_297", "question": [[{"role": "user", "content": "music.theory.chordProgression(progression=['I', 'V', 'vi', 'IV'])"}]], "function": [{"name": "music.theory.chordProgression", "description": "Identifies a potential key signature for the given chord progression.", "parameters": {"type": "dict", "properties": {"progression": {"type": "array", "items": {"type": "string"}, "description": "The chord progression in Roman numerals. Eg: ['I', 'V', 'vi', 'IV']."}, "returnAllPossibleKeys": {"type": "boolean", "description": "Flag indicating if the function should return all possible key signatures that fit the chord progression. If false, the function will return the first valid key it finds. Default is false."}, "assumeMajor": {"type": "boolean", "description": "Assumption if the key signature is Major. If true, the function will assume the key signature to be major and otherwise minor. Default is true."}}, "required": ["progression"]}}]}, "model_result_raw": "```tool_code\n<functions>\n  <function name=\"music.theory.chordProgression\">\n    <param name=\"progression\" type=\"list\">['I', 'V', 'vi', 'IV']</param>\n  </function>\n</functions>\n```", "model_result_decoded": [{"music.theory.chordProgression": {"progression": "['I', 'V', 'vi', 'IV']"}}], "possible_answer": [{"music.theory.chordProgression": {"progression": [["I", "V", "vi", "IV"]], "returnAllPossibleKeys": [true, false, ""], "assumeMajor": [true, false, ""]}}]}
{"id": "simple_327", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'num_of_games'. Expected type integer, got str. Parameter value: '6'."], "error_type": "type_error:simple", "prompt": {"id": "simple_327", "question": [[{"role": "user", "content": "Give me the schedule of Manchester United for the next 6 games in Premier League."}]], "function": [{"name": "sports_team.get_schedule", "description": "Fetches the schedule of the specified sports team for the specified number of games in the given league.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "num_of_games": {"type": "integer", "description": "Number of games for which to fetch the schedule."}, "league": {"type": "string", "description": "The name of the sports league. If not provided, the function will fetch the schedule for all games, regardless of the league."}, "location": {"type": "string", "description": "Optional. The city or venue where games are to be held. If not provided, default that all venues will be considered."}}, "required": ["team_name", "num_of_games", "league"]}}]}, "model_result_raw": "```tool_code\n<functions>\n  <function name=\"sports_team.get_schedule\">\n    <param name=\"team_name\" type=\"string\">Manchester United</param>\n    <param name=\"num_of_games\" type=\"int\">6</param>\n    <param name=\"league\" type=\"string\">Premier League</param>\n  </function>\n</functions>\n```", "model_result_decoded": [{"sports_team.get_schedule": {"team_name": "Manchester United", "num_of_games": "6", "league": "Premier League"}}], "possible_answer": [{"sports_team.get_schedule": {"team_name": ["Manchester United", "Man United", "Man U", "MUFC"], "num_of_games": [6], "league": ["Premier League"], "location": [""]}}]}
{"id": "simple_328", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'parameters'. Expected type array, got str. Parameter value: '[\"rating\", \"player_count\"]'."], "error_type": "type_error:simple", "prompt": {"id": "simple_328", "question": [[{"role": "user", "content": "Find the rating and player count of the board game 'Ticket to Ride'."}]], "function": [{"name": "boardgame.get_info", "description": "Retrieve detailed information of a board game.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "Name of the board game."}, "parameters": {"type": "array", "items": {"type": "string", "enum": ["player count", "playing time", "age", "mechanics", "rating"]}, "description": "Game characteristics interested."}, "language": {"type": "string", "description": "The preferred language for the game information, default is English"}}, "required": ["name", "parameters"]}}]}, "model_result_raw": "```tool_code\n<functions>\n  <function name=\"boardgame.get_info\">\n    <param name=\"name\" type=\"string\">Ticket to Ride</param>\n    <param name=\"parameters\" type=\"list\">[\"rating\", \"player_count\"]</param>\n  </function>\n</functions>\n```", "model_result_decoded": [{"boardgame.get_info": {"name": "Ticket to Ride", "parameters": "[\"rating\", \"player_count\"]"}}], "possible_answer": [{"boardgame.get_info": {"name": ["Ticket to Ride"], "parameters": [["rating", "player count"], ["player count", "rating"]], "language": ["", "English"]}}]}
{"id": "simple_360", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'maxCalories'. Expected type integer, got str. Parameter value: '500'."], "error_type": "type_error:simple", "prompt": {"id": "simple_360", "question": [[{"role": "user", "content": "Find a recipe for pasta carbonara which contains only less than 500 calories."}]], "function": [{"name": "find_recipe", "description": "Locate a recipe based on name and its calorie content", "parameters": {"type": "dict", "properties": {"recipeName": {"type": "string", "description": "The recipe's name."}, "maxCalories": {"type": "integer", "description": "The maximum calorie content of the recipe.", "default": 1000}}, "required": ["recipeName"]}}]}, "model_result_raw": "```tool_code\n<functions>\n  <function name=\"find_recipe\">\n    <param name=\"recipeName\" type=\"string\">pasta carbonara</param>\n    <param name=\"maxCalories\" type=\"int\">500</param>\n  </function>\n</functions>\n```", "model_result_decoded": [{"find_recipe": {"recipeName": "pasta carbonara", "maxCalories": "500"}}], "possible_answer": [{"find_recipe": {"recipeName": ["pasta carbonara"], "maxCalories": [500]}}]}
{"id": "simple_380", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'preferences'. Expected type array, got str. Parameter value: 'pet friendly'."], "error_type": "type_error:simple", "prompt": {"id": "simple_380", "question": [[{"role": "user", "content": "Book a single room at a pet friendly hotel near Manhattan, New York for 3 nights starting from March 10th, 2023."}]], "function": [{"name": "hotel_booking", "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you want to book the hotel."}, "room_type": {"type": "string", "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."}, "duration": {"type": "integer", "description": "The number of nights you want to book the hotel for."}, "start_date": {"type": "string", "description": "The date when your stay begins."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["pet_friendly", "gym", "swimming_pool", "free_breakfast", "parking"]}, "description": "Optional preferences of stay at the hotel. Default to use all if not specified."}}, "required": ["location", "room_type", "duration", "start_date"]}}]}, "model_result_raw": "```tool_code\n<functions>\n  <function name=\"hotel_booking\">\n    <param name=\"location\" type=\"string\">Manhattan, New York</param>\n    <param name=\"room_type\" type=\"string\">single</param>\n    <param name=\"duration\" type=\"integer\">3</param>\n    <param name=\"start_date\" type=\"string\">March 10th, 2023</param>\n    <param name=\"preferences\" type=\"list\">pet friendly</param>\n  </function>\n</functions>\n```", "model_result_decoded": [{"hotel_booking": {"location": "Manhattan, New York", "room_type": "single", "duration": 3, "start_date": "March 10th, 2023", "preferences": "pet friendly"}}], "possible_answer": [{"hotel_booking": {"location": ["Manhattan, New York", "Manhattan, NY", "NYC", "New York City"], "room_type": ["single"], "duration": [3], "start_date": ["2023-03-10", "03/10/2023", "Mar.10,2023", "March 10th, 2023", "March 10th,2023", "March10th, 2023", "March10th,2023"], "preferences": [["pet_friendly"]]}}]}
{"id": "simple_390", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'amount'. Expected type integer, got str. Parameter value: '150'."], "error_type": "type_error:simple", "prompt": {"id": "simple_390", "question": [[{"role": "user", "content": "Convert 150 Euros to Canadian dollars."}]], "function": [{"name": "currency_conversion.convert", "description": "Convert a value from one currency to another.", "parameters": {"type": "dict", "properties": {"amount": {"type": "integer", "description": "The amount to be converted."}, "from_currency": {"type": "string", "description": "The currency to convert from."}, "to_currency": {"type": "string", "description": "The currency to convert to."}}, "required": ["amount", "from_currency", "to_currency"]}}]}, "model_result_raw": "```tool_code\n<functions>\n  <function name=\"currency_conversion.convert\">\n    <param name=\"amount\" type=\"int\">150</param>\n    <param name=\"from_currency\" type=\"str\">EUR</param>\n    <param name=\"to_currency\" type=\"str\">CAD</param>\n  </function>\n</functions>\n```", "model_result_decoded": [{"currency_conversion.convert": {"amount": "150", "from_currency": "EUR", "to_currency": "CAD"}}], "possible_answer": [{"currency_conversion.convert": {"amount": [150], "from_currency": ["EUR", "Euros"], "to_currency": ["CAD", "Canadian dollars"]}}]}
{"id": "simple_393", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'amount'. Expected type integer, got str. Parameter value: '20000'."], "error_type": "type_error:simple", "prompt": {"id": "simple_393", "question": [[{"role": "user", "content": "How much will 20000 Japanese Yen be in United States Dollar?"}]], "function": [{"name": "convert_currency", "description": "Converts an amount from a particular currency to another currency.", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The base currency in which the original amount is present."}, "target_currency": {"type": "string", "description": "The currency to which you want to convert."}, "amount": {"type": "integer", "description": "The amount you want to convert."}}, "required": ["base_currency", "target_currency", "amount"]}}]}, "model_result_raw": "```tool_code\n<functions>\n  <function name=\"convert_currency\">\n    <param name=\"base_currency\" type=\"str\">JPY</param>\n    <param name=\"target_currency\" type=\"str\">USD</param>\n    <param name=\"amount\" type=\"int\">20000</param>\n  </function>\n</functions>\n```", "model_result_decoded": [{"convert_currency": {"base_currency": "JPY", "target_currency": "USD", "amount": "20000"}}], "possible_answer": [{"convert_currency": {"base_currency": ["JPY"], "target_currency": ["USD"], "amount": [20000]}}]}