{"id": "simple_19", "result": "<functions>\n  <function name=\"math.gcd\">\n    <params>\n      <param name=\"num1\" value=\"40\" type=\"integer\"/>\n      <param name=\"param2\" type=\"integer\">50</param>\n    </param>\n  </function>\n</functions>", "input_token_count": 1578, "output_token_count": 60, "latency": 212.0077166557312}
{"id": "simple_25", "result": "<functions>\n  <function name=\"calculate_final_velocity\">\n    <param name=\"height\" type=\"integer\">150</param>\n    <param name=\"initial_velocity\" type=\"integer\">0</param>\n    <param name=\"gravity\" type=\"float\">9.81</param>\n  </function>\n</functions>", "input_token_count": 1884, "output_token_count": 68, "latency": 212.57520937919617}
{"id": "simple_58", "result": "<TOOLCALL><functions><function name=\"cell_biology.function_lookup\"><param name=\"molecule\" type=\"string\">ATP synthase</param><param name=\"organelle\" type=\"string\">mitochondria</param><param name=\"specific_function\" type=\"boolean\">true</param></function></functions></TOOLCALL>", "input_token_count": 1805, "output_token_count": 73, "latency": 211.31753778457642}
{"id": "simple_94", "result": "<functions>\n  <function name=\"update_user_info\">\n    <param name=\"user_id\" type=\"integer\">43523</param>\n    <param name=\"update_info\" type=\"dict\">\n      <param name=\"name\" type=\"string\">John Doe</param>\n      <param name=\"email\" type=\"string\">johndoe@email.com</param>\n    </function>\n</functions>", "input_token_count": 1770, "output_token_count": 85, "latency": 212.67416787147522}
{"id": "simple_96", "result": "<functions>\n  <function name=\"database.query\">\n    <param name=\"table\" type=\"string\">user</param>\n    <param name=\"conditions\" type=\"array\">\n      <param name=\"field\" type=\"string\">age</param>\n      <param name=\"operation\" type=\"string\">></param>\n      <param name=\"value\" type=\"integer\">25</param>\n    </param>\n    <param name=\"conditions\" type=\"array\">\n      <param name=\"field\" type=\"string\">age</param>\n      <param name=\"operation\" type=\"string\">></param>\n      <param name=\"value\" type=\"integer\">25</param>\n    </param>\n    <param name=\"conditions\" type=\"array\">\n      <param name=\"field\" type=\"string\">age</param>\n      <param name=\"operation\" type=\"string\">></param>\n      <param name=\"value\" type=\"integer\">25</param>\n    </param>\n  </function>\n</functions>\n\n<TOOLCALL>\n  <functions>\n    <function name=\"database.query\">\n      <param name=\"table\" type=\"string\">user</param>\n      <param name=\"conditions\" type=\"array\">\n        <param name=\"field\" type=\"string\">age</param>\n        <param name=\"operation\" type=\"string\">></param>\n        <param name=\"value\" type=\"integer\">25</param>\n      </param>\n      <param name=\"conditions\" type=\"array\">\n        <param name=\"field\" type=\"string\">job</param>\n        <param name=\"operation\" type=\"string\">=</param>\n        <param name=\"value\" type=\"string\">engineer</param>\n      </param>\n    </function>\n  </functions>\n</TOOLCALL>", "input_token_count": 1688, "output_token_count": 376, "latency": 224.28180122375488}
{"id": "simple_105", "result": "<TOOLCALL>\n<functions>\n  <function name=\"math.power\">\n    <param name=\"base\" type=\"integer\">3</param>\n    <param name=\"exponent\" type=\"integer\">4</param>\n  </function>\n</functions>\n</TOOLCALL> \n\n<functions>\n  <function name=\"math.power\">\n    <param name=\"base\" type=\"integer\">3</param>\n    <param name=\"exponent\" type=\"integer\">4</param>\n  </function>\n</functions>", "input_token_count": 1712, "output_token_count": 110, "latency": 212.171635389328}
{"id": "simple_113", "result": "<functions>\n  <function name=\"probability.dice_roll\">\n    <param name=\"desired_number\" type=\"integer\">6</param>\n    <param name=\"number_of_rolls\" type=\"integer\">2</param>\n  </function>\n</functions>", "input_token_count": 1836, "output_token_count": 55, "latency": 207.62905168533325}
{"id": "simple_134", "result": "<TOOLCALL>\n<functions>\n  <function name=\"investment.predictProfit\">\n    <param name=\"investment_amount\" type=\"integer\">5000</param>\n    <param name=\"annual_return\" type=\"float\">0.07</param>\n    <param name=\"years\" type=\"integer\">5</param>\n  </function>\n</functions>", "input_token_count": 1747, "output_token_count": 75, "latency": 207.75549173355103}
{"id": "simple_155", "result": "<TOOLCALL><functions><function name=\"calculate_future_value\"><param name=\"initial_investment\" type=\"integer\">1000</param><param name=\"interest_rate\" type=\"float\">0.05</param><param name=\"duration\" type=\"integer\">2</param><param name=\"compounded\" type=\"integer\">1</param></function></functions></TOOLCALL>", "input_token_count": 1901, "output_token_count": 82, "latency": 206.7537763118744}
{"id": "simple_165", "result": "<TOOLCALL>\n<functions>\n  <function name=\"civil_cases.retrieve\">\n    <param name=\"year\" type=\"integer\">2020</param>\n    <param name=\"crime_type\" type=\"string\">theft</param>\n    <param name=\"location\" type=\"string\">Los Angeles</param>\n  </function>\n</TOOLCALL>", "input_token_count": 1732, "output_token_count": 76, "latency": 135.5464859008789}
{"id": "simple_168", "result": "<TOOLCALL>\n  <functions>\n    <function name=\"lawsuit_search\">\n      <param name=\"company\" type=\"string\">Google</param>\n      <param name=\"start_date\" type=\"string\">01-01-2021</param>\n      <param name=\"location\" type=\"string\">California</param>\n    </function>\n  </functions>\n</TOOLCALL>", "input_token_count": 1950, "output_token_count": 83, "latency": 132.6798279285431}
{"id": "simple_174", "result": "```xml\n<functions>\n  <function name=\"get_top_cases\">\n    <params>\n      <param name=\"field_of_law\" type=\"string\">constitutional law</param>\n      <param name=\"top_number\" type=\"integer\">10</param>\n      <param name=\"country\" type=\"string\">China</param>\n    </params>\n</functions>\n```", "input_token_count": 1825, "output_token_count": 78, "latency": 132.47348999977112}
{"id": "simple_179", "result": "<TOOLCALL>\n  <functions>\n    <function name=\"find_latest_court_case\">\n      <param name=\"company1\" type=\"string\">Apple</param>\n      <param name=\"company2\" type=\"string\">Samsung</param>\n      <param name=\"country\" type=\"string\">USA</param>\n    </function>\n  </functions>\n</TOOLCALL> \n\n<TOOLCALL>\n  <functions>\n    <function name=\"find_latest_court_case\">\n      <param name=\"company1\" type=\"string\">Apple</param>\n      <param name=\"company2\" type=\"string\">Samsung</param>\n      <param name=\"country\" type=\"string\">USA</param>\n    </function>\n  </functions>\n</TOOLCALL>", "input_token_count": 1728, "output_token_count": 162, "latency": 119.85611701011658}
{"id": "simple_181", "result": "<functions><function name=\"get_lawsuit_details\"><param name=\"case_number\" type=\"string\">123456-ABC</param><param name=\"court_location\" type=\"string\">Los Angeles</param><param name=\"with_verdict\" type=\"boolean\">True</param></function></functions></TOOLCALL><|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport { UserService } from '../services/user.service';\nimport { User } from '../models/user.model';\nimport { UserInterface } from '../interfaces/user.interface';\nimport { UserInterface } from '../interfaces/user.interface';\nimport { User } from '../models/user.model';\nimport { UserInterface } from '../interfaces/user.interface';\nimport { UserInterface } from '../interfaces/user.interface';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n  user: UserInterface;\n  constructor(private router: Router, private authService: AuthService, private userService: UserService) {\n    this.user = JSON.parse(localStorage.getItem('user'));\n  }\n\n  ngOnInit(): void {\n    this.userService.getUser(this.user.id).subscribe((user: UserInterface) => {\n      this.user = user;\n    });\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport { UserService } from '../services/user.service';\nimport { User } from '../models/user.model';\nimport { UserInterface } from '../interfaces/user.interface';\nimport { UserInterface } from '../interfaces/user.interface';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  user: UserInterface;\n  constructor(private router: Router, private authService: AuthService, private userService: UserService) {\n    this.user = new User();\n  }\n\n  ngOnInit(): void {\n  }\n\n  login() {\n    this.userService.login(this.user).subscribe((user: UserInterface) => {\n      localStorage.setItem('user', JSON.stringify(user));\n      this.router.navigate(['/']);\n    });\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport { UserService } from '../services/user.service';\nimport { User } from '../models/user.model';\nimport { UserInterface } from '../interfaces/user.interface';\nimport { UserInterface } from '../interfaces/user.interface';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n  user: UserInterface;\n  constructor(private router: Router, private authService: AuthService, private userService: UserService) {\n    this.user = new User();\n  }\n\n  ngOnInit(): void {\n  }\n\n  register() {\n    this.userService.register(this.user).subscribe((user: UserInterface) => {\n      localStorage.setItem('user', JSON.stringify(user));\n      this.router.navigate(['/']);\n    });\n  }\n}\n<|file_sep|>import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { User } from '../models/user.model';\nimport { UserInterface } from '../interfaces/user.interface';\nimport { UserInterface } from '../interfaces/user.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private url = 'http://localhost:3000/api/users';\n  constructor(private http: HttpClient) { }\n\n  register(user: UserInterface): Observable<UserInterface> {\n    return this.http.post<UserInterface>(this.url, user);\n  }\n\n  login(user: UserInterface): Observable<UserInterface> {\n    return this.http.post<UserInterface>(`${this.url}/login`, user);\n  }\n\n  getUser(id: string): Observable<UserInterface> {\n    return this.http.get<UserInterface>(`${this.url}/${id}`);\n  }\n\n  updateUser(user: UserInterface): Observable<UserInterface> {\n    return this.http.put<UserInterface>(`${this.url}/${user.id}`, user);\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport { UserService } from '../services/user.service';\nimport { User } from '../models/user.model';\nimport { UserInterface } from '../interfaces/user.interface';\nimport { UserInterface } from '../interfaces/user.interface';\n\n@Component({\n  selector: 'app-edit-profile',\n  templateUrl: './edit-profile.component.html',\n  styleUrls: ['./edit-profile.component.css']\n})\nexport class EditProfileComponent implements OnInit {\n  user: UserInterface;\n  constructor(private router: Router, private authService: AuthService, private userService: UserService) {\n    this.user = JSON.parse(localStorage.getItem('user'));\n  }\n\n  ngOnInit(): void {\n  }\n\n  update() {\n    this.userService.updateUser(this.user).subscribe((user: UserInterface) => {\n      localStorage.setItem('user', JSON.stringify(user));\n      this.router.navigate(['/profile']);\n    });\n  }\n}\n<|file_sep|>import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { User } from '../models/user.model';\nimport { UserInterface } from '../interfaces/user.interface';\nimport { UserInterface } from '../interfaces/user.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  user: UserInterface;\n  constructor(private router: Router) {\n    this.user = JSON.parse(localStorage.getItem('user'));\n  }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    if (this.user) {\n      return true;\n    } else {\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n}\n<|file_sep|>import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { User } from '../models/user.model';\nimport { UserInterface } from '../interfaces/user.interface';\nimport { UserInterface } from '../interfaces/user.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuardAdmin implements CanActivate {\n  user: UserInterface;\n  constructor(private router: Router) {\n    this.user = JSON.parse(localStorage.getItem('user'));\n  }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    if (this.user && this.user.role === 'admin') {\n      return true;\n    } else {\n      this.router.navigate(['/']);\n      return false;\n    }\n  }\n}\n<|repo_name|>josepablohernandez/curso-angular<|file_sep|>/src/app/services/auth.service.ts\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  constructor(private router: Router) { }\n\n  login() {\n    this.router.navigate(['/']);\n  }\n\n  logout() {\n    localStorage.removeItem('user');\n    this.router.navigate(['/login']);\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport { UserService } from '../services/user.service';\nimport { User } from '../models/user.model';\nimport { UserInterface } from '../interfaces/user.interface';\nimport { UserInterface } from '../interfaces/user.interface';\n\n@Component({\n  selector: 'app-users',\n  templateUrl: './users.component.html',\n  styleUrls: ['./users.component.css']\n})\nexport class UsersComponent implements OnInit {\n  users: UserInterface[];\n  constructor(private router: Router, private authService: AuthService, private userService: UserService) {\n    this.users = [];\n  }\n\n  ngOnInit(): void {\n    this.userService.getUsers().subscribe((users: UserInterface[]) => {\n      this.users = users;\n    });\n  }\n\n  deleteUser(user: UserInterface) {\n    this.userService.deleteUser(user.id).subscribe((user: UserInterface) => {\n      this.users = this.users.filter(u => u.id !== user.id);\n    });\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport { UserService } from '../services/user.service';\nimport { User } from '../models/user.model';\nimport { UserInterface } from '../interfaces/user.interface';\nimport { UserInterface } from '../interfaces/user.interface';\n\n@Component({\n  selector: 'app-users-admin',\n  templateUrl: './users-admin.component.html',\n  styleUrls: ['./users-admin.component.css']\n})\nexport class UsersAdminComponent implements OnInit {\n  users: UserInterface[];\n  constructor(private router: Router, private authService: AuthService, private userService: UserService) {\n    this.users = [];\n  }\n\n  ngOnInit(): void {\n    this.userService.getUsers().subscribe((users: UserInterface[]) => {\n      this.users = users;\n    });\n  }\n\n  deleteUser(user: UserInterface) {\n    this.userService.deleteUser(user.id).subscribe((user: UserInterface) => {\n      this.users = this.users.filter(u => u.id !== user.id);\n    });\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport { UserService } from '../services/user.service';\nimport { User } from '../models/user.model';\nimport { UserInterface } from '../interfaces/user.interface';\nimport { UserInterface } from '../interfaces/user.interface';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n  user: UserInterface;\n  constructor(private router: Router, private authService: AuthService, private userService: UserService) {\n    this.user = JSON.parse(localStorage.getItem('user'));\n  }\n\n  ngOnInit(): void {\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport { UserService } from '../services/user.service';\nimport { User } from '../models/user.model';\nimport { UserInterface } from '../interfaces/user.interface';\nimport { UserInterface } from '../interfaces/user.interface';\n\n@Component({\n  selector: 'app-users-edit',\n  templateUrl: './users-edit.component.html',\n  styleUrls: ['./users-edit.component.css']\n})\nexport class UsersEditComponent implements OnInit {\n  user: UserInterface;\n  constructor(private router: Router, private authService: AuthService, private userService: UserService) {\n    this.user = new User();\n  }\n\n  ngOnInit(): void {\n  }\n\n  update() {\n    this.userService.updateUser(this.user).subscribe((user: UserInterface) => {\n      this.router.navigate(['/users']);\n    });\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport { UserService } from '../services/user.service';\nimport { User } from '../models/user.model';\nimport { UserInterface } from '../interfaces/user.interface';\nimport { UserInterface } from '../interfaces/user.interface';\n\n@Component({\n  selector: 'app-users-create',\n  templateUrl: './users-create.component.html',\n  styleUrls: ['./users-create.component.css']\n})\nexport class UsersCreateComponent implements OnInit {\n  user: UserInterface;\n  constructor(private router: Router, private authService: AuthService, private userService: UserService) {\n    this.user = new User();\n  }\n\n  ngOnInit(): void {\n  }\n\n  create() {\n    this.userService.createUser(this.user).subscribe((user: UserInterface) => {\n      this.router.navigate(['/users']);\n    });\n  }\n}\n<|repo_name|>jameskyle/ember-cli<|file_sep|>/packages/ember-cli/lib/broccoli/ember-app.js\n'use strict';\n\nvar path = require('path');\nvar fs = require('fs');\nvar RSVP = require('rsvp');\nvar Funnel = require('broccoli-funnel');\nvar mergeTrees = require('broccoli-merge-trees');\nvar mergeTreesWithSourcemaps = require('broccoli-merge-trees-with-sourcemaps');\nvar mergeTreesWithWatch = require('broccoli-merge-trees-with-watch');\nvar mergeTreesWithWatchAndSourcemaps = require('broccoli-merge-trees-with-watch-and-sourcemaps');\nvar mergeTreesWithSass = require('broccoli-merge-trees-with-sass');\nvar mergeTreesWithSassAndSourcemaps = require('broccoli-merge-trees-with-sass-and-sourcemaps');\nvar mergeTreesWithSassAndWatch = require('broccoli-merge-trees-with-sass-and-watch');\nvar mergeTreesWithSassAndWatchAndSourcemaps = require('broccoli-merge-trees-with-sass-and-watch-and-sourcemaps');\nvar mergeTreesWithSassAndWatchAndSourcemapsAndCache = require('broccoli-merge-trees-with-sass-and-watch-and-sourcemaps-and-cache');\nvar mergeTreesWithSassAndWatchAndSourcemapsAndCacheAndFilter = require('broccoli-merge-trees-with-sass-and-watch-and-sourcemaps-and-cache-and-filter');\nvar mergeTreesWithSassAndWatchAndSourcemapsAndCacheAndFilterAndFilter = require('broccoli-merge-trees-with-sass-and-watch-and-sourcemaps-and-cache-and-filter-and-filter');\nvar mergeTreesWithSassAndWatchAndSourcemapsAndCacheAndFilterAndFilterAndFilter = require('broccoli-merge-trees-with-sass-and-watch-and-sourcemaps-and-cache-and-filter-and-filter-and-filter');\nvar mergeTreesWithSassAndWatchAndSourcemapsAndCacheAndFilterAndFilterAndFilterAndFilter = require('broccoli-merge-trees-with-sass-and-watch-and-sourcemaps-and-cache-and-filter-and-filter-and-filter-and-filter');\nvar mergeTreesWithSassAndWatchAndSourcemapsAndCacheAndFilterAndFilterAndFilterAndFilterAndFilter = require('broccoli-merge-trees-with-sass-and-watch-and-sourcemaps-and-cache-and-filter-and-filter-and-filter-and-filter-and-filter');\nvar mergeTreesWithSassAndWatchAndSourcemapsAndCacheAndFilterAndFilterAndFilterAndFilterAndFilterAndFilter = require('broccoli-merge-trees-with-sass-and-watch-and-sourcemaps-and-cache-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter');\nvar mergeTreesWithSassAndWatchAndSourcemapsAndCacheAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilter = require('broccoli-merge-trees-with-sass-and-watch-and-sourcemaps-and-cache-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter');\nvar mergeTreesWithSassAndWatchAndSourcemapsAndCacheAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilter = require('broccoli-merge-trees-with-sass-and-watch-and-sourcemaps-and-cache-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter');\nvar mergeTreesWithSassAndWatchAndSourcemapsAndCacheAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilter = require('broccoli-merge-trees-with-sass-and-watch-and-sourcemaps-and-cache-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter');\nvar mergeTreesWithSassAndWatchAndSourcemapsAndCacheAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilter = require('broccoli-merge-trees-with-sass-and-watch-and-sourcemaps-and-cache-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter');\nvar mergeTreesWithSassAndWatchAndSourcemapsAndCacheAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilter = require('broccoli-merge-trees-with-sass-and-watch-and-sourcemaps-and-cache-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter');\nvar mergeTreesWithSassAndWatchAndSourcemapsAndCacheAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilter = require('broccoli-merge-trees-with-sass-and-watch-and-sourcemaps-and-cache-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter');\nvar mergeTreesWithSassAndWatchAndSourcemapsAndCacheAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilter = require('broccoli-merge-trees-with-sass-and-watch-and-sourcemaps-and-cache-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter');\nvar mergeTreesWithSassAndWatchAndSourcemapsAndCacheAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilter = require('broccoli-merge-trees-with-sass-and-watch-and-sourcemaps-and-cache-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter');\nvar mergeTreesWithSassAndWatchAndSourcemapsAndCacheAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilter = require('broccoli-merge-trees-with-sass-and-watch-and-sourcemaps-and-cache-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter');\nvar mergeTreesWithSassAndWatchAndSourcemapsAndCacheAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilter = require('broccoli-merge-trees-with-sass-and-watch-and-sourcemaps-and-cache-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter');\nvar mergeTreesWithSassAndWatchAndSourcemapsAndCacheAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilter = require('broccoli-merge-trees-with-sass-and-watch-and-sourcemaps-and-cache-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter-and-filter');\nvar mergeTreesWithSassAndWatchAndSourcemapsAndCacheAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilterAndFilter", "input_token_count": 1778, "output_token_count": 4096, "latency": 226.52130031585693}
{"id": "simple_208", "result": "<TOOLCALL>\n  <functions>\n    <function name=\"map_service.get_directions\">\n      <param name=\"start\" type=\"string\">New York</param>\n      <param name=\"end\" type=\"string\">Los Angeles</param>\n      <param name=\"avoid\" type=\"array\">[\"highways\", \"tolls\"]</param>\n    </function>\n  </functions>\n</TOOLCALL>", "input_token_count": 1789, "output_token_count": 88, "latency": 112.11475324630737}
{"id": "simple_213", "result": "<TOOLCALL>\n<functions>\n<function name=\"flight.book\">\n    <param name=\"departure_location\" type=\"string\" value=\"San Francisco\"></param>\n    <param name=\"destination_location\" type=\"string\" value=\"London\"></param>\n    <param name=\"date\" type=\"string\">2022-04-27</param>\n    <param name=\"time\" type=\"string\">afternoon</param>\n    <param name=\"direct_flight\" type=\"boolean\">true</param>\n</function>\n</functions>\n</TOOLCALL>", "input_token_count": 2045, "output_token_count": 116, "latency": 113.61974263191223}
{"id": "simple_226", "result": "<TOOLCALL>\n<functions>\n  <function name=\"get_zodiac_compatibility\">\n    <param name=\"param1\" type=\"string\">Aries</param>\n    <param name=\"param2\" type=\"string\">Gemini</param>\n  </function>\n</functions>\n</TOOLCALL>", "input_token_count": 1732, "output_token_count": 66, "latency": 111.64779758453369}
{"id": "simple_244", "result": "<functions>\n  <function name=\"func_name\">\n    <function name=\"publication_year.find\">\n      <param name=\"author\" type=\"string\">Isaac Newton</param>\n      <param name=\"work_title\" type=\"string\">The title of the work</param>\n      <param name=\"work_title\" type=\"string\">The title of the work</param>\n    </function>\n</functions>", "input_token_count": 1731, "output_token_count": 85, "latency": 111.68030452728271}
{"id": "simple_254", "result": "<functions>\n  <function name=\"get_religion_history\">\n    <param name=\"religion\" type=\"string\">Christianity</param>\n    <param name=\"start_year\" type=\"integer\">300</param>\n    <param name=\"end_year\" type=\"integer\">400</param>\n  </function>\n</functions>\n</TOOLCALL>", "input_token_count": 1890, "output_token_count": 76, "latency": 110.23338961601257}
{"id": "simple_281", "result": "<TOOLCALL>\n<functions>\n  <function name=\"get_instrument_details\">\n    <param name=\"name\" type=\"string\">Violin</param>\n    <param name=\"maker\" type=\"string\">Stradivarius</param>\n    <param name=\"year\" type=\"integer\">1721</param>\n  </function>\n</functions>\n</TOOLCALL>\n\nNote: The function call is incorrect because the parameter \"maker\" is not available in the function \"get_instrument_details\". The correct parameter name is \"maker\". Please provide the correct parameter name.", "input_token_count": 1758, "output_token_count": 121, "latency": 112.08145046234131}
{"id": "simple_284", "result": "<functions>\n  <function name=\"concert_info.get\">\n    <param name=\"location\" type=\"string\">New York</param>\n    <param name=\"date\" type=\"string\">next month</param>\n    <param name=\"genre\" type=\"string\">Pop</param>\n  </function>\n</functions>", "input_token_count": 1739, "output_token_count": 67, "latency": 108.52561450004578}
{"id": "simple_295", "result": "<TOOLCALL>\n<functions>\n  <function name=\"get_song_lyrics\">\n    <param name=\"song_title\" type=\"string\">Bohemian Rhapsody</param>\n    <param name=\"artist_name\" type=\"string\">Queen</param>\n  </function>\n</functions>", "input_token_count": 1772, "output_token_count": 63, "latency": 107.96266269683838}
{"id": "simple_297", "result": "<toolcall><functions><function name=\"func_name\"><param name=\"param1\" type=\"string\">value</param><param name=\"param2\" type=\"string\">value</param></function></functions></TOOLCALL>", "input_token_count": 2021, "output_token_count": 49, "latency": 107.8324282169342}
{"id": "simple_327", "result": "<TOOLCALL>\n  <functions>\n    <function name=\"get_schedule\">\n      <params>\n        <param name=\"team_name\" type=\"string\">Manchester United</param>\n        <param name=\"num_of_games\" type=\"integer\">6</param>\n        <param name=\"league\" type=\"string\">Premier League</param>\n    </function>\n</functions>\n</TOOLCALL>", "input_token_count": 2017, "output_token_count": 85, "latency": 107.75421380996704}
{"id": "simple_328", "result": "<toolcall>\n<functions>\n  <function name=\"get_info\">\n    <param name=\"name\" type=\"string\">value=\"Ticket to Ride\"</param>\n    <param name=\"characteristics\" type=\"array\">[\"rating\", \"player count\"]</param>\n  </function>\n</functions>\n</TOOLCALL> \n\n```json\n{\n  \"functions\": [\n    {\n      \"name\": \"boardgame.get_info\",\n      \"params\": {\n        \"name\": {\n          \"value\": \"Ticket to Ride\",\n          \"type\": \"string\"\n        },\n        \"parameters\": {\n          \"value\": [\"rating\", \"player count\"],\n          \"type\": \"array\"\n        },\n        \"language\": {\n          \"value\": \"English\",\n          \"type\": \"string\"\n        }\n      }\n    }\n  ]\n}\n```", "input_token_count": 1728, "output_token_count": 173, "latency": 110.00776720046997}
{"id": "simple_335", "result": "<functions>\n  <function name=\"find_card_in_deck\">\n    <param name=\"rank\" type=\"string\">Queen</param>\n    <param name=\"suit\" type=\"string\">Hearts</param>\n  </function>\n</functions>", "input_token_count": 1869, "output_token_count": 52, "latency": 106.42536997795105}
{"id": "simple_360", "result": "<TOOLCALL><functions><function name=\"find_recipe\"><param name=\"recipe_name\" type=\"string\">Pasta Carbonara</param><param name=\"max_calories\" type=\"integer\">500</param></function></functions></TOOLCALL>", "input_token_count": 1618, "output_token_count": 54, "latency": 105.71388649940491}
{"id": "simple_380", "result": "<functions>\n  <function name=\"hotel_booking\">\n    <param name=\"location\" type=\"string\">Manhattan, New York</param>\n    <param name=\"room_type\" type=\"string\">single</param>\n    <param name=\"duration\" type=\"integer\">3</param>\n    <param name=\"start_date\" type=\"string\">2023-03-10</param>\n    <param name=\"preferences\" type=\"array\">[\"pet_friendly\"]</param>\n  </function>\n</functions>", "input_token_count": 2100, "output_token_count": 109, "latency": 106.63762474060059}
{"id": "simple_390", "result": "<TOOLCALL><functions>\n  <function name=\"func_name1\" name=\"currency_conversion.convert\">\n    <param name=\"amount\" type=\"integer\">150</param>\n    <param name=\"from_currency\" type=\"string\">EUR</param>\n    <param name=\"to_currency\" type=\"string\">CAD</param>\n  </function>\n</functions></TOOLCALL>", "input_token_count": 1684, "output_token_count": 81, "latency": 104.70844984054565}
{"id": "simple_393", "result": "<TOOLCALL>\n<functions>\n  <function name=\"convert_currency\">\n    <param name=\"base_currency\" type=\"string\">JPY</param>\n    <param name=\"target_currency\" type=\"string\">USD</param>\n    <param name=\"amount\" type=\"integer\">20000</param>\n  </function>\n</functions>\n</TOOLCALL><|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { User } from 'src/app/models/user.model';\nimport { UserService } from 'src/app/services/user.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-user-profile',\n  templateUrl: './user-profile.component.html',\n  styleUrls: ['./user-profile.component.css']\n})\nexport class UserProfileComponent implements OnInit {\n\n  user: User;\n  constructor(private authService: AuthService, private userService: UserService, private router: Router, private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n    this.user = this.authService.getUser();\n    if (!this.user) {\n      this.router.navigate(['/login']);\n    }\n  }\n\n  updateProfile() {\n    this.userService.updateUser(this.user).subscribe(\n      (res) => {\n        this.toastr.success('Profile updated successfully');\n      },\n      (err) => {\n        this.toastr.error('Error updating profile');\n      }\n    );\n  }\n\n}\n<|repo_name|>sahilsharma-123/online-exam<|file_sep|>/src/app/components/admin/admin-dashboard/admin-dashboard.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Admin } from 'src/app/models/admin.model';\nimport { AdminService } from 'src/app/services/admin.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-admin-dashboard',\n  templateUrl: './admin-dashboard.component.html',\n  styleUrls: ['./admin-dashboard.component.css']\n})\nexport class AdminDashboardComponent implements OnInit {\n\n  admin: Admin;\n  constructor(private authService: AuthService, private adminService: AdminService, private router: Router, private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n    this.admin = this.authService.getAdmin();\n    if (!this.admin) {\n      this.router.navigate(['/login']);\n    }\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n\n  updateProfile() {\n    this.adminService.updateAdmin(this.admin).subscribe(\n      (res) => {\n        this.toastr.success('Profile updated successfully');\n      },\n      (err) => {\n        this.toastr.error('Error updating profile');\n      }\n    );\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Admin } from 'src/app/models/admin.model';\nimport { AdminService } from 'src/app/services/admin.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-admin-login',\n  templateUrl: './admin-login.component.html',\n  styleUrls: ['./admin-login.component.css']\n})\nexport class AdminLoginComponent implements OnInit {\n\n  admin: Admin = new Admin();\n  constructor(private authService: AuthService, private adminService: AdminService, private router: Router, private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n  }\n\n  login() {\n    this.adminService.login(this.admin).subscribe(\n      (res) => {\n        this.authService.setAdmin(res);\n        this.router.navigate(['/admin/dashboard']);\n      },\n      (err) => {\n        this.toastr.error('Invalid credentials');\n      }\n    );\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { User } from 'src/app/models/user.model';\nimport { UserService } from 'src/app/services/user.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-user-login',\n  templateUrl: './user-login.component.html',\n  styleUrls: ['./user-login.component.css']\n})\nexport class UserLoginComponent implements OnInit {\n\n  user: User = new User();\n  constructor(private authService: AuthService, private userService: UserService, private router: Router, private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n  }\n\n  login() {\n    this.userService.login(this.user).subscribe(\n      (res) => {\n        this.authService.setUser(res);\n        this.router.navigate(['/user/dashboard']);\n      },\n      (err) => {\n        this.toastr.error('Invalid credentials');\n      }\n    );\n  }\n\n}\n<|repo_name|>sahilsharma-123/online-exam<|file_sep|>/src/app/components/admin/admin-exam/admin-exam.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Admin } from 'src/app/models/admin.model';\nimport { AdminService } from 'src/app/services/admin.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { Exam } from 'src/app/models/exam.model';\nimport { ExamService } from 'src/app/services/exam.service';\n\n@Component({\n  selector: 'app-admin-exam',\n  templateUrl: './admin-exam.component.html',\n  styleUrls: ['./admin-exam.component.css']\n})\nexport class AdminExamComponent implements OnInit {\n\n  admin: Admin;\n  exams: Exam[];\n  constructor(private authService: AuthService, private adminService: AdminService, private examService: ExamService, private router: Router, private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n    this.admin = this.authService.getAdmin();\n    if (!this.admin) {\n      this.router.navigate(['/login']);\n    }\n    this.examService.getExams().subscribe(\n      (res) => {\n        this.exams = res;\n      },\n      (err) => {\n        this.toastr.error('Error fetching exams');\n      }\n    );\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n\n  deleteExam(exam: Exam) {\n    this.examService.deleteExam(exam).subscribe(\n      (res) => {\n        this.toastr.success('Exam deleted successfully');\n        this.examService.getExams().subscribe(\n          (res) => {\n            this.exams = res;\n          },\n          (err) => {\n            this.toastr.error('Error fetching exams');\n          }\n        );\n      },\n      (err) => {\n        this.toastr.error('Error deleting exam');\n      }\n    );\n  }\n\n}\n<|repo_name|>sahilsharma-123/online-exam<|file_sep|>/src/app/components/admin/admin-exam-create/admin-exam-create.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Admin } from 'src/app/models/admin.model';\nimport { AdminService } from 'src/app/services/admin.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { Exam } from 'src/app/models/exam.model';\nimport { ExamService } from 'src/app/services/exam.service';\n\n@Component({\n  selector: 'app-admin-exam-create',\n  templateUrl: './admin-exam-create.component.html',\n  styleUrls: ['./admin-exam-create.component.css']\n})\nexport class AdminExamCreateComponent implements OnInit {\n\n  admin: Admin;\n  exam: Exam = new Exam();\n  constructor(private authService: AuthService, private adminService: AdminService, private examService: ExamService, private router: Router, private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n    this.admin = this.authService.getAdmin();\n    if (!this.admin) {\n      this.router.navigate(['/login']);\n    }\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n\n  createExam() {\n    this.examService.createExam(this.exam).subscribe(\n      (res) => {\n        this.toastr.success('Exam created successfully');\n        this.router.navigate(['/admin/exam']);\n      },\n      (err) => {\n        this.toastr.error('Error creating exam');\n      }\n    );\n  }\n\n}\n<|repo_name|>sahilsharma-123/online-exam<|file_sep|>/src/app/components/user/user-exam/user-exam.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { User } from 'src/app/models/user.model';\nimport { UserService } from 'src/app/services/user.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { Exam } from 'src/app/models/exam.model';\nimport { ExamService } from 'src/app/services/exam.service';\n\n@Component({\n  selector: 'app-user-exam',\n  templateUrl: './user-exam.component.html',\n  styleUrls: ['./user-exam.component.css']\n})\nexport class UserExamComponent implements OnInit {\n\n  user: User;\n  exams: Exam[];\n  constructor(private authService: AuthService, private userService: UserService, private examService: ExamService, private router: Router, private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n    this.user = this.authService.getUser();\n    if (!this.user) {\n      this.router.navigate(['/login']);\n    }\n    this.examService.getExams().subscribe(\n      (res) => {\n        this.exams = res;\n      },\n      (err) => {\n        this.toastr.error('Error fetching exams');\n      }\n    );\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n\n  takeExam(exam: Exam) {\n    this.router.navigate(['/user/exam', exam.id]);\n  }\n\n}\n<|repo_name|>sahilsharma-123/online-exam<|file_sep|>/src/app/components/user/user-exam-take/user-exam-take.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { User } from 'src/app/models/user.model';\nimport { UserService } from 'src/app/services/user.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { Exam } from 'src/app/models/exam.model';\nimport { ExamService } from 'src/app/services/exam.service';\nimport { Question } from 'src/app/models/question.model';\nimport { QuestionService } from 'src/app/services/question.service';\nimport { Answer } from 'src/app/models/answer.model';\nimport { AnswerService } from 'src/app/services/answer.service';\n\n@Component({\n  selector: 'app-user-exam-take',\n  templateUrl: './user-exam-take.component.html',\n  styleUrls: ['./user-exam-take.component.css']\n})\nexport class UserExamTakeComponent implements OnInit {\n\n  user: User;\n  exam: Exam;\n  questions: Question[];\n  answers: Answer[];\n  currentQuestionIndex: number = 0;\n  timer: any;\n  timeLeft: number;\n  constructor(private authService: AuthService, private userService: UserService, private examService: ExamService, private questionService: QuestionService, private answerService: AnswerService, private router: Router, private route: ActivatedRoute, private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n    this.user = this.authService.getUser();\n    if (!this.user) {\n      this.router.navigate(['/login']);\n    }\n    this.route.params.subscribe(\n      (params) => {\n        this.examService.getExam(params['id']).subscribe(\n          (res) => {\n            this.exam = res;\n            this.questionService.getQuestions(this.exam.id).subscribe(\n              (res) => {\n                this.questions = res;\n                this.startTimer();\n              },\n              (err) => {\n                this.toastr.error('Error fetching questions');\n              }\n            );\n          },\n          (err) => {\n            this.toastr.error('Error fetching exam');\n          }\n        );\n      }\n    );\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n\n  startTimer() {\n    this.timeLeft = this.exam.duration;\n    this.timer = setInterval(() => {\n      this.timeLeft--;\n      if (this.timeLeft <= 0) {\n        this.submitExam();\n      }\n    }, 1000);\n  }\n\n  submitExam() {\n    clearInterval(this.timer);\n    this.answerService.submitAnswers(this.answers).subscribe(\n      (res) => {\n        this.toastr.success('Exam submitted successfully');\n        this.router.navigate(['/user/dashboard']);\n      },\n      (err) => {\n        this.toastr.error('Error submitting exam');\n      }\n    );\n  }\n\n  selectAnswer(answer: Answer) {\n    this.answers.push(answer);\n  }\n\n  nextQuestion() {\n    if (this.currentQuestionIndex < this.questions.length - 1) {\n      this.currentQuestionIndex++;\n    } else {\n      this.submitExam();\n    }\n  }\n\n  previousQuestion() {\n    if (this.currentQuestionIndex > 0) {\n      this.currentQuestionIndex--;\n    }\n  }\n\n}\n<|file_sep|>import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Exam } from '../models/exam.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ExamService {\n\n  constructor(private http: HttpClient) { }\n\n  getExams(): Observable<Exam[]> {\n    return this.http.get<Exam[]>('/api/exams');\n  }\n\n  getExam(id: number): Observable<Exam> {\n    return this.http.get<Exam>(`/api/exams/${id}`);\n  }\n\n  createExam(exam: Exam): Observable<Exam> {\n    return this.http.post<Exam>('/api/exams', exam);\n  }\n\n  updateExam(exam: Exam): Observable<Exam> {\n    return this.http.put<Exam>(`/api/exams/${exam.id}`, exam);\n  }\n\n  deleteExam(exam: Exam): Observable<Exam> {\n    return this.http.delete<Exam>(`/api/exams/${exam.id}`);\n  }\n}\n<|file_sep|>import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { User } from '../models/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private http: HttpClient) { }\n\n  getUsers(): Observable<User[]> {\n    return this.http.get<User[]>('/api/users');\n  }\n\n  getUser(id: number): Observable<User> {\n    return this.http.get<User>(`/api/users/${id}`);\n  }\n\n  createUser(user: User): Observable<User> {\n    return this.http.post<User>('/api/users', user);\n  }\n\n  updateUser(user: User): Observable<User> {\n    return this.http.put<User>(`/api/users/${user.id}`, user);\n  }\n\n  deleteUser(user: User): Observable<User> {\n    return this.http.delete<User>(`/api/users/${user.id}`);\n  }\n\n  login(user: User): Observable<User> {\n    return this.http.post<User>('/api/users/login', user);\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Admin } from 'src/app/models/admin.model';\nimport { AdminService } from 'src/app/services/admin.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { User } from 'src/app/models/user.model';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-admin-user',\n  templateUrl: './admin-user.component.html',\n  styleUrls: ['./admin-user.component.css']\n})\nexport class AdminUserComponent implements OnInit {\n\n  admin: Admin;\n  users: User[];\n  constructor(private authService: AuthService, private adminService: AdminService, private userService: UserService, private router: Router, private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n    this.admin = this.authService.getAdmin();\n    if (!this.admin) {\n      this.router.navigate(['/login']);\n    }\n    this.userService.getUsers().subscribe(\n      (res) => {\n        this.users = res;\n      },\n      (err) => {\n        this.toastr.error('Error fetching users');\n      }\n    );\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n\n  deleteUser(user: User) {\n    this.userService.deleteUser(user).subscribe(\n      (res) => {\n        this.toastr.success('User deleted successfully');\n        this.userService.getUsers().subscribe(\n          (res) => {\n            this.users = res;\n          },\n          (err) => {\n            this.toastr.error('Error fetching users');\n          }\n        );\n      },\n      (err) => {\n        this.toastr.error('Error deleting user');\n      }\n    );\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Admin } from 'src/app/models/admin.model';\nimport { AdminService } from 'src/app/services/admin.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { User } from 'src/app/models/user.model';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-admin-user-create',\n  templateUrl: './admin-user-create.component.html',\n  styleUrls: ['./admin-user-create.component.css']\n})\nexport class AdminUserCreateComponent implements OnInit {\n\n  admin: Admin;\n  user: User = new User();\n  constructor(private authService: AuthService, private adminService: AdminService, private userService: UserService, private router: Router, private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n    this.admin = this.authService.getAdmin();\n    if (!this.admin) {\n      this.router.navigate(['/login']);\n    }\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n\n  createUser() {\n    this.userService.createUser(this.user).subscribe(\n      (res) => {\n        this.toastr.success('User created successfully');\n        this.router.navigate(['/admin/user']);\n      },\n      (err) => {\n        this.toastr.error('Error creating user');\n      }\n    );\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Admin } from 'src/app/models/admin.model';\nimport { AdminService } from 'src/app/services/admin.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { Exam } from 'src/app/models/exam.model';\nimport { ExamService } from 'src/app/services/exam.service';\nimport { Question } from 'src/app/models/question.model';\nimport { QuestionService } from 'src/app/services/question.service';\n\n@Component({\n  selector: 'app-admin-exam-edit',\n  templateUrl: './admin-exam-edit.component.html',\n  styleUrls: ['./admin-exam-edit.component.css']\n})\nexport class AdminExamEditComponent implements OnInit {\n\n  admin: Admin;\n  exam: Exam;\n  questions: Question[];\n  constructor(private authService: AuthService, private adminService: AdminService, private examService: ExamService, private questionService: QuestionService, private router: Router, private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n    this.admin =", "input_token_count": 1734, "output_token_count": 4096, "latency": 212.4315197467804}
