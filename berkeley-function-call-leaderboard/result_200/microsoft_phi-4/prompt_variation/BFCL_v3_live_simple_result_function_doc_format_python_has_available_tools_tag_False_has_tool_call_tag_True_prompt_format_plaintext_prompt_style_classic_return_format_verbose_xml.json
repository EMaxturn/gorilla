{"id": "live_simple_13-3-9", "result": "```json\n[{\"function\":\"get_current_weather\",\"parameters\":{\"location\":\"Shanghai, China\",\"unit\":\"celsius\"}}]\n```", "input_token_count": 5380, "output_token_count": 28, "latency": 111.52373456954956}
{"id": "live_simple_14-3-10", "result": "```json\n[{\"function\":\"get_current_weather\",\"parameters\":{\"location\":\"Bangkok, Thailand\",\"unit\":\"fahrenheit\"}}]\n```", "input_token_count": 5368, "output_token_count": 28, "latency": 121.44584035873413}
{"id": "live_simple_20-4-0", "result": "```json\n[{\"function\":\"change_food\",\"parameters\":{\"food_item\":\"burger\",\"modification_request\":\"no onions,extra cheese\"}}]\n```<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport { User } from '../models/user.model';\nimport { UserService } from '../services/user.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  user: User = new User();\n  constructor(private authService: AuthService, private router: Router, private userService: UserService, private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n  }\n\n  login() {\n    this.authService.login(this.user).subscribe(\n      (res) => {\n        this.toastr.success('Login successful');\n        this.router.navigate(['/']);\n      },\n      (err) => {\n        this.toastr.error(err.error.message);\n      }\n    )\n  }\n\n  register() {\n    this.userService.register(this.user).subscribe(\n      (res) => {\n        this.toastr.success('Registration successful');\n        this.router.navigate(['/login']);\n      },\n      (err) => {\n        this.toastr.error(err.error.message);\n      }\n    )\n  }\n\n}\n<|repo_name|>mohamed-ahmed-elsayed/ecommerce<|file_sep|>/src/app/services/product.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Product } from '../models/product.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n\n  constructor(private http: HttpClient) { }\n\n  getProducts(): Observable<Product[]> {\n    return this.http.get<Product[]>('http://localhost:3000/products');\n  }\n\n  getProduct(id: number): Observable<Product> {\n    return this.http.get<Product>(`http://localhost:3000/products/${id}`);\n  }\n\n  addProduct(product: Product): Observable<Product> {\n    return this.http.post<Product>('http://localhost:3000/products', product);\n  }\n\n  updateProduct(product: Product): Observable<Product> {\n    return this.http.put<Product>(`http://localhost:3000/products/${product.id}`, product);\n  }\n\n  deleteProduct(id: number): Observable<Product> {\n    return this.http.delete<Product>(`http://localhost:3000/products/${id}`);\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Product } from '../models/product.model';\nimport { ProductService } from '../services/product.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-product-list',\n  templateUrl: './product-list.component.html',\n  styleUrls: ['./product-list.component.css']\n})\nexport class ProductListComponent implements OnInit {\n\n  products: Product[] = [];\n  constructor(private productService: ProductService, private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n    this.getProducts();\n  }\n\n  getProducts() {\n    this.productService.getProducts().subscribe(\n      (res) => {\n        this.products = res;\n      },\n      (err) => {\n        this.toastr.error(err.error.message);\n      }\n    )\n  }\n\n  deleteProduct(id: number) {\n    this.productService.deleteProduct(id).subscribe(\n      (res) => {\n        this.toastr.success('Product deleted successfully');\n        this.getProducts();\n      },\n      (err) => {\n        this.toastr.error(err.error.message);\n      }\n    )\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Product } from '../models/product.model';\nimport { ProductService } from '../services/product.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-product-edit',\n  templateUrl: './product-edit.component.html',\n  styleUrls: ['./product-edit.component.css']\n})\nexport class ProductEditComponent implements OnInit {\n\n  product: Product = new Product();\n  constructor(private productService: ProductService, private route: ActivatedRoute, private router: Router, private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n    this.getProduct();\n  }\n\n  getProduct() {\n    this.route.params.subscribe(\n      (params) => {\n        this.productService.getProduct(params.id).subscribe(\n          (res) => {\n            this.product = res;\n          },\n          (err) => {\n            this.toastr.error(err.error.message);\n          }\n        )\n      }\n    )\n  }\n\n  updateProduct() {\n    this.productService.updateProduct(this.product).subscribe(\n      (res) => {\n        this.toastr.success('Product updated successfully');\n        this.router.navigate(['/products']);\n      },\n      (err) => {\n        this.toastr.error(err.error.message);\n      }\n    )\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Product } from '../models/product.model';\nimport { ProductService } from '../services/product.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-product-add',\n  templateUrl: './product-add.component.html',\n  styleUrls: ['./product-add.component.css']\n})\nexport class ProductAddComponent implements OnInit {\n\n  product: Product = new Product();\n  constructor(private productService: ProductService, private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n  }\n\n  addProduct() {\n    this.productService.addProduct(this.product).subscribe(\n      (res) => {\n        this.toastr.success('Product added successfully');\n      },\n      (err) => {\n        this.toastr.error(err.error.message);\n      }\n    )\n  }\n\n}\n<|repo_name|>mohamed-ahmed-elsayed/ecommerce<|file_sep|>/src/app/models/product.model.ts\nexport class Product {\n    id: number;\n    name: string;\n    description: string;\n    price: number;\n    image: string;\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../services/auth.service';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor(private authService: AuthService, private router: Router, private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n  }\n\n  logout() {\n    this.authService.logout().subscribe(\n      (res) => {\n        this.toastr.success('Logout successful');\n        this.router.navigate(['/login']);\n      },\n      (err) => {\n        this.toastr.error(err.error.message);\n      }\n    )\n  }\n\n}\n<|repo_name|>mohamed-ahmed-elsayed/ecommerce<|file_sep|>/src/app/app-routing.module.ts\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ProductAddComponent } from './product-add/product-add.component';\nimport { ProductEditComponent } from './product-edit/product-edit.component';\nimport { ProductListComponent } from './product-list/product-list.component';\nimport { LoginComponent } from './login/login.component';\nimport { AuthGuard } from './guards/auth.guard';\n\nconst routes: Routes = [\n  { path: '', component: ProductListComponent, canActivate: [AuthGuard] },\n  { path: 'products', component: ProductListComponent, canActivate: [AuthGuard] },\n  { path: 'products/add', component: ProductAddComponent, canActivate: [AuthGuard] },\n  { path: 'products/edit/:id', component: ProductEditComponent, canActivate: [AuthGuard] },\n  { path: 'login', component: LoginComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n<|repo_name|>mohamed-ahmed-elsayed/ecommerce<|file_sep|>/src/app/services/auth.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { User } from '../models/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(private http: HttpClient) { }\n\n  login(user: User): Observable<any> {\n    return this.http.post<any>('http://localhost:3000/auth/login', user);\n  }\n\n  logout(): Observable<any> {\n    return this.http.post<any>('http://localhost:3000/auth/logout', {});\n  }\n}\n<|repo_name|>mohamed-ahmed-elsayed/ecommerce<|file_sep|>/src/app/services/user.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { User } from '../models/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private http: HttpClient) { }\n\n  register(user: User): Observable<User> {\n    return this.http.post<User>('http://localhost:3000/users', user);\n  }\n}\n<|file_sep|>import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(private authService: AuthService, private router: Router) { }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    if (localStorage.getItem('token')) {\n      return true;\n    } else {\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n}\n<|repo_name|>mattgallagher/ios-objc-async<|file_sep|>/Async/Async/Async/Async.h\n//\n//  Async.h\n//  Async\n//\n//  Created by Matt Gallagher on 2014/09/24.\n//  Copyright (c) 2014 Matt Gallagher. All rights reserved.\n//\n//  Permission is given to use this source code file, free of charge, in any\n//  project, commercial or otherwise, entirely at your risk, with the condition\n//  that any redistribution (in part or whole) of source code must retain\n//  this copyright and permission notice. Attribution in compiled projects is\n//  appreciated but not required.\n//\n\n#import <Foundation/Foundation.h>\n\nNS_ASSUME_NONNULL_BEGIN\n\ntypedef void (^AsyncBlock)(void);\ntypedef void (^AsyncBlockWithResult)(id _Nullable result);\n\ntypedef void (^AsyncBlockWithProgress)(float progress);\ntypedef void (^AsyncBlockWithProgressAndResult)(float progress, id _Nullable result);\n\ntypedef void (^AsyncBlockWithCancellation)(BOOL cancelled);\ntypedef void (^AsyncBlockWithCancellationAndResult)(BOOL cancelled, id _Nullable result);\n\ntypedef void (^AsyncBlockWithProgressCancellation)(float progress, BOOL cancelled);\ntypedef void (^AsyncBlockWithProgressCancellationAndResult)(float progress, BOOL cancelled, id _Nullable result);\n\ntypedef void (^AsyncBlockWithProgressCancellationAndError)(float progress, BOOL cancelled, NSError * _Nullable error);\ntypedef void (^AsyncBlockWithProgressCancellationAndErrorAndResult)(float progress, BOOL cancelled, NSError * _Nullable error, id _Nullable result);\n\ntypedef void (^AsyncBlockWithProgressCancellationAndErrorAndContext)(float progress, BOOL cancelled, NSError * _Nullable error, void * _Nullable context);\ntypedef void (^AsyncBlockWithProgressCancellationAndErrorAndContextAndResult)(float progress, BOOL cancelled, NSError * _Nullable error, void * _Nullable context, id _Nullable result);\n\ntypedef void (^AsyncBlockWithProgressCancellationAndErrorAndContextAndUserInfo)(float progress, BOOL cancelled, NSError * _Nullable error, void * _Nullable context, NSDictionary * _Nullable userInfo);\ntypedef void (^AsyncBlockWithProgressCancellationAndErrorAndContextAndUserInfoAndResult)(float progress, BOOL cancelled, NSError * _Nullable error, void * _Nullable context, NSDictionary * _Nullable userInfo, id _Nullable result);\n\ntypedef void (^AsyncBlockWithProgressCancellationAndErrorAndContextAndUserInfoAndBlock)(float progress, BOOL cancelled, NSError * _Nullable error, void * _Nullable context, NSDictionary * _Nullable userInfo, AsyncBlock block);\n\ntypedef void (^AsyncBlockWithProgressCancellationAndErrorAndContextAndUserInfoAndBlockAndResult)(float progress, BOOL cancelled, NSError * _Nullable error, void * _Nullable context, NSDictionary * _Nullable userInfo, AsyncBlock block, id _Nullable result);\n\ntypedef void (^AsyncBlockWithProgressCancellationAndErrorAndContextAndUserInfoAndBlockAndBlock)(float progress, BOOL cancelled, NSError * _Nullable error, void * _Nullable context, NSDictionary * _Nullable userInfo, AsyncBlock block, AsyncBlock block2);\n\ntypedef void (^AsyncBlockWithProgressCancellationAndErrorAndContextAndUserInfoAndBlockAndBlockAndResult)(float progress, BOOL cancelled, NSError * _Nullable error, void * _Nullable context, NSDictionary * _Nullable userInfo, AsyncBlock block, AsyncBlock block2, id _Nullable result);\n\ntypedef void (^AsyncBlockWithProgressCancellationAndErrorAndContextAndUserInfoAndBlockAndBlockAndBlock)(float progress, BOOL cancelled, NSError * _Nullable error, void * _Nullable context, NSDictionary * _Nullable userInfo, AsyncBlock block, AsyncBlock block2, AsyncBlock block3);\n\ntypedef void (^AsyncBlockWithProgressCancellationAndErrorAndContextAndUserInfoAndBlockAndBlockAndBlockAndResult)(float progress, BOOL cancelled, NSError * _Nullable error, void * _Nullable context, NSDictionary * _Nullable userInfo, AsyncBlock block, AsyncBlock block2, AsyncBlock block3, id _Nullable result);\n\ntypedef void (^AsyncBlockWithProgressCancellationAndErrorAndContextAndUserInfoAndBlockAndBlockAndBlockAndBlock)(float progress, BOOL cancelled, NSError * _Nullable error, void * _Nullable context, NSDictionary * _Nullable userInfo, AsyncBlock block, AsyncBlock block2, AsyncBlock block3, AsyncBlock block4);\n\ntypedef void (^AsyncBlockWithProgressCancellationAndErrorAndContextAndUserInfoAndBlockAndBlockAndBlockAndBlockAndResult)(float progress, BOOL cancelled, NSError * _Nullable error, void * _Nullable context, NSDictionary * _Nullable userInfo, AsyncBlock block, AsyncBlock block2, AsyncBlock block3, AsyncBlock block4, id _Nullable result);\n\ntypedef void (^AsyncBlockWithProgressCancellationAndErrorAndContextAndUserInfoAndBlockAndBlockAndBlockAndBlockAndBlock)(float progress, BOOL cancelled, NSError * _Nullable error, void * _Nullable context, NSDictionary * _Nullable userInfo, AsyncBlock block, AsyncBlock block2, AsyncBlock block3, AsyncBlock block4, AsyncBlock block5);\n\ntypedef void (^AsyncBlockWithProgressCancellationAndErrorAndContextAndUserInfoAndBlockAndBlockAndBlockAndBlockAndBlockAndResult)(float progress, BOOL cancelled, NSError * _Nullable error, void * _Nullable context, NSDictionary * _Nullable userInfo, AsyncBlock block, AsyncBlock block2, AsyncBlock block3, AsyncBlock block4, AsyncBlock block5, id _Nullable result);\n\ntypedef void (^AsyncBlockWithProgressCancellationAndErrorAndContextAndUserInfoAndBlockAndBlockAndBlockAndBlockAndBlockAndBlock)(float progress, BOOL cancelled, NSError * _Nullable error, void * _Nullable context, NSDictionary * _Nullable userInfo, AsyncBlock block, AsyncBlock block2, AsyncBlock block3, AsyncBlock block4, AsyncBlock block5, AsyncBlock block6);\n\ntypedef void (^AsyncBlockWithProgressCancellationAndErrorAndContextAndUserInfoAndBlockAndBlockAndBlockAndBlockAndBlockAndBlockAndResult)(float progress, BOOL cancelled, NSError * _Nullable error, void * _Nullable context, NSDictionary * _Nullable userInfo, AsyncBlock block, AsyncBlock block2, AsyncBlock block3, AsyncBlock block4, AsyncBlock block5, AsyncBlock block6, id _Nullable result);\n\ntypedef void (^AsyncBlockWithProgressCancellationAndErrorAndContextAndUserInfoAndBlockAndBlockAndBlockAndBlockAndBlockAndBlockAndBlock)(float progress, BOOL cancelled, NSError * _Nullable error, void * _Nullable context, NSDictionary * _Nullable userInfo, AsyncBlock block, AsyncBlock block2, AsyncBlock block3, AsyncBlock block4, AsyncBlock block5, AsyncBlock block6, AsyncBlock block7);\n\ntypedef void (^AsyncBlockWithProgressCancellationAndErrorAndContextAndUserInfoAndBlockAndBlockAndBlockAndBlockAndBlockAndBlockAndBlockAndResult)(float progress, BOOL cancelled, NSError * _Nullable error, void * _Nullable context, NSDictionary * _Nullable userInfo, AsyncBlock block, AsyncBlock block2, AsyncBlock block3, AsyncBlock block4, AsyncBlock block5, AsyncBlock block6, AsyncBlock block7, id _Nullable result);\n\ntypedef void (^AsyncBlockWithProgressCancellationAndErrorAndContextAndUserInfoAndBlockAndBlockAndBlockAndBlockAndBlockAndBlockAndBlockAndBlock)(float progress, BOOL cancelled, NSError * _Nullable error, void * _Nullable context, NSDictionary * _Nullable userInfo, AsyncBlock block, AsyncBlock block2, AsyncBlock block3, AsyncBlock block4, AsyncBlock block5, AsyncBlock block6, AsyncBlock block7, AsyncBlock block8);\n\ntypedef void (^AsyncBlockWithProgressCancellationAndErrorAndContextAndUserInfoAndBlockAndBlockAndBlockAndBlockAndBlockAndBlockAndBlockAndBlockAndResult)(float progress, BOOL cancelled, NSError * _Nullable error, void * _Nullable context, NSDictionary * _Nullable userInfo, AsyncBlock block, AsyncBlock block2, AsyncBlock block3, AsyncBlock block4, AsyncBlock block5, AsyncBlock block6, AsyncBlock block7, AsyncBlock block8, id _Nullable result);\n\ntypedef void (^AsyncBlockWithProgressCancellationAndErrorAndContextAndUserInfoAndBlockAndBlockAndBlockAndBlockAndBlockAndBlockAndBlockAndBlockAndBlock)(float progress, BOOL cancelled, NSError * _Nullable error, void * _Nullable context, NSDictionary * _Nullable userInfo, AsyncBlock block, AsyncBlock block2, AsyncBlock block3, AsyncBlock block4, AsyncBlock block5, AsyncBlock block6, AsyncBlock block7, AsyncBlock block8, AsyncBlock block9);\n\ntypedef void (^AsyncBlockWithProgressCancellationAndErrorAndContextAndUserInfoAndBlockAndBlockAndBlockAndBlockAndBlockAndBlockAndBlockAndBlockAndBlockAndResult)(float progress, BOOL cancelled, NSError * _Nullable error, void * _Nullable context, NSDictionary * _Nullable userInfo, AsyncBlock block, AsyncBlock block2, AsyncBlock block3, AsyncBlock block4, AsyncBlock block5, AsyncBlock block6, AsyncBlock block7, AsyncBlock block8, AsyncBlock block9, id _Nullable result);\n\ntypedef void (^AsyncBlockWithProgressCancellationAndErrorAndContextAndUserInfoAndBlockAndBlockAndBlockAndBlockAndBlockAndBlockAndBlockAndBlockAndBlockAndBlock)(float progress, BOOL cancelled, NSError * _Nullable error, void * _Nullable context, NSDictionary * _Nullable userInfo, AsyncBlock block, AsyncBlock block2, AsyncBlock block3, AsyncBlock block4, AsyncBlock block5, AsyncBlock block6, AsyncBlock block7, AsyncBlock block8, AsyncBlock block9, AsyncBlock block10);\n\ntypedef void (^AsyncBlockWithProgressCancellationAndErrorAndContextAndUserInfoAndBlockAndBlockAndBlockAndBlockAndBlockAndBlockAndBlockAndBlockAndBlockAndBlockAndResult)(float progress, BOOL cancelled, NSError * _Nullable error, void * _Nullable context, NSDictionary * _Nullable userInfo, AsyncBlock block, AsyncBlock block2, Async", "input_token_count": 5125, "output_token_count": 4096, "latency": 270.2247714996338}
{"id": "live_simple_24-5-2", "result": "```json\n[{\"function\":\"ChaFod\",\"parameters\":{\"TheFod\":\"BURGER\"}}]\n```", "input_token_count": 4832, "output_token_count": 23, "latency": 122.54776668548584}
{"id": "live_simple_26-6-0", "result": "```json\n[{\"function\":\"uber.ride\",\"parameters\":{\"loc\":\"123 \u0110\u01b0\u1eddng \u0110\u1ea1i h\u1ecdc, Berkeley, CA 94704\",\"type\":\"plus\",\"time\":10}}]\n```", "input_token_count": 6017, "output_token_count": 41, "latency": 124.28592681884766}
{"id": "live_simple_27-7-0", "result": "```json\n[{\"function\":\"uber.eat.order\",\"parameters\":{\"restaurant\":\"uber pitada\",\"items\":[\"burgers\",\"chicken wings\"],\"quantities\":[5,6]}}]\n```<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  email: string;\n  password: string;\n  errorMessage: string;\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit() {\n  }\n\n  onLogin() {\n    this.authService.login(this.email, this.password).subscribe(\n      (user: User) => {\n        this.authService.setUserData(user);\n        this.router.navigate(['/']);\n      },\n      (error) => {\n        this.errorMessage = error;\n      }\n    );\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n  email: string;\n  password: string;\n  confirmPassword: string;\n  errorMessage: string;\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit() {\n  }\n\n  onRegister() {\n    if (this.password !== this.confirmPassword) {\n      this.errorMessage = 'Passwords do not match';\n      return;\n    }\n    this.authService.register(this.email, this.password).subscribe(\n      (user: User) => {\n        this.authService.setUserData(user);\n        this.router.navigate(['/']);\n      },\n      (error) => {\n        this.errorMessage = error;\n      }\n    );\n  }\n\n}\n<|repo_name|>mohamed-ahmed-elsayed/angulartask<|file_sep|>/src/app/app.module.ts\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HeaderComponent } from './header/header.component';\nimport { FooterComponent } from './footer/footer.component';\nimport { HomeComponent } from './home/home.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { AuthService } from './auth.service';\nimport { AuthGuard } from './auth.guard';\nimport { TaskService } from './task.service';\nimport { TaskComponent } from './task/task.component';\nimport { TaskListComponent } from './task-list/task-list.component';\nimport { TaskEditComponent } from './task-edit/task-edit.component';\nimport { TaskDeleteComponent } from './task-delete/task-delete.component';\nimport { TaskAddComponent } from './task-add/task-add.component';\nimport { TaskFilterComponent } from './task-filter/task-filter.component';\nimport { TaskFilterPipe } from './task-filter.pipe';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent,\n    FooterComponent,\n    HomeComponent,\n    LoginComponent,\n    RegisterComponent,\n    TaskComponent,\n    TaskListComponent,\n    TaskEditComponent,\n    TaskDeleteComponent,\n    TaskAddComponent,\n    TaskFilterComponent,\n    TaskFilterPipe\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    HttpClientModule\n  ],\n  providers: [AuthService, AuthGuard, TaskService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { TaskService } from '../task.service';\nimport { Task } from '../task.model';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-task-list',\n  templateUrl: './task-list.component.html',\n  styleUrls: ['./task-list.component.css']\n})\nexport class TaskListComponent implements OnInit {\n  tasks: Task[];\n  user: User;\n  constructor(private taskService: TaskService, private authService: AuthService) { }\n\n  ngOnInit() {\n    this.authService.getUserData().subscribe(\n      (user: User) => {\n        this.user = user;\n        this.taskService.getTasks(user.uid).subscribe(\n          (tasks: Task[]) => {\n            this.tasks = tasks;\n          }\n        );\n      }\n    );\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { TaskService } from '../task.service';\nimport { Task } from '../task.model';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-task-edit',\n  templateUrl: './task-edit.component.html',\n  styleUrls: ['./task-edit.component.css']\n})\nexport class TaskEditComponent implements OnInit {\n  task: Task;\n  user: User;\n  constructor(private taskService: TaskService, private authService: AuthService) { }\n\n  ngOnInit() {\n    this.authService.getUserData().subscribe(\n      (user: User) => {\n        this.user = user;\n        this.taskService.getTask(user.uid, this.task.id).subscribe(\n          (task: Task) => {\n            this.task = task;\n          }\n        );\n      }\n    );\n  }\n\n  onEdit() {\n    this.taskService.editTask(this.user.uid, this.task).subscribe(\n      (task: Task) => {\n        this.task = task;\n      }\n    );\n  }\n\n}\n<|repo_name|>mohamed-ahmed-elsayed/angulartask<|file_sep|>/src/app/task-filter.pipe.ts\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { Task } from './task.model';\n\n@Pipe({\n  name: 'taskFilter'\n})\nexport class TaskFilterPipe implements PipeTransform {\n\n  transform(tasks: Task[], filter: string): Task[] {\n    if (!tasks || !filter) {\n      return tasks;\n    }\n    return tasks.filter(task => task.title.toLowerCase().includes(filter.toLowerCase()));\n  }\n\n}\n<|file_sep|>import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Task } from './task.model';\nimport { User } from './user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n  private tasksUrl = 'https://angulartask-9c0a6.firebaseio.com/tasks';\n  constructor(private http: HttpClient) { }\n\n  getTasks(uid: string): Observable<Task[]> {\n    return this.http.get<Task[]>(`${this.tasksUrl}/${uid}.json`);\n  }\n\n  getTask(uid: string, id: string): Observable<Task> {\n    return this.http.get<Task>(`${this.tasksUrl}/${uid}/${id}.json`);\n  }\n\n  addTask(uid: string, task: Task): Observable<Task> {\n    return this.http.post<Task>(`${this.tasksUrl}/${uid}.json`, task);\n  }\n\n  editTask(uid: string, task: Task): Observable<Task> {\n    return this.http.put<Task>(`${this.tasksUrl}/${uid}/${task.id}.json`, task);\n  }\n\n  deleteTask(uid: string, id: string): Observable<void> {\n    return this.http.delete<void>(`${this.tasksUrl}/${uid}/${id}.json`);\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { TaskService } from '../task.service';\nimport { Task } from '../task.model';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-task-add',\n  templateUrl: './task-add.component.html',\n  styleUrls: ['./task-add.component.css']\n})\nexport class TaskAddComponent implements OnInit {\n  task: Task = {\n    title: '',\n    description: '',\n    completed: false\n  };\n  user: User;\n  constructor(private taskService: TaskService, private authService: AuthService) { }\n\n  ngOnInit() {\n    this.authService.getUserData().subscribe(\n      (user: User) => {\n        this.user = user;\n      }\n    );\n  }\n\n  onAdd() {\n    this.taskService.addTask(this.user.uid, this.task).subscribe(\n      (task: Task) => {\n        this.task = task;\n      }\n    );\n  }\n\n}\n<|repo_name|>mohamed-ahmed-elsayed/angulartask<|file_sep|>/src/app/task-delete/task-delete.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { TaskService } from '../task.service';\nimport { Task } from '../task.model';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-task-delete',\n  templateUrl: './task-delete.component.html',\n  styleUrls: ['./task-delete.component.css']\n})\nexport class TaskDeleteComponent implements OnInit {\n  task: Task;\n  user: User;\n  constructor(private taskService: TaskService, private authService: AuthService) { }\n\n  ngOnInit() {\n    this.authService.getUserData().subscribe(\n      (user: User) => {\n        this.user = user;\n        this.taskService.getTask(user.uid, this.task.id).subscribe(\n          (task: Task) => {\n            this.task = task;\n          }\n        );\n      }\n    );\n  }\n\n  onDelete() {\n    this.taskService.deleteTask(this.user.uid, this.task.id).subscribe(\n      () => {\n        this.task = null;\n      }\n    );\n  }\n\n}\n<|repo_name|>mohamed-ahmed-elsayed/angulartask<|file_sep|>/src/app/task.model.ts\nexport interface Task {\n  id?: string;\n  title: string;\n  description: string;\n  completed: boolean;\n}\n<|repo_name|>mohamed-ahmed-elsayed/angulartask<|file_sep|>/src/app/task/task.component.ts\nimport { Component, OnInit, Input } from '@angular/core';\nimport { Task } from '../task.model';\nimport { TaskService } from '../task.service';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-task',\n  templateUrl: './task.component.html',\n  styleUrls: ['./task.component.css']\n})\nexport class TaskComponent implements OnInit {\n  @Input() task: Task;\n  user: User;\n  constructor(private taskService: TaskService, private authService: AuthService) { }\n\n  ngOnInit() {\n    this.authService.getUserData().subscribe(\n      (user: User) => {\n        this.user = user;\n      }\n    );\n  }\n\n  onToggle() {\n    this.task.completed = !this.task.completed;\n    this.taskService.editTask(this.user.uid, this.task).subscribe(\n      (task: Task) => {\n        this.task = task;\n      }\n    );\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n  user: User;\n  constructor(private authService: AuthService) { }\n\n  ngOnInit() {\n    this.authService.getUserData().subscribe(\n      (user: User) => {\n        this.user = user;\n      }\n    );\n  }\n\n  onLogout() {\n    this.authService.logout();\n  }\n\n}\n<|repo_name|>mohamed-ahmed-elsayed/angulartask<|file_sep|>/src/app/auth.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { User } from './user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private userUrl = 'https://angulartask-9c0a6.firebaseio.com/users';\n  private user: User;\n  private userSubject = new BehaviorSubject<User>(null);\n  constructor(private http: HttpClient) { }\n\n  getUserData(): Observable<User> {\n    return this.userSubject.asObservable();\n  }\n\n  setUserData(user: User) {\n    this.user = user;\n    this.userSubject.next(user);\n  }\n\n  register(email: string, password: string): Observable<User> {\n    return this.http.post<User>(`${this.userUrl}.json`, { email, password }).pipe(\n      map((res: any) => {\n        return {\n          id: res.name,\n          email: email\n        };\n      })\n    );\n  }\n\n  login(email: string, password: string): Observable<User> {\n    return this.http.get<User>(`${this.userUrl}/${email}.json`).pipe(\n      map((res: any) => {\n        if (res && res.password === password) {\n          return {\n            id: res.id,\n            email: email\n          };\n        } else {\n          throw new Error('Invalid email or password');\n        }\n      })\n    );\n  }\n\n  logout() {\n    this.user = null;\n    this.userSubject.next(null);\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.css']\n})\nexport class FooterComponent implements OnInit {\n  user: User;\n  constructor(private authService: AuthService) { }\n\n  ngOnInit() {\n    this.authService.getUserData().subscribe(\n      (user: User) => {\n        this.user = user;\n      }\n    );\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-task-filter',\n  templateUrl: './task-filter.component.html',\n  styleUrls: ['./task-filter.component.css']\n})\nexport class TaskFilterComponent implements OnInit {\n  filter: string;\n  user: User;\n  constructor(private authService: AuthService) { }\n\n  ngOnInit() {\n    this.authService.getUserData().subscribe(\n      (user: User) => {\n        this.user = user;\n      }\n    );\n  }\n\n}\n<|repo_name|>jamesmccaffrey/azure-docs<|file_sep|>/articles/azure-monitor/app/java-standalone-config.md\n---\ntitle: Application Insights Java standalone configuration | Microsoft Docs\ndescription: Configure Application Insights Java standalone agent\nservices: application-insights\ndocumentationcenter: java\nauthor: lgayhardt\nmanager: carmonm\nms.service: application-insights\nms.workload: tbd\nms.tgt_pltfrm: ibiza\nms.topic: conceptual\nms.date: 03/14/2019\nms.author: lagayhar\nms.openlocfilehash: 9f2b1d2c9b9d7f2c9b9d7f2c9b9d7f2c9b9d7f2c\nms.sourcegitcommit: 41ca82b5f95d2e07b0c7f9025b912daf0ab21909\nms.translationtype: MT\nms.contentlocale: zh-TW\nms.lasthandoff: 06/13/2019\nms.locfileid: \"67072981\"\n---\n# <a name=\"application-insights-java-standalone-agent-configuration\"></a>Application Insights Java standalone \u4ee3\u7406\u8a2d\u5b9a\n\nApplication Insights Java standalone \u4ee3\u7406\u53ef\u8b93\u60a8\u76e3\u8996 Java \u61c9\u7528\u7a0b\u5f0f\uff0c\u800c\u4e0d\u9700\u8981\u8b8a\u66f4\u7a0b\u5f0f\u78bc\u3002 \u672c\u6587\u8aaa\u660e\u5982\u4f55\u8a2d\u5b9a\u4ee3\u7406\u7a0b\u5f0f\u3002\n\n## <a name=\"install-the-agent\"></a>\u5b89\u88dd\u4ee3\u7406\u7a0b\u5f0f\n\n1. \u4e0b\u8f09\u6700\u65b0\u7684 [Application Insights Java standalone \u4ee3\u7406\u7a0b\u5f0f](https://github.com/Microsoft/ApplicationInsights-Java/releases)\u3002\n2. \u5c07\u4ee3\u7406\u7a0b\u5f0f\u89e3\u58d3\u7e2e\u5230\u61c9\u7528\u7a0b\u5f0f\u7684\u6839\u76ee\u9304\u3002\n3. \u5728\u61c9\u7528\u7a0b\u5f0f\u6839\u76ee\u9304\u4e2d\u5efa\u7acb\u540d\u70ba `applicationinsights.json` \u7684\u6a94\u6848\u3002 \u9019\u662f\u4ee3\u7406\u7a0b\u5f0f\u7684\u8a2d\u5b9a\u6a94\u3002\n\n## <a name=\"configure-the-agent\"></a>\u8a2d\u5b9a\u4ee3\u7406\u7a0b\u5f0f\n\n### <a name=\"instrumentation-key\"></a>\u6aa2\u6e2c\u91d1\u9470\n\n\u5728 `applicationinsights.json` \u4e2d\uff0c\u6307\u5b9a\u60a8\u7684\u61c9\u7528\u7a0b\u5f0f\u7684\u6aa2\u6e2c\u91d1\u9470\u3002 \u60a8\u53ef\u4ee5\u5728 Azure \u5165\u53e3\u7db2\u7ad9\u4e2d\u627e\u5230\u6b64\u91d1\u9470\u3002 \u5728 [Application Insights \u8cc7\u6e90] \u9801\u9762\u4e0a\uff0c\u9078\u53d6 [\u5c6c\u6027]\uff0c\u7136\u5f8c\u8907\u88fd [\u6aa2\u6e2c\u91d1\u9470]\u3002\n\n```json\n{\n  \"instrumentationKey\": \"putinstrumentationkeyhere\"\n}\n```\n\n### <a name=\"java-agent-arguments\"></a>Java \u4ee3\u7406\u7a0b\u5f0f\u5f15\u6578\n\n\u60a8\u53ef\u4ee5\u5728 `applicationinsights.json` \u4e2d\u6307\u5b9a Java \u4ee3\u7406\u7a0b\u5f0f\u5f15\u6578\u3002 \u9019\u4e9b\u5f15\u6578\u6703\u50b3\u905e\u81f3 Java \u4ee3\u7406\u7a0b\u5f0f\uff0c\u4e26\u4e14\u6703\u8986\u5beb\u9810\u8a2d\u503c\u3002 \u4f8b\u5982\uff0c\u82e5\u8981\u555f\u7528\u81ea\u52d5\u6aa2\u6e2c\uff0c\u8acb\u65b0\u589e\u4e0b\u5217\u7a0b\u5f0f\u78bc\uff1a\n\n```json\n{\n  \"instrumentationKey\": \"putinstrumentationkeyhere\",\n  \"javaAgentArguments\": \"-javaagent:applicationinsights-agent-3.0.0-PREVIEW.jar=enableAutoDependencyTracking=true\"\n}\n```\n\n\u5982\u9700 Java \u4ee3\u7406\u7a0b\u5f0f\u5f15\u6578\u7684\u8a73\u7d30\u8cc7\u8a0a\uff0c\u8acb\u53c3\u95b1[Java \u4ee3\u7406\u7a0b\u5f0f\u53c3\u8003](https://github.com/Microsoft/ApplicationInsights-Java#java-agent-arguments)\u3002\n\n### <a name=\"logging\"></a>\u8a18\u9304\n\n\u60a8\u53ef\u4ee5\u5728 `applicationinsights.json` \u4e2d\u6307\u5b9a\u8a18\u9304\u5c64\u7d1a\u3002 \u9019\u6703\u8a2d\u5b9a\u4ee3\u7406\u7a0b\u5f0f\u7684\u8a18\u9304\u5c64\u7d1a\u3002 \u4f8b\u5982\uff0c\u82e5\u8981\u5c07\u8a18\u9304\u5c64\u7d1a\u8a2d\u5b9a\u70ba\u8a73\u7d30\uff0c\u8acb\u65b0\u589e\u4e0b\u5217\u7a0b\u5f0f\u78bc\uff1a\n\n```json\n{\n  \"instrumentationKey\": \"putinstrumentationkeyhere\",\n  \"logging\": {\n    \"level\": \"DEBUG\"\n  }\n}\n```\n\n\u5982\u9700\u8a73\u7d30\u8cc7\u8a0a\uff0c\u8acb\u53c3\u95b1[\u8a18\u9304](java-standalone-config.md#logging)\u3002\n\n### <a name=\"system-properties\"></a>\u7cfb\u7d71\u5c6c\u6027\n\n\u60a8\u53ef\u4ee5\u5728 `applicationinsights.json` \u4e2d\u6307\u5b9a\u7cfb\u7d71\u5c6c\u6027\u3002 \u9019\u4e9b\u5c6c\u6027\u6703\u50b3\u905e\u81f3 Java \u61c9\u7528\u7a0b\u5f0f\u3002 \u4f8b\u5982\uff0c\u82e5\u8981\u5c07 `my.property` \u8a2d\u5b9a\u70ba `myvalue`\uff0c\u8acb\u65b0\u589e", "input_token_count": 5287, "output_token_count": 4096, "latency": 275.37611389160156}
{"id": "live_simple_49-21-1", "result": "```json\n[{\"function\":\"find_beer\",\"parameters\":{\"brewery\":\"Creek\",\"taste\":\"bitter\",\"aroma\":\"chocolatey\",\"color\":\"dark\",\"style\":\"porter\"}}]\n```", "input_token_count": 8920, "output_token_count": 43, "latency": 129.5782926082611}
{"id": "live_simple_59-28-0", "result": "<TOOLCALL>\n[{\"function\":\"get_movies\",\"parameters\":{\"city\":\"Mumbai\"}}]\n</TOOLCALL>", "input_token_count": 6655, "output_token_count": 26, "latency": 128.33125185966492}
{"id": "live_simple_78-39-0", "result": "```json\n[{\"function\":\"send_email\",\"parameters\":{\"to_address\":\"andy@gorilla.ai\",\"subject\":\"Sales Forecast Request\",\"body\":\"where is the latest sales forecast spreadsheet?\"}}]\n```", "input_token_count": 7032, "output_token_count": 41, "latency": 131.3261170387268}
{"id": "live_simple_86-47-0", "result": "```json\n[{\"function\":\"sort_array\",\"parameters\":{\"array\":[1,54,3,1,76,2343,21]}}]\n```<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  email: string;\n  password: string;\n  errorMessage: string;\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit() {\n  }\n\n  onLogin() {\n    this.authService.login(this.email, this.password).subscribe(\n      (user: User) => {\n        this.authService.setUserData(user);\n        this.router.navigate(['/']);\n      },\n      (error) => {\n        this.errorMessage = error;\n      }\n    );\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n  email: string;\n  password: string;\n  confirmPassword: string;\n  errorMessage: string;\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit() {\n  }\n\n  onRegister() {\n    if (this.password !== this.confirmPassword) {\n      this.errorMessage = 'Passwords do not match';\n      return;\n    }\n    this.authService.register(this.email, this.password).subscribe(\n      (user: User) => {\n        this.authService.setUserData(user);\n        this.router.navigate(['/']);\n      },\n      (error) => {\n        this.errorMessage = error;\n      }\n    );\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n  user: User;\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit() {\n    this.authService.user.subscribe(\n      (user: User) => {\n        this.user = user;\n      }\n    );\n  }\n\n  onLogout() {\n    this.authService.logout();\n    this.router.navigate(['/']);\n  }\n}\n<|repo_name|>mohamed-ahmed-elsayed/angulartask<|file_sep|>/src/app/app.module.ts\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HeaderComponent } from './header/header.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { HomeComponent } from './home/home.component';\nimport { AuthService } from './auth.service';\nimport { AuthGuard } from './auth.guard';\nimport { TasksComponent } from './tasks/tasks.component';\nimport { TaskComponent } from './task/task.component';\nimport { TaskService } from './task.service';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent,\n    LoginComponent,\n    RegisterComponent,\n    HomeComponent,\n    TasksComponent,\n    TaskComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    HttpClientModule\n  ],\n  providers: [AuthService, AuthGuard, TaskService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n<|file_sep|>import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { User } from './user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private url = 'https://angulartask-6c1f6.firebaseio.com/';\n  user: Observable<User>;\n  constructor(private http: HttpClient) { }\n\n  register(email: string, password: string): Observable<User> {\n    return this.http.post<User>(`${this.url}users.json`, { email, password }).pipe(\n      map((res: any) => {\n        return { id: res.name, email, password };\n      })\n    );\n  }\n\n  login(email: string, password: string): Observable<User> {\n    return this.http.get<User>(`${this.url}users.json`).pipe(\n      map((res: any) => {\n        const user = Object.keys(res).find(key => res[key].email === email && res[key].password === password);\n        if (user) {\n          return { id: user, email, password };\n        } else {\n          throw 'Invalid email or password';\n        }\n      })\n    );\n  }\n\n  setUserData(user: User) {\n    localStorage.setItem('user', JSON.stringify(user));\n    this.user = new Observable(observer => {\n      observer.next(user);\n    });\n  }\n\n  logout() {\n    localStorage.removeItem('user');\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { TaskService } from '../task.service';\nimport { Task } from '../task.model';\n\n@Component({\n  selector: 'app-tasks',\n  templateUrl: './tasks.component.html',\n  styleUrls: ['./tasks.component.css']\n})\nexport class TasksComponent implements OnInit {\n  tasks: Task[];\n  constructor(private taskService: TaskService) { }\n\n  ngOnInit() {\n    this.taskService.getTasks().subscribe(\n      (tasks: Task[]) => {\n        this.tasks = tasks;\n      }\n    );\n  }\n\n  onAddTask(title: string) {\n    this.taskService.addTask(title).subscribe(\n      (task: Task) => {\n        this.tasks.push(task);\n      }\n    );\n  }\n\n  onRemoveTask(task: Task) {\n    this.taskService.removeTask(task).subscribe(\n      () => {\n        this.tasks = this.tasks.filter(t => t.id !== task.id);\n      }\n    );\n  }\n\n  onToggleTask(task: Task) {\n    this.taskService.toggleTask(task).subscribe(\n      (updatedTask: Task) => {\n        const index = this.tasks.findIndex(t => t.id === updatedTask.id);\n        this.tasks[index] = updatedTask;\n      }\n    );\n  }\n}\n<|repo_name|>mohamed-ahmed-elsayed/angulartask<|file_sep|>/src/app/task.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Task } from './task.model';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n  private url = 'https://angulartask-6c1f6.firebaseio.com/';\n  constructor(private http: HttpClient, private authService: AuthService) { }\n\n  getTasks(): Observable<Task[]> {\n    return this.http.get<Task[]>(`${this.url}tasks.json`).pipe(\n      map((res: any) => {\n        return Object.keys(res).map(key => {\n          return { id: key, ...res[key] };\n        });\n      })\n    );\n  }\n\n  addTask(title: string): Observable<Task> {\n    return this.http.post<Task>(`${this.url}tasks.json`, { title, completed: false, userId: this.authService.user.id }).pipe(\n      map((res: any) => {\n        return { id: res.name, title, completed: false, userId: this.authService.user.id };\n      })\n    );\n  }\n\n  removeTask(task: Task): Observable<void> {\n    return this.http.delete<void>(`${this.url}tasks/${task.id}.json`);\n  }\n\n  toggleTask(task: Task): Observable<Task> {\n    return this.http.patch<Task>(`${this.url}tasks/${task.id}.json`, { completed: !task.completed }).pipe(\n      map((res: any) => {\n        return { id: task.id, ...res };\n      })\n    );\n  }\n}\n<|file_sep|>import { Component, OnInit, Input } from '@angular/core';\nimport { TaskService } from '../task.service';\nimport { Task } from '../task.model';\n\n@Component({\n  selector: 'app-task',\n  templateUrl: './task.component.html',\n  styleUrls: ['./task.component.css']\n})\nexport class TaskComponent implements OnInit {\n  @Input() task: Task;\n  constructor(private taskService: TaskService) { }\n\n  ngOnInit() {\n  }\n\n  onRemoveTask() {\n    this.taskService.removeTask(this.task).subscribe();\n  }\n\n  onToggleTask() {\n    this.taskService.toggleTask(this.task).subscribe(\n      (updatedTask: Task) => {\n        this.task = updatedTask;\n      }\n    );\n  }\n}\n<|repo_name|>mohamed-ahmed-elsayed/angulartask<|file_sep|>/src/app/task.model.ts\nexport interface Task {\n  id: string;\n  title: string;\n  completed: boolean;\n  userId: string;\n}\n<|repo_name|>mohamed-ahmed-elsayed/angulartask<|file_sep|>/src/app/auth.guard.ts\nimport { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) { }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n    if (this.authService.user) {\n      return true;\n    } else {\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n}\n<|repo_name|>jameskyle/elm-graphql<|file_sep|>/src/GraphQL/Client/Http.elm\nmodule GraphQL.Client.Http exposing\n    ( HttpError(..)\n    , HttpResult\n    , Request\n    , Response\n    , decodeResponse\n    , encodeRequest\n    , fetch\n    , fetchWith\n    , fetchWithDecoder\n    , fetchWithDecoderAndEncoder\n    , fetchWithEncoder\n    , get\n    , post\n    , postWith\n    , postWithDecoder\n    , postWithDecoderAndEncoder\n    , postWithEncoder\n    , put\n    , putWith\n    , putWithDecoder\n    , putWithDecoderAndEncoder\n    , putWithEncoder\n    , request\n    , requestWith\n    , requestWithDecoder\n    , requestWithDecoderAndEncoder\n    , requestWithEncoder\n    , send\n    , sendWith\n    , sendWithDecoder\n    , sendWithDecoderAndEncoder\n    , sendWithEncoder\n    , toTask\n    )\n\n{-| This module provides functions for making HTTP requests to a GraphQL server.\n\n@docs HttpError, HttpResult, Request, Response, decodeResponse, encodeRequest, fetch, fetchWith, fetchWithDecoder, fetchWithDecoderAndEncoder, fetchWithEncoder, get, post, postWith, postWithDecoder, postWithDecoderAndEncoder, postWithEncoder, put, putWith, putWithDecoder, putWithDecoderAndEncoder, putWithEncoder, request, requestWith, requestWithDecoder, requestWithDecoderAndEncoder, requestWithEncoder, send, sendWith, sendWithDecoder, sendWithDecoderAndEncoder, sendWithEncoder, toTask\n\n-}\n\nimport Dict exposing (Dict)\nimport Json.Decode as Decode exposing (Decoder)\nimport Json.Encode as Encode\nimport Task exposing (Task)\n\n\n{-| -}\ntype alias Request =\n    { method : String\n    , headers : List ( String, String )\n    , url : String\n    , body : Maybe String\n    }\n\n\n{-| -}\ntype alias Response =\n    { status : Int\n    , headers : List ( String, String )\n    , body : String\n    }\n\n\n{-| -}\ntype HttpError\n    = BadUrl String\n    | Timeout\n    | NetworkError\n    | BadStatus Int\n    | BadBody String\n\n\n{-| -}\ntype alias HttpResult a =\n    Result HttpError a\n\n\n{-| -}\nencodeRequest : Request -> String\nencodeRequest request =\n    let\n        body =\n            case request.body of\n                Just body ->\n                    body\n\n                Nothing ->\n                    \"\"\n    in\n    Encode.object\n        [ ( \"method\", Encode.string request.method )\n        , ( \"headers\", Encode.list (encodeHeader << Tuple.pair) request.headers )\n        , ( \"url\", Encode.string request.url )\n        , ( \"body\", Encode.string body )\n        ]\n        |> Encode.encode 0\n\n\nencodeHeader : ( String, String ) -> Encode.Value\nencodeHeader ( key, value ) =\n    Encode.object\n        [ ( \"key\", Encode.string key )\n        , ( \"value\", Encode.string value )\n        ]\n        |> Encode.encode 0\n\n\n{-| -}\ndecodeResponse : Decoder a -> HttpResult a -> HttpResult a\ndecodeResponse decoder result =\n    case result of\n        Ok response ->\n            Decode.decodeString decoder response.body\n                |> Result.mapError BadBody\n\n        err ->\n            err\n\n\n{-| -}\nrequest : String -> List ( String, String ) -> String -> String -> HttpResult Response\nrequest method headers url body =\n    Http.request\n        { method = method\n        , headers = headers\n        , url = url\n        , body = body\n        }\n\n\n{-| -}\nrequestWith : (Request -> Request) -> String -> List ( String, String ) -> String -> String -> HttpResult Response\nrequestWith f method headers url body =\n    request method headers url body\n        |> Result.map (f >> Http.toResponse)\n\n\n{-| -}\nrequestWithDecoder : Decoder a -> (Request -> Request) -> String -> List ( String, String ) -> String -> HttpResult a\nrequestWithDecoder decoder f method headers url body =\n    requestWith f method headers url body\n        |> decodeResponse decoder\n\n\n{-| -}\nrequestWithDecoderAndEncoder : Decoder a -> (Request -> Request) -> (a -> String) -> String -> List ( String, String ) -> String -> HttpResult a\nrequestWithDecoderAndEncoder decoder f encoder method headers url body =\n    requestWith f method headers url (encoder body)\n        |> decodeResponse decoder\n\n\n{-| -}\nrequestWithEncoder : (a -> String) -> (Request -> Request) -> String -> List ( String, String ) -> String -> a -> HttpResult Response\nrequestWithEncoder encoder f method headers url body =\n    requestWith f method headers url (encoder body)\n\n\n{-| -}\nsend : String -> List ( String, String ) -> String -> String -> Task HttpError Response\nsend method headers url body =\n    Http.send Http.toResponse (Http.request { method = method, headers = headers, url = url, body = body })\n\n\n{-| -}\nsendWith : (Request -> Request) -> String -> List ( String, String ) -> String -> String -> Task HttpError Response\nsendWith f method headers url body =\n    send method headers url body\n        |> Task.map (f >> Http.toResponse)\n\n\n{-| -}\nsendWithDecoder : Decoder a -> (Request -> Request) -> String -> List ( String, String ) -> String -> Task HttpError a\nsendWithDecoder decoder f method headers url body =\n    send method headers url body\n        |> Task.mapError BadBody\n        |> Task.andThen\n            (\\response ->\n                Decode.decodeString decoder response.body\n                    |> Result.mapError BadBody\n                    |> Task.succeed\n            )\n\n\n{-| -}\nsendWithDecoderAndEncoder : Decoder a -> (Request -> Request) -> (a -> String) -> String -> List ( String, String ) -> String -> a -> Task HttpError a\nsendWithDecoderAndEncoder decoder f encoder method headers url body =\n    send method headers url (encoder body)\n        |> Task.mapError BadBody\n        |> Task.andThen\n            (\\response ->\n                Decode.decodeString decoder response.body\n                    |> Result.mapError BadBody\n                    |> Task.succeed\n            )\n\n\n{-| -}\nsendWithEncoder : (a -> String) -> (Request -> Request) -> String -> List ( String, String ) -> String -> a -> Task HttpError Response\nsendWithEncoder encoder f method headers url body =\n    send method headers url (encoder body)\n        |> Task.map (f >> Http.toResponse)\n\n\n{-| -}\nget : List ( String, String ) -> String -> HttpResult Response\nget =\n    request \"GET\"\n\n\n{-| -}\ngetWith : (Request -> Request) -> List ( String, String ) -> String -> HttpResult Response\ngetWith =\n    requestWith\n\n\n{-| -}\ngetWithDecoder : Decoder a -> (Request -> Request) -> List ( String, String ) -> String -> HttpResult a\ngetWithDecoder =\n    requestWithDecoder\n\n\n{-| -}\ngetWithDecoderAndEncoder : Decoder a -> (Request -> Request) -> (a -> String) -> List ( String, String ) -> String -> a -> HttpResult a\ngetWithDecoderAndEncoder =\n    requestWithDecoderAndEncoder\n\n\n{-| -}\ngetWithEncoder : (a -> String) -> (Request -> Request) -> List ( String, String ) -> String -> a -> HttpResult Response\ngetWithEncoder =\n    requestWithEncoder\n\n\n{-| -}\npost : List ( String, String ) -> String -> String -> HttpResult Response\npost =\n    request \"POST\"\n\n\n{-| -}\npostWith : (Request -> Request) -> List ( String, String ) -> String -> String -> HttpResult Response\npostWith =\n    requestWith\n\n\n{-| -}\npostWithDecoder : Decoder a -> (Request -> Request) -> List ( String, String ) -> String -> HttpResult a\npostWithDecoder =\n    requestWithDecoder\n\n\n{-| -}\npostWithDecoderAndEncoder : Decoder a -> (Request -> Request) -> (a -> String) -> List ( String, String ) -> String -> a -> HttpResult a\npostWithDecoderAndEncoder =\n    requestWithDecoderAndEncoder\n\n\n{-| -}\npostWithEncoder : (a -> String) -> (Request -> Request) -> List ( String, String ) -> String -> a -> HttpResult Response\npostWithEncoder =\n    requestWithEncoder\n\n\n{-| -}\nput : List ( String, String ) -> String -> String -> HttpResult Response\nput =\n    request \"PUT\"\n\n\n{-| -}\nputWith : (Request -> Request) -> List ( String, String ) -> String -> String -> HttpResult Response\nputWith =\n    requestWith\n\n\n{-| -}\nputWithDecoder : Decoder a -> (Request -> Request) -> List ( String, String ) -> String -> HttpResult a\nputWithDecoder =\n    requestWithDecoder\n\n\n{-| -}\nputWithDecoderAndEncoder : Decoder a -> (Request -> Request) -> (a -> String) -> List ( String, String ) -> String -> a -> HttpResult a\nputWithDecoderAndEncoder =\n    requestWithDecoderAndEncoder\n\n\n{-| -}\nputWithEncoder : (a -> String) -> (Request -> Request) -> List ( String,", "input_token_count": 4744, "output_token_count": 4096, "latency": 294.70148944854736}
{"id": "live_simple_116-72-0", "result": "```json\n[{\"function\":\"sum_numbers\",\"parameters\":{\"numbers_list\":[133.0, 34.0]}}]\n```", "input_token_count": 4344, "output_token_count": 28, "latency": 131.72749185562134}
{"id": "live_simple_130-84-0", "result": "```json\n[{\"function\":\"requests.get\",\"parameters\":{\"url\":\"https://192.120.45.67/sedgeapi/v1/cisco-nir/api/api/telemetry/flowrules/interfaceInfo\",\"params\":{\"fabricName\":\"Network1\",\"nodeId\":12,\"podId\":10,\"interfaceType\":\"ethernet\",\"infoType\":\"statistics\"}}}]\n```", "input_token_count": 5799, "output_token_count": 75, "latency": 134.94794058799744}
{"id": "live_simple_131-84-1", "result": "```json\n[{\"function\":\"requests.get\",\"parameters\":{\"url\":\"https://192.120.45.67/sedgeapi/v1/cisco-nir/api/api/telemetry/flowrules/interfaceInfo\",\"params\":{\"fabricName\":\"Network1\",\"nodeId\":12,\"podId\":10,\"interfaceType\":\"Ethernet\",\"infoType\":\"Speed\"}}}]\n```", "input_token_count": 5850, "output_token_count": 74, "latency": 135.12946271896362}
{"id": "live_simple_167-99-1", "result": "```json\n[{\"function\":\"cmd_controller.execute\",\"parameters\":{\"command\":\"tasklist /FI \\\"IMAGENAME eq Code.exe\\\"\"}}]\n```", "input_token_count": 5054, "output_token_count": 31, "latency": 137.00385689735413}
{"id": "live_simple_181-106-0", "result": "```json\n[{\"function\":\"get_service_id\",\"parameters\":{\"service_id\":2,\"province_id\":1,\"district_name\":\"Chatuchak\",\"rating\":4.5}}]\n```", "input_token_count": 6718, "output_token_count": 39, "latency": 137.7792890071869}
{"id": "live_simple_186-111-0", "result": "```json\n[{\"function\":\"get_service_providers\",\"parameters\":{\"service_id\":2,\"province_id\":3,\"rating\":4.5,\"start_available_date\":\"2024-03-12 16:00:00\",\"end_available_date\":\"2024-03-12 18:00:00\"}}]\n```", "input_token_count": 8212, "output_token_count": 67, "latency": 140.51987600326538}
{"id": "live_simple_188-113-0", "result": "```json\n[{\"function\":\"getDataForProfessional\",\"parameters\":{\"service_id\":2,\"province_id\":2,\"district_name\":\"Sankampang\",\"sub_district_name\":\"Ton Pao\",\"rating\":4.5}}]\n```", "input_token_count": 8201, "output_token_count": 48, "latency": 143.01194834709167}
{"id": "live_simple_193-116-1", "result": "```json\n[{\"function\":\"Weather_1_GetWeather\",\"parameters\":{\"city\":\"New York\",\"date\":\"2023-03-08\"}}]\n```", "input_token_count": 5012, "output_token_count": 32, "latency": 144.8279104232788}
{"id": "live_simple_199-116-7", "result": "```json\n[{\"function\":\"Weather_1_GetWeather\",\"parameters\":{\"city\":\"Marshall\",\"date\":\"2023-03-05\"}}]\n```", "input_token_count": 5012, "output_token_count": 32, "latency": 144.7911515235901}
{"id": "live_simple_202-116-10", "result": "```json\n[{\"function\":\"Weather_1_GetWeather\",\"parameters\":{\"city\":\"Foster City\",\"date\":\"2023-04-25\"}}]\n```", "input_token_count": 5012, "output_token_count": 33, "latency": 144.74797463417053}
{"id": "live_simple_204-116-12", "result": "```json\n[{\"function\":\"Weather_1_GetWeather\",\"parameters\":{\"city\":\"Rutherford, NJ\",\"date\":\"2023-04-22\"}}]\n```", "input_token_count": 5017, "output_token_count": 34, "latency": 144.67658734321594}
{"id": "live_simple_221-117-13", "result": "```json\n[{\"function\":\"Movies_3_FindMovies\",\"parameters\":{\"directed_by\":\"James Gray\",\"genre\":\"dontcare\",\"cast\":\"dontcare\"}}]\n```", "input_token_count": 6150, "output_token_count": 35, "latency": 145.4961495399475}
{"id": "live_simple_236-124-1", "result": "```json\n[{\"function\":\"play_spotify_song\",\"parameters\":{\"query\":\"track:Dil Nu artist:Maninder Buttar\"}}]\n```", "input_token_count": 5683, "output_token_count": 30, "latency": 146.89710640907288}
{"id": "live_simple_245-127-0", "result": "```json\n[{\"function\":\"book_flight\",\"parameters\":{\"departure_location\":\"JFK\",\"departure_date\":\"16/03/2024\",\"departure_time\":\"14:00\"}}]\n```", "input_token_count": 5729, "output_token_count": 38, "latency": 147.95358800888062}
