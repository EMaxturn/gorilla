{"accuracy": 0.9075, "correct_count": 363, "total_count": 400}
{"id": "simple_13", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'interval'. Expected outer type array with inner type <class 'float'>. Parameter value: [1, 3]."], "error_type": "type_error:nested", "prompt": {"id": "simple_13", "question": [[{"role": "user", "content": "Calculate the area under the curve y=x^2 from x=1 to x=3."}]], "function": [{"name": "calculate_area_under_curve", "description": "Calculate the area under a mathematical function within a given interval.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The mathematical function as a string."}, "interval": {"type": "array", "items": {"type": "float"}, "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."}, "method": {"type": "string", "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, "required": ["function", "interval"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"calculate_area_under_curve\"><params><param name=\"function\" value=\"x**2\" type=\"string\"/><param name=\"interval\" value=\"[1, 3]\" type=\"array\"/><param name=\"method\" value=\"trapezoidal\" type=\"string\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"calculate_area_under_curve": {"function": "x**2", "interval": [1, 3], "method": "trapezoidal"}}], "possible_answer": [{"calculate_area_under_curve": {"function": ["x**2", "lambda x: x**2", "y=x**2"], "interval": [[1.0, 3.0]], "method": ["", "trapezoidal"]}}]}
{"id": "simple_66", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'time_frame': '6 months'. Expected one of ['six_months']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_66", "question": [[{"role": "user", "content": "Get me data on average precipitation in the Amazon rainforest for the last six months."}]], "function": [{"name": "ecology_data.precipitation_stats", "description": "Retrieve precipitation data for a specified location and time period.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The name of the location, e.g., 'Amazon rainforest'."}, "time_frame": {"type": "string", "enum": ["six_months", "year", "five_years"], "description": "The time period for which data is required."}}, "required": ["location", "time_frame"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"ecology_data.precipitation_stats\"><params><param name=\"location\" value=\"Amazon rainforest\" type=\"string\"/><param name=\"time_frame\" value=\"6 months\" type=\"string\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"ecology_data.precipitation_stats": {"location": "Amazon rainforest", "time_frame": "6 months"}}], "possible_answer": [{"ecology_data.precipitation_stats": {"location": ["Amazon rainforest"], "time_frame": ["six_months"]}}]}
{"id": "simple_82", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'numbers'. Expected outer type array with inner type <class 'float'>. Parameter value: [12, 15, 18, 20, 21, 26, 30]."], "error_type": "type_error:nested", "prompt": {"id": "simple_82", "question": [[{"role": "user", "content": "Calculate the average of list of integers [12, 15, 18, 20, 21, 26, 30]."}]], "function": [{"name": "calculate_average", "description": "Calculates the average of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to calculate the average of."}}, "required": ["numbers"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"calculate_average\"><params><param name=\"numbers\" value=\"[12, 15, 18, 20, 21, 26, 30]\" type=\"array\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"calculate_average": {"numbers": [12, 15, 18, 20, 21, 26, 30]}}], "possible_answer": [{"calculate_average": {"numbers": [[12.0, 15.0, 18.0, 20.0, 21.0, 26.0, 30.0]]}}]}
{"id": "simple_87", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'list'. Expected outer type array with inner type <class 'float'>. Parameter value: [5, 3, 4, 1, 2]."], "error_type": "type_error:nested", "prompt": {"id": "simple_87", "question": [[{"role": "user", "content": "Sort the list [5, 3, 4, 1, 2] in ascending order."}]], "function": [{"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "dict", "properties": {"list": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting."}}, "required": ["list", "order"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"array_sort\"><params><param name=\"list\" value=\"[5, 3, 4, 1, 2]\" type=\"array\"/><param name=\"order\" value=\"ascending\" type=\"string\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"array_sort": {"list": [5, 3, 4, 1, 2], "order": "ascending"}}], "possible_answer": [{"array_sort": {"list": [[5.0, 3.0, 4.0, 1.0, 2.0]], "order": ["ascending"]}}]}
{"id": "simple_89", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'table_name': 'Bluebird High School'. Expected one of ['students']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_89", "question": [[{"role": "user", "content": "Fetch all records for students studying Science in 'Bluebird High School' from the StudentDB."}]], "function": [{"name": "db_fetch_records", "description": "Fetch records from a specified database table based on certain conditions.", "parameters": {"type": "dict", "properties": {"database_name": {"type": "string", "description": "The name of the database."}, "table_name": {"type": "string", "description": "The name of the table from which records need to be fetched."}, "conditions": {"type": "dict", "properties": {"department": {"type": "string", "description": "The name of the department of students."}, "school": {"type": "string", "description": "The name of the school students are enrolled in."}}, "description": "The conditions based on which records are to be fetched."}, "fetch_limit": {"type": "integer", "description": "Limits the number of records to be fetched. Default is 0, which means no limit."}}, "required": ["database_name", "table_name", "conditions"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"db_fetch_records\"><params><param name=\"database_name\" value=\"StudentDB\" type=\"string\"/><param name=\"table_name\" value=\"Bluebird High School\" type=\"string\"/><param name=\"conditions\" value=\"{'subject': 'Science'}\" type=\"dict\"/><param name=\"fetch_limit\" value=\"0\" type=\"integer\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"db_fetch_records": {"database_name": "StudentDB", "table_name": "Bluebird High School", "conditions": {"subject": "Science"}, "fetch_limit": 0}}], "possible_answer": [{"db_fetch_records": {"database_name": ["StudentDB"], "table_name": ["students"], "conditions": [{"department": ["Science"], "school": ["Bluebird High School", "Bluebird HS"]}], "fetch_limit": ["", 0]}}]}
{"id": "simple_91", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'condition': 'Sunday'. Expected one of ['open on Sundays', 'opens on Sundays']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_91", "question": [[{"role": "user", "content": "Get the highest rated sushi restaurant in Boston, that opens on Sundays."}]], "function": [{"name": "get_restaurant", "description": "Retrieve highest rated restaurant given cuisine, location, and a condition.", "parameters": {"type": "dict", "properties": {"cuisine": {"type": "string", "description": "Cuisine of the restaurant."}, "location": {"type": "string", "description": "City where restaurant is located."}, "condition": {"type": "string", "description": "Condition to be met by the restaurant (e.g., operating days, amenities, etc.)"}}, "required": ["cuisine", "location", "condition"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"get_restaurant\"><params><param name=\"cuisine\" value=\"sushi\" type=\"string\"/><param name=\"location\" value=\"Boston\" type=\"string\"/><param name=\"condition\" value=\"Sunday\" type=\"string\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"get_restaurant": {"cuisine": "sushi", "location": "Boston", "condition": "Sunday"}}], "possible_answer": [{"get_restaurant": {"cuisine": ["sushi"], "location": ["Boston"], "condition": ["open on Sundays", "opens on Sundays"]}}]}
{"id": "simple_96", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'conditions'. Expected outer type array with inner type <class 'dict'>. Parameter value: ['age > 25', 'job = engineer']."], "error_type": "type_error:nested", "prompt": {"id": "simple_96", "question": [[{"role": "user", "content": "Find records in database in user table where age is greater than 25 and job is 'engineer'."}]], "function": [{"name": "database.query", "description": "Query the database based on certain conditions.", "parameters": {"type": "dict", "properties": {"table": {"type": "string", "description": "Name of the table to query."}, "conditions": {"type": "array", "items": {"type": "dict", "properties": {"field": {"type": "string", "description": "The field to apply the condition."}, "operation": {"type": "string", "description": "The operation to be performed.", "enum": ["<", ">", "=", ">=", "<="]}, "value": {"type": "string", "description": "The value to be compared."}}, "required": ["field", "operation", "value"]}, "description": "Conditions for the query."}}, "required": ["table", "conditions"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"database.query\"><params><param name=\"table\" value=\"user\" type=\"string\"/><param name=\"conditions\" value=\"['age > 25', 'job = engineer']\" type=\"array\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"database.query": {"table": "user", "conditions": ["age > 25", "job = engineer"]}}], "possible_answer": [{"database.query": {"table": ["user"], "conditions": [[{"field": ["age"], "operation": [">"], "value": ["25"]}, {"field": ["job"], "operation": ["="], "value": ["engineer"]}]]}}]}
{"id": "simple_98", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'hours': 18. Expected one of [6]."], "error_type": "value_error:others", "prompt": {"id": "simple_98", "question": [[{"role": "user", "content": "What will be the angle between the hour and minute hands of a clock at 6:30 PM?"}]], "function": [{"name": "calculate_clock_angle", "description": "Calculate the angle between the hour and minute hands of a clock at a given time.", "parameters": {"type": "dict", "properties": {"hours": {"type": "integer", "description": "The hour on the clock face."}, "minutes": {"type": "integer", "description": "The minutes on the clock face."}, "round_to": {"type": "integer", "description": "The number of decimal places to round the result to, default is 2."}}, "required": ["hours", "minutes"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"calculate_clock_angle\"><params><param name=\"hours\" value=\"18\" type=\"integer\"/><param name=\"minutes\" value=\"30\" type=\"integer\"/><param name=\"round_to\" value=\"2\" type=\"integer\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"calculate_clock_angle": {"hours": 18, "minutes": 30, "round_to": 2}}], "possible_answer": [{"calculate_clock_angle": {"hours": [6], "minutes": [30], "round_to": ["", 2]}}]}
{"id": "simple_103", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'polynomial'. Expected outer type array with inner type <class 'float'>. Parameter value: [3, 2, -4]."], "error_type": "type_error:nested", "prompt": {"id": "simple_103", "question": [[{"role": "user", "content": "Calculate the area under the curve y=3x^2 + 2x - 4, between x = -1 and x = 2."}]], "function": [{"name": "mathematics.calculate_area_under_curve", "description": "Calculate the area under the curve for a given polynomial function within a specified interval.", "parameters": {"type": "dict", "properties": {"polynomial": {"type": "array", "items": {"type": "float"}, "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."}, "limits": {"type": "array", "items": {"type": "float"}, "description": "A list of two numbers specifying the lower and upper limit for the integration interval."}}, "required": ["polynomial", "limits"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"mathematics.calculate_area_under_curve\"><params><param name=\"polynomial\" value=\"[3, 2, -4]\" type=\"array\"/><param name=\"limits\" value=\"[-1, 2]\" type=\"array\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"mathematics.calculate_area_under_curve": {"polynomial": [3, 2, -4], "limits": [-1, 2]}}], "possible_answer": [{"mathematics.calculate_area_under_curve": {"polynomial": [[3.0, 2.0, -4.0]], "limits": [[-1.0, 2.0]]}}]}
{"id": "simple_144", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 98"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_144", "question": [[{"role": "user", "content": "Find the market performance of the S&P 500 and the Dow Jones over the past 5 days."}]], "function": [{"name": "market_performance.get_data", "description": "Retrieve the market performance data for specified indexes over a specified time period.", "parameters": {"type": "dict", "properties": {"indexes": {"type": "array", "items": {"type": "string"}, "description": "Array of stock market indexes. Supported indexes are 'S&P 500', 'Dow Jones', 'NASDAQ', 'FTSE 100', 'DAX' etc."}, "days": {"type": "integer", "description": "Number of days in the past for which the performance data is required."}, "detailed": {"type": "boolean", "description": "Whether to return detailed performance data. If set to true, returns high, low, opening, and closing prices. If false, returns only closing prices. Default is false."}}, "required": ["indexes", "days"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"market_performance.get_data\"><params><param name=\"indexes\" value=\"['S&P 500', 'Dow Jones']\" type=\"array\"/><param name=\"days\" value=\"5\" type=\"integer\"/><param name=\"detailed\" value=\"false\" type=\"boolean\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"market_performance.get_data": {"indexes": [["S&P 500", "Dow Jones"]], "days": [5], "detailed": ["", true, false]}}]}
{"id": "simple_161", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'detail_level': 'detail'. Expected one of ['detailed']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_161", "question": [[{"role": "user", "content": "Find out the possible punishments for the crime of theft in California in detail."}]], "function": [{"name": "crime_statute_lookup", "description": "Look up the criminal statutes in a specific jurisdiction to find possible punishments for a specific crime.", "parameters": {"type": "dict", "properties": {"jurisdiction": {"type": "string", "description": "The jurisdiction to search in, usually a state or country."}, "crime": {"type": "string", "description": "The crime to search for."}, "detail_level": {"type": "string", "enum": ["basic", "detailed"], "description": "How detailed of a report to return. Optional, default is 'basic'."}}, "required": ["jurisdiction", "crime"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"crime_statute_lookup\"><params><param name=\"jurisdiction\" value=\"California\" type=\"string\"/><param name=\"crime\" value=\"theft\" type=\"string\"/><param name=\"detail_level\" value=\"detail\" type=\"string\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"crime_statute_lookup": {"jurisdiction": "California", "crime": "theft", "detail_level": "detail"}}], "possible_answer": [{"crime_statute_lookup": {"jurisdiction": ["California", "CA"], "crime": ["theft"], "detail_level": ["detailed"]}}]}
{"id": "simple_177", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'status': 'Patent'. Expected one of ['all', '']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_177", "question": [[{"role": "user", "content": "Find all Patent lawsuit cases of Facebook in 2018."}]], "function": [{"name": "get_lawsuit_cases", "description": "Retrieve all lawsuit cases related to a specific company during a particular year.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "year": {"type": "integer", "description": "The specific year to search for lawsuit cases."}, "status": {"type": "string", "enum": ["open", "closed", "all"], "description": "The status of the lawsuit cases to retrieve. If not specified, defaults to 'all'."}}, "required": ["company_name", "year"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"get_lawsuit_cases\"><params><param name=\"company_name\" value=\"Facebook\" type=\"string\"/><param name=\"year\" value=\"2018\" type=\"integer\"/><param name=\"status\" value=\"Patent\" type=\"string\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"get_lawsuit_cases": {"company_name": "Facebook", "year": 2018, "status": "Patent"}}], "possible_answer": [{"get_lawsuit_cases": {"company_name": ["Facebook"], "year": [2018], "status": ["all", ""]}}]}
{"id": "simple_196", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'date': '2022/08/16'. Expected one of ['08-16-2022']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_196", "question": [[{"role": "user", "content": "What is the air quality index in London 2022/08/16?"}]], "function": [{"name": "air_quality", "description": "Retrieve the air quality index for a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality index for."}, "date": {"type": "string", "description": "The date (month-day-year) you want to get the air quality index for."}}, "required": ["location", "date"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"air_quality\"><params><param name=\"location\" value=\"London\" type=\"string\"/><param name=\"date\" value=\"2022/08/16\" type=\"string\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"air_quality": {"location": "London", "date": "2022/08/16"}}], "possible_answer": [{"air_quality": {"location": ["London"], "date": ["08-16-2022"]}}]}
{"id": "simple_207", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'route_preference': ''. Expected one of ['Shortest']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_207", "question": [[{"role": "user", "content": "Get the shortest driving distance between New York, USA and Miami, USA."}]], "function": [{"name": "calculate_shortest_distance", "description": "Calculate the shortest driving distance between two locations.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting location for the drive."}, "end_location": {"type": "string", "description": "The destination location for the drive."}, "route_preference": {"type": "string", "enum": ["Shortest", "Scenic"], "description": "The preferred type of route."}}, "required": ["start_location", "end_location", "route_preference"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"calculate_shortest_distance\"><params><param name=\"start_location\" value=\"New York, USA\" type=\"string\"/><param name=\"end_location\" value=\"Miami, USA\" type=\"string\"/><param name=\"route_preference\" value=\"\" type=\"string\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"calculate_shortest_distance": {"start_location": "New York, USA", "end_location": "Miami, USA", "route_preference": ""}}], "possible_answer": [{"calculate_shortest_distance": {"start_location": ["New York, USA", "New York City", "New York City, NY", "NYC", "NY"], "end_location": ["Miami, USA", "Miami", "Miami, FL", "FL"], "route_preference": ["Shortest"]}}]}
{"id": "simple_209", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'facilities': ['English fiction', 'Wi-Fi']. Expected one of [['Fiction', 'Wi-Fi'], ['Wi-Fi', 'Fiction']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_209", "question": [[{"role": "user", "content": "Locate the nearest public library in Boston, Massachusetts with English fiction section and free Wi-Fi."}]], "function": [{"name": "public_library.find_nearby", "description": "Locate nearby public libraries based on specific criteria like English fiction availability and Wi-Fi.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Boston, MA"}, "facilities": {"type": "array", "items": {"type": "string", "enum": ["Wi-Fi", "Reading Room", "Fiction", "Children Section", "Cafe"]}, "description": "Facilities and sections in public library."}}, "required": ["location", "facilities"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"public_library.find_nearby\"><params><param name=\"location\" value=\"Boston, Massachusetts\" type=\"string\"/><param name=\"facilities\" value=\"['English fiction', 'Wi-Fi']\" type=\"array\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"public_library.find_nearby": {"location": "Boston, Massachusetts", "facilities": ["English fiction", "Wi-Fi"]}}], "possible_answer": [{"public_library.find_nearby": {"location": ["Boston, MA", "Boston, Massachusetts"], "facilities": [["Fiction", "Wi-Fi"], ["Wi-Fi", "Fiction"]]}}]}
{"id": "simple_234", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'region': 'Europe'. Expected one of ['Northern', 'Southern', 'Eastern', 'Western']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_234", "question": [[{"role": "user", "content": "Find important Wars in European history during the 19th century."}]], "function": [{"name": "history_eu.fetch_events", "description": "Fetches significant historical events within a specific time period in European history.", "parameters": {"type": "dict", "properties": {"century": {"type": "integer", "description": "The century you are interested in."}, "region": {"type": "string", "description": "The region of Europe you are interested in.", "enum": ["Northern", "Southern", "Eastern", "Western"]}, "category": {"type": "string", "description": "Category of the historical events. Default is 'Culture'.", "enum": ["Wars", "Culture", "Politics", "Scientific", "Others"]}}, "required": ["century", "region"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"history_eu.fetch_events\"><params><param name=\"century\" value=\"19\" type=\"integer\"/><param name=\"region\" value=\"Europe\" type=\"string\"/><param name=\"category\" value=\"Wars\" type=\"string\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"history_eu.fetch_events": {"century": 19, "region": "Europe", "category": "Wars"}}], "possible_answer": [{"history_eu.fetch_events": {"century": [19], "region": ["Northern", "Southern", "Eastern", "Western"], "category": ["Wars"]}}]}
{"id": "simple_251", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'source': 'historical record'. Expected one of ['historical records']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_251", "question": [[{"role": "user", "content": "What is the earliest reference of Jesus Christ in history from historical record?"}]], "function": [{"name": "get_earliest_reference", "description": "Retrieve the earliest historical reference of a person.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the person."}, "source": {"type": "string", "enum": ["scriptures", "historical records"], "description": "Source to fetch the reference. Default is 'scriptures'"}}, "required": ["name"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"get_earliest_reference\"><params><param name=\"name\" value=\"Jesus Christ\" type=\"string\"/><param name=\"source\" value=\"historical record\" type=\"string\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"get_earliest_reference": {"name": "Jesus Christ", "source": "historical record"}}], "possible_answer": [{"get_earliest_reference": {"name": ["Jesus Christ"], "source": ["historical records"]}}]}
{"id": "simple_260", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Unexpected dict key parameter: 'window'.", "Missing dict key parameter: 'type'."], "error_type": "value_error:dict_key", "prompt": {"id": "simple_260", "question": [[{"role": "user", "content": "Calculate how many gallons of paint is required to paint a wall with width of 20ft and height of 12ft, assuming 1 gallon covers approximately 350 sq.ft. Don't include window area of 15 sq.ft."}]], "function": [{"name": "paint_requirement.calculate", "description": "Calculate the amount of paint required to paint a given area. Account for coverage efficiency of the paint and exclusions (like windows).", "parameters": {"type": "dict", "properties": {"area": {"type": "dict", "properties": {"width": {"type": "integer", "description": "The width of the area to be painted in feet."}, "height": {"type": "integer", "description": "The height of the area to be painted in feet."}}, "description": "The area to be painted."}, "paint_coverage": {"type": "integer", "description": "Coverage area per gallon of the paint in square feet.", "default": 350}, "exclusion": {"type": "dict", "properties": {"type": {"type": "string", "description": "The type of the exclusion e.g window, door etc."}, "area": {"type": "integer", "description": "The area of the exclusion in square feet."}}, "description": "Area not to be painted. Default to not use any exclusion if not specified."}}, "required": ["area", "paint_coverage"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"paint_requirement.calculate\"><params><param name=\"area\" value=\"{'width': 20, 'height': 12}\" type=\"dict\"/><param name=\"paint_coverage\" value=\"350\" type=\"integer\"/><param name=\"exclusion\" value=\"{'window': 15}\" type=\"dict\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"paint_requirement.calculate": {"area": {"width": 20, "height": 12}, "paint_coverage": 350, "exclusion": {"window": 15}}}], "possible_answer": [{"paint_requirement.calculate": {"area": [{"width": [20], "height": [12]}], "paint_coverage": [350], "exclusion": [{"type": ["window"], "area": [15]}]}}]}
{"id": "simple_277", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'information': ['working hours', 'ticket price']. Expected one of [['opening_hours', 'ticket_price'], ['ticket_price', 'opening_hours']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_277", "question": [[{"role": "user", "content": "Find the working hours and ticket price of The British Museum for this weekend, Jun.20,2023."}]], "function": [{"name": "museum_info", "description": "Get information about a museum including its opening hours and ticket prices for a specific date range.", "parameters": {"type": "dict", "properties": {"museum": {"type": "string", "description": "The name of the museum."}, "date": {"type": "string", "description": "The specific date for which information is needed, in the format of YYYY-MM-DD such as '2022-12-01'."}, "information": {"type": "array", "items": {"type": "string", "enum": ["opening_hours", "ticket_price", "address"]}, "description": "The type of information needed from the museum. This is optional and defaults to 'all' if not specified.", "default": "all"}}, "required": ["museum", "date"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"museum_info\"><params><param name=\"museum\" value=\"The British Museum\" type=\"string\"/><param name=\"date\" value=\"2023-06-20\" type=\"string\"/><param name=\"information\" value=\"['working hours', 'ticket price']\" type=\"array\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"museum_info": {"museum": "The British Museum", "date": "2023-06-20", "information": ["working hours", "ticket price"]}}], "possible_answer": [{"museum_info": {"museum": ["The British Museum"], "date": ["2023-06-20"], "information": [["opening_hours", "ticket_price"], ["ticket_price", "opening_hours"]]}}]}
{"id": "simple_278", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'features': ['price', 'ratings']. Expected one of [['price', 'rating']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_278", "question": [[{"role": "user", "content": "Find me the average price and ratings of piano from Yamaha."}]], "function": [{"name": "get_instrument_details", "description": "Retrieve the average price and ratings of an instrument from a particular manufacturer.", "parameters": {"type": "dict", "properties": {"instrument": {"type": "string", "description": "The name of the instrument."}, "manufacturer": {"type": "string", "description": "The manufacturer of the instrument."}, "features": {"type": "array", "items": {"type": "string", "enum": ["price", "rating"]}, "description": "The features to retrieve about the instrument. Default is 'price'"}}, "required": ["instrument", "manufacturer"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"get_instrument_details\"><params><param name=\"instrument\" value=\"piano\" type=\"string\"/><param name=\"manufacturer\" value=\"Yamaha\" type=\"string\"/><param name=\"features\" value=\"['price', 'ratings']\" type=\"array\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"get_instrument_details": {"instrument": "piano", "manufacturer": "Yamaha", "features": ["price", "ratings"]}}], "possible_answer": [{"get_instrument_details": {"instrument": ["piano"], "manufacturer": ["Yamaha"], "features": [["price", "rating"]]}}]}
{"id": "simple_283", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Missing required parameter: 'location'."], "error_type": "simple_function_checker:missing_required", "prompt": {"id": "simple_283", "question": [[{"role": "user", "content": "Find the price of a used Gibson Les Paul guitar in excellent condition in the Chicago area."}]], "function": [{"name": "guitar_price.find", "description": "Retrieve the price of a specific used guitar model based on its condition and location.", "parameters": {"type": "dict", "properties": {"model": {"type": "string", "description": "The model of the guitar."}, "condition": {"type": "string", "enum": ["Poor", "Good", "Excellent"], "description": "The condition of the guitar."}, "location": {"type": "string", "description": "The location where the guitar is being sold."}}, "required": ["model", "condition", "location"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"guitar_price.find\"><params><param name=\"model\" value=\"Gibson Les Paul\" type=\"string\"/><param name=\"condition\" value=\"excellent\" type=\"string\"/><param name=\"condition\" value=\"Chicago\" type=\"string\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"guitar_price.find": {"model": "Gibson Les Paul", "condition": "Chicago"}}], "possible_answer": [{"guitar_price.find": {"model": ["Gibson Les Paul"], "condition": ["Excellent"], "location": ["Chicago", "Chicago, IL", "Chicago, Illinois"]}}]}
{"id": "simple_285", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'Chicago'. Expected one of ['Chicago, Illinois', 'Chicago, IL']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_285", "question": [[{"role": "user", "content": "Find me a Rock concert in Chicago with ticket availability under $100."}]], "function": [{"name": "find_concert", "description": "Locate a concert in a specified location within a certain budget.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you are looking for a concert. In the format City, State."}, "price": {"type": "integer", "description": "Maximum ticket price."}, "genre": {"type": "string", "description": "Music genre of the concert. Default to 'Jazz'. ", "enum": ["Rock", "Pop", "Country", "Jazz", "Classical"]}}, "required": ["location", "price"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"find_concert\"><params><param name=\"location\" value=\"Chicago\" type=\"string\"/><param name=\"price\" value=\"100\" type=\"integer\"/><param name=\"genre\" value=\"Rock\" type=\"string\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"find_concert": {"location": "Chicago", "price": 100, "genre": "Rock"}}], "possible_answer": [{"find_concert": {"location": ["Chicago, Illinois", "Chicago, IL"], "price": [100], "genre": ["Rock"]}}]}
{"id": "simple_304", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'team': ''. Expected one of ['Los Angeles Lakers', 'LAL', 'Lakers']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_304", "question": [[{"role": "user", "content": "Get point and rebound stats for player 'LeBron James' from last basketball game"}]], "function": [{"name": "player_stats.getLastGame", "description": "Get last game statistics for a specific player in basketball", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The name of the basketball player."}, "team": {"type": "string", "description": "The team that player currently plays for."}, "metrics": {"type": "array", "items": {"type": "string", "enum": ["Points", "Rebounds", "Assists", "Blocks"]}, "description": "Specific metrics to retrieve. If no value is specified, all available metrics will be returned by default."}}, "required": ["player_name", "team"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"player_stats.getLastGame\"><params><param name=\"player_name\" value=\"LeBron James\" type=\"string\"/><param name=\"team\" value=\"\" type=\"string\"/><param name=\"metrics\" value=\"['point', 'rebound']\" type=\"array\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"player_stats.getLastGame": {"player_name": "LeBron James", "team": "", "metrics": ["point", "rebound"]}}], "possible_answer": [{"player_stats.getLastGame": {"player_name": ["LeBron James"], "team": ["Los Angeles Lakers", "LAL", "Lakers"], "metrics": [["Points", "Rebounds"]]}}]}
{"id": "simple_305", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'performance_indicator': ['goal', 'assist']. Expected one of [['Goals Scored', 'Assists Made']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_305", "question": [[{"role": "user", "content": "Calculate the overall goal and assist of soccer player Messi in La Liga 2020-2021 season"}]], "function": [{"name": "sports_stats.get_performance", "description": "Compute the performance score of a soccer player given his game stats for a specific tournament in a season.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "Name of the player."}, "tournament": {"type": "string", "description": "Name of the soccer tournament."}, "season": {"type": "string", "description": "Specific season in format 'YYYY-YYYY'."}, "performance_indicator": {"type": "array", "items": {"type": "string", "enum": ["Goals Scored", "Assists Made", "Saves Made", "Cards Received"]}, "description": "Array of performance indicators. Use as much as possible. Default to use all if not specified."}}, "required": ["player_name", "tournament", "season"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"sports_stats.get_performance\"><params><param name=\"player_name\" value=\"Messi\" type=\"string\"/><param name=\"tournament\" value=\"La Liga\" type=\"string\"/><param name=\"season\" value=\"2020-2021\" type=\"string\"/><param name=\"performance_indicator\" value=\"['goal', 'assist']\" type=\"array\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"sports_stats.get_performance": {"player_name": "Messi", "tournament": "La Liga", "season": "2020-2021", "performance_indicator": ["goal", "assist"]}}], "possible_answer": [{"sports_stats.get_performance": {"player_name": ["Messi", "Lionel Messi"], "tournament": ["La Liga"], "season": ["2020-2021"], "performance_indicator": [["Goals Scored", "Assists Made"]]}}]}
{"id": "simple_325", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'season': '2023-24'. Expected one of ['']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_325", "question": [[{"role": "user", "content": "Who won the last match between Chicago Bulls and Los Angeles Lakers?"}]], "function": [{"name": "sports.match_results", "description": "Returns the results of a given match between two teams.", "parameters": {"type": "dict", "properties": {"team1": {"type": "string", "description": "The name of the first team."}, "team2": {"type": "string", "description": "The name of the second team."}, "season": {"type": "string", "description": "The season when the match happened. Default is the current season."}}, "required": ["team1", "team2"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"sports.match_results\"><params><param name=\"team1\" value=\"Chicago Bulls\" type=\"string\"/><param name=\"team2\" value=\"Los Angeles Lakers\" type=\"string\"/><param name=\"season\" value=\"2023-24\" type=\"string\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"sports.match_results": {"team1": "Chicago Bulls", "team2": "Los Angeles Lakers", "season": "2023-24"}}], "possible_answer": [{"sports.match_results": {"team1": ["Chicago Bulls"], "team2": ["Los Angeles Lakers"], "season": [""]}}]}
{"id": "simple_330", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'info_required': ['average_rating', 'age_range']. Expected one of [['average_review_rating', 'age_range']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_330", "question": [[{"role": "user", "content": "What's the average review rating and the age range for the board game 'Catan'?"}]], "function": [{"name": "board_game_info", "description": "Get the information about a board game from a database. ", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "Name of the board game."}, "info_required": {"type": "array", "items": {"type": "string", "enum": ["average_review_rating", "age_range", "number_of_players", "playing_time", "genre"]}, "description": "Array of information requested for the game."}}, "required": ["game_name", "info_required"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"board_game_info\"><params><param name=\"game_name\" value=\"Catan\" type=\"string\"/><param name=\"info_required\" value=\"['average_rating', 'age_range']\" type=\"array\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"board_game_info": {"game_name": "Catan", "info_required": ["average_rating", "age_range"]}}], "possible_answer": [{"board_game_info": {"game_name": ["Catan"], "info_required": [["average_review_rating", "age_range"]]}}]}
{"id": "simple_333", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'details': ['high_temperature', 'low_temperature', 'humidity', 'precipitation']. Expected one of [['high_low_temperature', 'humidity', 'precipitation']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_333", "question": [[{"role": "user", "content": "Find the high and low temperatures, humidity, and precipitation for London, United Kingdom for the next 3 days."}]], "function": [{"name": "detailed_weather_forecast", "description": "Retrieve a detailed weather forecast for a specific location and time frame, including high/low temperatures, humidity, and precipitation.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}, "details": {"type": "array", "items": {"type": "string", "enum": ["high_low_temperature", "humidity", "precipitation"]}, "description": "Specific weather details required in the forecast."}}, "required": ["location", "days", "details"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"detailed_weather_forecast\"><params><param name=\"location\" value=\"London\" type=\"string\"/><param name=\"days\" value=\"3\" type=\"integer\"/><param name=\"details\" value=\"['high_temperature', 'low_temperature', 'humidity', 'precipitation']\" type=\"array\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"detailed_weather_forecast": {"location": "London", "days": 3, "details": ["high_temperature", "low_temperature", "humidity", "precipitation"]}}], "possible_answer": [{"detailed_weather_forecast": {"location": ["London, United Kingdom", "London"], "days": [3], "details": [["high_low_temperature", "humidity", "precipitation"]]}}]}
{"id": "simple_339", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Missing required parameter: 'deck_size'."], "error_type": "simple_function_checker:missing_required", "prompt": {"id": "simple_339", "question": [[{"role": "user", "content": "What is the probability of getting a full house in poker?"}]], "function": [{"name": "poker_probability.full_house", "description": "Calculate the probability of getting a full house in a poker game.", "parameters": {"type": "dict", "properties": {"deck_size": {"type": "integer", "description": "The size of the deck. Default is 52."}, "hand_size": {"type": "integer", "description": "The size of the hand. Default is 5."}}, "required": ["deck_size", "hand_size"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"poker_probability.full_house\"><params></params></function></functions></TOOLCALL>", "model_result_decoded": [{"poker_probability.full_house": {}}], "possible_answer": [{"poker_probability.full_house": {"deck_size": [52], "hand_size": [5]}}]}
{"id": "simple_352", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Missing required parameter: 'platform'."], "error_type": "simple_function_checker:missing_required", "prompt": {"id": "simple_352", "question": [[{"role": "user", "content": "Get the average user score for the game 'The Legend of Zelda: Breath of the Wild' from GameSpot."}]], "function": [{"name": "gamespot.getAverageUserScore", "description": "Retrieve the average user score of a game from GameSpot.", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The platform the game was released on (e.g., Nintendo Switch, PS5, etc.)", "default": "all platforms"}}, "required": ["game_name", "platform"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"gamespot.getAverageUserScore\"><params><param name=\"game_name\" value=\"The Legend of Zelda: Breath of the Wild\" type=\"string\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"gamespot.getAverageUserScore": {"game_name": "The Legend of Zelda: Breath of the Wild"}}], "possible_answer": [{"gamespot.getAverageUserScore": {"game_name": ["The Legend of Zelda: Breath of the Wild"], "platform": ["Nintendo Switch", "all platforms"]}}]}
{"id": "simple_363", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. malformed node or string on line 1: <ast.Name object at 0x7f7b1a556380>"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_363", "question": [[{"role": "user", "content": "Find the closest sushi restaurant with a patio in Boston."}]], "function": [{"name": "restaurant_search.find_closest", "description": "Locate the closest sushi restaurant based on certain criteria, such as the presence of a patio.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city, for instance Boston, MA"}, "cuisine": {"type": "string", "description": "Type of food like Sushi."}, "amenities": {"type": "array", "items": {"type": "string", "enum": ["Patio", "Wi-Fi", "Happy Hour", "Wheelchair Accessible"]}, "description": "Preferred amenities in the restaurant. Default 'Wi-Fi'."}}, "required": ["location", "cuisine"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"restaurant_search.find_closest\"><params><param name=\"location\" value=\"Boston\" type=\"string\"/><param name=\"cuisine\" value=\"Sushi\" type=\"string\"/><param name=\"amenities\" value=\"Patio\" type=\"array\"/></params></function></functions></TOOLCALL>", "possible_answer": [{"find_closest": {"location": ["Boston", "Boston, MA"], "cuisine": ["Sushi", "sushi"], "amenities": [["Patio"]]}}]}
{"id": "simple_367", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'recipe_type': 'brownies'. Expected one of ['dessert']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_367", "question": [[{"role": "user", "content": "Find me a vegan recipe for brownies which prep time is under 30 minutes."}]], "function": [{"name": "find_recipe", "description": "Find a recipe based on the dietary restrictions, recipe type, and time constraints.", "parameters": {"type": "dict", "properties": {"dietary_restrictions": {"type": "string", "description": "Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free."}, "recipe_type": {"type": "string", "description": "Type of the recipe. E.g. dessert, main course, breakfast."}, "time": {"type": "integer", "description": "Time limit in minutes to prep the meal."}}, "required": ["dietary_restrictions", "recipe_type", "time"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"find_recipe\"><params><param name=\"dietary_restrictions\" value=\"vegan\" type=\"string\"/><param name=\"recipe_type\" value=\"brownies\" type=\"string\"/><param name=\"time\" value=\"30\" type=\"integer\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"find_recipe": {"dietary_restrictions": "vegan", "recipe_type": "brownies", "time": 30}}], "possible_answer": [{"find_recipe": {"dietary_restrictions": ["vegan"], "recipe_type": ["dessert"], "time": [30]}}]}
{"id": "simple_369", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'categories': ['organic fruits', 'vegetables']. Expected one of [['Organic', 'Vegetables', 'Fruits'], ['Organic', 'Fruits', 'Vegetables'], ['Vegetables', 'Fruits', 'Organic'], ['Fruits', 'Vegetables', 'Organic'], ['Fruits', 'Organic', 'Vegetables'], ['Vegetables', 'Organic', 'Fruits']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_369", "question": [[{"role": "user", "content": "Find a grocery store near me with organic fruits and vegetables in Houston."}]], "function": [{"name": "grocery_store.find_nearby", "description": "Locate nearby grocery stores based on specific criteria like organic fruits and vegetables.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Houston, TX"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["Organic", "Vegetables", "Fruits", "Dairy", "Seafood", "Bakery"]}, "description": "Categories of items to be found in the grocery store. Default is all if not specified."}}, "required": ["location"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"grocery_store.find_nearby\"><params><param name=\"location\" value=\"Houston, TX\" type=\"string\"/><param name=\"categories\" value=\"['organic fruits', 'vegetables']\" type=\"array\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"grocery_store.find_nearby": {"location": "Houston, TX", "categories": ["organic fruits", "vegetables"]}}], "possible_answer": [{"grocery_store.find_nearby": {"location": ["Houston", "Houston, TX"], "categories": [["Organic", "Vegetables", "Fruits"], ["Organic", "Fruits", "Vegetables"], ["Vegetables", "Fruits", "Organic"], ["Fruits", "Vegetables", "Organic"], ["Fruits", "Organic", "Vegetables"], ["Vegetables", "Organic", "Fruits"]]}}]}
{"id": "simple_370", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'quantity': [3, 5]. Expected one of [[3, 1]]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_370", "question": [[{"role": "user", "content": "Order three bottles of olive oil and a five pound bag of rice from Safeway in Palo Alto."}]], "function": [{"name": "safeway.order", "description": "Order specified items from a Safeway location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location of the Safeway store, e.g. Palo Alto, CA."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order."}, "quantity": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item in the order list."}}, "required": ["location", "items", "quantity"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"safeway.order\"><params><param name=\"location\" value=\"Palo Alto, CA\" type=\"string\"/><param name=\"items\" value=\"['olive oil', 'rice']\" type=\"array\"/><param name=\"quantity\" value=\"[3, 5]\" type=\"array\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"safeway.order": {"location": "Palo Alto, CA", "items": ["olive oil", "rice"], "quantity": [3, 5]}}], "possible_answer": [{"safeway.order": {"location": ["Palo Alto", "Palo Alto, CA"], "items": [["olive oil", "rice"], ["olive oil", "bag of rice"]], "quantity": [[3, 1]]}}]}
{"id": "simple_373", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'pack_size': [12]. Expected one of [[1, 1, 12]]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_373", "question": [[{"role": "user", "content": "I want to buy apples, rice, and 12 pack of bottled water from a Walmart near San Jose. Show me the product information and stock availability."}]], "function": [{"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified."}}, "required": ["loc", "product_list"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"walmart.purchase\"><params><param name=\"loc\" value=\"San Jose\" type=\"string\"/><param name=\"product_list\" value=\"['apples', 'rice', 'bottled water']\" type=\"array\"/><param name=\"pack_size\" value=\"[12]\" type=\"array\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"walmart.purchase": {"loc": "San Jose", "product_list": ["apples", "rice", "bottled water"], "pack_size": [12]}}], "possible_answer": [{"walmart.purchase": {"loc": ["San Jose", "San Jose, CA"], "product_list": [["apples", "rice", "bottled water"], ["apples", "rice", "water"]], "pack_size": [[1, 1, 12]]}}]}
{"id": "simple_374", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'information': ['protein', 'calories', 'carbs']. Expected one of [['Protein', 'Calories', 'Carbohydrates']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_374", "question": [[{"role": "user", "content": "Check the amount of protein, calories and carbs in an avocado from Walmart."}]], "function": [{"name": "grocery_info.nutritional_info", "description": "Retrieve nutritional information for a given food item from a particular store", "parameters": {"type": "dict", "properties": {"store": {"type": "string", "description": "The store where the item is available"}, "food": {"type": "string", "description": "Food item for which information is needed."}, "information": {"type": "array", "items": {"type": "string", "enum": ["Protein", "Calories", "Carbohydrates", "Fat", "Fiber"]}, "description": "Nutritional details required."}}, "required": ["store", "food", "information"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"grocery_info.nutritional_info\"><params><param name=\"store\" value=\"Walmart\" type=\"string\"/><param name=\"food\" value=\"avocado\" type=\"string\"/><param name=\"information\" value=\"['protein', 'calories', 'carbs']\" type=\"array\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"grocery_info.nutritional_info": {"store": "Walmart", "food": "avocado", "information": ["protein", "calories", "carbs"]}}], "possible_answer": [{"grocery_info.nutritional_info": {"store": ["Walmart"], "food": ["avocado", "Avocado"], "information": [["Protein", "Calories", "Carbohydrates"]]}}]}
{"id": "simple_382", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'start_date': '10th December 2022'. Expected one of ['2022-12-10', '10/12/2022', 'Dec 10, 2022', 'December 10, 2022']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_382", "question": [[{"role": "user", "content": "Book a single room for two nights at the Hilton Hotel in Chicago, starting from 10th December 2022."}]], "function": [{"name": "book_hotel", "description": "Book a room of specified type for a particular number of nights at a specific hotel, starting from a specified date.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city in which the hotel is located."}, "room_type": {"type": "string", "description": "The type of room to be booked."}, "start_date": {"type": "string", "description": "The start date for the booking."}, "nights": {"type": "integer", "description": "The number of nights for which the booking is to be made."}}, "required": ["hotel_name", "location", "room_type", "start_date", "nights"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"book_hotel\"><params><param name=\"hotel_name\" value=\"Hilton Hotel\" type=\"string\"/><param name=\"location\" value=\"Chicago\" type=\"string\"/><param name=\"room_type\" value=\"single\" type=\"string\"/><param name=\"start_date\" value=\"10th December 2022\" type=\"string\"/><param name=\"nights\" value=\"2\" type=\"integer\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"book_hotel": {"hotel_name": "Hilton Hotel", "location": "Chicago", "room_type": "single", "start_date": "10th December 2022", "nights": 2}}], "possible_answer": [{"book_hotel": {"hotel_name": ["Hilton Hotel", "Hilton"], "location": ["Chicago"], "room_type": ["single"], "start_date": ["2022-12-10", "10/12/2022", "Dec 10, 2022", "December 10, 2022"], "nights": [2]}}]}
{"id": "simple_387", "model_name": "mistral-large-2411", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York'. Expected one of ['New York City, NY', 'New York, NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_387", "question": [[{"role": "user", "content": "Book a hotel room at the Plaza Hotel in New York for 3 nights starting from 1st June 2022"}]], "function": [{"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"hotel_booking\"><params><param name=\"hotel_name\" value=\"Plaza Hotel\" type=\"string\"/><param name=\"location\" value=\"New York\" type=\"string\"/><param name=\"start_date\" value=\"2022-06-01\" type=\"string\"/><param name=\"end_date\" value=\"2022-06-04\" type=\"string\"/><param name=\"rooms\" value=\"1\" type=\"integer\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"hotel_booking": {"hotel_name": "Plaza Hotel", "location": "New York", "start_date": "2022-06-01", "end_date": "2022-06-04", "rooms": 1}}], "possible_answer": [{"hotel_booking": {"hotel_name": ["Plaza Hotel"], "location": ["New York City, NY", "New York, NY"], "start_date": ["2022-06-01", "06/01/2022", "Jun.1,2022"], "end_date": ["2022-06-04", "06/04/2022", "Jun.4,2022"], "rooms": [1, ""]}}]}