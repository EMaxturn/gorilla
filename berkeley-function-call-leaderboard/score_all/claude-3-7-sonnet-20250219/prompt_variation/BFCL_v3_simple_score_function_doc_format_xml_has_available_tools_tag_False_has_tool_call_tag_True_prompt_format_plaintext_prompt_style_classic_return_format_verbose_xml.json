{"accuracy": 0.8975, "correct_count": 359, "total_count": 400}
{"id": "simple_13", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'interval'. Expected outer type array with inner type <class 'float'>. Parameter value: [1, 3]."], "error_type": "type_error:nested", "prompt": {"id": "simple_13", "question": [[{"role": "user", "content": "Calculate the area under the curve y=x^2 from x=1 to x=3."}]], "function": [{"name": "calculate_area_under_curve", "description": "Calculate the area under a mathematical function within a given interval.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The mathematical function as a string."}, "interval": {"type": "array", "items": {"type": "float"}, "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."}, "method": {"type": "string", "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, "required": ["function", "interval"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"calculate_area_under_curve\">\n<params>\n<param name=\"function\" value=\"x^2\" type=\"string\"/>\n<param name=\"interval\" value=\"[1, 3]\" type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "model_result_decoded": [{"calculate_area_under_curve": {"function": "x^2", "interval": [1, 3]}}], "possible_answer": [{"calculate_area_under_curve": {"function": ["x**2", "lambda x: x**2", "y=x**2"], "interval": [[1.0, 3.0]], "method": ["", "trapezoidal"]}}]}
{"id": "simple_51", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'isothermal': False. Expected one of ['', True]."], "error_type": "value_error:others", "prompt": {"id": "simple_51", "question": [[{"role": "user", "content": "Calculate the entropy change for a certain process given an initial temperature of 300K, a final temperature of 400K, and a heat capacity of 5J/K."}]], "function": [{"name": "calculate_entropy_change", "description": "Calculate the entropy change for an isothermal and reversible process.", "parameters": {"type": "dict", "properties": {"initial_temp": {"type": "integer", "description": "The initial temperature in Kelvin."}, "final_temp": {"type": "integer", "description": "The final temperature in Kelvin."}, "heat_capacity": {"type": "integer", "description": "The heat capacity in J/K."}, "isothermal": {"type": "boolean", "description": "Whether the process is isothermal. Default is True."}}, "required": ["initial_temp", "final_temp", "heat_capacity"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"calculate_entropy_change\">\n<params>\n<param name=\"initial_temp\" value=\"300\" type=\"integer\"/>\n<param name=\"final_temp\" value=\"400\" type=\"integer\"/>\n<param name=\"heat_capacity\" value=\"5\" type=\"integer\"/>\n<param name=\"isothermal\" value=\"false\" type=\"boolean\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "model_result_decoded": [{"calculate_entropy_change": {"initial_temp": 300, "final_temp": 400, "heat_capacity": 5, "isothermal": false}}], "possible_answer": [{"calculate_entropy_change": {"initial_temp": [300], "final_temp": [400], "heat_capacity": [5], "isothermal": ["", true]}}]}
{"id": "simple_66", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'time_frame': 'last six months'. Expected one of ['six_months']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_66", "question": [[{"role": "user", "content": "Get me data on average precipitation in the Amazon rainforest for the last six months."}]], "function": [{"name": "ecology_data.precipitation_stats", "description": "Retrieve precipitation data for a specified location and time period.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The name of the location, e.g., 'Amazon rainforest'."}, "time_frame": {"type": "string", "enum": ["six_months", "year", "five_years"], "description": "The time period for which data is required."}}, "required": ["location", "time_frame"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"ecology_data.precipitation_stats\">\n<params>\n<param name=\"location\" value=\"Amazon rainforest\" type=\"string\"/>\n<param name=\"time_frame\" value=\"last six months\" type=\"string\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "model_result_decoded": [{"ecology_data.precipitation_stats": {"location": "Amazon rainforest", "time_frame": "last six months"}}], "possible_answer": [{"ecology_data.precipitation_stats": {"location": ["Amazon rainforest"], "time_frame": ["six_months"]}}]}
{"id": "simple_82", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'numbers'. Expected outer type array with inner type <class 'float'>. Parameter value: [12, 15, 18, 20, 21, 26, 30]."], "error_type": "type_error:nested", "prompt": {"id": "simple_82", "question": [[{"role": "user", "content": "Calculate the average of list of integers [12, 15, 18, 20, 21, 26, 30]."}]], "function": [{"name": "calculate_average", "description": "Calculates the average of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to calculate the average of."}}, "required": ["numbers"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"calculate_average\">\n<params>\n<param name=\"numbers\" value=\"[12, 15, 18, 20, 21, 26, 30]\" type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "model_result_decoded": [{"calculate_average": {"numbers": [12, 15, 18, 20, 21, 26, 30]}}], "possible_answer": [{"calculate_average": {"numbers": [[12.0, 15.0, 18.0, 20.0, 21.0, 26.0, 30.0]]}}]}
{"id": "simple_87", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'list'. Expected outer type array with inner type <class 'float'>. Parameter value: [5, 3, 4, 1, 2]."], "error_type": "type_error:nested", "prompt": {"id": "simple_87", "question": [[{"role": "user", "content": "Sort the list [5, 3, 4, 1, 2] in ascending order."}]], "function": [{"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "dict", "properties": {"list": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting."}}, "required": ["list", "order"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"array_sort\">\n<params>\n<param name=\"list\" value=\"[5, 3, 4, 1, 2]\" type=\"array\"/>\n<param name=\"order\" value=\"ascending\" type=\"string\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "model_result_decoded": [{"array_sort": {"list": [5, 3, 4, 1, 2], "order": "ascending"}}], "possible_answer": [{"array_sort": {"list": [[5.0, 3.0, 4.0, 1.0, 2.0]], "order": ["ascending"]}}]}
{"id": "simple_89", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 6, column 31"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_89", "question": [[{"role": "user", "content": "Fetch all records for students studying Science in 'Bluebird High School' from the StudentDB."}]], "function": [{"name": "db_fetch_records", "description": "Fetch records from a specified database table based on certain conditions.", "parameters": {"type": "dict", "properties": {"database_name": {"type": "string", "description": "The name of the database."}, "table_name": {"type": "string", "description": "The name of the table from which records need to be fetched."}, "conditions": {"type": "dict", "properties": {"department": {"type": "string", "description": "The name of the department of students."}, "school": {"type": "string", "description": "The name of the school students are enrolled in."}}, "description": "The conditions based on which records are to be fetched."}, "fetch_limit": {"type": "integer", "description": "Limits the number of records to be fetched. Default is 0, which means no limit."}}, "required": ["database_name", "table_name", "conditions"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"db_fetch_records\">\n<params>\n<param name=\"database_name\" value=\"StudentDB\" type=\"string\"/>\n<param name=\"table_name\" value=\"students\" type=\"string\"/>\n<param name=\"conditions\" value={\"school\": \"Bluebird High School\", \"subject\": \"Science\"} type=\"dict\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "possible_answer": [{"db_fetch_records": {"database_name": ["StudentDB"], "table_name": ["students"], "conditions": [{"department": ["Science"], "school": ["Bluebird High School", "Bluebird HS"]}], "fetch_limit": ["", 0]}}]}
{"id": "simple_96", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 5, column 31"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_96", "question": [[{"role": "user", "content": "Find records in database in user table where age is greater than 25 and job is 'engineer'."}]], "function": [{"name": "database.query", "description": "Query the database based on certain conditions.", "parameters": {"type": "dict", "properties": {"table": {"type": "string", "description": "Name of the table to query."}, "conditions": {"type": "array", "items": {"type": "dict", "properties": {"field": {"type": "string", "description": "The field to apply the condition."}, "operation": {"type": "string", "description": "The operation to be performed.", "enum": ["<", ">", "=", ">=", "<="]}, "value": {"type": "string", "description": "The value to be compared."}}, "required": ["field", "operation", "value"]}, "description": "Conditions for the query."}}, "required": ["table", "conditions"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"database.query\">\n<params>\n<param name=\"table\" value=\"user\" type=\"string\"/>\n<param name=\"conditions\" value=[{\"field\": \"age\", \"operator\": \">\", \"value\": 25}, {\"field\": \"job\", \"operator\": \"=\", \"value\": \"engineer\"}] type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "possible_answer": [{"database.query": {"table": ["user"], "conditions": [[{"field": ["age"], "operation": [">"], "value": ["25"]}, {"field": ["job"], "operation": ["="], "value": ["engineer"]}]]}}]}
{"id": "simple_103", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'polynomial'. Expected outer type array with inner type <class 'float'>. Parameter value: [3, 2, -4]."], "error_type": "type_error:nested", "prompt": {"id": "simple_103", "question": [[{"role": "user", "content": "Calculate the area under the curve y=3x^2 + 2x - 4, between x = -1 and x = 2."}]], "function": [{"name": "mathematics.calculate_area_under_curve", "description": "Calculate the area under the curve for a given polynomial function within a specified interval.", "parameters": {"type": "dict", "properties": {"polynomial": {"type": "array", "items": {"type": "float"}, "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."}, "limits": {"type": "array", "items": {"type": "float"}, "description": "A list of two numbers specifying the lower and upper limit for the integration interval."}}, "required": ["polynomial", "limits"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"mathematics.calculate_area_under_curve\">\n<params>\n<param name=\"polynomial\" value=\"[3, 2, -4]\" type=\"array\"/>\n<param name=\"limits\" value=\"[-1, 2]\" type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "model_result_decoded": [{"mathematics.calculate_area_under_curve": {"polynomial": [3, 2, -4], "limits": [-1, 2]}}], "possible_answer": [{"mathematics.calculate_area_under_curve": {"polynomial": [[3.0, 2.0, -4.0]], "limits": [[-1.0, 2.0]]}}]}
{"id": "simple_112", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'round_to': 4. Expected one of ['', 2]."], "error_type": "value_error:others", "prompt": {"id": "simple_112", "question": [[{"role": "user", "content": "Calculate the probability of drawing a king from a deck of cards."}]], "function": [{"name": "calculate_probability", "description": "Calculate the probability of an event.", "parameters": {"type": "dict", "properties": {"total_outcomes": {"type": "integer", "description": "Total number of possible outcomes."}, "favorable_outcomes": {"type": "integer", "description": "Number of outcomes considered as 'successful'."}, "round_to": {"type": "integer", "description": "Number of decimal places to round the result to.", "default": 2}}, "required": ["total_outcomes", "favorable_outcomes"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"calculate_probability\">\n<params>\n<param name=\"total_outcomes\" value=\"52\" type=\"integer\"/>\n<param name=\"favorable_outcomes\" value=\"4\" type=\"integer\"/>\n<param name=\"round_to\" value=\"4\" type=\"integer\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "model_result_decoded": [{"calculate_probability": {"total_outcomes": 52, "favorable_outcomes": 4, "round_to": 4}}], "possible_answer": [{"calculate_probability": {"total_outcomes": [52], "favorable_outcomes": [4], "round_to": ["", 2]}}]}
{"id": "simple_116", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'round': 4. Expected one of [2, '']."], "error_type": "value_error:others", "prompt": {"id": "simple_116", "question": [[{"role": "user", "content": "What's the probability of drawing a king from a well shuffled standard deck of 52 cards?"}]], "function": [{"name": "probabilities.calculate_single", "description": "Calculate the probability of an event.", "parameters": {"type": "dict", "properties": {"total_outcomes": {"type": "integer", "description": "The total number of outcomes."}, "event_outcomes": {"type": "integer", "description": "The number of outcomes where the event occurs."}, "round": {"type": "integer", "description": "Round the answer to a specified number of decimal places. Defaults to 2."}}, "required": ["total_outcomes", "event_outcomes"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"probabilities.calculate_single\">\n<params>\n<param name=\"total_outcomes\" value=\"52\" type=\"integer\"/>\n<param name=\"event_outcomes\" value=\"4\" type=\"integer\"/>\n<param name=\"round\" value=\"4\" type=\"integer\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "model_result_decoded": [{"probabilities.calculate_single": {"total_outcomes": 52, "event_outcomes": 4, "round": 4}}], "possible_answer": [{"probabilities.calculate_single": {"total_outcomes": [52], "event_outcomes": [4], "round": [2, ""]}}]}
{"id": "simple_126", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 5, column 42"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_126", "question": [[{"role": "user", "content": "What is the coefficient of determination (R-squared) for a model using engine size and fuel economy variables to predict car_price with a dataset in path C:/data/cars.csv?"}]], "function": [{"name": "linear_regression.get_r_squared", "description": "Calculate the coefficient of determination of a regression model.", "parameters": {"type": "dict", "properties": {"dataset_path": {"type": "string", "description": "Path to the CSV dataset file."}, "independent_variables": {"type": "array", "items": {"type": "string"}, "description": "The independent variables to use in the regression model."}, "dependent_variable": {"type": "string", "description": "The dependent variable to predict in the regression model."}}, "required": ["dataset_path", "independent_variables", "dependent_variable"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"linear_regression.get_r_squared\">\n<params>\n<param name=\"dataset_path\" value=\"C:/data/cars.csv\" type=\"string\"/>\n<param name=\"independent_variables\" value=[\"engine_size\", \"fuel_economy\"] type=\"array\"/>\n<param name=\"dependent_variable\" value=\"car_price\" type=\"string\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "possible_answer": [{"linear_regression.get_r_squared": {"dataset_path": ["C:/data/cars.csv"], "independent_variables": [["engine_size", "fuel_economy"]], "dependent_variable": ["car_price"]}}]}
{"id": "simple_144", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 4, column 34"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_144", "question": [[{"role": "user", "content": "Find the market performance of the S&P 500 and the Dow Jones over the past 5 days."}]], "function": [{"name": "market_performance.get_data", "description": "Retrieve the market performance data for specified indexes over a specified time period.", "parameters": {"type": "dict", "properties": {"indexes": {"type": "array", "items": {"type": "string"}, "description": "Array of stock market indexes. Supported indexes are 'S&P 500', 'Dow Jones', 'NASDAQ', 'FTSE 100', 'DAX' etc."}, "days": {"type": "integer", "description": "Number of days in the past for which the performance data is required."}, "detailed": {"type": "boolean", "description": "Whether to return detailed performance data. If set to true, returns high, low, opening, and closing prices. If false, returns only closing prices. Default is false."}}, "required": ["indexes", "days"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"market_performance.get_data\">\n<params>\n<param name=\"indexes\" value=\"['S&P 500', 'Dow Jones']\" type=\"array\"/>\n<param name=\"days\" value=\"5\" type=\"integer\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "possible_answer": [{"market_performance.get_data": {"indexes": [["S&P 500", "Dow Jones"]], "days": [5], "detailed": ["", true, false]}}]}
{"id": "simple_150", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'annual_interest_rate': 3.0. Expected one of [0.03]."], "error_type": "value_error:others", "prompt": {"id": "simple_150", "question": [[{"role": "user", "content": "Calculate the return of investment of a bank's savings account with a deposit of $1000, annual interest rate of 3% for 1 year."}]], "function": [{"name": "calculate_roi", "description": "Calculate the return on investment for a given deposit amount, annual interest rate, and time frame.", "parameters": {"type": "dict", "properties": {"deposit": {"type": "integer", "description": "The initial deposit amount."}, "annual_interest_rate": {"type": "float", "description": "The annual interest rate provided by the bank."}, "years": {"type": "integer", "description": "The period for which the money is invested."}}, "required": ["deposit", "annual_interest_rate", "years"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"calculate_roi\">\n<params>\n<param name=\"deposit\" value=\"1000\" type=\"integer\"/>\n<param name=\"annual_interest_rate\" value=\"3.0\" type=\"float\"/>\n<param name=\"years\" value=\"1\" type=\"integer\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "model_result_decoded": [{"calculate_roi": {"deposit": 1000, "annual_interest_rate": 3.0, "years": 1}}], "possible_answer": [{"calculate_roi": {"deposit": [1000], "annual_interest_rate": [0.03], "years": [1]}}]}
{"id": "simple_177", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'status': 'Patent'. Expected one of ['all', '']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_177", "question": [[{"role": "user", "content": "Find all Patent lawsuit cases of Facebook in 2018."}]], "function": [{"name": "get_lawsuit_cases", "description": "Retrieve all lawsuit cases related to a specific company during a particular year.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "year": {"type": "integer", "description": "The specific year to search for lawsuit cases."}, "status": {"type": "string", "enum": ["open", "closed", "all"], "description": "The status of the lawsuit cases to retrieve. If not specified, defaults to 'all'."}}, "required": ["company_name", "year"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"get_lawsuit_cases\">\n<params>\n<param name=\"company_name\" value=\"Facebook\" type=\"string\"/>\n<param name=\"year\" value=\"2018\" type=\"integer\"/>\n<param name=\"status\" value=\"Patent\" type=\"string\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "model_result_decoded": [{"get_lawsuit_cases": {"company_name": "Facebook", "year": 2018, "status": "Patent"}}], "possible_answer": [{"get_lawsuit_cases": {"company_name": ["Facebook"], "year": [2018], "status": ["all", ""]}}]}
{"id": "simple_193", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'plant_types': ['annual plants']. Expected one of [['Annual']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_193", "question": [[{"role": "user", "content": "Find the best local nurseries in Toronto with a good variety of annual plants."}]], "function": [{"name": "local_nursery.find", "description": "Locate local nurseries based on location and plant types availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city or locality where the nursery needs to be located."}, "plant_types": {"type": "array", "items": {"type": "string", "enum": ["Annual", "Perennial", "Shrub", "Tree", "Herbs", "Fruits"]}, "description": "Type of plants the nursery should provide."}}, "required": ["location", "plant_types"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"local_nursery.find\">\n<params>\n<param name=\"location\" value=\"Toronto\" type=\"string\"/>\n<param name=\"plant_types\" value=\"['annual plants']\" type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "model_result_decoded": [{"local_nursery.find": {"location": "Toronto", "plant_types": ["annual plants"]}}], "possible_answer": [{"local_nursery.find": {"location": ["Toronto"], "plant_types": [["Annual"]]}}]}
{"id": "simple_209", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 5, column 31"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_209", "question": [[{"role": "user", "content": "Locate the nearest public library in Boston, Massachusetts with English fiction section and free Wi-Fi."}]], "function": [{"name": "public_library.find_nearby", "description": "Locate nearby public libraries based on specific criteria like English fiction availability and Wi-Fi.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Boston, MA"}, "facilities": {"type": "array", "items": {"type": "string", "enum": ["Wi-Fi", "Reading Room", "Fiction", "Children Section", "Cafe"]}, "description": "Facilities and sections in public library."}}, "required": ["location", "facilities"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"public_library.find_nearby\">\n<params>\n<param name=\"location\" value=\"Boston, MA\" type=\"string\"/>\n<param name=\"facilities\" value=[\"English fiction\", \"Wi-Fi\"] type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "possible_answer": [{"public_library.find_nearby": {"location": ["Boston, MA", "Boston, Massachusetts"], "facilities": [["Fiction", "Wi-Fi"], ["Wi-Fi", "Fiction"]]}}]}
{"id": "simple_215", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'extra_info': True. Expected one of ['', False]."], "error_type": "value_error:others", "prompt": {"id": "simple_215", "question": [[{"role": "user", "content": "Give me a brief on movie 'Interstellar'"}]], "function": [{"name": "movie_details.brief", "description": "This function retrieves a brief about a specified movie.", "parameters": {"type": "dict", "properties": {"title": {"type": "string", "description": "Title of the movie"}, "extra_info": {"type": "boolean", "description": "Option to get additional information like Director, Cast, Awards etc.", "default": "false"}}, "required": ["title"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"movie_details.brief\">\n<params>\n<param name=\"title\" value=\"Interstellar\" type=\"string\"/>\n<param name=\"extra_info\" value=\"true\" type=\"boolean\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "model_result_decoded": [{"movie_details.brief": {"title": "Interstellar", "extra_info": true}}], "possible_answer": [{"movie_details.brief": {"title": ["Interstellar"], "extra_info": ["", false]}}]}
{"id": "simple_229", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 4, column 36"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_229", "question": [[{"role": "user", "content": "What's my Big Five Personality trait scores given that I am efficient, organized, easy going and compassionate?"}]], "function": [{"name": "get_bigfive_scores", "description": "Retrieve Big Five Personality trait scores based on individual's behavioural characteristics.", "parameters": {"type": "dict", "properties": {"characteristics": {"type": "array", "items": {"type": "string"}, "description": "List of user's behavioural characteristics."}, "scale": {"type": "string", "enum": ["high", "medium", "low"], "description": "The scoring scale of traits (default is medium)."}}, "required": ["characteristics"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"get_bigfive_scores\">\n<params>\n<param name=\"characteristics\" value=[\"efficient\", \"organized\", \"easy going\", \"compassionate\"] type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "possible_answer": [{"get_bigfive_scores": {"characteristics": [["efficient", "organized", "easy going", "compassionate"]], "scale": ["medium", ""]}}]}
{"id": "simple_234", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'region': 'Europe'. Expected one of ['Northern', 'Southern', 'Eastern', 'Western']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_234", "question": [[{"role": "user", "content": "Find important Wars in European history during the 19th century."}]], "function": [{"name": "history_eu.fetch_events", "description": "Fetches significant historical events within a specific time period in European history.", "parameters": {"type": "dict", "properties": {"century": {"type": "integer", "description": "The century you are interested in."}, "region": {"type": "string", "description": "The region of Europe you are interested in.", "enum": ["Northern", "Southern", "Eastern", "Western"]}, "category": {"type": "string", "description": "Category of the historical events. Default is 'Culture'.", "enum": ["Wars", "Culture", "Politics", "Scientific", "Others"]}}, "required": ["century", "region"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"history_eu.fetch_events\">\n<params>\n<param name=\"century\" value=\"19\" type=\"integer\"/>\n<param name=\"region\" value=\"Europe\" type=\"string\"/>\n<param name=\"category\" value=\"Wars\" type=\"string\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "model_result_decoded": [{"history_eu.fetch_events": {"century": 19, "region": "Europe", "category": "Wars"}}], "possible_answer": [{"history_eu.fetch_events": {"century": [19], "region": ["Northern", "Southern", "Eastern", "Western"], "category": ["Wars"]}}]}
{"id": "simple_235", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'event': 'Treaty of Lisbon signing'. Expected one of ['Treaty of Lisbon', 'Signing of the Treaty of Lisbon', 'The signing of the Treaty of Lisbon']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_235", "question": [[{"role": "user", "content": "When was the signing of the Treaty of Lisbon?"}]], "function": [{"name": "get_event_date", "description": "Retrieve the date of a historical event.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The name of the historical event."}, "location": {"type": "string", "description": "Location where the event took place. Default to global if not specified."}}, "required": ["event"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"get_event_date\">\n<params>\n<param name=\"event\" value=\"Treaty of Lisbon signing\" type=\"string\"/>\n<param name=\"location\" value=\"Lisbon\" type=\"string\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "model_result_decoded": [{"get_event_date": {"event": "Treaty of Lisbon signing", "location": "Lisbon"}}], "possible_answer": [{"get_event_date": {"event": ["Treaty of Lisbon", "Signing of the Treaty of Lisbon", "The signing of the Treaty of Lisbon"], "location": ["", "Lisbon", "Lisbon, Portugal"]}}]}
{"id": "simple_244", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'work_title': 'Philosophi\u00e6 Naturalis Principia Mathematica'. Expected one of ['Law of Universal Gravitation', 'Universal Law of Gravitation', 'The law of universal gravitation']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_244", "question": [[{"role": "user", "content": "What year was the law of universal gravitation published by Isaac Newton?"}]], "function": [{"name": "publication_year.find", "description": "Fetches the year a particular scientific work was published.", "parameters": {"type": "dict", "properties": {"author": {"type": "string", "description": "Name of the author of the work."}, "work_title": {"type": "string", "description": "Title of the scientific work."}, "location": {"type": "string", "description": "Place of the publication, if known. Default to 'all'."}}, "required": ["author", "work_title"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"publication_year.find\">\n<params>\n<param name=\"author\" value=\"Isaac Newton\" type=\"string\"/>\n<param name=\"work_title\" value=\"Philosophi\u00e6 Naturalis Principia Mathematica\" type=\"string\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "model_result_decoded": [{"publication_year.find": {"author": "Isaac Newton", "work_title": "Philosophi\u00e6 Naturalis Principia Mathematica"}}], "possible_answer": [{"publication_year.find": {"author": ["Isaac Newton"], "work_title": ["Law of Universal Gravitation", "Universal Law of Gravitation", "The law of universal gravitation"], "location": ["", "all"]}}]}
{"id": "simple_249", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'include_people': True. Expected one of [False, '']."], "error_type": "value_error:others", "prompt": {"id": "simple_249", "question": [[{"role": "user", "content": "Tell me more about Christianity and its history till the 14th century"}]], "function": [{"name": "religion.history_info", "description": "Provides comprehensive historical details about a specified religion till a specified century.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "The name of the religion for which historical details are needed."}, "till_century": {"type": "integer", "description": "The century till which historical details are needed."}, "include_people": {"type": "boolean", "description": "To include influential people related to the religion during that time period, default is False"}}, "required": ["religion", "till_century"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"religion.history_info\">\n<params>\n<param name=\"religion\" value=\"Christianity\" type=\"string\"/>\n<param name=\"till_century\" value=\"14\" type=\"integer\"/>\n<param name=\"include_people\" value=\"true\" type=\"boolean\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "model_result_decoded": [{"religion.history_info": {"religion": "Christianity", "till_century": 14, "include_people": true}}], "possible_answer": [{"religion.history_info": {"religion": ["Christianity"], "till_century": [14], "include_people": [false, ""]}}]}
{"id": "simple_251", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'source': 'historical record'. Expected one of ['historical records']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_251", "question": [[{"role": "user", "content": "What is the earliest reference of Jesus Christ in history from historical record?"}]], "function": [{"name": "get_earliest_reference", "description": "Retrieve the earliest historical reference of a person.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the person."}, "source": {"type": "string", "enum": ["scriptures", "historical records"], "description": "Source to fetch the reference. Default is 'scriptures'"}}, "required": ["name"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"get_earliest_reference\">\n<params>\n<param name=\"name\" value=\"Jesus Christ\" type=\"string\"/>\n<param name=\"source\" value=\"historical record\" type=\"string\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "model_result_decoded": [{"get_earliest_reference": {"name": "Jesus Christ", "source": "historical record"}}], "possible_answer": [{"get_earliest_reference": {"name": ["Jesus Christ"], "source": ["historical records"]}}]}
{"id": "simple_260", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 4, column 25"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_260", "question": [[{"role": "user", "content": "Calculate how many gallons of paint is required to paint a wall with width of 20ft and height of 12ft, assuming 1 gallon covers approximately 350 sq.ft. Don't include window area of 15 sq.ft."}]], "function": [{"name": "paint_requirement.calculate", "description": "Calculate the amount of paint required to paint a given area. Account for coverage efficiency of the paint and exclusions (like windows).", "parameters": {"type": "dict", "properties": {"area": {"type": "dict", "properties": {"width": {"type": "integer", "description": "The width of the area to be painted in feet."}, "height": {"type": "integer", "description": "The height of the area to be painted in feet."}}, "description": "The area to be painted."}, "paint_coverage": {"type": "integer", "description": "Coverage area per gallon of the paint in square feet.", "default": 350}, "exclusion": {"type": "dict", "properties": {"type": {"type": "string", "description": "The type of the exclusion e.g window, door etc."}, "area": {"type": "integer", "description": "The area of the exclusion in square feet."}}, "description": "Area not to be painted. Default to not use any exclusion if not specified."}}, "required": ["area", "paint_coverage"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"paint_requirement.calculate\">\n<params>\n<param name=\"area\" value={\"width\": 20, \"height\": 12} type=\"dict\"/>\n<param name=\"paint_coverage\" value=350 type=\"integer\"/>\n<param name=\"exclusion\" value={\"area\": 15} type=\"dict\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "possible_answer": [{"paint_requirement.calculate": {"area": [{"width": [20], "height": [12]}], "paint_coverage": [350], "exclusion": [{"type": ["window"], "area": [15]}]}}]}
{"id": "simple_267", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'month': 'upcoming'. Expected one of ['']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_267", "question": [[{"role": "user", "content": "Find the top rated modern sculpture exhibition happening in New York in the upcoming month."}]], "function": [{"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state where the exhibition is held, e.g., New York City, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events if not specified."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold. Default is 'low'"}}, "required": ["location", "art_form"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"find_exhibition\">\n<params>\n<param name=\"location\" value=\"New York City, NY\" type=\"string\"/>\n<param name=\"art_form\" value=\"sculpture\" type=\"string\"/>\n<param name=\"month\" value=\"upcoming\" type=\"string\"/>\n<param name=\"user_ratings\" value=\"high\" type=\"string\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "model_result_decoded": [{"find_exhibition": {"location": "New York City, NY", "art_form": "sculpture", "month": "upcoming", "user_ratings": "high"}}], "possible_answer": [{"find_exhibition": {"location": ["New York City, NY"], "art_form": ["sculpture", "modern sculpture"], "month": [""], "user_ratings": ["high"]}}]}
{"id": "simple_277", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'information': ['opening hours', 'ticket prices']. Expected one of [['opening_hours', 'ticket_price'], ['ticket_price', 'opening_hours']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_277", "question": [[{"role": "user", "content": "Find the working hours and ticket price of The British Museum for this weekend, Jun.20,2023."}]], "function": [{"name": "museum_info", "description": "Get information about a museum including its opening hours and ticket prices for a specific date range.", "parameters": {"type": "dict", "properties": {"museum": {"type": "string", "description": "The name of the museum."}, "date": {"type": "string", "description": "The specific date for which information is needed, in the format of YYYY-MM-DD such as '2022-12-01'."}, "information": {"type": "array", "items": {"type": "string", "enum": ["opening_hours", "ticket_price", "address"]}, "description": "The type of information needed from the museum. This is optional and defaults to 'all' if not specified.", "default": "all"}}, "required": ["museum", "date"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"museum_info\">\n<params>\n<param name=\"museum\" value=\"The British Museum\" type=\"string\"/>\n<param name=\"date\" value=\"2023-06-20\" type=\"string\"/>\n<param name=\"information\" value=\"['opening hours', 'ticket prices']\" type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "model_result_decoded": [{"museum_info": {"museum": "The British Museum", "date": "2023-06-20", "information": ["opening hours", "ticket prices"]}}], "possible_answer": [{"museum_info": {"museum": ["The British Museum"], "date": ["2023-06-20"], "information": [["opening_hours", "ticket_price"], ["ticket_price", "opening_hours"]]}}]}
{"id": "simple_278", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'features': ['price', 'ratings']. Expected one of [['price', 'rating']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_278", "question": [[{"role": "user", "content": "Find me the average price and ratings of piano from Yamaha."}]], "function": [{"name": "get_instrument_details", "description": "Retrieve the average price and ratings of an instrument from a particular manufacturer.", "parameters": {"type": "dict", "properties": {"instrument": {"type": "string", "description": "The name of the instrument."}, "manufacturer": {"type": "string", "description": "The manufacturer of the instrument."}, "features": {"type": "array", "items": {"type": "string", "enum": ["price", "rating"]}, "description": "The features to retrieve about the instrument. Default is 'price'"}}, "required": ["instrument", "manufacturer"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"get_instrument_details\">\n<params>\n<param name=\"instrument\" value=\"piano\" type=\"string\"/>\n<param name=\"manufacturer\" value=\"Yamaha\" type=\"string\"/>\n<param name=\"features\" value=\"['price', 'ratings']\" type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "model_result_decoded": [{"get_instrument_details": {"instrument": "piano", "manufacturer": "Yamaha", "features": ["price", "ratings"]}}], "possible_answer": [{"get_instrument_details": {"instrument": ["piano"], "manufacturer": ["Yamaha"], "features": [["price", "rating"]]}}]}
{"id": "simple_282", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 5, column 26"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_282", "question": [[{"role": "user", "content": "Find a Yamaha flute with the specifications of open hole, C foot, and silver headjoint available for sale."}]], "function": [{"name": "find_flute", "description": "Locate a flute for sale based on specific requirements.", "parameters": {"type": "dict", "properties": {"brand": {"type": "string", "description": "The brand of the flute. Example, 'Yamaha'"}, "specs": {"type": "array", "items": {"type": "string", "enum": ["open hole", "C foot", "silver headjoint"]}, "description": "The specifications of the flute desired."}}, "required": ["brand", "specs"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"find_flute\">\n<params>\n<param name=\"brand\" value=\"Yamaha\" type=\"string\"/>\n<param name=\"specs\" value=[\"open hole\", \"C foot\", \"silver headjoint\"] type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "possible_answer": [{"find_flute": {"brand": ["Yamaha"], "specs": [["open hole", "C foot", "silver headjoint"]]}}]}
{"id": "simple_305", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'performance_indicator': ['goals', 'assists']. Expected one of [['Goals Scored', 'Assists Made']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_305", "question": [[{"role": "user", "content": "Calculate the overall goal and assist of soccer player Messi in La Liga 2020-2021 season"}]], "function": [{"name": "sports_stats.get_performance", "description": "Compute the performance score of a soccer player given his game stats for a specific tournament in a season.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "Name of the player."}, "tournament": {"type": "string", "description": "Name of the soccer tournament."}, "season": {"type": "string", "description": "Specific season in format 'YYYY-YYYY'."}, "performance_indicator": {"type": "array", "items": {"type": "string", "enum": ["Goals Scored", "Assists Made", "Saves Made", "Cards Received"]}, "description": "Array of performance indicators. Use as much as possible. Default to use all if not specified."}}, "required": ["player_name", "tournament", "season"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"sports_stats.get_performance\">\n<params>\n<param name=\"player_name\" value=\"Messi\" type=\"string\"/>\n<param name=\"tournament\" value=\"La Liga\" type=\"string\"/>\n<param name=\"season\" value=\"2020-2021\" type=\"string\"/>\n<param name=\"performance_indicator\" value=\"['goals', 'assists']\" type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "model_result_decoded": [{"sports_stats.get_performance": {"player_name": "Messi", "tournament": "La Liga", "season": "2020-2021", "performance_indicator": ["goals", "assists"]}}], "possible_answer": [{"sports_stats.get_performance": {"player_name": ["Messi", "Lionel Messi"], "tournament": ["La Liga"], "season": ["2020-2021"], "performance_indicator": [["Goals Scored", "Assists Made"]]}}]}
{"id": "simple_323", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'gender': 'woman'. Expected one of ['women']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_323", "question": [[{"role": "user", "content": "Who is ranked as the top player in woman tennis?"}]], "function": [{"name": "sports_ranking.get_top_player", "description": "Get the top player in a specific sport.", "parameters": {"type": "dict", "properties": {"sport": {"type": "string", "description": "The type of sport."}, "gender": {"type": "string", "description": "The gender of the sport category. Optional.", "default": "men"}}, "required": ["sport"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"sports_ranking.get_top_player\">\n<params>\n<param name=\"sport\" value=\"tennis\" type=\"string\"/>\n<param name=\"gender\" value=\"woman\" type=\"string\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "model_result_decoded": [{"sports_ranking.get_top_player": {"sport": "tennis", "gender": "woman"}}], "possible_answer": [{"sports_ranking.get_top_player": {"sport": ["tennis"], "gender": ["women"]}}]}
{"id": "simple_328", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 5, column 31"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_328", "question": [[{"role": "user", "content": "Find the rating and player count of the board game 'Ticket to Ride'."}]], "function": [{"name": "boardgame.get_info", "description": "Retrieve detailed information of a board game.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "Name of the board game."}, "parameters": {"type": "array", "items": {"type": "string", "enum": ["player count", "playing time", "age", "mechanics", "rating"]}, "description": "Game characteristics interested."}, "language": {"type": "string", "description": "The preferred language for the game information, default is English"}}, "required": ["name", "parameters"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"boardgame.get_info\">\n<params>\n<param name=\"name\" value=\"Ticket to Ride\" type=\"string\"/>\n<param name=\"parameters\" value=[\"rating\", \"player count\"] type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "possible_answer": [{"boardgame.get_info": {"name": ["Ticket to Ride"], "parameters": [["rating", "player count"], ["player count", "rating"]], "language": ["", "English"]}}]}
{"id": "simple_330", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'info_required': ['average_rating', 'age_range']. Expected one of [['average_review_rating', 'age_range']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_330", "question": [[{"role": "user", "content": "What's the average review rating and the age range for the board game 'Catan'?"}]], "function": [{"name": "board_game_info", "description": "Get the information about a board game from a database. ", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "Name of the board game."}, "info_required": {"type": "array", "items": {"type": "string", "enum": ["average_review_rating", "age_range", "number_of_players", "playing_time", "genre"]}, "description": "Array of information requested for the game."}}, "required": ["game_name", "info_required"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"board_game_info\">\n<params>\n<param name=\"game_name\" value=\"Catan\" type=\"string\"/>\n<param name=\"info_required\" value=\"['average_rating', 'age_range']\" type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "model_result_decoded": [{"board_game_info": {"game_name": "Catan", "info_required": ["average_rating", "age_range"]}}], "possible_answer": [{"board_game_info": {"game_name": ["Catan"], "info_required": [["average_review_rating", "age_range"]]}}]}
{"id": "simple_333", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'details': ['high_temperature', 'low_temperature', 'humidity', 'precipitation']. Expected one of [['high_low_temperature', 'humidity', 'precipitation']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_333", "question": [[{"role": "user", "content": "Find the high and low temperatures, humidity, and precipitation for London, United Kingdom for the next 3 days."}]], "function": [{"name": "detailed_weather_forecast", "description": "Retrieve a detailed weather forecast for a specific location and time frame, including high/low temperatures, humidity, and precipitation.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}, "details": {"type": "array", "items": {"type": "string", "enum": ["high_low_temperature", "humidity", "precipitation"]}, "description": "Specific weather details required in the forecast."}}, "required": ["location", "days", "details"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"detailed_weather_forecast\">\n<params>\n<param name=\"location\" value=\"London, United Kingdom\" type=\"string\"/>\n<param name=\"days\" value=\"3\" type=\"integer\"/>\n<param name=\"details\" value=\"['high_temperature', 'low_temperature', 'humidity', 'precipitation']\" type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "model_result_decoded": [{"detailed_weather_forecast": {"location": "London, United Kingdom", "days": 3, "details": ["high_temperature", "low_temperature", "humidity", "precipitation"]}}], "possible_answer": [{"detailed_weather_forecast": {"location": ["London, United Kingdom", "London"], "days": [3], "details": [["high_low_temperature", "humidity", "precipitation"]]}}]}
{"id": "simple_334", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 4, column 33"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_334", "question": [[{"role": "user", "content": "Check who is the winner in a game of blackjack given player having A and 10, dealer having 10 and 9. The Ace is considered 1."}]], "function": [{"name": "blackjack.check_winner", "description": "Checks and determines the winner in a game of blackjack.", "parameters": {"type": "dict", "properties": {"player_cards": {"type": "array", "items": {"type": "string"}, "description": "Cards held by the player."}, "dealer_cards": {"type": "array", "items": {"type": "string"}, "description": "Cards held by the dealer."}, "ace_value": {"type": "integer", "description": "The value considered for the ace card, can be either 1 or 11.", "default": 11}}, "required": ["player_cards", "dealer_cards"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"blackjack.check_winner\">\n<params>\n<param name=\"player_cards\" value=[\"A\", \"10\"] type=\"array\"/>\n<param name=\"dealer_cards\" value=[\"10\", \"9\"] type=\"array\"/>\n<param name=\"ace_value\" value=1 type=\"integer\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "possible_answer": [{"blackjack.check_winner": {"player_cards": [["A", "10"]], "dealer_cards": [["10", "9"]], "ace_value": [1]}}]}
{"id": "simple_340", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 5, column 26"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_340", "question": [[{"role": "user", "content": "Determine the winner in a Poker game with John having a Hand of 8\u2665, 10\u2665, J\u2665, Q\u2665, K\u2665 and Mike having 9\u2660, J\u2660, 10\u2660, Q\u2660, K\u2660."}]], "function": [{"name": "card_games.poker_determine_winner", "description": "Determines the winner in a game of Poker based on the cards in each players' hands.", "parameters": {"type": "dict", "properties": {"player1": {"type": "string", "description": "The first player's name."}, "hand1": {"type": "array", "items": {"type": "string"}, "description": "The list of cards (as strings) in first player's hand. E.g ['10\u2660', 'J\u2660']"}, "player2": {"type": "string", "description": "The second player's name."}, "hand2": {"type": "array", "items": {"type": "string"}, "description": "The list of cards (as strings) in second player's hand. E.g ['9\u2665', '10\u2665']"}}, "required": ["player1", "hand1", "player2", "hand2"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"card_games.poker_determine_winner\">\n<params>\n<param name=\"player1\" value=\"John\" type=\"string\"/>\n<param name=\"hand1\" value=[\"8\u2665\", \"10\u2665\", \"J\u2665\", \"Q\u2665\", \"K\u2665\"] type=\"array\"/>\n<param name=\"player2\" value=\"Mike\" type=\"string\"/>\n<param name=\"hand2\" value=[\"9\u2660\", \"J\u2660\", \"10\u2660\", \"Q\u2660\", \"K\u2660\"] type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "possible_answer": [{"card_games.poker_determine_winner": {"player1": ["John"], "hand1": [["8\u2665", "10\u2665", "J\u2665", "Q\u2665", "K\u2665"]], "player2": ["Mike"], "hand2": [["9\u2660", "J\u2660", "10\u2660", "Q\u2660", "K\u2660"]]}}]}
{"id": "simple_359", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 5, column 32"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_359", "question": [[{"role": "user", "content": "Give me a recipe for a vegetarian pasta with cheese for 2 servings."}]], "function": [{"name": "recipe_search", "description": "Search for a recipe given dietary restriction, ingredients, and number of servings.", "parameters": {"type": "dict", "properties": {"dietary_restriction": {"type": "string", "description": "The dietary restriction, e.g., 'Vegetarian'."}, "ingredients": {"type": "array", "items": {"type": "string"}, "description": "The list of ingredients."}, "servings": {"type": "integer", "description": "The number of servings the recipe should make"}}, "required": ["dietary_restriction", "ingredients", "servings"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"recipe_search\">\n<params>\n<param name=\"dietary_restriction\" value=\"Vegetarian\" type=\"string\"/>\n<param name=\"ingredients\" value=[\"pasta\", \"cheese\"] type=\"array\"/>\n<param name=\"servings\" value=\"2\" type=\"integer\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "possible_answer": [{"recipe_search": {"dietary_restriction": ["Vegetarian"], "ingredients": [["pasta", "cheese"]], "servings": [2]}}]}
{"id": "simple_369", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'categories': ['organic fruits', 'organic vegetables']. Expected one of [['Organic', 'Vegetables', 'Fruits'], ['Organic', 'Fruits', 'Vegetables'], ['Vegetables', 'Fruits', 'Organic'], ['Fruits', 'Vegetables', 'Organic'], ['Fruits', 'Organic', 'Vegetables'], ['Vegetables', 'Organic', 'Fruits']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_369", "question": [[{"role": "user", "content": "Find a grocery store near me with organic fruits and vegetables in Houston."}]], "function": [{"name": "grocery_store.find_nearby", "description": "Locate nearby grocery stores based on specific criteria like organic fruits and vegetables.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Houston, TX"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["Organic", "Vegetables", "Fruits", "Dairy", "Seafood", "Bakery"]}, "description": "Categories of items to be found in the grocery store. Default is all if not specified."}}, "required": ["location"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"grocery_store.find_nearby\">\n<params>\n<param name=\"location\" value=\"Houston, TX\" type=\"string\"/>\n<param name=\"categories\" value=\"['organic fruits', 'organic vegetables']\" type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "model_result_decoded": [{"grocery_store.find_nearby": {"location": "Houston, TX", "categories": ["organic fruits", "organic vegetables"]}}], "possible_answer": [{"grocery_store.find_nearby": {"location": ["Houston", "Houston, TX"], "categories": [["Organic", "Vegetables", "Fruits"], ["Organic", "Fruits", "Vegetables"], ["Vegetables", "Fruits", "Organic"], ["Fruits", "Vegetables", "Organic"], ["Fruits", "Organic", "Vegetables"], ["Vegetables", "Organic", "Fruits"]]}}]}
{"id": "simple_370", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'items': ['Olive Oil', 'Rice (5 lb bag)']. Expected one of [['olive oil', 'rice'], ['olive oil', 'bag of rice']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_370", "question": [[{"role": "user", "content": "Order three bottles of olive oil and a five pound bag of rice from Safeway in Palo Alto."}]], "function": [{"name": "safeway.order", "description": "Order specified items from a Safeway location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location of the Safeway store, e.g. Palo Alto, CA."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order."}, "quantity": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item in the order list."}}, "required": ["location", "items", "quantity"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"safeway.order\">\n<params>\n<param name=\"location\" value=\"Palo Alto, CA\" type=\"string\"/>\n<param name=\"items\" value=\"['Olive Oil', 'Rice (5 lb bag)']\" type=\"array\"/>\n<param name=\"quantity\" value=\"[3, 1]\" type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "model_result_decoded": [{"safeway.order": {"location": "Palo Alto, CA", "items": ["Olive Oil", "Rice (5 lb bag)"], "quantity": [3, 1]}}], "possible_answer": [{"safeway.order": {"location": ["Palo Alto", "Palo Alto, CA"], "items": [["olive oil", "rice"], ["olive oil", "bag of rice"]], "quantity": [[3, 1]]}}]}
{"id": "simple_373", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. malformed node or string on line 1: <ast.Name object at 0x7f7b185182e0>"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_373", "question": [[{"role": "user", "content": "I want to buy apples, rice, and 12 pack of bottled water from a Walmart near San Jose. Show me the product information and stock availability."}]], "function": [{"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified."}}, "required": ["loc", "product_list"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"walmart.purchase\">\n<params>\n<param name=\"loc\" value=\"San Jose\" type=\"string\"/>\n<param name=\"product_list\" value=\"['apples', 'rice', 'bottled water']\" type=\"array\"/>\n<param name=\"pack_size\" value=\"[null, null, 12]\" type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "possible_answer": [{"walmart.purchase": {"loc": ["San Jose", "San Jose, CA"], "product_list": [["apples", "rice", "bottled water"], ["apples", "rice", "water"]], "pack_size": [[1, 1, 12]]}}]}
{"id": "simple_374", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'information': ['protein', 'calories', 'carbs']. Expected one of [['Protein', 'Calories', 'Carbohydrates']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_374", "question": [[{"role": "user", "content": "Check the amount of protein, calories and carbs in an avocado from Walmart."}]], "function": [{"name": "grocery_info.nutritional_info", "description": "Retrieve nutritional information for a given food item from a particular store", "parameters": {"type": "dict", "properties": {"store": {"type": "string", "description": "The store where the item is available"}, "food": {"type": "string", "description": "Food item for which information is needed."}, "information": {"type": "array", "items": {"type": "string", "enum": ["Protein", "Calories", "Carbohydrates", "Fat", "Fiber"]}, "description": "Nutritional details required."}}, "required": ["store", "food", "information"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"grocery_info.nutritional_info\">\n<params>\n<param name=\"store\" value=\"Walmart\" type=\"string\"/>\n<param name=\"food\" value=\"avocado\" type=\"string\"/>\n<param name=\"information\" value=\"['protein', 'calories', 'carbs']\" type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "model_result_decoded": [{"grocery_info.nutritional_info": {"store": "Walmart", "food": "avocado", "information": ["protein", "calories", "carbs"]}}], "possible_answer": [{"grocery_info.nutritional_info": {"store": ["Walmart"], "food": ["avocado", "Avocado"], "information": [["Protein", "Calories", "Carbohydrates"]]}}]}
{"id": "simple_375", "model_name": "claude-3-7-sonnet-20250219", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'items': ['pumpkin', 'eggs']. Expected one of [['pumpkins', 'eggs'], ['pumpkin', 'dozen eggs']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_375", "question": [[{"role": "user", "content": "Check the total price for three pumpkins and two dozen eggs at Walmart."}]], "function": [{"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "dict", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional). Default to all if not specified."}}, "required": ["items", "quantities"]}}]}, "model_result_raw": "<TOOLCALL>\n<functions>\n<function name=\"walmart.check_price\">\n<params>\n<param name=\"items\" value=\"['pumpkin', 'eggs']\" type=\"array\"/>\n<param name=\"quantities\" value=\"[3, 24]\" type=\"array\"/>\n</params>\n</function>\n</functions>\n</TOOLCALL>", "model_result_decoded": [{"walmart.check_price": {"items": ["pumpkin", "eggs"], "quantities": [3, 24]}}], "possible_answer": [{"walmart.check_price": {"items": [["pumpkins", "eggs"], ["pumpkin", "dozen eggs"]], "quantities": [[3, 24], [3, 2]], "store_location": [""]}}]}