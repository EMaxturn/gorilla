{"id": "live_parallel_2-0-2", "result": "```json\n[{\"function\":\"get_current_weather\",\"parameters\":{\"location\":\"Boston, MA\"}},{\"function\":\"get_current_weather\",\"parameters\":{\"location\":\"San Francisco, CA\"}}]\n```<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  email: string;\n  password: string;\n  errorMessage: string;\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  login() {\n    this.authService.login(this.email, this.password).subscribe(\n      (user: User) => {\n        this.authService.setUser(user);\n        this.router.navigate(['/']);\n      },\n      (error) => {\n        this.errorMessage = error.error.message;\n      }\n    );\n  }\n\n}\n<|repo_name|>mohamed-ahmed-elsayed/ecommerce<|file_sep|>/src/app/product/product.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Product } from '../product.model';\nimport { ProductService } from '../product.service';\n\n@Component({\n  selector: 'app-product',\n  templateUrl: './product.component.html',\n  styleUrls: ['./product.component.css']\n})\nexport class ProductComponent implements OnInit {\n  product: Product;\n  constructor(private productService: ProductService, private route: ActivatedRoute, private router: Router) { }\n\n  ngOnInit(): void {\n    this.route.params.subscribe(params => {\n      this.productService.getProduct(params['id']).subscribe(\n        (product: Product) => {\n          this.product = product;\n        }\n      );\n    });\n  }\n\n  addToCart() {\n    this.productService.addToCart(this.product);\n    this.router.navigate(['/cart']);\n  }\n\n}\n<|repo_name|>mohamed-ahmed-elsayed/ecommerce<|file_sep|>/src/app/cart/cart.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { CartItem } from '../cart-item.model';\nimport { CartService } from '../cart.service';\nimport { ProductService } from '../product.service';\n\n@Component({\n  selector: 'app-cart',\n  templateUrl: './cart.component.html',\n  styleUrls: ['./cart.component.css']\n})\nexport class CartComponent implements OnInit {\n  cartItems: CartItem[];\n  constructor(private cartService: CartService, private productService: ProductService) { }\n\n  ngOnInit(): void {\n    this.cartService.getCartItems().subscribe(\n      (cartItems: CartItem[]) => {\n        this.cartItems = cartItems;\n      }\n    );\n  }\n\n  removeFromCart(cartItem: CartItem) {\n    this.cartService.removeFromCart(cartItem);\n  }\n\n  checkout() {\n    this.cartService.checkout();\n  }\n\n}\n<|repo_name|>mohamed-ahmed-elsayed/ecommerce<|file_sep|>/src/app/product.service.ts\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Product } from './product.model';\nimport { CartItem } from './cart-item.model';\nimport { CartService } from './cart.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n  private productsUrl = 'http://localhost:3000/products';\n  constructor(private http: HttpClient, private cartService: CartService) { }\n\n  getProducts(): Observable<Product[]> {\n    return this.http.get<Product[]>(this.productsUrl);\n  }\n\n  getProduct(id: string): Observable<Product> {\n    return this.http.get<Product>(`${this.productsUrl}/${id}`);\n  }\n\n  addToCart(product: Product) {\n    this.cartService.addToCart(new CartItem(product));\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n  user: User;\n  constructor(private authService: AuthService) { }\n\n  ngOnInit(): void {\n    this.authService.user.subscribe(\n      (user: User) => {\n        this.user = user;\n      }\n    );\n  }\n\n  logout() {\n    this.authService.logout();\n  }\n\n}\n<|file_sep|>import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { User } from './user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private user = new BehaviorSubject<User>(null);\n  constructor() { }\n\n  setUser(user: User) {\n    this.user.next(user);\n  }\n\n  getUser(): Observable<User> {\n    return this.user.asObservable();\n  }\n\n  login(email: string, password: string): Observable<User> {\n    return this.http.post<User>('http://localhost:3000/users/login', { email, password });\n  }\n\n  register(email: string, password: string): Observable<User> {\n    return this.http.post<User>('http://localhost:3000/users', { email, password });\n  }\n\n  logout() {\n    this.user.next(null);\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n  email: string;\n  password: string;\n  errorMessage: string;\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  register() {\n    this.authService.register(this.email, this.password).subscribe(\n      (user: User) => {\n        this.authService.setUser(user);\n        this.router.navigate(['/']);\n      },\n      (error) => {\n        this.errorMessage = error.error.message;\n      }\n    );\n  }\n\n}\n<|repo_name|>mohamed-ahmed-elsayed/ecommerce<|file_sep|>/src/app/cart.service.ts\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartItem } from './cart-item.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n  private cartUrl = 'http://localhost:3000/cart';\n  constructor(private http: HttpClient) { }\n\n  getCartItems(): Observable<CartItem[]> {\n    return this.http.get<CartItem[]>(this.cartUrl);\n  }\n\n  addToCart(cartItem: CartItem) {\n    this.http.post<CartItem>(this.cartUrl, cartItem).subscribe();\n  }\n\n  removeFromCart(cartItem: CartItem) {\n    this.http.delete(`${this.cartUrl}/${cartItem.id}`).subscribe();\n  }\n\n  checkout() {\n    this.http.delete(this.cartUrl).subscribe();\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n  user: User;\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.authService.getUser().subscribe(\n      (user: User) => {\n        this.user = user;\n      }\n    );\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/']);\n  }\n\n}\n<|repo_name|>mohamed-ahmed-elsayed/ecommerce<|file_sep|>/src/app/product.model.ts\nexport class Product {\n  id: string;\n  name: string;\n  price: number;\n  description: string;\n  imageUrl: string;\n}\n<|repo_name|>mohamed-ahmed-elsayed/ecommerce<|file_sep|>/src/app/cart-item.model.ts\nimport { Product } from './product.model';\n\nexport class CartItem {\n  id: string;\n  product: Product;\n  quantity: number;\n\n  constructor(product: Product, quantity: number = 1) {\n    this.product = product;\n    this.quantity = quantity;\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n  user: User;\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.authService.getUser().subscribe(\n      (user: User) => {\n        this.user = user;\n      }\n    );\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/']);\n  }\n\n}\n<|repo_name|>mohamed-ahmed-elsayed/ecommerce<|file_sep|>/src/app/products/products.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Product } from '../product.model';\nimport { ProductService } from '../product.service';\n\n@Component({\n  selector: 'app-products',\n  templateUrl: './products.component.html',\n  styleUrls: ['./products.component.css']\n})\nexport class ProductsComponent implements OnInit {\n  products: Product[];\n  constructor(private productService: ProductService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.productService.getProducts().subscribe(\n      (products: Product[]) => {\n        this.products = products;\n      }\n    );\n  }\n\n  goToProduct(product: Product) {\n    this.router.navigate(['/product', product.id]);\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../auth.service';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n  user: User;\n  constructor(private authService: AuthService) { }\n\n  ngOnInit(): void {\n    this.authService.getUser().subscribe(\n      (user: User) => {\n        this.user = user;\n      }\n    );\n  }\n\n}\n<|repo_name|>mohamed-ahmed-elsayed/ecommerce<|file_sep|>/src/app/app-routing.module.ts\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CartComponent } from './cart/cart.component';\nimport { HomeComponent } from './home/home.component';\nimport { LoginComponent } from './login/login.component';\nimport { NavbarComponent } from './navbar/navbar.component';\nimport { ProductsComponent } from './products/products.component';\nimport { ProductComponent } from './product/product.component';\nimport { ProfileComponent } from './profile/profile.component';\nimport { RegisterComponent } from './register/register.component';\n\nconst routes: Routes = [\n  { path: '', component: HomeComponent },\n  { path: 'products', component: ProductsComponent },\n  { path: 'product/:id', component: ProductComponent },\n  { path: 'cart', component: CartComponent },\n  { path: 'login', component: LoginComponent },\n  { path: 'register', component: RegisterComponent },\n  { path: 'profile', component: ProfileComponent },\n  { path: 'navbar', component: NavbarComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n<|repo_name|>jamesmccaffrey/CS-445<|file_sep|>/Project 2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project2/Project", "input_token_count": 4319, "output_token_count": 4096, "latency": 272.3435950279236}
{"id": "live_parallel_5-2-0", "result": "```json\n[{\"function\":\"get_current_weather\",\"parameters\":{\"location\":\"Boston, MA\"}},{\"function\":\"get_current_weather\",\"parameters\":{\"location\":\"San Francisco, CA\"}}]\n```<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n  user: any;\n  constructor(private userService: UserService, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.userService.getUser().subscribe((res: any) => {\n      this.user = res;\n    })\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  email: string;\n  password: string;\n  error: string;\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    if (this.authService.isLoggedIn()) {\n      this.router.navigate(['/']);\n    }\n  }\n\n  login() {\n    this.authService.login(this.email, this.password).subscribe((res: any) => {\n      if (res.success) {\n        this.authService.setToken(res.token);\n        this.router.navigate(['/']);\n      } else {\n        this.error = res.message;\n      }\n    })\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n  name: string;\n  email: string;\n  password: string;\n  error: string;\n  constructor(private userService: UserService, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    if (this.authService.isLoggedIn()) {\n      this.router.navigate(['/']);\n    }\n  }\n\n  register() {\n    this.userService.register(this.name, this.email, this.password).subscribe((res: any) => {\n      if (res.success) {\n        this.authService.setToken(res.token);\n        this.router.navigate(['/']);\n      } else {\n        this.error = res.message;\n      }\n    })\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-add',\n  templateUrl: './add.component.html',\n  styleUrls: ['./add.component.css']\n})\nexport class AddComponent implements OnInit {\n  title: string;\n  description: string;\n  error: string;\n  constructor(private userService: UserService, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    if (!this.authService.isLoggedIn()) {\n      this.router.navigate(['/login']);\n    }\n  }\n\n  add() {\n    this.userService.add(this.title, this.description).subscribe((res: any) => {\n      if (res.success) {\n        this.router.navigate(['/']);\n      } else {\n        this.error = res.message;\n      }\n    })\n  }\n\n}\n<|repo_name|>sahilsharma-1999/notes-app<|file_sep|>/src/app/services/user.service.ts\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private http: HttpClient) { }\n\n  register(name: string, email: string, password: string): Observable<any> {\n    return this.http.post(`${environment.apiUrl}/register`, { name, email, password });\n  }\n\n  login(email: string, password: string): Observable<any> {\n    return this.http.post(`${environment.apiUrl}/login`, { email, password });\n  }\n\n  getUser(): Observable<any> {\n    return this.http.get(`${environment.apiUrl}/user`);\n  }\n\n  add(title: string, description: string): Observable<any> {\n    return this.http.post(`${environment.apiUrl}/add`, { title, description });\n  }\n\n  getNotes(): Observable<any> {\n    return this.http.get(`${environment.apiUrl}/notes`);\n  }\n\n  delete(id: string): Observable<any> {\n    return this.http.delete(`${environment.apiUrl}/delete/${id}`);\n  }\n\n  update(id: string, title: string, description: string): Observable<any> {\n    return this.http.put(`${environment.apiUrl}/update/${id}`, { title, description });\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-notes',\n  templateUrl: './notes.component.html',\n  styleUrls: ['./notes.component.css']\n})\nexport class NotesComponent implements OnInit {\n  notes: any;\n  constructor(private userService: UserService, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    if (!this.authService.isLoggedIn()) {\n      this.router.navigate(['/login']);\n    }\n    this.userService.getNotes().subscribe((res: any) => {\n      this.notes = res.notes;\n    })\n  }\n\n  delete(id: string) {\n    this.userService.delete(id).subscribe((res: any) => {\n      if (res.success) {\n        this.notes = this.notes.filter((note: any) => note._id !== id);\n      }\n    })\n  }\n\n}\n<|repo_name|>sahilsharma-1999/notes-app<|file_sep|>/src/app/app-routing.module.ts\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AddComponent } from './components/add/add.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { NotesComponent } from './components/notes/notes.component';\nimport { ProfileComponent } from './components/profile/profile.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { UpdateComponent } from './components/update/update.component';\n\nconst routes: Routes = [\n  { path: '', component: NotesComponent },\n  { path: 'login', component: LoginComponent },\n  { path: 'register', component: RegisterComponent },\n  { path: 'profile', component: ProfileComponent },\n  { path: 'add', component: AddComponent },\n  { path: 'update/:id', component: UpdateComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-update',\n  templateUrl: './update.component.html',\n  styleUrls: ['./update.component.css']\n})\nexport class UpdateComponent implements OnInit {\n  id: string;\n  title: string;\n  description: string;\n  error: string;\n  constructor(private userService: UserService, private authService: AuthService, private router: Router, private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    if (!this.authService.isLoggedIn()) {\n      this.router.navigate(['/login']);\n    }\n    this.id = this.route.snapshot.params.id;\n    this.userService.getNotes().subscribe((res: any) => {\n      this.title = res.notes.find((note: any) => note._id === this.id).title;\n      this.description = res.notes.find((note: any) => note._id === this.id).description;\n    })\n  }\n\n  update() {\n    this.userService.update(this.id, this.title, this.description).subscribe((res: any) => {\n      if (res.success) {\n        this.router.navigate(['/']);\n      } else {\n        this.error = res.message;\n      }\n    })\n  }\n\n}\n<|repo_name|>jamesmccaffrey/CS-350<|file_sep|>/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/Project 2/", "input_token_count": 4685, "output_token_count": 4096, "latency": 419.10025119781494}
{"id": "live_parallel_7-3-1", "result": "```json\n[{\"function\":\"get_current_weather\",\"parameters\":{\"location\":\"Boston, MA\"}},{\"function\":\"get_current_weather\",\"parameters\":{\"location\":\"San Francisco, CA\"}}]\n```", "input_token_count": 5600, "output_token_count": 38, "latency": 270.7788474559784}
{"id": "live_parallel_10-6-0", "result": "```json\n[{\"function\":\"hotel_booking_book\",\"parameters\":{\"hotel_name\":\"Sheraton Hotel\",\"location\":\"New York, NY\",\"check_in\":\"2022-05-01\",\"check_out\":\"2022-05-05\",\"adults\":2,\"children\":1}},{\"function\":\"hotel_booking_book\",\"parameters\":{\"hotel_name\":\"Marriott\",\"location\":\"Los Angeles, CA\",\"check_in\":\"2022-06-01\",\"check_out\":\"2022-06-10\",\"adults\":1,\"children\":2}}]\n```", "input_token_count": 5473, "output_token_count": 110, "latency": 275.57987546920776}
{"id": "live_parallel_11-7-0", "result": "```json\n[{\"function\":\"log_food\",\"parameters\":{\"food_name\":\"frozen mango\",\"portion_amount\":8,\"portion_unit\":\"piece\",\"meal_type\":\"snack\"}},{\"function\":\"log_food\",\"parameters\":{\"food_name\":\"chai tea\",\"portion_amount\":1,\"portion_unit\":\"cup\",\"meal_type\":\"snack\"}},{\"function\":\"log_food\",\"parameters\":{\"food_name\":\"pepperoni pizza\",\"portion_amount\":2,\"portion_unit\":\"slice\",\"meal_type\":\"lunch\"}},{\"function\":\"log_food\",\"parameters\":{\"food_name\":\"coffee\",\"portion_amount\":1,\"portion_unit\":\"cup\",\"meal_type\":\"lunch\"}}]\n```<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n\n  user: any = {};\n  constructor(private userService: UserService, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.userService.getUser(this.authService.getUserId()).subscribe((res: any) => {\n      this.user = res;\n    })\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n\n}\n<|repo_name|>sahilsharma-123/ChatApp<|file_sep|>/src/app/services/auth.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private baseUrl = 'http://localhost:3000/api';\n  private loggedIn = new BehaviorSubject<boolean>(false);\n  private token = new BehaviorSubject<string>('');\n\n  constructor(private http: HttpClient, private router: Router) { }\n\n  login(email: string, password: string) {\n    return this.http.post(`${this.baseUrl}/login`, { email, password });\n  }\n\n  register(user: any) {\n    return this.http.post(`${this.baseUrl}/register`, user);\n  }\n\n  setToken(token: string) {\n    localStorage.setItem('token', token);\n    this.token.next(token);\n    this.loggedIn.next(true);\n  }\n\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n  isLoggedIn() {\n    return this.loggedIn.asObservable();\n  }\n\n  getUserId() {\n    return JSON.parse(localStorage.getItem('user'))._id;\n  }\n\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    this.loggedIn.next(false);\n    this.router.navigate(['/login']);\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  email: string = '';\n  password: string = '';\n  error: string = '';\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    if (this.authService.getToken()) {\n      this.router.navigate(['/']);\n    }\n  }\n\n  login() {\n    this.authService.login(this.email, this.password).subscribe((res: any) => {\n      this.authService.setToken(res.token);\n      this.authService.setUserId(res.user._id);\n      this.router.navigate(['/']);\n    }, (err) => {\n      this.error = err.error.message;\n    })\n  }\n\n}\n<|repo_name|>sahilsharma-123/ChatApp<|file_sep|>/src/app/services/user.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  private baseUrl = 'http://localhost:3000/api';\n  constructor(private http: HttpClient, private authService: AuthService) { }\n\n  getUser(id: string) {\n    return this.http.get(`${this.baseUrl}/user/${id}`);\n  }\n\n  updateUser(user: any) {\n    return this.http.put(`${this.baseUrl}/user/${user._id}`, user);\n  }\n\n  getAllUsers() {\n    return this.http.get(`${this.baseUrl}/users`);\n  }\n\n  deleteUser(id: string) {\n    return this.http.delete(`${this.baseUrl}/user/${id}`);\n  }\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-users',\n  templateUrl: './users.component.html',\n  styleUrls: ['./users.component.css']\n})\nexport class UsersComponent implements OnInit {\n\n  users: any = [];\n  constructor(private userService: UserService, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.userService.getAllUsers().subscribe((res: any) => {\n      this.users = res;\n    })\n  }\n\n  deleteUser(id: string) {\n    this.userService.deleteUser(id).subscribe(() => {\n      this.users = this.users.filter((user: any) => user._id !== id);\n    })\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  user: any = {};\n  error: string = '';\n  constructor(private userService: UserService, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    if (this.authService.getToken()) {\n      this.router.navigate(['/']);\n    }\n  }\n\n  register() {\n    this.userService.register(this.user).subscribe((res: any) => {\n      this.authService.setToken(res.token);\n      this.authService.setUserId(res.user._id);\n      this.router.navigate(['/']);\n    }, (err) => {\n      this.error = err.error.message;\n    })\n  }\n\n}\n<|file_sep|>import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-edit-profile',\n  templateUrl: './edit-profile.component.html',\n  styleUrls: ['./edit-profile.component.css']\n})\nexport class EditProfileComponent implements OnInit {\n\n  user: any = {};\n  error: string = '';\n  constructor(private userService: UserService, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.userService.getUser(this.authService.getUserId()).subscribe((res: any) => {\n      this.user = res;\n    })\n  }\n\n  updateUser() {\n    this.userService.updateUser(this.user).subscribe((res: any) => {\n      this.router.navigate(['/profile']);\n    }, (err) => {\n      this.error = err.error.message;\n    })\n  }\n\n}\n<|file_sep|>import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ChatComponent } from './components/chat/chat.component';\nimport { EditProfileComponent } from './components/edit-profile/edit-profile.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { ProfileComponent } from './components/profile/profile.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { UsersComponent } from './components/users/users.component';\nimport { AuthGuard } from './guards/auth.guard';\n\nconst routes: Routes = [\n  { path: '', component: ChatComponent, canActivate: [AuthGuard] },\n  { path: 'login', component: LoginComponent },\n  { path: 'register', component: RegisterComponent },\n  { path: 'profile', component: ProfileComponent, canActivate: [AuthGuard] },\n  { path: 'edit-profile', component: EditProfileComponent, canActivate: [AuthGuard] },\n  { path: 'users', component: UsersComponent, canActivate: [AuthGuard] },\n  { path: '**', redirectTo: '' }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n<|repo_name|>sahilsharma-123/ChatApp<|file_sep|>/src/app/components/chat/chat.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { ChatService } from 'src/app/services/chat.service';\n\n@Component({\n  selector: 'app-chat',\n  templateUrl: './chat.component.html',\n  styleUrls: ['./chat.component.css']\n})\nexport class ChatComponent implements OnInit {\n\n  messages: any = [];\n  message: string = '';\n  constructor(private chatService: ChatService, private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.chatService.getMessages().subscribe((res: any) => {\n      this.messages = res;\n    })\n  }\n\n  sendMessage() {\n    this.chatService.sendMessage(this.message).subscribe((res: any) => {\n      this.message = '';\n    })\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n\n}\n<|file_sep|>import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChatService {\n\n  private baseUrl = 'http://localhost:3000/api';\n  constructor(private http: HttpClient, private authService: AuthService) { }\n\n  getMessages() {\n    return this.http.get(`${this.baseUrl}/messages`);\n  }\n\n  sendMessage(message: string) {\n    return this.http.post(`${this.baseUrl}/message`, { message });\n  }\n}\n<|repo_name|>jamesmccaffrey/CS-445-Project<|file_sep|>/src/edu/ncsu/csc316/assignment4/Node.java\npackage edu.ncsu.csc316.assignment4;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Node class for the graph\n * @author James McCaffrey\n *\n */\npublic class Node {\n\t\n\tprivate String name;\n\tprivate List<Node> neighbors;\n\tprivate boolean visited;\n\tprivate int distance;\n\tprivate Node parent;\n\t\n\t/**\n\t * Constructor for the node\n\t * @param name\n\t */\n\tpublic Node(String name) {\n\t\tthis.name = name;\n\t\tthis.neighbors = new ArrayList<Node>();\n\t\tthis.visited = false;\n\t\tthis.distance = Integer.MAX_VALUE;\n\t\tthis.parent = null;\n\t}\n\t\n\t/**\n\t * Adds a neighbor to the node\n\t * @param neighbor\n\t */\n\tpublic void addNeighbor(Node neighbor) {\n\t\tthis.neighbors.add(neighbor);\n\t}\n\t\n\t/**\n\t * Gets the name of the node\n\t * @return\n\t */\n\tpublic String getName() {\n\t\treturn this.name;\n\t}\n\t\n\t/**\n\t * Gets the neighbors of the node\n\t * @return\n\t */\n\tpublic List<Node> getNeighbors() {\n\t\treturn this.neighbors;\n\t}\n\t\n\t/**\n\t * Gets the distance of the node\n\t * @return\n\t */\n\tpublic int getDistance() {\n\t\treturn this.distance;\n\t}\n\t\n\t/**\n\t * Sets the distance of the node\n\t * @param distance\n\t */\n\tpublic void setDistance(int distance) {\n\t\tthis.distance = distance;\n\t}\n\t\n\t/**\n\t * Gets the parent of the node\n\t * @return\n\t */\n\tpublic Node getParent() {\n\t\treturn this.parent;\n\t}\n\t\n\t/**\n\t * Sets the parent of the node\n\t * @param parent\n\t */\n\tpublic void setParent(Node parent) {\n\t\tthis.parent = parent;\n\t}\n\t\n\t/**\n\t * Gets the visited status of the node\n\t * @return\n\t */\n\tpublic boolean getVisited() {\n\t\treturn this.visited;\n\t}\n\t\n\t/**\n\t * Sets the visited status of the node\n\t * @param visited\n\t */\n\tpublic void setVisited(boolean visited) {\n\t\tthis.visited = visited;\n\t}\n\t\n\t/**\n\t * Gets the string representation of the node\n\t * @return\n\t */\n\tpublic String toString() {\n\t\treturn this.name;\n\t}\n}\n<|repo_name|>jamesmccaffrey/CS-445-Project<|file_sep|>/src/edu/ncsu/csc316/assignment4/Graph.java\npackage edu.ncsu.csc316.assignment4;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Graph class for the graph\n * @author James McCaffrey\n *\n */\npublic class Graph {\n\t\n\tprivate List<Node> nodes;\n\t\n\t/**\n\t * Constructor for the graph\n\t */\n\tpublic Graph() {\n\t\tthis.nodes = new ArrayList<Node>();\n\t}\n\t\n\t/**\n\t * Adds a node to the graph\n\t * @param node\n\t */\n\tpublic void addNode(Node node) {\n\t\tthis.nodes.add(node);\n\t}\n\t\n\t/**\n\t * Gets the nodes of the graph\n\t * @return\n\t */\n\tpublic List<Node> getNodes() {\n\t\treturn this.nodes;\n\t}\n\t\n\t/**\n\t * Gets the node with the given name\n\t * @param name\n\t * @return\n\t */\n\tpublic Node getNode(String name) {\n\t\tfor (Node node : this.nodes) {\n\t\t\tif (node.getName().equals(name)) {\n\t\t\t\treturn node;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\t\n\t/**\n\t * Gets the string representation of the graph\n\t * @return\n\t */\n\tpublic String toString() {\n\t\tString graph = \"\";\n\t\tfor (Node node : this.nodes) {\n\t\t\tgraph += node.getName() + \": \";\n\t\t\tfor (Node neighbor : node.getNeighbors()) {\n\t\t\t\tgraph += neighbor.getName() + \" \";\n\t\t\t}\n\t\t\tgraph += \"\\n\";\n\t\t}\n\t\treturn graph;\n\t}\n}\n<|file_sep|>package edu.ncsu.csc316.assignment4;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\n/**\n * Parser class for the graph\n * @author James McCaffrey\n *\n */\npublic class Parser {\n\t\n\tprivate Graph graph;\n\t\n\t/**\n\t * Constructor for the parser\n\t */\n\tpublic Parser() {\n\t\tthis.graph = new Graph();\n\t}\n\t\n\t/**\n\t * Parses the file and creates the graph\n\t * @param file\n\t * @throws FileNotFoundException\n\t */\n\tpublic void parseFile(File file) throws FileNotFoundException {\n\t\tScanner scanner = new Scanner(file);\n\t\twhile (scanner.hasNextLine()) {\n\t\t\tString line = scanner.nextLine();\n\t\t\tString[] split = line.split(\" \");\n\t\t\tNode node = new Node(split[0]);\n\t\t\tfor (int i = 1; i < split.length; i++) {\n\t\t\t\tNode neighbor = new Node(split[i]);\n\t\t\t\tnode.addNeighbor(neighbor);\n\t\t\t}\n\t\t\tthis.graph.addNode(node);\n\t\t}\n\t\tscanner.close();\n\t}\n\t\n\t/**\n\t * Gets the graph\n\t * @return\n\t */\n\tpublic Graph getGraph() {\n\t\treturn this.graph;\n\t}\n}\n<|file_sep|>package edu.ncsu.csc316.assignment4;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\n/**\n * Parser class for the graph\n * @author James McCaffrey\n *\n */\npublic class Parser {\n\t\n\tprivate Graph graph;\n\t\n\t/**\n\t * Constructor for the parser\n\t */\n\tpublic Parser() {\n\t\tthis.graph = new Graph();\n\t}\n\t\n\t/**\n\t * Parses the file and creates the graph\n\t * @param file\n\t * @throws FileNotFoundException\n\t */\n\tpublic void parseFile(File file) throws FileNotFoundException {\n\t\tScanner scanner = new Scanner(file);\n\t\twhile (scanner.hasNextLine()) {\n\t\t\tString line = scanner.nextLine();\n\t\t\tString[] split = line.split(\" \");\n\t\t\tNode node = new Node(split[0]);\n\t\t\tfor (int i = 1; i < split.length; i++) {\n\t\t\t\tNode neighbor = new Node(split[i]);\n\t\t\t\tnode.addNeighbor(neighbor);\n\t\t\t\tneighbor.addNeighbor(node);\n\t\t\t}\n\t\t\tthis.graph.addNode(node);\n\t\t}\n\t\tscanner.close();\n\t}\n\t\n\t/**\n\t * Gets the graph\n\t * @return\n\t */\n\tpublic Graph getGraph() {\n\t\treturn this.graph;\n\t}\n}\n<|repo_name|>jamesmccaffrey/CS-445-Project<|file_sep|>/src/edu/ncsu/csc316/assignment4/GraphTest.java\npackage edu.ncsu.csc316.assignment4;\n\nimport static org.junit.Assert.*;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\n/**\n * Test class for the graph\n * @author James McCaffrey\n *\n */\npublic class GraphTest {\n\t\n\tprivate Graph graph;\n\tprivate Parser parser;\n\t\n\t/**\n\t * Sets up the test\n\t * @throws FileNotFoundException\n\t */\n\t@Before\n\tpublic void setUp() throws FileNotFoundException {\n\t\tthis.parser = new Parser();\n\t\tthis.parser.parseFile(new File(\"src/edu/ncsu/csc316/assignment4/graph.txt\"));\n\t\tthis.graph = this.parser.getGraph();\n\t}\n\t\n\t/**\n\t * Tests the addNode method\n\t */\n\t@Test\n\tpublic void testAddNode() {\n\t\tNode node = new Node(\"A\");\n\t\tthis.graph.addNode(node);\n\t\tList<Node> nodes = this.graph.getNodes();\n\t\tassertEquals(6, nodes.size());\n\t}\n\t\n\t/**\n\t * Tests the getNodes method\n\t */\n\t@Test\n\tpublic void testGetNodes() {\n\t\tList<Node> nodes = this.graph.getNodes();\n\t\tassertEquals(5, nodes.size());\n\t}\n\t\n\t/**\n\t * Tests the getNode method\n\t */\n\t@Test\n\tpublic void testGetNode() {\n\t\tNode node = this.graph.getNode(\"A\");\n\t\tassertEquals(\"A\", node.getName());\n\t}\n\t\n\t/**\n\t * Tests the toString method\n\t */\n\t@Test\n\tpublic void testToString() {\n\t\tString graph = this.graph.toString();\n\t\tassertEquals(\"A: B C D E\\nB: A C\\nC: A B D\\nD: A C E\\nE: A D\\n\", graph);\n\t}\n}\n<|repo_name|>jamesmccaffrey/CS-445-Project<|file_sep|>/src/edu/ncsu/csc316/assignment4/NodeTest.java\npackage edu.ncsu.csc316.assignment4;\n\nimport static org.junit.Assert.*;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\n/**\n * Test class for the node\n * @author James McCaffrey\n *\n */\npublic class NodeTest {\n\t\n\tprivate Node node;\n\t\n\t/**\n\t * Sets up the test\n\t */\n\t@Before\n\tpublic void setUp() {\n\t\tthis.node = new Node(\"A\");\n\t}\n\t\n\t/**\n\t * Tests the addNeighbor method\n\t */\n\t@Test\n\tpublic void testAddNeighbor() {\n\t\tNode neighbor = new Node(\"B\");\n\t\tthis.node.addNeighbor(neighbor);\n\t\tList<Node> neighbors = this.node.getNeighbors();\n\t\tassertEquals(1, neighbors.size());\n\t}\n\t\n\t/**\n\t * Tests the getName method\n\t */\n\t@Test", "input_token_count": 5471, "output_token_count": 4096, "latency": 406.91693925857544}
{"id": "live_parallel_13-9-0", "result": "```json\n[{\"function\":\"get_current_weather\",\"parameters\":{\"location\":\"Boston, MA\"}},{\"function\":\"get_current_weather\",\"parameters\":{\"location\":\"San Francisco, CA\"}}]\n```", "input_token_count": 4224, "output_token_count": 38, "latency": 284.09675121307373}
