{"accuracy": 0.7666666666666667, "correct_count": 23, "total_count": 30}
{"id": "simple_96", "model_name": "meta-llama_llama-4-maverick-17b-128e-instruct-fp8-novita", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. mismatched tag: line 1, column 192"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_96", "question": [[{"role": "user", "content": "Find records in database in user table where age is greater than 25 and job is 'engineer'."}]], "function": [{"name": "database.query", "description": "Query the database based on certain conditions.", "parameters": {"type": "dict", "properties": {"table": {"type": "string", "description": "Name of the table to query."}, "conditions": {"type": "array", "items": {"type": "dict", "properties": {"field": {"type": "string", "description": "The field to apply the condition."}, "operation": {"type": "string", "description": "The operation to be performed.", "enum": ["<", ">", "=", ">=", "<="]}, "value": {"type": "string", "description": "The value to be compared."}}, "required": ["field", "operation", "value"]}, "description": "Conditions for the query."}}, "required": ["table", "conditions"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"database.query\"><params><param name=\"table\" value=\"user\" type=\"string\"/><param name=\"conditions\" value=\"[('age', '>', 25), ('job', '=', 'engineer')]\" type=\"list\"/></function></functions></TOOLCALL>", "possible_answer": [{"database.query": {"table": ["user"], "conditions": [[{"field": ["age"], "operation": [">"], "value": ["25"]}, {"field": ["job"], "operation": ["="], "value": ["engineer"]}]]}}]}
{"id": "simple_105", "model_name": "meta-llama_llama-4-maverick-17b-128e-instruct-fp8-novita", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'base'. Expected type integer, got str. Parameter value: '3'."], "error_type": "type_error:simple", "prompt": {"id": "simple_105", "question": [[{"role": "user", "content": "Calculate the power of 3 raised to the power 4."}]], "function": [{"name": "math.power", "description": "Calculate the power of one number raised to another.", "parameters": {"type": "dict", "properties": {"base": {"type": "integer", "description": "The base number."}, "exponent": {"type": "integer", "description": "The exponent."}, "mod": {"type": "integer", "description": "The modulus. Default is 1. Calculates pow(base, exponent) % mod when provided."}}, "required": ["base", "exponent"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"math.power\"><params><param name=\"base\" value=\"3\" type=\"int\"/><param name=\"exponent\" value=\"4\" type=\"int\"/><param name=\"mod\" value=\"1\" type=\"int\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"math.power": {"base": "3", "exponent": "4", "mod": "1"}}], "possible_answer": [{"math.power": {"base": [3], "exponent": [4], "mod": ["", 1]}}]}
{"id": "simple_208", "model_name": "meta-llama_llama-4-maverick-17b-128e-instruct-fp8-novita", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'avoid'. Expected type array, got str. Parameter value: \"['highways', 'tolls']\"."], "error_type": "type_error:simple", "prompt": {"id": "simple_208", "question": [[{"role": "user", "content": "Get me the directions from New York to Los Angeles avoiding highways and toll roads."}]], "function": [{"name": "map_service.get_directions", "description": "Retrieve directions from a starting location to an ending location, including options for route preferences.", "parameters": {"type": "dict", "properties": {"start": {"type": "string", "description": "Starting location for the route."}, "end": {"type": "string", "description": "Ending location for the route."}, "avoid": {"type": "array", "items": {"type": "string", "enum": ["tolls", "highways", "ferries"]}, "description": "Route features to avoid. Default is ['highways', 'ferries']"}}, "required": ["start", "end"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"map_service.get_directions\"><params><param name=\"start\" value=\"New York\" type=\"string\"/><param name=\"end\" value=\"Los Angeles\" type=\"string\"/><param name=\"avoid\" value=\"['highways', 'tolls']\" type=\"list\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"map_service.get_directions": {"start": "New York", "end": "Los Angeles", "avoid": "['highways', 'tolls']"}}], "possible_answer": [{"map_service.get_directions": {"start": ["New York", "NYC"], "end": ["Los Angeles", "LA"], "avoid": [["highways", "tolls"], ["tolls", "highways"]]}}]}
{"id": "simple_297", "model_name": "meta-llama_llama-4-maverick-17b-128e-instruct-fp8-novita", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'progression'. Expected type array, got str. Parameter value: \"['I', 'V', 'vi', 'IV']\"."], "error_type": "type_error:simple", "prompt": {"id": "simple_297", "question": [[{"role": "user", "content": "music.theory.chordProgression(progression=['I', 'V', 'vi', 'IV'])"}]], "function": [{"name": "music.theory.chordProgression", "description": "Identifies a potential key signature for the given chord progression.", "parameters": {"type": "dict", "properties": {"progression": {"type": "array", "items": {"type": "string"}, "description": "The chord progression in Roman numerals. Eg: ['I', 'V', 'vi', 'IV']."}, "returnAllPossibleKeys": {"type": "boolean", "description": "Flag indicating if the function should return all possible key signatures that fit the chord progression. If false, the function will return the first valid key it finds. Default is false."}, "assumeMajor": {"type": "boolean", "description": "Assumption if the key signature is Major. If true, the function will assume the key signature to be major and otherwise minor. Default is true."}}, "required": ["progression"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"music.theory.chordProgression\"><params><param name=\"progression\" value=\"['I', 'V', 'vi', 'IV']\" type=\"list\"/><param name=\"returnAllPossibleKeys\" value=\"False\" type=\"boolean\"/><param name=\"assumeMajor\" value=\"True\" type=\"boolean\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"music.theory.chordProgression": {"progression": "['I', 'V', 'vi', 'IV']", "returnAllPossibleKeys": false, "assumeMajor": true}}], "possible_answer": [{"music.theory.chordProgression": {"progression": [["I", "V", "vi", "IV"]], "returnAllPossibleKeys": [true, false, ""], "assumeMajor": [true, false, ""]}}]}
{"id": "simple_327", "model_name": "meta-llama_llama-4-maverick-17b-128e-instruct-fp8-novita", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'num_of_games'. Expected type integer, got str. Parameter value: '6'."], "error_type": "type_error:simple", "prompt": {"id": "simple_327", "question": [[{"role": "user", "content": "Give me the schedule of Manchester United for the next 6 games in Premier League."}]], "function": [{"name": "sports_team.get_schedule", "description": "Fetches the schedule of the specified sports team for the specified number of games in the given league.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "num_of_games": {"type": "integer", "description": "Number of games for which to fetch the schedule."}, "league": {"type": "string", "description": "The name of the sports league. If not provided, the function will fetch the schedule for all games, regardless of the league."}, "location": {"type": "string", "description": "Optional. The city or venue where games are to be held. If not provided, default that all venues will be considered."}}, "required": ["team_name", "num_of_games", "league"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"sports_team.get_schedule\"><params><param name=\"team_name\" value=\"Manchester United\" type=\"str\"/><param name=\"num_of_games\" value=\"6\" type=\"int\"/><param name=\"league\" value=\"Premier League\" type=\"str\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"sports_team.get_schedule": {"team_name": "Manchester United", "num_of_games": "6", "league": "Premier League"}}], "possible_answer": [{"sports_team.get_schedule": {"team_name": ["Manchester United", "Man United", "Man U", "MUFC"], "num_of_games": [6], "league": ["Premier League"], "location": [""]}}]}
{"id": "simple_328", "model_name": "meta-llama_llama-4-maverick-17b-128e-instruct-fp8-novita", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'parameters'. Expected type array, got str. Parameter value: \"['rating', 'player_count']\"."], "error_type": "type_error:simple", "prompt": {"id": "simple_328", "question": [[{"role": "user", "content": "Find the rating and player count of the board game 'Ticket to Ride'."}]], "function": [{"name": "boardgame.get_info", "description": "Retrieve detailed information of a board game.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "Name of the board game."}, "parameters": {"type": "array", "items": {"type": "string", "enum": ["player count", "playing time", "age", "mechanics", "rating"]}, "description": "Game characteristics interested."}, "language": {"type": "string", "description": "The preferred language for the game information, default is English"}}, "required": ["name", "parameters"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"boardgame.get_info\"><params><param name=\"name\" value=\"Ticket to Ride\" type=\"string\"/><param name=\"parameters\" value=\"['rating', 'player_count']\" type=\"list\"/><param name=\"language\" value=\"English\" type=\"string\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"boardgame.get_info": {"name": "Ticket to Ride", "parameters": "['rating', 'player_count']", "language": "English"}}], "possible_answer": [{"boardgame.get_info": {"name": ["Ticket to Ride"], "parameters": [["rating", "player count"], ["player count", "rating"]], "language": ["", "English"]}}]}
{"id": "simple_380", "model_name": "meta-llama_llama-4-maverick-17b-128e-instruct-fp8-novita", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'preferences'. Expected type array, got str. Parameter value: \"['pet friendly']\"."], "error_type": "type_error:simple", "prompt": {"id": "simple_380", "question": [[{"role": "user", "content": "Book a single room at a pet friendly hotel near Manhattan, New York for 3 nights starting from March 10th, 2023."}]], "function": [{"name": "hotel_booking", "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you want to book the hotel."}, "room_type": {"type": "string", "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."}, "duration": {"type": "integer", "description": "The number of nights you want to book the hotel for."}, "start_date": {"type": "string", "description": "The date when your stay begins."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["pet_friendly", "gym", "swimming_pool", "free_breakfast", "parking"]}, "description": "Optional preferences of stay at the hotel. Default to use all if not specified."}}, "required": ["location", "room_type", "duration", "start_date"]}}]}, "model_result_raw": "<TOOLCALL><functions><function name=\"hotel_booking\"><params><param name=\"location\" value=\"Manhattan, New York\" type=\"string\"/><param name=\"room_type\" value=\"single\" type=\"string\"/><param name=\"duration\" value=\"3\" type=\"integer\"/><param name=\"start_date\" value=\"2023-03-10\" type=\"string\"/><param name=\"preferences\" value=\"['pet friendly']\" type=\"list\"/></params></function></functions></TOOLCALL>", "model_result_decoded": [{"hotel_booking": {"location": "Manhattan, New York", "room_type": "single", "duration": 3, "start_date": "2023-03-10", "preferences": "['pet friendly']"}}], "possible_answer": [{"hotel_booking": {"location": ["Manhattan, New York", "Manhattan, NY", "NYC", "New York City"], "room_type": ["single"], "duration": [3], "start_date": ["2023-03-10", "03/10/2023", "Mar.10,2023", "March 10th, 2023", "March 10th,2023", "March10th, 2023", "March10th,2023"], "preferences": [["pet_friendly"]]}}]}