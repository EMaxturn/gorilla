{"id": "simple_19", "result": "math.gcd(40, 50)\n", "input_token_count": 382, "output_token_count": 13, "latency": 0.17994260787963867}
{"id": "simple_25", "result": "calculate_final_velocity<functions><calculate_final_velocity><height=\"150\"><initial_velocity=\"0\"><gravity=\"9.81\"></functions>", "input_token_count": 462, "output_token_count": 39, "latency": 0.4108588695526123}
{"id": "simple_58", "result": "<functions>\n  <function>\n    <function name=\"cell_biology.cell_biology_function_lookup\">\n      <param name=\"molecule\" type=\"string\">The molecule of interest.</param>\n      <param name=\"organelle\" type=\"string\">The organelle of interest.</param>\n      <param name=\"specific_function\" type=\"bool\">If set to true, a specific function of the molecule within the organelle will be provided.</param>\n    </function>\n  </functions>", "input_token_count": 420, "output_token_count": 112, "latency": 0.7848460674285889}
{"id": "simple_94", "result": "```python\nUpdate my customer information with user id 43523 'name':'John Doe', 'email':'johndoe@email.com' in the database.\n```", "input_token_count": 431, "output_token_count": 41, "latency": 0.4192988872528076}
{"id": "simple_96", "result": "```python\nfind_records<functions><database.query TargTable=\"user\", conditions=\"age > 25 and job == 'engineer'\"></functions>\n```", "input_token_count": 389, "output_token_count": 36, "latency": 0.3688039779663086}
{"id": "simple_105", "result": "math.pow(3, 4) % 10\n", "input_token_count": 404, "output_token_count": 15, "latency": 0.20225882530212402}
{"id": "simple_113", "result": "<functions>\nprobability.dice_roll(desired_number=6, number_of_rolls=2)\n", "input_token_count": 442, "output_token_count": 26, "latency": 0.2909047603607178}
{"id": "simple_134", "result": "```python\nPredict the total expected profit of stocks XYZ in 5 years given I have invested $5000 and annual return rate is 7%.\n```", "input_token_count": 426, "output_token_count": 35, "latency": 0.36359190940856934}
{"id": "simple_155", "result": "```python\nCalculate the future value of my investment of $1000 with an annual interest rate of 5% over 2 years.\ncalculate_future_value(1000, 0.05, 2)\n```", "input_token_count": 451, "output_token_count": 54, "latency": 0.4774632453918457}
{"id": "simple_165", "result": "```python\nRetrieve cases from 2020 about theft crimes in Los Angeles, California:\n```", "input_token_count": 411, "output_token_count": 23, "latency": 0.2693619728088379}
{"id": "simple_168", "result": "```python\nSearch for ongoing lawsuits related to the company 'Google' filed after January 1, 2021 in California.\n```", "input_token_count": 457, "output_token_count": 31, "latency": 0.3325083255767822}
{"id": "simple_174", "result": "```python\nget_top_cases(\"constitutional law\", 10, \"China\")\n```", "input_token_count": 437, "output_token_count": 22, "latency": 0.25568532943725586}
{"id": "simple_179", "result": "```python\nFind the latest court case between Apple and Samsung occured in USA:\n```", "input_token_count": 410, "output_token_count": 19, "latency": 0.23392605781555176}
{"id": "simple_181", "result": "<functions>\n  get_lawsuit_details(\"123456-ABC\", \"Los Angeles\", \"True\")\n</functions>", "input_token_count": 431, "output_token_count": 33, "latency": 0.3344767093658447}
{"id": "simple_208", "result": "<functions>\n  def map_service.get_directions(start, end, avoid):\n    \"\"\"\n    Retrieve directions from a starting location to an ending location, including options for route preferences. \n\n    Args:\n        start (str): Starting location for the route.\n        end (str): Ending location for the route.\n        avoid (list): Route features to avoid. Default is ['highways', 'ferries']\n    \"\"\"\n    return map_service.get_directions(start, end, avoid)\n</functions>", "input_token_count": 418, "output_token_count": 117, "latency": 0.7551271915435791}
{"id": "simple_213", "result": "```python\nBook(departure_location='San Francisco', destination_location='London', date='2022-04-27', time='afternoon')\n```", "input_token_count": 477, "output_token_count": 39, "latency": 0.3660721778869629}
{"id": "simple_226", "result": "```python\nfind_zodiac_compatibility(sign1=\"Aries\", sign2=\"Gemini\", scale=\"percentage\")\n```", "input_token_count": 403, "output_token_count": 29, "latency": 0.3019702434539795}
{"id": "simple_244", "result": "```python\npublication_year.find(author=\"Isaac Newton\", work_title=\"Law of Universal Gravitation\", location=\"all\")\n```", "input_token_count": 409, "output_token_count": 31, "latency": 0.3092050552368164}
{"id": "simple_254", "result": "<functions>\n  def get_religion_history(religion, start_year, end_year, event_type=\"all\"):\n    \"\"\"Retrieves historic events and facts related to a specified religion for a given period.\"\"\"\n    print(\"Retrieving historic dates and facts related to Christianity between year 300 and 400.\")\n    print(f\"Religion: {religion}\")\n    print(f\"Start Year: {start_year}\")\n    print(f\"End Year: {end_year}\")\n    print(f\"Event Type: {event_type}\")\n  </functions>", "input_token_count": 438, "output_token_count": 131, "latency": 0.8038308620452881}
{"id": "simple_281", "result": "<functions>\n  def get_instrument_info(name, maker, year):\n    \"\"\"\n    Retrieve the details about a specific musical instrument based on its name, maker, and manufacturing year. \n\n    Args:\n        name (str): The name of the instrument.\n        maker (str): The name of the maker who created the instrument.\n        year (int): The year the instrument was made.\n    \"\"\"\n    print(f\"Instrument: {name}, Maker: {maker}, Year: {year}\")\n", "input_token_count": 428, "output_token_count": 114, "latency": 0.7256481647491455}
{"id": "simple_284", "result": "```python\nGet information about the pop concerts in New York for next month.\nget_concerts(\"<functions>None</functions>\")\n```", "input_token_count": 404, "output_token_count": 31, "latency": 0.30336666107177734}
{"id": "simple_295", "result": "```python\nFind the lyrics to the song 'Bohemian Rhapsody' by Queen.\nfind_lyrics(\"Bohemian Rhapsody\", \"Queen\", \"English\")\n```", "input_token_count": 418, "output_token_count": 37, "latency": 0.34563660621643066}
{"id": "simple_297", "result": "```python\nmusic.theory.chordProgression(progression=['I', 'V', 'vi', 'IV'])\n```", "input_token_count": 482, "output_token_count": 28, "latency": 0.28682684898376465}
{"id": "simple_327", "result": "```python\nsports_team.get_schedule(team_name=\"Manchester United\", num_of_games=6, league=\"Premier League\", location=\"London\")\n```", "input_token_count": 475, "output_token_count": 38, "latency": 0.34188413619995117}
{"id": "simple_328", "result": "```python\nFind the rating and player count of the board game 'Ticket to Ride'.\nfind_game_info(\"Ticket to Ride\", [\"rating\", \"player_count\"])\n```", "input_token_count": 401, "output_token_count": 40, "latency": 0.3503873348236084}
{"id": "simple_335", "result": "```python\nfind_card_in_deck(\"Queen\", \"Hearts\")\n```", "input_token_count": 441, "output_token_count": 19, "latency": 0.21045947074890137}
{"id": "simple_360", "result": "```python\nfind_recipe(recipeName=\"pasta carbonara\", maxCalories=500)\n```", "input_token_count": 400, "output_token_count": 24, "latency": 0.23900198936462402}
{"id": "simple_380", "result": "```python\nBook a single room at a pet friendly hotel near Manhattan, New York for 3 nights starting from March 10th, 2023\n```", "input_token_count": 485, "output_token_count": 37, "latency": 0.31585693359375}
{"id": "simple_390", "result": "<functions>\n  <function>\n    <function name=\"currency_conversion\">\n      <param name=\"amount\">150</param>\n      <param name=\"from_currency\">EUR</param>\n      <param name=\"to_currency\">CAD</param>\n      <returns>150</returns>\n    </function>\n  </function>\n</functions>", "input_token_count": 397, "output_token_count": 86, "latency": 0.5657424926757812}
{"id": "simple_393", "result": "```python\nconvert_currency.convert(\"JPY\", \"USD\", 20000)\n```", "input_token_count": 414, "output_token_count": 24, "latency": 0.23266029357910156}
