{"accuracy": 0.8, "correct_count": 12, "total_count": 15}
{"id": "parallel_9", "model_name": "uiuc-convai_CoALM-70B", "test_category": "parallel", "valid": false, "error": ["Wrong number of functions."], "error_type": "parallel_function_checker_no_order:wrong_count", "prompt": {"id": "parallel_9", "question": [[{"role": "user", "content": "Find two movie theatres near San Diego with availability for Tenet at 5 pm and No Time To Die at 7:30 pm."}]], "function": [{"name": "find_movie_showing", "description": "Find local movie theatres and their schedule for a specific movie", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. San Diego, CA"}, "movie": {"type": "array", "items": {"type": "string", "enum": ["Tenet", "No Time To Die"]}, "description": "Preferred movie to watch."}, "time": {"type": "array", "items": {"type": "string", "description": "Show time for each movie"}}}, "required": ["location", "movie", "time"]}}]}, "model_result_raw": "[find_movie_showing(location=\"San Diego, CA\", movie=[\"Tenet\", \"No Time To Die\"], time=[5, 7.5])]", "model_result_decoded": [{"find_movie_showing": {"location": "San Diego, CA", "movie": ["Tenet", "No Time To Die"], "time": [5, 7.5]}}], "possible_answer": [{"find_movie_showing": {"location": ["San Diego", "San Diego, CA", "CA"], "movie": [["Tenet"]], "time": [["5 pm"], ["17:00"]]}}, {"find_movie_showing": {"location": ["San Diego", "San Diego, CA", "CA"], "movie": [["No Time To Die"]], "time": [["7:30 pm"], ["19:30"]]}}]}
{"id": "parallel_44", "model_name": "uiuc-convai_CoALM-70B", "test_category": "parallel", "valid": false, "error": ["Could not find a matching function among index [0, 1] of model output for index 0 of possible answers.", {"Model Result Index 0": {"sub_error": ["Invalid value for parameter 'date': '2023-10-13'. Expected one of ['next Friday']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"concert.find_nearby": {"location": "Berlin", "date": "2023-10-13", "genre": "Classical", "amenities": ["Parking"]}}, "possible_answer_item": {"concert.find_nearby": {"location": ["Berlin"], "date": ["next Friday"], "genre": ["Classical", "classical"], "amenities": [["Parking"], ""]}}}}, {"Model Result Index 1": {"sub_error": ["Invalid value for parameter 'location': 'Paris'. Expected one of ['Berlin']. Case insensitive."], "sub_error_type": "value_error:string", "model_output_item": {"concert.find_nearby": {"location": "Paris", "date": "2023-10-13", "genre": "Classical", "amenities": ["Parking"]}}, "possible_answer_item": {"concert.find_nearby": {"location": ["Berlin"], "date": ["next Friday"], "genre": ["Classical", "classical"], "amenities": [["Parking"], ""]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_44", "question": [[{"role": "user", "content": "Find me all the classical concerts near Berlin and Paris happening next Friday, and I am interested only in those with available parking."}]], "function": [{"name": "concert.find_nearby", "description": "Locate nearby concerts based on specific criteria like genre and availability of parking.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the user wants to find a concert."}, "date": {"type": "string", "description": "The date on which the user wants to attend a concert."}, "genre": {"type": "string", "description": "The genre of music of the concert."}, "amenities": {"type": "array", "items": {"type": "string", "enum": ["Parking", "Food and Beverages", "VIP Seating", "Disability Access"]}, "description": "Amenities preferred at the concert.", "default": ["Parking"]}}, "required": ["location", "date", "genre"]}}]}, "model_result_raw": "[concert.find_nearby(location=\"Berlin\", date=\"2023-10-13\", genre=\"Classical\", amenities=[\"Parking\"]), concert.find_nearby(location=\"Paris\", date=\"2023-10-13\", genre=\"Classical\", amenities=[\"Parking\"])]", "model_result_decoded": [{"concert.find_nearby": {"location": "Berlin", "date": "2023-10-13", "genre": "Classical", "amenities": ["Parking"]}}, {"concert.find_nearby": {"location": "Paris", "date": "2023-10-13", "genre": "Classical", "amenities": ["Parking"]}}], "possible_answer": [{"concert.find_nearby": {"location": ["Berlin"], "date": ["next Friday"], "genre": ["Classical", "classical"], "amenities": [["Parking"], ""]}}, {"concert.find_nearby": {"location": ["Paris"], "date": ["next Friday"], "genre": ["Classical", "classical"], "amenities": [["Parking"], ""]}}]}
{"id": "parallel_77", "model_name": "uiuc-convai_CoALM-70B", "test_category": "parallel", "valid": false, "error": ["Could not find a matching function among index [1, 2, 3] of model output for index 1 of possible answers.", {"Model Result Index 1": {"sub_error": ["Invalid value for parameter 'number1': 30. Expected one of [90]."], "sub_error_type": "value_error:others", "model_output_item": {"math.hcf": {"number1": 30, "number2": 90}}, "possible_answer_item": {"math.hcf": {"number1": [90], "number2": [120]}}}}, {"Model Result Index 2": {"sub_error": ["Invalid value for parameter 'number1': 36. Expected one of [90]."], "sub_error_type": "value_error:others", "model_output_item": {"math.hcf": {"number1": 36, "number2": 48}}, "possible_answer_item": {"math.hcf": {"number1": [90], "number2": [120]}}}}, {"Model Result Index 3": {"sub_error": ["Invalid value for parameter 'number1': 12. Expected one of [90]."], "sub_error_type": "value_error:others", "model_output_item": {"math.hcf": {"number1": 12, "number2": 24}}, "possible_answer_item": {"math.hcf": {"number1": [90], "number2": [120]}}}}], "error_type": "parallel_function_checker_no_order:cannot_find_match", "prompt": {"id": "parallel_77", "question": [[{"role": "user", "content": "\"Can you calculate the highest common factor of the pair of numbers (45, 60) and then use that result to find the highest common factor with another pair of numbers (90, 120)? Please also find the highest common factor of the pair (36, 48) and then find the highest common factor of that result with the pair (72, 96).\""}]], "function": [{"name": "math.hcf", "description": "Calculate the highest common factor of two numbers.", "parameters": {"type": "dict", "properties": {"number1": {"type": "integer", "description": "First number."}, "number2": {"type": "integer", "description": "Second number."}}, "required": ["number1", "number2"]}}]}, "model_result_raw": "[math.hcf(number1=45, number2=60), math.hcf(number1=30, number2=90), math.hcf(number1=36, number2=48), math.hcf(number1=12, number2=24)]", "model_result_decoded": [{"math.hcf": {"number1": 45, "number2": 60}}, {"math.hcf": {"number1": 30, "number2": 90}}, {"math.hcf": {"number1": 36, "number2": 48}}, {"math.hcf": {"number1": 12, "number2": 24}}], "possible_answer": [{"math.hcf": {"number1": [45], "number2": [60]}}, {"math.hcf": {"number1": [90], "number2": [120]}}, {"math.hcf": {"number1": [36], "number2": [48]}}, {"math.hcf": {"number1": [72], "number2": [96]}}]}