{"accuracy": 0.6825, "correct_count": 273, "total_count": 400}
{"id": "simple_3", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'algebra.quadratic_roots' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_3", "question": [[{"role": "user", "content": "Find the roots of a quadratic equation with coefficients a=1, b=-3, c=2."}]], "function": [{"name": "algebra.quadratic_roots", "description": "Find the roots of a quadratic equation ax^2 + bx + c = 0.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "Coefficient of x^2."}, "b": {"type": "integer", "description": "Coefficient of x."}, "c": {"type": "integer", "description": "Constant term."}}, "required": ["a", "b", "c"]}}]}, "model_result_raw": "<TOOLCALL>[quadratic_roots(a=1, b=-3, c=2)]</TOOLCALL>", "model_result_decoded": [{"quadratic_roots": {"a": 1, "b": -3, "c": 2}}], "possible_answer": [{"algebra.quadratic_roots": {"a": [1], "b": [-3], "c": [2]}}]}
{"id": "simple_5", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Optional parameter 'root_type' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_5", "question": [[{"role": "user", "content": "Find all the roots of a quadratic equation given coefficients a = 3, b = -11, and c = -4."}]], "function": [{"name": "solve_quadratic", "description": "Solve a quadratic equation given coefficients a, b, and c. If optional 'root_type' is 'real', the function will only return real roots. If not specified, function may return complex roots.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "The coefficient of the squared term in the quadratic equation."}, "b": {"type": "integer", "description": "The coefficient of the linear term in the quadratic equation."}, "c": {"type": "integer", "description": "The constant term in the quadratic equation."}, "root_type": {"type": "string", "description": "The type of roots to return: 'real' for real roots, 'all' for both real and complex roots. Default value is 'real'."}}, "required": ["a", "b", "c"]}}]}, "model_result_raw": "<TOOLCALL>[solve_quadratic(a=3, b=-11, c=-4)]</TOOLCALL>", "model_result_decoded": [{"solve_quadratic": {"a": 3, "b": -11, "c": -4}}], "possible_answer": [{"solve_quadratic": {"a": [3], "b": [-11], "c": [-4], "root_type": ["all"]}}]}
{"id": "simple_9", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'geometry.calculate_area_circle' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_9", "question": [[{"role": "user", "content": "Calculate the area of a circle with a radius of 5 units."}]], "function": [{"name": "geometry.calculate_area_circle", "description": "Calculate the area of a circle given its radius.", "parameters": {"type": "dict", "properties": {"radius": {"type": "integer", "description": "The radius of the circle."}, "unit": {"type": "string", "description": "The measurement unit of the radius (optional parameter, default is 'units')."}}, "required": ["radius"]}}]}, "model_result_raw": "<TOOLCALL>[calculate_area_circle(radius=5, unit='units')]</TOOLCALL>", "model_result_decoded": [{"calculate_area_circle": {"radius": 5, "unit": "units"}}], "possible_answer": [{"geometry.calculate_area_circle": {"radius": [5], "unit": ["units", ""]}}]}
{"id": "simple_12", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'geometry.circumference' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_12", "question": [[{"role": "user", "content": "Calculate the circumference of a circle with radius 3"}]], "function": [{"name": "geometry.circumference", "description": "Calculate the circumference of a circle given the radius.", "parameters": {"type": "dict", "properties": {"radius": {"type": "integer", "description": "The radius of the circle."}, "units": {"type": "string", "description": "Units for the output circumference measurement. Default is 'cm'."}}, "required": ["radius"]}}]}, "model_result_raw": "<TOOLCALL>[circumference(radius=3)]</TOOLCALL>", "model_result_decoded": [{"circumference": {"radius": 3}}], "possible_answer": [{"geometry.circumference": {"radius": [3], "units": ["cm", ""]}}]}
{"id": "simple_13", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'interval'. Expected outer type array with inner type <class 'float'>. Parameter value: [1, 3]."], "error_type": "type_error:nested", "prompt": {"id": "simple_13", "question": [[{"role": "user", "content": "Calculate the area under the curve y=x^2 from x=1 to x=3."}]], "function": [{"name": "calculate_area_under_curve", "description": "Calculate the area under a mathematical function within a given interval.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The mathematical function as a string."}, "interval": {"type": "array", "items": {"type": "float"}, "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."}, "method": {"type": "string", "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, "required": ["function", "interval"]}}]}, "model_result_raw": "<TOOLCALL>[calculate_area_under_curve(function='x^2', interval=[1, 3])]</TOOLCALL>", "model_result_decoded": [{"calculate_area_under_curve": {"function": "x^2", "interval": [1, 3]}}], "possible_answer": [{"calculate_area_under_curve": {"function": ["x**2", "lambda x: x**2", "y=x**2"], "interval": [[1.0, 3.0]], "method": ["", "trapezoidal"]}}]}
{"id": "simple_18", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'number_analysis.prime_factors' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_18", "question": [[{"role": "user", "content": "Find the prime factors of the number 123456."}]], "function": [{"name": "number_analysis.prime_factors", "description": "Compute the prime factors of a number.", "parameters": {"type": "dict", "properties": {"number": {"type": "integer", "description": "The number to be factored."}}, "required": ["number"]}}]}, "model_result_raw": "<TOOLCALL>[prime_factors(number=123456)]</TOOLCALL>", "model_result_decoded": [{"prime_factors": {"number": 123456}}], "possible_answer": [{"number_analysis.prime_factors": {"number": [123456]}}]}
{"id": "simple_35", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'vegan_restaurant.find_nearby' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_35", "question": [[{"role": "user", "content": "Find an all vegan restaurant in New York that opens until at least 11 PM."}]], "function": [{"name": "vegan_restaurant.find_nearby", "description": "Locate nearby vegan restaurants based on specific criteria like operating hours.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. New York, NY, you should format it as City, State."}, "operating_hours": {"type": "integer", "description": "Preferred latest closing time of the restaurant. E.g. if 11 is given, then restaurants that close at or after 11 PM will be considered. This is in 24 hour format. Default is 24."}}, "required": ["location"]}}]}, "model_result_raw": "<TOOLCALL>[find_nearby(location=\"New York, NY\", operating_hours=23)]</TOOLCALL>", "model_result_decoded": [{"find_nearby": {"location": "New York, NY", "operating_hours": 23}}], "possible_answer": [{"vegan_restaurant.find_nearby": {"location": ["New York, NY"], "operating_hours": [23]}}]}
{"id": "simple_54", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'species': 'human'. Expected one of ['Homo sapiens', '']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_54", "question": [[{"role": "user", "content": "Identify the protein sequence of a given human gene 'BRCA1'."}]], "function": [{"name": "get_protein_sequence", "description": "Retrieve the protein sequence encoded by a human gene.", "parameters": {"type": "dict", "properties": {"gene": {"type": "string", "description": "The human gene of interest."}, "species": {"type": "string", "description": "The species for which the gene is to be analyzed.", "default": "Homo sapiens"}}, "required": ["gene"]}}]}, "model_result_raw": "<TOOLCALL>[get_protein_sequence(gene='BRCA1', species='human')]</TOOLCALL>", "model_result_decoded": [{"get_protein_sequence": {"gene": "BRCA1", "species": "human"}}], "possible_answer": [{"get_protein_sequence": {"gene": ["BRCA1"], "species": ["Homo sapiens", ""]}}]}
{"id": "simple_55", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'biology.get_cell_info' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_55", "question": [[{"role": "user", "content": "Find me detailed information about the structure of human cell"}]], "function": [{"name": "biology.get_cell_info", "description": "Retrieve information about the structure and functioning of a specified type of cell", "parameters": {"type": "dict", "properties": {"cell_type": {"type": "string", "description": "Type of cell you want information about"}, "detailed": {"type": "boolean", "description": "Indicate if you want a detailed description of the cell", "default": "false"}}, "required": ["cell_type"]}}]}, "model_result_raw": "<TOOLCALL>[get_cell_info(cell_type=\"human cell\", detailed=True)]</TOOLCALL>", "model_result_decoded": [{"get_cell_info": {"cell_type": "human cell", "detailed": true}}], "possible_answer": [{"biology.get_cell_info": {"cell_type": ["human"], "detailed": [true]}}]}
{"id": "simple_56", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'cellbio.get_proteins' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_56", "question": [[{"role": "user", "content": "What are the names of proteins found in the plasma membrane?"}]], "function": [{"name": "cellbio.get_proteins", "description": "Get the list of proteins in a specific cell compartment.", "parameters": {"type": "dict", "properties": {"cell_compartment": {"type": "string", "description": "The specific cell compartment."}, "include_description": {"type": "boolean", "description": "Set true if you want a brief description of each protein.", "default": "false"}}, "required": ["cell_compartment"]}}]}, "model_result_raw": "<TOOLCALL>[get_proteins(cell_compartment=\"plasma membrane\")]</TOOLCALL>", "model_result_decoded": [{"get_proteins": {"cell_compartment": "plasma membrane"}}], "possible_answer": [{"cellbio.get_proteins": {"cell_compartment": ["plasma membrane"], "include_description": ["", true, false]}}]}
{"id": "simple_58", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'cell_biology.function_lookup' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_58", "question": [[{"role": "user", "content": "What is the function of ATP synthase in mitochondria?"}]], "function": [{"name": "cell_biology.function_lookup", "description": "Look up the function of a given molecule in a specified organelle.", "parameters": {"type": "dict", "properties": {"molecule": {"type": "string", "description": "The molecule of interest."}, "organelle": {"type": "string", "description": "The organelle of interest."}, "specific_function": {"type": "boolean", "description": "If set to true, a specific function of the molecule within the organelle will be provided, if such information exists."}}, "required": ["molecule", "organelle", "specific_function"]}}]}, "model_result_raw": "<TOOLCALL>[function_lookup(molecule=\"ATP synthase\", organelle=\"mitochondria\", specific_function=True)]</TOOLCALL>", "model_result_decoded": [{"function_lookup": {"molecule": "ATP synthase", "organelle": "mitochondria", "specific_function": true}}], "possible_answer": [{"cell_biology.function_lookup": {"molecule": ["ATP synthase"], "organelle": ["mitochondria"], "specific_function": [true]}}]}
{"id": "simple_60", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'mutation_type.find' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_60", "question": [[{"role": "user", "content": "Find the type of gene mutation based on SNP (Single Nucleotide Polymorphism) ID rs6034464."}]], "function": [{"name": "mutation_type.find", "description": "Finds the type of a genetic mutation based on its SNP (Single Nucleotide Polymorphism) ID.", "parameters": {"type": "dict", "properties": {"snp_id": {"type": "string", "description": "The ID of the Single Nucleotide Polymorphism (SNP) mutation."}, "species": {"type": "string", "description": "Species in which the SNP occurs, default is 'Homo sapiens' (Humans)."}}, "required": ["snp_id"]}}]}, "model_result_raw": "<TOOLCALL>[find(snp_id='rs6034464')]</TOOLCALL>", "model_result_decoded": [{"find": {"snp_id": "rs6034464"}}], "possible_answer": [{"mutation_type.find": {"snp_id": ["rs6034464"], "species": ["Homo sapiens", ""]}}]}
{"id": "simple_63", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'genetics.calculate_similarity' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_63", "question": [[{"role": "user", "content": "Find out how genetically similar a human and a chimp are in percentage."}]], "function": [{"name": "genetics.calculate_similarity", "description": "Calculates the genetic similarity between two species based on their DNA sequences.", "parameters": {"type": "dict", "properties": {"species1": {"type": "string", "description": "The first species to compare."}, "species2": {"type": "string", "description": "The second species to compare."}, "format": {"type": "string", "description": "The format of the result (percentage or fraction). Default is percentage."}}, "required": ["species1", "species2"]}}]}, "model_result_raw": "<TOOLCALL>calculate_similarity(species1='human', species2='chimp', format='percentage')</TOOLCALL>", "model_result_decoded": [{"calculate_similarity": {"species1": "human", "species2": "chimp", "format": "percentage"}}], "possible_answer": [{"genetics.calculate_similarity": {"species1": ["Human", "human"], "species2": ["Chimp", "chimp", "Chimpanzee", "chimpanzee"], "format": ["percentage", ""]}}]}
{"id": "simple_66", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'time_frame': 'last six months'. Expected one of ['six_months']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_66", "question": [[{"role": "user", "content": "Get me data on average precipitation in the Amazon rainforest for the last six months."}]], "function": [{"name": "ecology_data.precipitation_stats", "description": "Retrieve precipitation data for a specified location and time period.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The name of the location, e.g., 'Amazon rainforest'."}, "time_frame": {"type": "string", "enum": ["six_months", "year", "five_years"], "description": "The time period for which data is required."}}, "required": ["location", "time_frame"]}}]}, "model_result_raw": "<TOOLCALL>[ecology_data.precipitation_stats(location='Amazon rainforest', time_frame='last six months')]</TOOLCALL>", "model_result_decoded": [{"ecology_data.precipitation_stats": {"location": "Amazon rainforest", "time_frame": "last six months"}}], "possible_answer": [{"ecology_data.precipitation_stats": {"location": ["Amazon rainforest"], "time_frame": ["six_months"]}}]}
{"id": "simple_69", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'ecology.get_turtle_population' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_69", "question": [[{"role": "user", "content": "Find out the population and species of turtles in Mississippi river in 2020."}]], "function": [{"name": "ecology.get_turtle_population", "description": "Get the population and species of turtles in a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The name of the location."}, "year": {"type": "integer", "description": "The year of the data requested. Default is 2001."}, "species": {"type": "boolean", "description": "Whether to include species information. Default is false."}}, "required": ["location"]}}]}, "model_result_raw": "<TOOLCALL>[get_turtle_population(location=\"Mississippi river\", year=2020, species=True)]</TOOLCALL>", "model_result_decoded": [{"get_turtle_population": {"location": "Mississippi river", "year": 2020, "species": true}}], "possible_answer": [{"ecology.get_turtle_population": {"location": ["Mississippi river"], "year": [2020], "species": [true]}}]}
{"id": "simple_76", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'prediction.evolution' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_76", "question": [[{"role": "user", "content": "Get me the predictions of the evolutionary rate for Homo Sapiens for next 50 years using Darwin model"}]], "function": [{"name": "prediction.evolution", "description": "Predict the evolutionary rate for a specific species for a given timeframe.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species that the evolution rate will be predicted for."}, "years": {"type": "integer", "description": "Number of years for the prediction."}, "model": {"type": "string", "description": "The model used to make the prediction, options: 'Darwin', 'Lamarck', default is 'Darwin'."}}, "required": ["species", "years"]}}]}, "model_result_raw": "<TOOLCALL>[evolution(species='Homo Sapiens', years=50, model='Darwin')]</TOOLCALL>", "model_result_decoded": [{"evolution": {"species": "Homo Sapiens", "years": 50, "model": "Darwin"}}], "possible_answer": [{"prediction.evolution": {"species": ["Homo Sapiens", "homo sapiens", "Homo sapiens"], "years": [50], "model": ["Darwin"]}}]}
{"id": "simple_77", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'restaurant.find_nearby' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_77", "question": [[{"role": "user", "content": "Find a nearby restaurant that serves vegan food in Los Angeles."}]], "function": [{"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific dietary preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Los Angeles, CA"}, "dietary_preference": {"type": "array", "items": {"type": "string", "enum": ["Vegan", "Vegetarian", "Gluten-free", "Dairy-free", "Nut-free"]}, "description": "Dietary preference. Default is empty list."}}, "required": ["location"]}}]}, "model_result_raw": "<TOOLCALL>[find_nearby(location='Los Angeles, CA', dietary_preference=['vegan'])]</TOOLCALL>", "model_result_decoded": [{"find_nearby": {"location": "Los Angeles, CA", "dietary_preference": ["vegan"]}}], "possible_answer": [{"restaurant.find_nearby": {"location": ["Los Angeles, CA"], "dietary_preference": [["Vegan"]]}}]}
{"id": "simple_81", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'map_routing.fastest_route' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_81", "question": [[{"role": "user", "content": "Find the fastest route from San Francisco to Los Angeles with toll roads avoided."}]], "function": [{"name": "map_routing.fastest_route", "description": "Finds the fastest route from one location to another, with an option to avoid toll roads.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting location for the journey."}, "end_location": {"type": "string", "description": "The destination for the journey."}, "avoid_tolls": {"type": "boolean", "description": "Option to avoid toll roads during the journey. Default is false."}}, "required": ["start_location", "end_location"]}}]}, "model_result_raw": "<TOOLCALL>[fastest_route(start_location=\"San Francisco\", end_location=\"Los Angeles\", avoid_tolls=True)]</TOOLCALL>", "model_result_decoded": [{"fastest_route": {"start_location": "San Francisco", "end_location": "Los Angeles", "avoid_tolls": true}}], "possible_answer": [{"map_routing.fastest_route": {"start_location": ["San Francisco", "SF"], "end_location": ["Los Angeles", "LA"], "avoid_tolls": [true]}}]}
{"id": "simple_82", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'numbers'. Expected outer type array with inner type <class 'float'>. Parameter value: [12, 15, 18, 20, 21, 26, 30]."], "error_type": "type_error:nested", "prompt": {"id": "simple_82", "question": [[{"role": "user", "content": "Calculate the average of list of integers [12, 15, 18, 20, 21, 26, 30]."}]], "function": [{"name": "calculate_average", "description": "Calculates the average of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to calculate the average of."}}, "required": ["numbers"]}}]}, "model_result_raw": "<TOOLCALL>[calculate_average(numbers=[12, 15, 18, 20, 21, 26, 30])]</TOOLCALL>", "model_result_decoded": [{"calculate_average": {"numbers": [12, 15, 18, 20, 21, 26, 30]}}], "possible_answer": [{"calculate_average": {"numbers": [[12.0, 15.0, 18.0, 20.0, 21.0, 26.0, 30.0]]}}]}
{"id": "simple_87", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'list'. Expected outer type array with inner type <class 'float'>. Parameter value: [5, 3, 4, 1, 2]."], "error_type": "type_error:nested", "prompt": {"id": "simple_87", "question": [[{"role": "user", "content": "Sort the list [5, 3, 4, 1, 2] in ascending order."}]], "function": [{"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "dict", "properties": {"list": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting."}}, "required": ["list", "order"]}}]}, "model_result_raw": "<TOOLCALL>[array_sort(list=[5, 3, 4, 1, 2], order=\"ascending\")]</TOOLCALL>", "model_result_decoded": [{"array_sort": {"list": [5, 3, 4, 1, 2], "order": "ascending"}}], "possible_answer": [{"array_sort": {"list": [[5.0, 3.0, 4.0, 1.0, 2.0]], "order": ["ascending"]}}]}
{"id": "simple_89", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Unexpected dict key parameter: 'major'.", "Missing dict key parameter: 'department'."], "error_type": "value_error:dict_key", "prompt": {"id": "simple_89", "question": [[{"role": "user", "content": "Fetch all records for students studying Science in 'Bluebird High School' from the StudentDB."}]], "function": [{"name": "db_fetch_records", "description": "Fetch records from a specified database table based on certain conditions.", "parameters": {"type": "dict", "properties": {"database_name": {"type": "string", "description": "The name of the database."}, "table_name": {"type": "string", "description": "The name of the table from which records need to be fetched."}, "conditions": {"type": "dict", "properties": {"department": {"type": "string", "description": "The name of the department of students."}, "school": {"type": "string", "description": "The name of the school students are enrolled in."}}, "description": "The conditions based on which records are to be fetched."}, "fetch_limit": {"type": "integer", "description": "Limits the number of records to be fetched. Default is 0, which means no limit."}}, "required": ["database_name", "table_name", "conditions"]}}]}, "model_result_raw": "<TOOLCALL>db_fetch_records(database_name='StudentDB', table_name='students', conditions={'school': 'Bluebird High School', 'major': 'Science'})</TOOLCALL>", "model_result_decoded": [{"db_fetch_records": {"database_name": "StudentDB", "table_name": "students", "conditions": {"school": "Bluebird High School", "major": "Science"}}}], "possible_answer": [{"db_fetch_records": {"database_name": ["StudentDB"], "table_name": ["students"], "conditions": [{"department": ["Science"], "school": ["Bluebird High School", "Bluebird HS"]}], "fetch_limit": ["", 0]}}]}
{"id": "simple_90", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'employee.fetch_data' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_90", "question": [[{"role": "user", "content": "Retrieve Personal Info and Job History data of a specific employee whose ID is 345 in company 'ABC Ltd.'"}]], "function": [{"name": "employee.fetch_data", "description": "Fetches the detailed data for a specific employee in a given company.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "employee_id": {"type": "integer", "description": "The unique ID of the employee."}, "data_field": {"type": "array", "items": {"type": "string", "enum": ["Personal Info", "Job History", "Payroll", "Attendance"]}, "description": "Fields of data to be fetched for the employee (Optional). Default is ['Personal Info']"}}, "required": ["company_name", "employee_id"]}}]}, "model_result_raw": "<TOOLCALL>[fetch_data(company_name='ABC Ltd.', employee_id=345, data_field=['Personal Info', 'Job History'])]</TOOLCALL>", "model_result_decoded": [{"fetch_data": {"company_name": "ABC Ltd.", "employee_id": 345, "data_field": ["Personal Info", "Job History"]}}], "possible_answer": [{"employee.fetch_data": {"company_name": ["ABC Ltd."], "employee_id": [345], "data_field": [["Personal Info", "Job History"]]}}]}
{"id": "simple_96", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'conditions'. Expected outer type array with inner type <class 'dict'>. Parameter value: ['age > 25', \"job = 'engineer'\"]."], "error_type": "type_error:nested", "prompt": {"id": "simple_96", "question": [[{"role": "user", "content": "Find records in database in user table where age is greater than 25 and job is 'engineer'."}]], "function": [{"name": "database.query", "description": "Query the database based on certain conditions.", "parameters": {"type": "dict", "properties": {"table": {"type": "string", "description": "Name of the table to query."}, "conditions": {"type": "array", "items": {"type": "dict", "properties": {"field": {"type": "string", "description": "The field to apply the condition."}, "operation": {"type": "string", "description": "The operation to be performed.", "enum": ["<", ">", "=", ">=", "<="]}, "value": {"type": "string", "description": "The value to be compared."}}, "required": ["field", "operation", "value"]}, "description": "Conditions for the query."}}, "required": ["table", "conditions"]}}]}, "model_result_raw": "<TOOLCALL>[database.query(table='user', conditions=[\"age > 25\", \"job = 'engineer'\"])]</TOOLCALL>", "model_result_decoded": [{"database.query": {"table": "user", "conditions": ["age > 25", "job = 'engineer'"]}}], "possible_answer": [{"database.query": {"table": ["user"], "conditions": [[{"field": ["age"], "operation": [">"], "value": ["25"]}, {"field": ["job"], "operation": ["="], "value": ["engineer"]}]]}}]}
{"id": "simple_98", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'hours': 18. Expected one of [6]."], "error_type": "value_error:others", "prompt": {"id": "simple_98", "question": [[{"role": "user", "content": "What will be the angle between the hour and minute hands of a clock at 6:30 PM?"}]], "function": [{"name": "calculate_clock_angle", "description": "Calculate the angle between the hour and minute hands of a clock at a given time.", "parameters": {"type": "dict", "properties": {"hours": {"type": "integer", "description": "The hour on the clock face."}, "minutes": {"type": "integer", "description": "The minutes on the clock face."}, "round_to": {"type": "integer", "description": "The number of decimal places to round the result to, default is 2."}}, "required": ["hours", "minutes"]}}]}, "model_result_raw": "<TOOLCALL>calculate_clock_angle(hours=18, minutes=30)</TOOLCALL>", "model_result_decoded": [{"calculate_clock_angle": {"hours": 18, "minutes": 30}}], "possible_answer": [{"calculate_clock_angle": {"hours": [6], "minutes": [30], "round_to": ["", 2]}}]}
{"id": "simple_103", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'mathematics.calculate_area_under_curve' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_103", "question": [[{"role": "user", "content": "Calculate the area under the curve y=3x^2 + 2x - 4, between x = -1 and x = 2."}]], "function": [{"name": "mathematics.calculate_area_under_curve", "description": "Calculate the area under the curve for a given polynomial function within a specified interval.", "parameters": {"type": "dict", "properties": {"polynomial": {"type": "array", "items": {"type": "float"}, "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."}, "limits": {"type": "array", "items": {"type": "float"}, "description": "A list of two numbers specifying the lower and upper limit for the integration interval."}}, "required": ["polynomial", "limits"]}}]}, "model_result_raw": "<TOOLCALL>[calculate_area_under_curve(polynomial=[3, 2, -4], limits=[-1, 2])]</TOOLCALL>", "model_result_decoded": [{"calculate_area_under_curve": {"polynomial": [3, 2, -4], "limits": [-1, 2]}}], "possible_answer": [{"mathematics.calculate_area_under_curve": {"polynomial": [[3.0, 2.0, -4.0]], "limits": [[-1.0, 2.0]]}}]}
{"id": "simple_113", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'probability.dice_roll' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_113", "question": [[{"role": "user", "content": "What's the probability of rolling a six on a six-sided die twice in a row?"}]], "function": [{"name": "probability.dice_roll", "description": "Calculate the probability of rolling a certain number on a six-sided die a certain number of times in a row.", "parameters": {"type": "dict", "properties": {"desired_number": {"type": "integer", "description": "The number you want to roll."}, "number_of_rolls": {"type": "integer", "description": "How many times you want to roll that number in a row."}, "die_sides": {"type": "integer", "description": "The number of sides on the die (optional; default is 6)."}}, "required": ["desired_number", "number_of_rolls"]}}]}, "model_result_raw": "<TOOLCALL>[dice_roll(desired_number=6, number_of_rolls=2)]</TOOLCALL>", "model_result_decoded": [{"dice_roll": {"desired_number": 6, "number_of_rolls": 2}}], "possible_answer": [{"probability.dice_roll": {"desired_number": [6], "number_of_rolls": [2], "die_sides": [6, ""]}}]}
{"id": "simple_114", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'prob_dist.binomial' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_114", "question": [[{"role": "user", "content": "Find the probability of getting exactly 5 heads in 10 fair coin tosses."}]], "function": [{"name": "prob_dist.binomial", "description": "Compute the probability of having 'success' outcome from binomial distribution.", "parameters": {"type": "dict", "properties": {"trials": {"type": "integer", "description": "The number of independent experiments."}, "successes": {"type": "integer", "description": "The number of success events."}, "p": {"type": "float", "description": "The probability of success on any given trial, defaults to 0.5"}}, "required": ["trials", "successes"]}}]}, "model_result_raw": "<TOOLCALL>[binomial(trials=10, successes=5, p=0.5)]</TOOLCALL>", "model_result_decoded": [{"binomial": {"trials": 10, "successes": 5, "p": 0.5}}], "possible_answer": [{"prob_dist.binomial": {"trials": [10], "successes": [5], "p": [0.5, ""]}}]}
{"id": "simple_119", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'hypothesis_testing.ttest_ind' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_119", "question": [[{"role": "user", "content": "Perform a hypothesis test for two independent samples with scores of Sample1: [22,33,42,12,34] and Sample2: [23,45,44,14,38] at a significance level of 0.05."}]], "function": [{"name": "hypothesis_testing.ttest_ind", "description": "Conducts a hypothesis test for two independent samples.", "parameters": {"type": "dict", "properties": {"sample1": {"type": "array", "items": {"type": "integer"}, "description": "First set of observations (array of numbers)."}, "sample2": {"type": "array", "items": {"type": "integer"}, "description": "Second set of observations (array of numbers)."}, "significance_level": {"type": "float", "description": "Significance level of the test (default: 0.05)"}}, "required": ["sample1", "sample2"]}}]}, "model_result_raw": "<TOOLCALL>[ttest_ind(sample1=[22,33,42,12,34], sample2=[23,45,44,14,38], significance_level=0.05)]</TOOLCALL>", "model_result_decoded": [{"ttest_ind": {"sample1": [22, 33, 42, 12, 34], "sample2": [23, 45, 44, 14, 38], "significance_level": 0.05}}], "possible_answer": [{"hypothesis_testing.ttest_ind": {"sample1": [[22, 33, 42, 12, 34]], "sample2": [[23, 45, 44, 14, 38]], "significance_level": [0.05]}}]}
{"id": "simple_123", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'hypothesis_testing.two_sample_t_test' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_123", "question": [[{"role": "user", "content": "Perform a two-sample t-test to determine if there is a significant difference between the mean of group1 (e.g., 12.4, 15.6, 11.2, 18.9) and group2 (e.g., 10.5, 9.8, 15.2, 13.8) at the significance level 0.05."}]], "function": [{"name": "hypothesis_testing.two_sample_t_test", "description": "Perform a two-sample t-test to determine if there is a significant difference between the means of two independent samples.", "parameters": {"type": "dict", "properties": {"group1": {"type": "array", "items": {"type": "float"}, "description": "Sample observations from group 1."}, "group2": {"type": "array", "items": {"type": "float"}, "description": "Sample observations from group 2."}, "alpha": {"type": "float", "description": "Significance level for the t-test. Default is 0.05."}}, "required": ["group1", "group2"]}}]}, "model_result_raw": "<TOOLCALL>two_sample_t_test(group1=[12.4, 15.6, 11.2, 18.9], group2=[10.5, 9.8, 15.2, 13.8], alpha=0.05)</TOOLCALL>", "model_result_decoded": [{"two_sample_t_test": {"group1": [12.4, 15.6, 11.2, 18.9], "group2": [10.5, 9.8, 15.2, 13.8], "alpha": 0.05}}], "possible_answer": [{"hypothesis_testing.two_sample_t_test": {"group1": [[12.4, 15.6, 11.2, 18.9]], "group2": [[10.5, 9.8, 15.2, 13.8]], "alpha": [0.05, ""]}}]}
{"id": "simple_126", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'linear_regression.get_r_squared' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_126", "question": [[{"role": "user", "content": "What is the coefficient of determination (R-squared) for a model using engine size and fuel economy variables to predict car_price with a dataset in path C:/data/cars.csv?"}]], "function": [{"name": "linear_regression.get_r_squared", "description": "Calculate the coefficient of determination of a regression model.", "parameters": {"type": "dict", "properties": {"dataset_path": {"type": "string", "description": "Path to the CSV dataset file."}, "independent_variables": {"type": "array", "items": {"type": "string"}, "description": "The independent variables to use in the regression model."}, "dependent_variable": {"type": "string", "description": "The dependent variable to predict in the regression model."}}, "required": ["dataset_path", "independent_variables", "dependent_variable"]}}]}, "model_result_raw": "<TOOLCALL>[get_r_squared(dataset_path=\"C:/data/cars.csv\", independent_variables=[\"engine_size\", \"fuel_economy\"], dependent_variable=\"car_price\")]</TOOLCALL>", "model_result_decoded": [{"get_r_squared": {"dataset_path": "C:/data/cars.csv", "independent_variables": ["engine_size", "fuel_economy"], "dependent_variable": "car_price"}}], "possible_answer": [{"linear_regression.get_r_squared": {"dataset_path": ["C:/data/cars.csv"], "independent_variables": [["engine_size", "fuel_economy"]], "dependent_variable": ["car_price"]}}]}
{"id": "simple_128", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'finance.calculate_quarterly_dividend_per_share' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_128", "question": [[{"role": "user", "content": "What's the quarterly dividend per share of a company with 100 million outstanding shares and total dividend payout of 50 million USD?"}]], "function": [{"name": "finance.calculate_quarterly_dividend_per_share", "description": "Calculate quarterly dividend per share for a company given total dividend payout and outstanding shares", "parameters": {"type": "dict", "properties": {"total_payout": {"type": "integer", "description": "The total amount of dividends paid out in USD"}, "outstanding_shares": {"type": "integer", "description": "Total number of outstanding shares"}}, "required": ["total_payout", "outstanding_shares"], "optional": []}}]}, "model_result_raw": "<TOOLCALL>[calculate_quarterly_dividend_per_share(total_payout=50000000, outstanding_shares=100000000)]</TOOLCALL>", "model_result_decoded": [{"calculate_quarterly_dividend_per_share": {"total_payout": 50000000, "outstanding_shares": 100000000}}], "possible_answer": [{"finance.calculate_quarterly_dividend_per_share": {"total_payout": [50000000], "outstanding_shares": [100000000]}}]}
{"id": "simple_130", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'finance_calculator.npv' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_130", "question": [[{"role": "user", "content": "What's the NPV (Net Present Value) of a series of cash flows: [-50000, 10000, 15000, 20000, 25000, 30000] discounted at 8% annually?"}]], "function": [{"name": "finance_calculator.npv", "description": "Calculate the Net Present Value (NPV) for a series of cash flows discounted at a certain interest rate.", "parameters": {"type": "dict", "properties": {"cash_flows": {"type": "array", "items": {"type": "integer"}, "description": "A list of cash flows."}, "discount_rate": {"type": "float", "description": "The annual interest rate used to discount the cash flows."}, "years": {"type": "array", "items": {"type": "integer"}, "description": "A list of years when the cash flow occurs. Default is empty array."}}, "required": ["cash_flows", "discount_rate"]}}]}, "model_result_raw": "<TOOLCALL>[npv(cash_flows=[-50000, 10000, 15000, 20000, 25000, 30000], discount_rate=0.08)]</TOOLCALL>", "model_result_decoded": [{"npv": {"cash_flows": [-50000, 10000, 15000, 20000, 25000, 30000], "discount_rate": 0.08}}], "possible_answer": [{"finance_calculator.npv": {"cash_flows": [[-50000, 10000, 15000, 20000, 25000, 30000]], "discount_rate": [0.08], "years": ["", []]}}]}
{"id": "simple_133", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'finance.predict_future_value' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_133", "question": [[{"role": "user", "content": "Predict the future value of a $5000 investment with an annual interest rate of 5% in 3 years with monthly compounding."}]], "function": [{"name": "finance.predict_future_value", "description": "Calculate the future value of an investment given its present value, interest rate, the number of compounding periods per year, and the time horizon.", "parameters": {"type": "dict", "properties": {"present_value": {"type": "integer", "description": "The present value of the investment."}, "annual_interest_rate": {"type": "float", "description": "The annual interest rate of the investment."}, "compounding_periods_per_year": {"type": "integer", "description": "The number of times that interest is compounded per year. Default is 1 (annually)."}, "time_years": {"type": "integer", "description": "The investment horizon in years."}}, "required": ["present_value", "annual_interest_rate", "time_years"]}}]}, "model_result_raw": "<TOOLCALL>[predict_future_value(present_value=5000, annual_interest_rate=0.05, compounding_periods_per_year=12, time_years=3)]</TOOLCALL>", "model_result_decoded": [{"predict_future_value": {"present_value": 5000, "annual_interest_rate": 0.05, "compounding_periods_per_year": 12, "time_years": 3}}], "possible_answer": [{"finance.predict_future_value": {"present_value": [5000], "annual_interest_rate": [0.05], "compounding_periods_per_year": [12], "time_years": [3]}}]}
{"id": "simple_136", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'annual_rate': 0.05. Expected one of [5.0]."], "error_type": "value_error:others", "prompt": {"id": "simple_136", "question": [[{"role": "user", "content": "Find the compound interest for an investment of $10000 with an annual interest rate of 5% compounded monthly for 5 years."}]], "function": [{"name": "compound_interest", "description": "Calculate compound interest for a certain time period.", "parameters": {"type": "dict", "properties": {"principal": {"type": "integer", "description": "The initial amount of money that was invested or loaned out."}, "annual_rate": {"type": "float", "description": "The interest rate for a year as a percentage."}, "compounding_freq": {"type": "string", "enum": ["monthly", "quarterly", "annually"], "description": "The number of times that interest is compounded per unit period."}, "time_in_years": {"type": "integer", "description": "The time the money is invested for in years."}}, "required": ["principal", "annual_rate", "compounding_freq", "time_in_years"]}}]}, "model_result_raw": "<TOOLCALL>[compound_interest(principal=10000, annual_rate=0.05, compounding_freq=12, time_in_years=5)]</TOOLCALL>", "model_result_decoded": [{"compound_interest": {"principal": 10000, "annual_rate": 0.05, "compounding_freq": 12, "time_in_years": 5}}], "possible_answer": [{"compound_interest": {"principal": [10000], "annual_rate": [5.0], "compounding_freq": ["monthly"], "time_in_years": [5]}}]}
{"id": "simple_144", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'market_performance.get_data' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_144", "question": [[{"role": "user", "content": "Find the market performance of the S&P 500 and the Dow Jones over the past 5 days."}]], "function": [{"name": "market_performance.get_data", "description": "Retrieve the market performance data for specified indexes over a specified time period.", "parameters": {"type": "dict", "properties": {"indexes": {"type": "array", "items": {"type": "string"}, "description": "Array of stock market indexes. Supported indexes are 'S&P 500', 'Dow Jones', 'NASDAQ', 'FTSE 100', 'DAX' etc."}, "days": {"type": "integer", "description": "Number of days in the past for which the performance data is required."}, "detailed": {"type": "boolean", "description": "Whether to return detailed performance data. If set to true, returns high, low, opening, and closing prices. If false, returns only closing prices. Default is false."}}, "required": ["indexes", "days"]}}]}, "model_result_raw": "<TOOLCALL>[get_data(indexes=['S&P 500', 'Dow Jones'], days=5)]</TOOLCALL>", "model_result_decoded": [{"get_data": {"indexes": ["S&P 500", "Dow Jones"], "days": 5}}], "possible_answer": [{"market_performance.get_data": {"indexes": [["S&P 500", "Dow Jones"]], "days": [5], "detailed": ["", true, false]}}]}
{"id": "simple_148", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'finance.calculate_future_value' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_148", "question": [[{"role": "user", "content": "Calculate the future value of an investment with an annual rate of return of 8%, an initial investment of $20000, and a time frame of 5 years."}]], "function": [{"name": "finance.calculate_future_value", "description": "Calculate the future value of an investment given an initial investment, annual rate of return, and a time frame.", "parameters": {"type": "dict", "properties": {"initial_investment": {"type": "integer", "description": "The initial investment amount."}, "rate_of_return": {"type": "float", "description": "The annual rate of return."}, "years": {"type": "integer", "description": "The time frame of the investment in years."}, "contribution": {"type": "integer", "description": "Optional: Additional regular contributions. Default is 0."}}, "required": ["initial_investment", "rate_of_return", "years"]}}]}, "model_result_raw": "<TOOLCALL>[calculate_future_value(initial_investment=20000, rate_of_return=0.08, years=5)]</TOOLCALL>", "model_result_decoded": [{"calculate_future_value": {"initial_investment": 20000, "rate_of_return": 0.08, "years": 5}}], "possible_answer": [{"finance.calculate_future_value": {"initial_investment": [20000], "rate_of_return": [0.08], "years": [5], "contribution": ["", 0]}}]}
{"id": "simple_156", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'crime_record.get_record' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_156", "question": [[{"role": "user", "content": "Look up details of a felony crime record for case number CA123456 in San Diego County"}]], "function": [{"name": "crime_record.get_record", "description": "Retrieve detailed felony crime records using a specific case number and location.", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "The case number related to the crime."}, "county": {"type": "string", "description": "The county in which the crime occurred."}, "details": {"type": "boolean", "description": "To get a detailed report, set as true. Defaults to false."}}, "required": ["case_number", "county"]}}]}, "model_result_raw": "<TOOLCALL>[get_record(case_number=\"CA123456\", county=\"San Diego County\", details=True)]</TOOLCALL>", "model_result_decoded": [{"get_record": {"case_number": "CA123456", "county": "San Diego County", "details": true}}], "possible_answer": [{"crime_record.get_record": {"case_number": ["CA123456"], "county": ["San Diego", "San Diego County"], "details": [true]}}]}
{"id": "simple_157", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'criminal_history.check_felonies' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_157", "question": [[{"role": "user", "content": "Find out if an individual John Doe with a birthday 01-01-1980 has any prior felony convictions in California."}]], "function": [{"name": "criminal_history.check_felonies", "description": "This function checks if an individual has any prior felony convictions based on their full name and birth date.", "parameters": {"type": "dict", "properties": {"full_name": {"type": "string", "description": "The full name of the individual."}, "birth_date": {"type": "string", "description": "The birth date of the individual. Must be in MM-DD-YYYY format."}, "state": {"type": "string", "description": "The state to search the criminal record in. Default to 'None', which the function will search across all states."}}, "required": ["full_name", "birth_date"]}}]}, "model_result_raw": "<TOOLCALL>[check_felonies(full_name=\"John Doe\", birth_date=\"01-01-1980\", state=\"California\")]</TOOLCALL>", "model_result_decoded": [{"check_felonies": {"full_name": "John Doe", "birth_date": "01-01-1980", "state": "California"}}], "possible_answer": [{"criminal_history.check_felonies": {"full_name": ["John Doe"], "birth_date": ["01-01-1980"], "state": ["California", "CA"]}}]}
{"id": "simple_165", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'civil_cases.retrieve' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_165", "question": [[{"role": "user", "content": "Retrieve cases from 2020 about theft crimes in Los Angeles, California"}]], "function": [{"name": "civil_cases.retrieve", "description": "Retrieve civil cases based on given parameters, including year, crime type, and location.", "parameters": {"type": "dict", "properties": {"year": {"type": "integer", "description": "Year of the cases"}, "crime_type": {"type": "string", "description": "Type of the crime."}, "location": {"type": "string", "description": "Location of the case in the format of city name."}}, "required": ["year", "crime_type", "location"]}}]}, "model_result_raw": "<TOOLCALL>[retrieve(year=2020, crime_type=\"theft\", location=\"Los Angeles\")]</TOOLCALL>", "model_result_decoded": [{"retrieve": {"year": 2020, "crime_type": "theft", "location": "Los Angeles"}}], "possible_answer": [{"civil_cases.retrieve": {"year": [2020], "crime_type": ["theft"], "location": ["Los Angeles", "Los Angeles, California"]}}]}
{"id": "simple_166", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'lawyer.find_nearby' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_166", "question": [[{"role": "user", "content": "Find a lawyer specializing in divorce cases and charge fee less than 400 dollars per hour in Chicago."}]], "function": [{"name": "lawyer.find_nearby", "description": "Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city and state, e.g. Chicago, IL."}, "specialty": {"type": "array", "items": {"type": "string", "enum": ["Civil", "Divorce", "Immigration", "Business", "Criminal"]}, "description": "Specialization of the lawyer."}, "fee": {"type": "integer", "description": "Hourly fee charged by lawyer"}}, "required": ["city", "specialty", "fee"]}}]}, "model_result_raw": "<TOOLCALL>[find_nearby(city=\"Chicago, IL\", specialty=[\"divorce\"], fee=400)]</TOOLCALL>", "model_result_decoded": [{"find_nearby": {"city": "Chicago, IL", "specialty": ["divorce"], "fee": 400}}], "possible_answer": [{"lawyer.find_nearby": {"city": ["Chicago, IL.", "Chicago, IL"], "specialty": [["Divorce"]], "fee": [400]}}]}
{"id": "simple_167", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'law.civil.get_case_details' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_167", "question": [[{"role": "user", "content": "Retrieve the details of a Supreme Court case titled 'Roe v. Wade'.Include dissent information."}]], "function": [{"name": "law.civil.get_case_details", "description": "Retrieve the details of a Supreme Court case given its title.", "parameters": {"type": "dict", "properties": {"case_title": {"type": "string", "description": "Title of the Supreme Court case."}, "include_dissent": {"type": "boolean", "description": "If true, the output will include details of the dissenting opinion."}}, "required": ["case_title", "include_dissent"]}}]}, "model_result_raw": "<TOOLCALL>[civil.get_case_details(case_title='Roe v. Wade', include_dissent=True)]</TOOLCALL>", "model_result_decoded": [{"civil.get_case_details": {"case_title": "Roe v. Wade", "include_dissent": true}}], "possible_answer": [{"law.civil.get_case_details": {"case_title": ["Roe v. Wade"], "include_dissent": [true]}}]}
{"id": "simple_169", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'court_case.search' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_169", "question": [[{"role": "user", "content": "Find the details of the court case identified by docket number 123456 in Texas. Don't return full text"}]], "function": [{"name": "court_case.search", "description": "Retrieves details about a court case using its docket number and location.", "parameters": {"type": "dict", "properties": {"docket_number": {"type": "string", "description": "The docket number for the case."}, "location": {"type": "string", "description": "The location where the case is registered, in the format: state, e.g., Texas"}, "full_text": {"type": "boolean", "default": "false", "description": "Option to return the full text of the case ruling."}}, "required": ["docket_number", "location"]}}]}, "model_result_raw": "<TOOLCALL>[search(docket_number=\"123456\", location=\"Texas\")]</TOOLCALL>", "model_result_decoded": [{"search": {"docket_number": "123456", "location": "Texas"}}], "possible_answer": [{"court_case.search": {"docket_number": ["123456"], "location": ["Texas"], "full_text": [false, ""]}}]}
{"id": "simple_170", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'law_case_search.find_historical' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_170", "question": [[{"role": "user", "content": "Find a historical law case about fraud from 2010 to 2015."}]], "function": [{"name": "law_case_search.find_historical", "description": "Search for a historical law case based on specific criteria like the subject and year.", "parameters": {"type": "dict", "properties": {"subject": {"type": "string", "description": "The subject matter of the case, e.g., 'fraud'"}, "from_year": {"type": "integer", "description": "The start year for the range of the case. The case should happen after this year."}, "to_year": {"type": "integer", "description": "The end year for the range of the case. The case should happen before this year."}}, "required": ["subject", "from_year", "to_year"]}}]}, "model_result_raw": "<TOOLCALL>[find_historical(subject='fraud', from_year=2010, to_year=2015)]</TOOLCALL>", "model_result_decoded": [{"find_historical": {"subject": "fraud", "from_year": 2010, "to_year": 2015}}], "possible_answer": [{"law_case_search.find_historical": {"subject": ["fraud"], "from_year": [2010], "to_year": [2015]}}]}
{"id": "simple_172", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'legal_case.fetch' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_172", "question": [[{"role": "user", "content": "How to obtain the detailed case information of the 'R vs Adams' legal case?"}]], "function": [{"name": "legal_case.fetch", "description": "Fetch detailed legal case information from database.", "parameters": {"type": "dict", "properties": {"case_id": {"type": "string", "description": "The ID of the legal case."}, "details": {"type": "boolean", "description": "True if need the detail info. "}}, "required": ["case_id", "details"]}}]}, "model_result_raw": "<TOOLCALL>[fetch(case_id=\"R vs Adams\", details=True)]</TOOLCALL>", "model_result_decoded": [{"fetch": {"case_id": "R vs Adams", "details": true}}], "possible_answer": [{"legal_case.fetch": {"case_id": ["R vs Adams"], "details": [true]}}]}
{"id": "simple_175", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'lawyer.get_experience' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_175", "question": [[{"role": "user", "content": "How many months of experience a Lawyer John Doe has on handling Bankruptcy cases."}]], "function": [{"name": "lawyer.get_experience", "description": "Retrieve months of experience of a Lawyer on handling certain type of law cases.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The full name of the Lawyer."}, "law_type": {"type": "string", "description": "The type of law case. eg. Bankruptcy"}}, "required": ["name", "law_type"]}}]}, "model_result_raw": "<TOOLCALL>get_experience(name=\"John Doe\", law_type=\"Bankruptcy\")</TOOLCALL>", "model_result_decoded": [{"get_experience": {"name": "John Doe", "law_type": "Bankruptcy"}}], "possible_answer": [{"lawyer.get_experience": {"name": ["John Doe"], "law_type": ["Bankruptcy"]}}]}
{"id": "simple_176", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'lawsuit_details.find' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_176", "question": [[{"role": "user", "content": "Find details of patent lawsuits involving the company 'Apple Inc.' from the year 2010."}]], "function": [{"name": "lawsuit_details.find", "description": "Find details of lawsuits involving a specific company from a given year.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "Name of the company."}, "year": {"type": "integer", "description": "Year of the lawsuit."}, "case_type": {"type": "string", "description": "Type of the lawsuit, e.g., 'IPR', 'Patent', 'Commercial', etc. Default is 'all'."}}, "required": ["company_name", "year"]}}]}, "model_result_raw": "<TOOLCALL>[find(company_name='Apple Inc.', year=2010, case_type='Patent')]</TOOLCALL>", "model_result_decoded": [{"find": {"company_name": "Apple Inc.", "year": 2010, "case_type": "Patent"}}], "possible_answer": [{"lawsuit_details.find": {"company_name": ["Apple Inc."], "year": [2010], "case_type": ["Patent", "IPR"]}}]}
{"id": "simple_177", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'status': 'Patent'. Expected one of ['all', '']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_177", "question": [[{"role": "user", "content": "Find all Patent lawsuit cases of Facebook in 2018."}]], "function": [{"name": "get_lawsuit_cases", "description": "Retrieve all lawsuit cases related to a specific company during a particular year.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "year": {"type": "integer", "description": "The specific year to search for lawsuit cases."}, "status": {"type": "string", "enum": ["open", "closed", "all"], "description": "The status of the lawsuit cases to retrieve. If not specified, defaults to 'all'."}}, "required": ["company_name", "year"]}}]}, "model_result_raw": "<TOOLCALL>get_lawsuit_cases(company_name=\"Facebook\", year=2018, status=\"Patent\")</TOOLCALL>", "model_result_decoded": [{"get_lawsuit_cases": {"company_name": "Facebook", "year": 2018, "status": "Patent"}}], "possible_answer": [{"get_lawsuit_cases": {"company_name": ["Facebook"], "year": [2018], "status": ["all", ""]}}]}
{"id": "simple_193", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'plant_types': ['annual plants']. Expected one of [['Annual']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_193", "question": [[{"role": "user", "content": "Find the best local nurseries in Toronto with a good variety of annual plants."}]], "function": [{"name": "local_nursery.find", "description": "Locate local nurseries based on location and plant types availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city or locality where the nursery needs to be located."}, "plant_types": {"type": "array", "items": {"type": "string", "enum": ["Annual", "Perennial", "Shrub", "Tree", "Herbs", "Fruits"]}, "description": "Type of plants the nursery should provide."}}, "required": ["location", "plant_types"]}}]}, "model_result_raw": "<TOOLCALL>[local_nursery.find(location=\"Toronto\", plant_types=[\"annual plants\"])]</TOOLCALL>", "model_result_decoded": [{"local_nursery.find": {"location": "Toronto", "plant_types": ["annual plants"]}}], "possible_answer": [{"local_nursery.find": {"location": ["Toronto"], "plant_types": [["Annual"]]}}]}
{"id": "simple_199", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'environmental_data.air_quality_index' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_199", "question": [[{"role": "user", "content": "Find air quality index in San Jose for next three days."}]], "function": [{"name": "environmental_data.air_quality_index", "description": "Retrieves Air Quality Index (AQI) for specified location over a number of days.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Name of the city or town to retrieve air quality index for."}, "days": {"type": "integer", "description": "Number of days for which to retrieve data. If not provided, default to today."}}, "required": ["location"]}}]}, "model_result_raw": "<TOOLCALL>[air_quality_index(location=\"San Jose\", days=3)]</TOOLCALL>", "model_result_decoded": [{"air_quality_index": {"location": "San Jose", "days": 3}}], "possible_answer": [{"environmental_data.air_quality_index": {"location": ["San Jose", "'San Jose'"], "days": [3]}}]}
{"id": "simple_204", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'restaurant.find_nearby' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_204", "question": [[{"role": "user", "content": "Find restaurants near me within 10 miles that offer Chinese cuisine in Seattle."}]], "function": [{"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific criteria like cuisine type.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Seattle, WA"}, "cuisine": {"type": "string", "description": "Preferred type of cuisine in restaurant."}, "max_distance": {"type": "integer", "description": "Maximum distance (in miles) within which to search for restaurants. Default is 5."}}, "required": ["location", "cuisine"]}}]}, "model_result_raw": "<TOOLCALL>[find_nearby(location=\"Seattle, WA\", cuisine=\"Chinese\", max_distance=10)]</TOOLCALL>", "model_result_decoded": [{"find_nearby": {"location": "Seattle, WA", "cuisine": "Chinese", "max_distance": 10}}], "possible_answer": [{"restaurant.find_nearby": {"location": ["Seattle", "Seattle, WA"], "cuisine": ["Chinese"], "max_distance": [10]}}]}
{"id": "simple_207", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'route_preference'. Expected type string, got NoneType. Parameter value: None."], "error_type": "type_error:simple", "prompt": {"id": "simple_207", "question": [[{"role": "user", "content": "Get the shortest driving distance between New York, USA and Miami, USA."}]], "function": [{"name": "calculate_shortest_distance", "description": "Calculate the shortest driving distance between two locations.", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "The starting location for the drive."}, "end_location": {"type": "string", "description": "The destination location for the drive."}, "route_preference": {"type": "string", "enum": ["Shortest", "Scenic"], "description": "The preferred type of route."}}, "required": ["start_location", "end_location", "route_preference"]}}]}, "model_result_raw": "<TOOLCALL>calculate_shortest_distance(start_location=\"New York, USA\", end_location=\"Miami, USA\", route_preference=None)</TOOLCALL>", "model_result_decoded": [{"calculate_shortest_distance": {"start_location": "New York, USA", "end_location": "Miami, USA", "route_preference": null}}], "possible_answer": [{"calculate_shortest_distance": {"start_location": ["New York, USA", "New York City", "New York City, NY", "NYC", "NY"], "end_location": ["Miami, USA", "Miami", "Miami, FL", "FL"], "route_preference": ["Shortest"]}}]}
{"id": "simple_208", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'map_service.get_directions' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_208", "question": [[{"role": "user", "content": "Get me the directions from New York to Los Angeles avoiding highways and toll roads."}]], "function": [{"name": "map_service.get_directions", "description": "Retrieve directions from a starting location to an ending location, including options for route preferences.", "parameters": {"type": "dict", "properties": {"start": {"type": "string", "description": "Starting location for the route."}, "end": {"type": "string", "description": "Ending location for the route."}, "avoid": {"type": "array", "items": {"type": "string", "enum": ["tolls", "highways", "ferries"]}, "description": "Route features to avoid. Default is ['highways', 'ferries']"}}, "required": ["start", "end"]}}]}, "model_result_raw": "<TOOLCALL>[get_directions(start='New York', end='Los Angeles', avoid=['highways', 'toll roads'])]</TOOLCALL>", "model_result_decoded": [{"get_directions": {"start": "New York", "end": "Los Angeles", "avoid": ["highways", "toll roads"]}}], "possible_answer": [{"map_service.get_directions": {"start": ["New York", "NYC"], "end": ["Los Angeles", "LA"], "avoid": [["highways", "tolls"], ["tolls", "highways"]]}}]}
{"id": "simple_209", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'public_library.find_nearby' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_209", "question": [[{"role": "user", "content": "Locate the nearest public library in Boston, Massachusetts with English fiction section and free Wi-Fi."}]], "function": [{"name": "public_library.find_nearby", "description": "Locate nearby public libraries based on specific criteria like English fiction availability and Wi-Fi.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Boston, MA"}, "facilities": {"type": "array", "items": {"type": "string", "enum": ["Wi-Fi", "Reading Room", "Fiction", "Children Section", "Cafe"]}, "description": "Facilities and sections in public library."}}, "required": ["location", "facilities"]}}]}, "model_result_raw": "<TOOLCALL>[find_nearby(location=\"Boston, MA\", facilities=[\"English fiction\", \"free Wi-Fi\"])]</TOOLCALL>", "model_result_decoded": [{"find_nearby": {"location": "Boston, MA", "facilities": ["English fiction", "free Wi-Fi"]}}], "possible_answer": [{"public_library.find_nearby": {"location": ["Boston, MA", "Boston, Massachusetts"], "facilities": [["Fiction", "Wi-Fi"], ["Wi-Fi", "Fiction"]]}}]}
{"id": "simple_213", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'flight.book' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_213", "question": [[{"role": "user", "content": "Book a direct flight from San Francisco to London for 2022-04-27 afternoon"}]], "function": [{"name": "flight.book", "description": "Book a direct flight for a specific date and time from departure location to destination location.", "parameters": {"type": "dict", "properties": {"departure_location": {"type": "string", "description": "The location you are departing from."}, "destination_location": {"type": "string", "description": "The location you are flying to."}, "date": {"type": "string", "description": "The date of the flight. Accepts standard date format e.g., 2022-04-28."}, "time": {"type": "string", "description": "Preferred time of flight. Default is 'morning'."}, "direct_flight": {"type": "boolean", "description": "If set to true, only direct flights will be searched. Default is false."}}, "required": ["departure_location", "destination_location", "date"]}}]}, "model_result_raw": "<TOOLCALL>[book(departure_location='San Francisco', destination_location='London', date='2022-04-27', time='afternoon', direct_flight=True)]</TOOLCALL>", "model_result_decoded": [{"book": {"departure_location": "San Francisco", "destination_location": "London", "date": "2022-04-27", "time": "afternoon", "direct_flight": true}}], "possible_answer": [{"flight.book": {"departure_location": ["San Francisco", "SF"], "destination_location": ["London"], "date": ["2022-04-27", "04/27/2022", "Apr 27, 2022"], "time": ["afternoon", ""], "direct_flight": [true]}}]}
{"id": "simple_214", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'event_finder.find_upcoming' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_214", "question": [[{"role": "user", "content": "Search for upcoming month rock concerts in New York."}]], "function": [{"name": "event_finder.find_upcoming", "description": "Find upcoming events of a specific genre in a given location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state where the search will take place, e.g. New York, NY."}, "genre": {"type": "string", "description": "The genre of events."}, "days_ahead": {"type": "integer", "description": "The number of days from now to include in the search.", "default": 7}}, "required": ["location", "genre"]}}]}, "model_result_raw": "<TOOLCALL>[find_upcoming(location=\"New York, NY\", genre=\"rock\", days_ahead=30)]</TOOLCALL>", "model_result_decoded": [{"find_upcoming": {"location": "New York, NY", "genre": "rock", "days_ahead": 30}}], "possible_answer": [{"event_finder.find_upcoming": {"location": ["New York", "New York, NY", "NYC"], "genre": ["Rock", "rock"], "days_ahead": [30]}}]}
{"id": "simple_215", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'movie_details.brief' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_215", "question": [[{"role": "user", "content": "Give me a brief on movie 'Interstellar'"}]], "function": [{"name": "movie_details.brief", "description": "This function retrieves a brief about a specified movie.", "parameters": {"type": "dict", "properties": {"title": {"type": "string", "description": "Title of the movie"}, "extra_info": {"type": "boolean", "description": "Option to get additional information like Director, Cast, Awards etc.", "default": "false"}}, "required": ["title"]}}]}, "model_result_raw": "<TOOLCALL>[brief(title='Interstellar')]</TOOLCALL>", "model_result_decoded": [{"brief": {"title": "Interstellar"}}], "possible_answer": [{"movie_details.brief": {"title": ["Interstellar"], "extra_info": ["", false]}}]}
{"id": "simple_217", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'fMRI.analyze' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_217", "question": [[{"role": "user", "content": "Analyze my fMRI data in ~/data/myfMRI.nii from a multi-band sequence, that is smoothed at 6mm with an isotropic voxel size of 2mm."}]], "function": [{"name": "fMRI.analyze", "description": "This function takes in fMRI data to output analyzed data.", "parameters": {"type": "dict", "properties": {"data_source": {"type": "string", "description": "The path where the data is stored."}, "sequence_type": {"type": "string", "description": "Type of fMRI sequence"}, "smooth": {"type": "integer", "description": "Spatial smoothing FWHM. In mm."}, "voxel_size": {"type": "integer", "description": "Size of isotropic voxels in mm.", "default": 3}}, "required": ["data_source", "sequence_type", "smooth"]}}]}, "model_result_raw": "<TOOLCALL>[analyze(data_source='~/data/myfMRI.nii', sequence_type='multi-band', smooth=6, voxel_size=2)]</TOOLCALL>", "model_result_decoded": [{"analyze": {"data_source": "~/data/myfMRI.nii", "sequence_type": "multi-band", "smooth": 6, "voxel_size": 2}}], "possible_answer": [{"fMRI.analyze": {"data_source": ["~/data/myfMRI.nii"], "sequence_type": ["multi-band"], "smooth": [6], "voxel_size": [2]}}]}
{"id": "simple_218", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'patient.get_mri_report' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_218", "question": [[{"role": "user", "content": "Given patient with id 546382, retrieve their brain MRI report with the status 'concluded'."}]], "function": [{"name": "patient.get_mri_report", "description": "Fetch the brain MRI report of the patient for a given status.", "parameters": {"type": "dict", "properties": {"patient_id": {"type": "string", "description": "The patient identifier."}, "mri_type": {"type": "string", "description": "Type of the MRI. Default to be 'brain'.", "enum": ["brain", "spinal", "chest", "abdominal"]}, "status": {"type": "string", "description": "Status of the report, could be 'in progress', 'concluded' or 'draft'.", "enum": ["in progress", "concluded", "draft"]}}, "required": ["patient_id", "status"]}}]}, "model_result_raw": "<TOOLCALL>[get_mri_report(patient_id='546382', status='concluded')]</TOOLCALL>", "model_result_decoded": [{"get_mri_report": {"patient_id": "546382", "status": "concluded"}}], "possible_answer": [{"patient.get_mri_report": {"patient_id": ["546382"], "mri_type": ["brain", ""], "status": ["concluded"]}}]}
{"id": "simple_224", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'social_media_analytics.most_followed' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_224", "question": [[{"role": "user", "content": "Find the most followed person on twitter who tweets about psychology related to behaviour and group dynamics."}]], "function": [{"name": "social_media_analytics.most_followed", "description": "Find the most followed Twitter user related to certain topics.", "parameters": {"type": "dict", "properties": {"topic": {"type": "string", "description": "The main topic of interest."}, "sub_topics": {"type": "array", "items": {"type": "string"}, "description": "Sub-topics related to main topic. Default is empty."}, "region": {"type": "string", "description": "Region of interest for twitter search. Default is 'all'."}}, "required": ["topic"]}}]}, "model_result_raw": "<TOOLCALL>[most_followed(topic='psychology', sub_topics=['behaviour', 'group dynamics'])]</TOOLCALL>", "model_result_decoded": [{"most_followed": {"topic": "psychology", "sub_topics": ["behaviour", "group dynamics"]}}], "possible_answer": [{"social_media_analytics.most_followed": {"topic": ["psychology"], "sub_topics": [["behaviour", "group dynamics"]], "region": ["", "all"]}}]}
{"id": "simple_225", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'psych_research.get_preference' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_225", "question": [[{"role": "user", "content": "What is the percentage of population preferring digital reading over physical books?"}]], "function": [{"name": "psych_research.get_preference", "description": "Gathers research data on public preference between two options, based on societal category.", "parameters": {"type": "dict", "properties": {"category": {"type": "string", "description": "The societal category the preference data is about. E.g. reading, transportation, food"}, "option_one": {"type": "string", "description": "The first option people could prefer."}, "option_two": {"type": "string", "description": "The second option people could prefer."}, "demographic": {"type": "string", "description": "Specific demographic of society to narrow down the research.", "default": "all"}}, "required": ["category", "option_one", "option_two"]}}]}, "model_result_raw": "<TOOLCALL>[get_preference(category='reading', option_one='digital reading', option_two='physical books')]</TOOLCALL>", "model_result_decoded": [{"get_preference": {"category": "reading", "option_one": "digital reading", "option_two": "physical books"}}], "possible_answer": [{"psych_research.get_preference": {"category": ["reading"], "option_one": ["digital reading", "digital"], "option_two": ["physical book", "physical", "physical books"], "demographic": ["", "all"]}}]}
{"id": "simple_232", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'monarch.getMonarchOfYear' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_232", "question": [[{"role": "user", "content": "What was the full name king of England in 1800?"}]], "function": [{"name": "monarch.getMonarchOfYear", "description": "Retrieve the monarch of a specific location during a specified year.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location (e.g., country) whose monarch needs to be found."}, "year": {"type": "integer", "description": "The year to search the monarch."}, "fullName": {"type": "boolean", "default": false, "description": "If true, returns the full name and title of the monarch."}}, "required": ["location", "year"]}}]}, "model_result_raw": "<TOOLCALL>[getMonarchOfYear(location=\"England\", year=1800, fullName=True)]</TOOLCALL>", "model_result_decoded": [{"getMonarchOfYear": {"location": "England", "year": 1800, "fullName": true}}], "possible_answer": [{"monarch.getMonarchOfYear": {"location": ["England", "ENG"], "year": [1800], "fullName": [true]}}]}
{"id": "simple_233", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'european_history.get_event_date' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_233", "question": [[{"role": "user", "content": "When did the Treaty of Tordesillas take place? Put it in the format of YYYY."}]], "function": [{"name": "european_history.get_event_date", "description": "Retrieve the date of a specific event in European history.", "parameters": {"type": "dict", "properties": {"event_name": {"type": "string", "description": "The name of the event."}, "format": {"type": "string", "description": "Optional format of the returned date. Default is 'MM-DD-YYYY'."}}, "required": ["event_name"]}}]}, "model_result_raw": "<TOOLCALL>get_event_date(event_name=\"Treaty of Tordesillas\", format='YYYY')</TOOLCALL>", "model_result_decoded": [{"get_event_date": {"event_name": "Treaty of Tordesillas", "format": "YYYY"}}], "possible_answer": [{"european_history.get_event_date": {"event_name": ["Treaty of Tordesillas"], "format": ["YYYY"]}}]}
{"id": "simple_234", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'history_eu.fetch_events' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_234", "question": [[{"role": "user", "content": "Find important Wars in European history during the 19th century."}]], "function": [{"name": "history_eu.fetch_events", "description": "Fetches significant historical events within a specific time period in European history.", "parameters": {"type": "dict", "properties": {"century": {"type": "integer", "description": "The century you are interested in."}, "region": {"type": "string", "description": "The region of Europe you are interested in.", "enum": ["Northern", "Southern", "Eastern", "Western"]}, "category": {"type": "string", "description": "Category of the historical events. Default is 'Culture'.", "enum": ["Wars", "Culture", "Politics", "Scientific", "Others"]}}, "required": ["century", "region"]}}]}, "model_result_raw": "<TOOLCALL>[fetch_events(century=19, region='Europe', category='Wars')]</TOOLCALL>", "model_result_decoded": [{"fetch_events": {"century": 19, "region": "Europe", "category": "Wars"}}], "possible_answer": [{"history_eu.fetch_events": {"century": [19], "region": ["Northern", "Southern", "Eastern", "Western"], "category": ["Wars"]}}]}
{"id": "simple_236", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'us_history.get_event_info' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_236", "question": [[{"role": "user", "content": "Get start date on the American Civil War."}]], "function": [{"name": "us_history.get_event_info", "description": "Retrieve detailed information about a significant event in U.S. history.", "parameters": {"type": "dict", "properties": {"event_name": {"type": "string", "description": "The name of the event."}, "specific_info": {"type": "string", "description": "Specific aspect of information related to event.", "enum": ["Start Date", "End Date", "Participants", "Result", "Notable Figures", "Importance in History"]}}, "required": ["event_name", "specific_info"]}}]}, "model_result_raw": "<TOOLCALL>get_event_info(event_name=\"American Civil War\", specific_info=\"start date\")</TOOLCALL>", "model_result_decoded": [{"get_event_info": {"event_name": "American Civil War", "specific_info": "start date"}}], "possible_answer": [{"us_history.get_event_info": {"event_name": ["American Civil War", "Civil War"], "specific_info": ["Start Date"]}}]}
{"id": "simple_238", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'us_history.get_president' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_238", "question": [[{"role": "user", "content": "Who was the president of the United States during the American Civil War?"}]], "function": [{"name": "us_history.get_president", "description": "Retrieve the U.S. president during a specific event in American history.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The event in U.S. history."}, "year": {"type": "integer", "description": "The specific year of the event."}}, "required": ["event", "year"]}}]}, "model_result_raw": "<TOOLCALL>[get_president(event=\"American Civil War\", year=1861)]</TOOLCALL>", "model_result_decoded": [{"get_president": {"event": "American Civil War", "year": 1861}}], "possible_answer": [{"us_history.get_president": {"event": ["American Civil War"], "year": [1861, 1862, 1863, 1864, 1865]}}]}
{"id": "simple_240", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'history_api.get_president_by_year' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_240", "question": [[{"role": "user", "content": "Who was the President of the United States in 1940?"}]], "function": [{"name": "history_api.get_president_by_year", "description": "Get the name of the U.S. President for a specified year.", "parameters": {"type": "dict", "properties": {"year": {"type": "integer", "description": "The year you want to know the U.S. president of."}, "full_term_only": {"type": "boolean", "description": "Flag to determine if we should only return presidents that served a full term for the specified year.", "default": false}}, "required": ["year"]}}]}, "model_result_raw": "<TOOLCALL>[get_president_by_year(year=1940)]</TOOLCALL>", "model_result_decoded": [{"get_president_by_year": {"year": 1940}}], "possible_answer": [{"history_api.get_president_by_year": {"year": [1940], "full_term_only": ["", true, false]}}]}
{"id": "simple_244", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'work_title': 'Principia Mathematica'. Expected one of ['Law of Universal Gravitation', 'Universal Law of Gravitation', 'The law of universal gravitation']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_244", "question": [[{"role": "user", "content": "What year was the law of universal gravitation published by Isaac Newton?"}]], "function": [{"name": "publication_year.find", "description": "Fetches the year a particular scientific work was published.", "parameters": {"type": "dict", "properties": {"author": {"type": "string", "description": "Name of the author of the work."}, "work_title": {"type": "string", "description": "Title of the scientific work."}, "location": {"type": "string", "description": "Place of the publication, if known. Default to 'all'."}}, "required": ["author", "work_title"]}}]}, "model_result_raw": "<TOOLCALL>[publication_year.find(author=\"Isaac Newton\", work_title=\"Principia Mathematica\")]</TOOLCALL>", "model_result_decoded": [{"publication_year.find": {"author": "Isaac Newton", "work_title": "Principia Mathematica"}}], "possible_answer": [{"publication_year.find": {"author": ["Isaac Newton"], "work_title": ["Law of Universal Gravitation", "Universal Law of Gravitation", "The law of universal gravitation"], "location": ["", "all"]}}]}
{"id": "simple_245", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'discoverer.get' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_245", "question": [[{"role": "user", "content": "Who discovered radium?"}]], "function": [{"name": "discoverer.get", "description": "Retrieve the name of the discoverer of an element based on its name.", "parameters": {"type": "dict", "properties": {"element_name": {"type": "string", "description": "The name of the element."}, "year": {"type": "integer", "description": "Optional parameter that refers to the year of discovery. It could be helpful in case an element was discovered more than once. Default to 0, which means not use it."}, "first": {"type": "boolean", "default": true, "description": "Optional parameter indicating if the first discoverer's name should be retrieved."}}, "required": ["element_name"]}}]}, "model_result_raw": "<TOOLCALL>[get(element_name=\"radium\")]</TOOLCALL>", "model_result_decoded": [{"get": {"element_name": "radium"}}], "possible_answer": [{"discoverer.get": {"element_name": ["'radium'", "\"radium\"", "radium"], "year": ["", 0], "first": [true, ""]}}]}
{"id": "simple_246", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'science_history.get_discovery_details' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_246", "question": [[{"role": "user", "content": "Who discovered Gravity and what was the method used?"}]], "function": [{"name": "science_history.get_discovery_details", "description": "Retrieve the details of a scientific discovery based on the discovery name.", "parameters": {"type": "dict", "properties": {"discovery": {"type": "string", "description": "The name of the discovery, e.g. Gravity"}, "method_used": {"type": "string", "description": "The method used for the discovery, default value is 'default' which gives the most accepted method."}}, "required": ["discovery"]}}]}, "model_result_raw": "<TOOLCALL>[get_discovery_details(discovery='Gravity')]</TOOLCALL>", "model_result_decoded": [{"get_discovery_details": {"discovery": "Gravity"}}], "possible_answer": [{"science_history.get_discovery_details": {"discovery": ["Gravity"], "method_used": ["", "default"]}}]}
{"id": "simple_248", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'science_history.get_invention' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_248", "question": [[{"role": "user", "content": "Who invented the theory of relativity and in which year?"}]], "function": [{"name": "science_history.get_invention", "description": "Retrieve the inventor and year of invention based on the invention's name.", "parameters": {"type": "dict", "properties": {"invention_name": {"type": "string", "description": "The name of the invention."}, "want_year": {"type": "boolean", "default": false, "description": "Return the year of invention if set to true."}}, "required": ["invention_name", "want_year"]}}]}, "model_result_raw": "<TOOLCALL>[get_invention(invention_name=\"theory of relativity\", want_year=True)]</TOOLCALL>", "model_result_decoded": [{"get_invention": {"invention_name": "theory of relativity", "want_year": true}}], "possible_answer": [{"science_history.get_invention": {"invention_name": ["theory of relativity", "Theory of Relativity"], "want_year": [true]}}]}
{"id": "simple_249", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'religion.history_info' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_249", "question": [[{"role": "user", "content": "Tell me more about Christianity and its history till the 14th century"}]], "function": [{"name": "religion.history_info", "description": "Provides comprehensive historical details about a specified religion till a specified century.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "The name of the religion for which historical details are needed."}, "till_century": {"type": "integer", "description": "The century till which historical details are needed."}, "include_people": {"type": "boolean", "description": "To include influential people related to the religion during that time period, default is False"}}, "required": ["religion", "till_century"]}}]}, "model_result_raw": "<TOOLCALL>[history_info(religion='Christianity', till_century=14, include_people=True)]</TOOLCALL>", "model_result_decoded": [{"history_info": {"religion": "Christianity", "till_century": 14, "include_people": true}}], "possible_answer": [{"religion.history_info": {"religion": ["Christianity"], "till_century": [14], "include_people": [false, ""]}}]}
{"id": "simple_251", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'source': 'historical record'. Expected one of ['historical records']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_251", "question": [[{"role": "user", "content": "What is the earliest reference of Jesus Christ in history from historical record?"}]], "function": [{"name": "get_earliest_reference", "description": "Retrieve the earliest historical reference of a person.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the person."}, "source": {"type": "string", "enum": ["scriptures", "historical records"], "description": "Source to fetch the reference. Default is 'scriptures'"}}, "required": ["name"]}}]}, "model_result_raw": "<TOOLCALL>get_earliest_reference(name=\"Jesus Christ\", source=\"historical record\")</TOOLCALL>", "model_result_decoded": [{"get_earliest_reference": {"name": "Jesus Christ", "source": "historical record"}}], "possible_answer": [{"get_earliest_reference": {"name": ["Jesus Christ"], "source": ["historical records"]}}]}
{"id": "simple_255", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'religious_history.get_papal_biography' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_255", "question": [[{"role": "user", "content": "Get the biography and main contributions of Pope Innocent III."}]], "function": [{"name": "religious_history.get_papal_biography", "description": "Retrieve the biography and main religious and historical contributions of a Pope based on his papal name.", "parameters": {"type": "dict", "properties": {"papal_name": {"type": "string", "description": "The papal name of the Pope."}, "include_contributions": {"type": "boolean", "default": false, "description": "Include main contributions of the Pope in the response if true."}}, "required": ["papal_name", "include_contributions"]}}]}, "model_result_raw": "<TOOLCALL>get_papal_biography(papal_name=\"Innocent III\", include_contributions=True)</TOOLCALL>", "model_result_decoded": [{"get_papal_biography": {"papal_name": "Innocent III", "include_contributions": true}}], "possible_answer": [{"religious_history.get_papal_biography": {"papal_name": ["Innocent III", "Pope Innocent III"], "include_contributions": [true]}}]}
{"id": "simple_260", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Unexpected dict key parameter: 'window'.", "Missing dict key parameter: 'type'."], "error_type": "value_error:dict_key", "prompt": {"id": "simple_260", "question": [[{"role": "user", "content": "Calculate how many gallons of paint is required to paint a wall with width of 20ft and height of 12ft, assuming 1 gallon covers approximately 350 sq.ft. Don't include window area of 15 sq.ft."}]], "function": [{"name": "paint_requirement.calculate", "description": "Calculate the amount of paint required to paint a given area. Account for coverage efficiency of the paint and exclusions (like windows).", "parameters": {"type": "dict", "properties": {"area": {"type": "dict", "properties": {"width": {"type": "integer", "description": "The width of the area to be painted in feet."}, "height": {"type": "integer", "description": "The height of the area to be painted in feet."}}, "description": "The area to be painted."}, "paint_coverage": {"type": "integer", "description": "Coverage area per gallon of the paint in square feet.", "default": 350}, "exclusion": {"type": "dict", "properties": {"type": {"type": "string", "description": "The type of the exclusion e.g window, door etc."}, "area": {"type": "integer", "description": "The area of the exclusion in square feet."}}, "description": "Area not to be painted. Default to not use any exclusion if not specified."}}, "required": ["area", "paint_coverage"]}}]}, "model_result_raw": "<TOOLCALL>paint_requirement.calculate(area={'width': 20, 'height': 12}, paint_coverage=350, exclusion={'window': 15})</TOOLCALL>", "model_result_decoded": [{"paint_requirement.calculate": {"area": {"width": 20, "height": 12}, "paint_coverage": 350, "exclusion": {"window": 15}}}], "possible_answer": [{"paint_requirement.calculate": {"area": [{"width": [20], "height": [12]}], "paint_coverage": [350], "exclusion": [{"type": ["window"], "area": [15]}]}}]}
{"id": "simple_268", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'sculpture_locator.find_by_artist' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_268", "question": [[{"role": "user", "content": "Find me the sculptures of Michelangelo with material Marble in Rome, Italy."}]], "function": [{"name": "sculpture_locator.find_by_artist", "description": "Locate the sculptures of specific artist by material and location", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "Name of the Artist of the sculpture"}, "material": {"type": "string", "description": "Material of the sculpture."}, "location": {"type": "string", "description": "The location where you want to find the sculpture. Default is 'all' if not specified."}}, "required": ["artist", "material"]}}]}, "model_result_raw": "<TOOLCALL>[find_by_artist(artist='Michelangelo', material='Marble', location='Rome, Italy')]</TOOLCALL>", "model_result_decoded": [{"find_by_artist": {"artist": "Michelangelo", "material": "Marble", "location": "Rome, Italy"}}], "possible_answer": [{"sculpture_locator.find_by_artist": {"artist": ["Michelangelo"], "material": ["Marble"], "location": ["Rome", "Rome, Italy"]}}]}
{"id": "simple_270", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'building.get_dimensions' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_270", "question": [[{"role": "user", "content": "Can you give me the height and width of Empire State building in feet?"}]], "function": [{"name": "building.get_dimensions", "description": "Retrieve the dimensions of a specific building based on its name.", "parameters": {"type": "dict", "properties": {"building_name": {"type": "string", "description": "The name of the building."}, "unit": {"type": "string", "description": "The unit in which you want the dimensions. Default is meter.", "enum": ["meter", "feet"]}}, "required": ["building_name", "unit"]}}]}, "model_result_raw": "<TOOLCALL>[get_dimensions(building_name=\"Empire State Building\", unit=\"feet\")]</TOOLCALL>", "model_result_decoded": [{"get_dimensions": {"building_name": "Empire State Building", "unit": "feet"}}], "possible_answer": [{"building.get_dimensions": {"building_name": ["Empire State Building", "Empire State"], "unit": ["feet"]}}]}
{"id": "simple_275", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'metropolitan_museum.get_top_artworks' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_275", "question": [[{"role": "user", "content": "Get the list of top 5 popular artworks at the Metropolitan Museum of Art. Please sort by popularity."}]], "function": [{"name": "metropolitan_museum.get_top_artworks", "description": "Fetches the list of popular artworks at the Metropolitan Museum of Art. Results can be sorted based on popularity.", "parameters": {"type": "dict", "properties": {"number": {"type": "integer", "description": "The number of artworks to fetch"}, "sort_by": {"type": "string", "description": "The criteria to sort the results on. Default is 'popularity'.", "enum": ["popularity", "chronological", "alphabetical"]}}, "required": ["number"]}}]}, "model_result_raw": "<TOOLCALL>[get_top_artworks(number=5, sort_by='popularity')]</TOOLCALL>", "model_result_decoded": [{"get_top_artworks": {"number": 5, "sort_by": "popularity"}}], "possible_answer": [{"metropolitan_museum.get_top_artworks": {"number": [5], "sort_by": ["popularity", ""]}}]}
{"id": "simple_277", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Optional parameter 'information' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_277", "question": [[{"role": "user", "content": "Find the working hours and ticket price of The British Museum for this weekend, Jun.20,2023."}]], "function": [{"name": "museum_info", "description": "Get information about a museum including its opening hours and ticket prices for a specific date range.", "parameters": {"type": "dict", "properties": {"museum": {"type": "string", "description": "The name of the museum."}, "date": {"type": "string", "description": "The specific date for which information is needed, in the format of YYYY-MM-DD such as '2022-12-01'."}, "information": {"type": "array", "items": {"type": "string", "enum": ["opening_hours", "ticket_price", "address"]}, "description": "The type of information needed from the museum. This is optional and defaults to 'all' if not specified.", "default": "all"}}, "required": ["museum", "date"]}}]}, "model_result_raw": "<TOOLCALL>[museum_info(museum='The British Museum', date='2023-06-20')]</TOOLCALL>", "model_result_decoded": [{"museum_info": {"museum": "The British Museum", "date": "2023-06-20"}}], "possible_answer": [{"museum_info": {"museum": ["The British Museum"], "date": ["2023-06-20"], "information": [["opening_hours", "ticket_price"], ["ticket_price", "opening_hours"]]}}]}
{"id": "simple_278", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'features': ['price', 'ratings']. Expected one of [['price', 'rating']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_278", "question": [[{"role": "user", "content": "Find me the average price and ratings of piano from Yamaha."}]], "function": [{"name": "get_instrument_details", "description": "Retrieve the average price and ratings of an instrument from a particular manufacturer.", "parameters": {"type": "dict", "properties": {"instrument": {"type": "string", "description": "The name of the instrument."}, "manufacturer": {"type": "string", "description": "The manufacturer of the instrument."}, "features": {"type": "array", "items": {"type": "string", "enum": ["price", "rating"]}, "description": "The features to retrieve about the instrument. Default is 'price'"}}, "required": ["instrument", "manufacturer"]}}]}, "model_result_raw": "<TOOLCALL>get_instrument_details(instrument='piano', manufacturer='Yamaha', features=['price', 'ratings'])</TOOLCALL>", "model_result_decoded": [{"get_instrument_details": {"instrument": "piano", "manufacturer": "Yamaha", "features": ["price", "ratings"]}}], "possible_answer": [{"get_instrument_details": {"instrument": ["piano"], "manufacturer": ["Yamaha"], "features": [["price", "rating"]]}}]}
{"id": "simple_286", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'concert.get_details' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_286", "question": [[{"role": "user", "content": "Get concert details for the artist Beyonce performing in San Diego next month (April 2022)."}]], "function": [{"name": "concert.get_details", "description": "Fetch the details for a particular concert based on the artist and location.", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "Name of the artist/band who's performing."}, "location": {"type": "string", "description": "City where the concert is taking place."}, "date": {"type": "string", "description": "Date of the concert in 'mm-yyyy' format. Default is the current month if not specified."}}, "required": ["artist", "location"]}}]}, "model_result_raw": "<TOOLCALL>[get_details(artist='Beyonce', location='San Diego', date='04-2022')]</TOOLCALL>", "model_result_decoded": [{"get_details": {"artist": "Beyonce", "location": "San Diego", "date": "04-2022"}}], "possible_answer": [{"concert.get_details": {"artist": ["Beyonce"], "location": ["San Diego", "San Diego, California", "CA"], "date": ["04-2022", "April 2022"]}}]}
{"id": "simple_287", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'concert.search' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_287", "question": [[{"role": "user", "content": "Find me a classical concert this weekend in Los Angeles with cheap tickets."}]], "function": [{"name": "concert.search", "description": "Locate a concert based on specific criteria like genre, location, and date.", "parameters": {"type": "dict", "properties": {"genre": {"type": "string", "description": "Genre of the concert."}, "location": {"type": "string", "description": "City of the concert."}, "date": {"type": "string", "description": "Date of the concert, e.g. this weekend, today, tomorrow.", "enum": ["this weekend", "next weekend", "this month", "next month", "today", "tomorrow", "the day after"]}, "price_range": {"type": "string", "enum": ["free", "cheap", "moderate", "expensive"], "description": "Expected price range of the concert tickets. Default is 'free'."}}, "required": ["genre", "location", "date"]}}]}, "model_result_raw": "<TOOLCALL>[search(genre='classical', location='Los Angeles', date='this weekend', price_range='cheap')]</TOOLCALL>", "model_result_decoded": [{"search": {"genre": "classical", "location": "Los Angeles", "date": "this weekend", "price_range": "cheap"}}], "possible_answer": [{"concert.search": {"genre": ["classical"], "location": ["Los Angeles", "LA"], "date": ["this weekend"], "price_range": ["cheap"]}}]}
{"id": "simple_288", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'concert_booking.book_ticket' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_288", "question": [[{"role": "user", "content": "Get me two tickets for next Eminem concert in New York City."}]], "function": [{"name": "concert_booking.book_ticket", "description": "Book concert tickets for a specific artist in a specified city.", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "The artist you want to book tickets for."}, "city": {"type": "string", "description": "The city where the concert is."}, "num_tickets": {"type": "integer", "description": "Number of tickets required. Default is 1."}}, "required": ["artist", "city"]}}]}, "model_result_raw": "<TOOLCALL>[book_ticket(artist=\"Eminem\", city=\"New York City\", num_tickets=2)]</TOOLCALL>", "model_result_decoded": [{"book_ticket": {"artist": "Eminem", "city": "New York City", "num_tickets": 2}}], "possible_answer": [{"concert_booking.book_ticket": {"artist": ["Eminem"], "city": ["New York City", "New York City, NY", "NYC"], "num_tickets": [2]}}]}
{"id": "simple_289", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'concert.find_nearby' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_289", "question": [[{"role": "user", "content": "Find concerts near me in Seattle that plays jazz music."}]], "function": [{"name": "concert.find_nearby", "description": "Locate nearby concerts based on specific criteria like genre.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Seattle, WA"}, "genre": {"type": "string", "description": "Genre of music to be played at the concert."}}, "required": ["location", "genre"]}}]}, "model_result_raw": "<TOOLCALL>[find_nearby(location=\"Seattle, WA\", genre=\"jazz\")]</TOOLCALL>", "model_result_decoded": [{"find_nearby": {"location": "Seattle, WA", "genre": "jazz"}}], "possible_answer": [{"concert.find_nearby": {"location": ["Seattle", "Seattle, WA"], "genre": ["jazz", "Jazz"]}}]}
{"id": "simple_290", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'concert.find_details' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_290", "question": [[{"role": "user", "content": "What's the timing and location for The Weeknd's concert happening in December?"}]], "function": [{"name": "concert.find_details", "description": "Finds details of a concert event.", "parameters": {"type": "dict", "properties": {"artist": {"type": "string", "description": "Name of the artist performing."}, "month": {"type": "string", "description": "Month in which the concert is happening."}, "year": {"type": "integer", "description": "Year of the concert.", "default": 2022}}, "required": ["artist", "month"]}}]}, "model_result_raw": "<TOOLCALL>find_details(artist=\"The Weeknd\", month=\"December\")</TOOLCALL>", "model_result_decoded": [{"find_details": {"artist": "The Weeknd", "month": "December"}}], "possible_answer": [{"concert.find_details": {"artist": ["The Weeknd"], "month": ["December"], "year": ["", 2022]}}]}
{"id": "simple_291", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'music_generator.generate_melody' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_291", "question": [[{"role": "user", "content": "Generate a melody in C major scale, starting with the note C4, 16 measures long, at 120 beats per minute."}]], "function": [{"name": "music_generator.generate_melody", "description": "Generate a melody based on certain musical parameters.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The key of the melody. E.g., 'C' for C major."}, "start_note": {"type": "string", "description": "The first note of the melody, specified in scientific pitch notation. E.g., 'C4'."}, "length": {"type": "integer", "description": "The number of measures in the melody."}, "tempo": {"type": "integer", "description": "The tempo of the melody, in beats per minute. Optional parameter. If not specified, defaults to 120."}}, "required": ["key", "start_note", "length"]}}]}, "model_result_raw": "<TOOLCALL>[generate_melody(key='C', start_note='C4', length=16, tempo=120)]</TOOLCALL>", "model_result_decoded": [{"generate_melody": {"key": "C", "start_note": "C4", "length": 16, "tempo": 120}}], "possible_answer": [{"music_generator.generate_melody": {"key": ["C"], "start_note": ["C4"], "length": [16], "tempo": [120, ""]}}]}
{"id": "simple_293", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'music_composer.create_mix' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_293", "question": [[{"role": "user", "content": "Create a mix track using notes of C major scale and duration of each note being quarter of a second with a duration of 3 minutes."}]], "function": [{"name": "music_composer.create_mix", "description": "Create a mix of a song based on a particular music scale and duration", "parameters": {"type": "dict", "properties": {"scale": {"type": "string", "description": "The musical scale to be used. E.g: C Major, A Minor, etc."}, "note_duration": {"type": "string", "description": "Duration of each note. Options: 'whole', 'half', 'quarter', 'eighth', 'sixteenth'.", "enum": ["whole", "half", "quarter", "eighth", "sixteenth"]}, "track_length": {"type": "integer", "description": "Length of the mix track in seconds."}}, "required": ["scale", "note_duration", "track_length"]}}]}, "model_result_raw": "<TOOLCALL>[create_mix(scale='C Major', note_duration='quarter', track_length=180)]</TOOLCALL>", "model_result_decoded": [{"create_mix": {"scale": "C Major", "note_duration": "quarter", "track_length": 180}}], "possible_answer": [{"music_composer.create_mix": {"scale": ["C Major"], "note_duration": ["quarter"], "track_length": [180]}}]}
{"id": "simple_294", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'music_generation.create_chord_progression' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_294", "question": [[{"role": "user", "content": "Generate a major chord progression in C key with four chords."}]], "function": [{"name": "music_generation.create_chord_progression", "description": "Create a chord progression in a specific key and number of chords.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The key for the chord progression."}, "chords": {"type": "integer", "description": "Number of chords in the progression."}, "progression_type": {"type": "string", "description": "The type of the chord progression. Optional parameter. Default is 'major'."}}, "required": ["key", "chords"]}}]}, "model_result_raw": "<TOOLCALL>[create_chord_progression(key='C', chords=4, progression_type='major')]</TOOLCALL>", "model_result_decoded": [{"create_chord_progression": {"key": "C", "chords": 4, "progression_type": "major"}}], "possible_answer": [{"music_generation.create_chord_progression": {"key": ["C"], "chords": [4], "progression_type": ["major", ""]}}]}
{"id": "simple_296", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'music_generator.generate_scale_progression' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_296", "question": [[{"role": "user", "content": "Generate a major C scale progression with tempo 80 BPM and duration 4 beats."}]], "function": [{"name": "music_generator.generate_scale_progression", "description": "Generate a music scale progression in a specific key with a given tempo and duration.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The key in which to generate the scale progression."}, "tempo": {"type": "integer", "description": "The tempo of the scale progression in BPM."}, "duration": {"type": "integer", "description": "The duration of each note in beats."}, "scale_type": {"type": "string", "default": "major", "description": "The type of scale to generate. Defaults to 'major'."}}, "required": ["key", "tempo", "duration"]}}]}, "model_result_raw": "<TOOLCALL>generate_scale_progression(key='C', tempo=80, duration=4, scale_type='major')</TOOLCALL>", "model_result_decoded": [{"generate_scale_progression": {"key": "C", "tempo": 80, "duration": 4, "scale_type": "major"}}], "possible_answer": [{"music_generator.generate_scale_progression": {"key": ["C"], "tempo": [80], "duration": [4], "scale_type": ["major", ""]}}]}
{"id": "simple_300", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'music.calculate_note_duration' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_300", "question": [[{"role": "user", "content": "Calculate the duration between two notes of 440Hz and 880Hz frequency based on harmonic rhythm."}]], "function": [{"name": "music.calculate_note_duration", "description": "Calculate the duration between two notes based on their frequencies and harmonic rhythm.", "parameters": {"type": "dict", "properties": {"first_note_frequency": {"type": "integer", "description": "The frequency of the first note in Hz."}, "second_note_frequency": {"type": "integer", "description": "The frequency of the second note in Hz."}, "tempo": {"type": "integer", "description": "The tempo of the music in beats per minute. Defaults to 120 beats per minute."}}, "required": ["first_note_frequency", "second_note_frequency"]}}]}, "model_result_raw": "<TOOLCALL>[calculate_note_duration(first_note_frequency=440, second_note_frequency=880)]</TOOLCALL>", "model_result_decoded": [{"calculate_note_duration": {"first_note_frequency": 440, "second_note_frequency": 880}}], "possible_answer": [{"music.calculate_note_duration": {"first_note_frequency": [440], "second_note_frequency": [880], "tempo": ["", 120]}}]}
{"id": "simple_303", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'soccer_stat.get_player_stats' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_303", "question": [[{"role": "user", "content": "Get the player stats of Cristiano Ronaldo in the 2019-2020 season"}]], "function": [{"name": "soccer_stat.get_player_stats", "description": "Retrieve soccer player statistics for a given season.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "Name of the player."}, "season": {"type": "string", "description": "Soccer season, usually specified by two years."}, "league": {"type": "string", "description": "Optional - the soccer league, defaults to all leagues if not specified."}}, "required": ["player_name", "season"]}}]}, "model_result_raw": "<TOOLCALL>[get_player_stats(player_name=\"Cristiano Ronaldo\", season=\"2019-2020\")]</TOOLCALL>", "model_result_decoded": [{"get_player_stats": {"player_name": "Cristiano Ronaldo", "season": "2019-2020"}}], "possible_answer": [{"soccer_stat.get_player_stats": {"player_name": ["Cristiano Ronaldo"], "season": ["2019-2020"], "league": [""]}}]}
{"id": "simple_304", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'player_stats.getLastGame' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_304", "question": [[{"role": "user", "content": "Get point and rebound stats for player 'LeBron James' from last basketball game"}]], "function": [{"name": "player_stats.getLastGame", "description": "Get last game statistics for a specific player in basketball", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The name of the basketball player."}, "team": {"type": "string", "description": "The team that player currently plays for."}, "metrics": {"type": "array", "items": {"type": "string", "enum": ["Points", "Rebounds", "Assists", "Blocks"]}, "description": "Specific metrics to retrieve. If no value is specified, all available metrics will be returned by default."}}, "required": ["player_name", "team"]}}]}, "model_result_raw": "<TOOLCALL>[getLastGame(player_name='LeBron James', team='Los Angeles Lakers', metrics=['points', 'rebounds'])]</TOOLCALL>", "model_result_decoded": [{"getLastGame": {"player_name": "LeBron James", "team": "Los Angeles Lakers", "metrics": ["points", "rebounds"]}}], "possible_answer": [{"player_stats.getLastGame": {"player_name": ["LeBron James"], "team": ["Los Angeles Lakers", "LAL", "Lakers"], "metrics": [["Points", "Rebounds"]]}}]}
{"id": "simple_305", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'sports_stats.get_performance' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_305", "question": [[{"role": "user", "content": "Calculate the overall goal and assist of soccer player Messi in La Liga 2020-2021 season"}]], "function": [{"name": "sports_stats.get_performance", "description": "Compute the performance score of a soccer player given his game stats for a specific tournament in a season.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "Name of the player."}, "tournament": {"type": "string", "description": "Name of the soccer tournament."}, "season": {"type": "string", "description": "Specific season in format 'YYYY-YYYY'."}, "performance_indicator": {"type": "array", "items": {"type": "string", "enum": ["Goals Scored", "Assists Made", "Saves Made", "Cards Received"]}, "description": "Array of performance indicators. Use as much as possible. Default to use all if not specified."}}, "required": ["player_name", "tournament", "season"]}}]}, "model_result_raw": "<TOOLCALL>[get_performance(player_name='Messi', tournament='La Liga', season='2020-2021', performance_indicator=['goals', 'assists'])]</TOOLCALL>", "model_result_decoded": [{"get_performance": {"player_name": "Messi", "tournament": "La Liga", "season": "2020-2021", "performance_indicator": ["goals", "assists"]}}], "possible_answer": [{"sports_stats.get_performance": {"player_name": ["Messi", "Lionel Messi"], "tournament": ["La Liga"], "season": ["2020-2021"], "performance_indicator": [["Goals Scored", "Assists Made"]]}}]}
{"id": "simple_307", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'game_result.get_winner' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_307", "question": [[{"role": "user", "content": "Who won the basketball game between Lakers and Clippers on Jan 28, 2021?"}]], "function": [{"name": "game_result.get_winner", "description": "Get the winner of a specific basketball game.", "parameters": {"type": "dict", "properties": {"teams": {"type": "array", "items": {"type": "string"}, "description": "List of two teams who played the game."}, "date": {"type": "string", "description": "The date of the game, formatted as YYYY-MM-DD."}, "venue": {"type": "string", "optional": true, "description": "Optional: The venue of the game. Default is 'home'."}}, "required": ["teams", "date"]}}]}, "model_result_raw": "<TOOLCALL>[get_winner(teams=['Lakers', 'Clippers'], date='2021-01-28')]</TOOLCALL>", "model_result_decoded": [{"get_winner": {"teams": ["Lakers", "Clippers"], "date": "2021-01-28"}}], "possible_answer": [{"game_result.get_winner": {"teams": [["Lakers", "Clippers"], ["Clippers", "Lakers"]], "date": ["2021-01-28", "01/28/2021", "Jan.28,2021"], "venue": ["", true]}}]}
{"id": "simple_308", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'sports.match_schedule' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_308", "question": [[{"role": "user", "content": "What are the next five matches for Manchester United and who are they playing against in the English Premier League?"}]], "function": [{"name": "sports.match_schedule", "description": "Retrieve the match schedule for a specific sports team.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "num_matches": {"type": "integer", "description": "The number of upcoming matches you want to get."}, "league": {"type": "string", "description": "The sports league of the team. This is an optional parameter. Default is 'English Premier League'."}}, "required": ["team_name", "num_matches"]}}]}, "model_result_raw": "<TOOLCALL>[match_schedule(team_name='Manchester United', num_matches=5, league='English Premier League')]</TOOLCALL>", "model_result_decoded": [{"match_schedule": {"team_name": "Manchester United", "num_matches": 5, "league": "English Premier League"}}], "possible_answer": [{"sports.match_schedule": {"team_name": ["Manchester United", "Man United", "Man U", "MUFC"], "num_matches": [5], "league": ["English Premier League", ""]}}]}
{"id": "simple_309", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'nfl_data.player_record' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_309", "question": [[{"role": "user", "content": "Find me the record of Tom Brady in the 2020 NFL season."}]], "function": [{"name": "nfl_data.player_record", "description": "Retrieve the record of an NFL player in a specified season.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "The name of the NFL player."}, "season_year": {"type": "integer", "description": "The year of the NFL season."}, "team": {"type": "string", "description": "The NFL team that the player played for in that season. Default is all teams if not specified."}}, "required": ["player_name", "season_year"]}}]}, "model_result_raw": "<TOOLCALL>[player_record(player_name=\"Tom Brady\", season_year=2020)]</TOOLCALL>", "model_result_decoded": [{"player_record": {"player_name": "Tom Brady", "season_year": 2020}}], "possible_answer": [{"nfl_data.player_record": {"player_name": ["Tom Brady"], "season_year": [2020], "team": ["", "Tampa Bay Buccaneers"]}}]}
{"id": "simple_311", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'sports_db.find_athlete' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_311", "question": [[{"role": "user", "content": "Find me the detailed profile of basketball player Lebron James"}]], "function": [{"name": "sports_db.find_athlete", "description": "Find the profile information of a sports athlete based on their full name.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The full name of the athlete."}, "team": {"type": "string", "description": "The team the athlete belongs to. Default to all teams if not specified."}, "sport": {"type": "string", "description": "The sport that athlete plays.", "enum": ["Basketball", "Baseball", "Football", "Soccer"]}}, "required": ["name", "sport"]}}]}, "model_result_raw": "<TOOLCALL>[find_athlete(name=\"Lebron James\", sport=\"basketball\")]</TOOLCALL>", "model_result_decoded": [{"find_athlete": {"name": "Lebron James", "sport": "basketball"}}], "possible_answer": [{"sports_db.find_athlete": {"name": ["Lebron James"], "sport": ["Basketball"], "team": [""]}}]}
{"id": "simple_314", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'sports_celebrity.get_major_achievements' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_314", "question": [[{"role": "user", "content": "Find all the major achievements of the footballer Lionel Messi."}]], "function": [{"name": "sports_celebrity.get_major_achievements", "description": "Returns a list of major achievements of a particular sports celebrity.", "parameters": {"type": "dict", "properties": {"celebrity_name": {"type": "string", "description": "Name of the sports celebrity."}, "sports": {"type": "string", "description": "Type of sports the celebrity involved in. Default is Football."}, "team": {"type": "string", "description": "Optional. Team where celebrity currently plays. Default is 'all'"}}, "required": ["celebrity_name"]}}]}, "model_result_raw": "<TOOLCALL>[get_major_achievements(celebrity_name=\"Lionel Messi\", sports=\"Football\")]</TOOLCALL>", "model_result_decoded": [{"get_major_achievements": {"celebrity_name": "Lionel Messi", "sports": "Football"}}], "possible_answer": [{"sports_celebrity.get_major_achievements": {"celebrity_name": ["Lionel Messi", "Messi"], "sports": ["Football", "Soccer", ""], "team": ["", "all"]}}]}
{"id": "simple_320", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'sports_ranking.get_team_position' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_320", "question": [[{"role": "user", "content": "Fetch the basketball league standings, where Golden State Warriors stand in current 2022-2023 season with details"}]], "function": [{"name": "sports_ranking.get_team_position", "description": "Retrieve a team's position and stats in the basketball league for a given season.", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "The name of the team."}, "season": {"type": "string", "description": "The season for which data should be fetched."}, "detailed": {"type": "boolean", "description": "Flag to retrieve detailed stats or just the position.", "default": false}}, "required": ["team", "season"]}}]}, "model_result_raw": "<TOOLCALL>[get_team_position(team=\"Golden State Warriors\", season=\"2022-2023\", detailed=True)]</TOOLCALL>", "model_result_decoded": [{"get_team_position": {"team": "Golden State Warriors", "season": "2022-2023", "detailed": true}}], "possible_answer": [{"sports_ranking.get_team_position": {"team": ["Golden State Warriors", "GSW"], "season": ["2022-2023"], "detailed": [true]}}]}
{"id": "simple_322", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'sports_ranking.get_current' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_322", "question": [[{"role": "user", "content": "Get the current ranking for Liverpool Football Club in the Premier League."}]], "function": [{"name": "sports_ranking.get_current", "description": "Retrieve the current ranking of a specific team in a particular league.", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "The name of the team whose ranking is sought."}, "league": {"type": "string", "description": "The league in which the team participates."}, "season": {"type": "string", "description": "The season for which the ranking is sought. Defaults to the current season '2023-2024' if not provided."}}, "required": ["team", "league"]}}]}, "model_result_raw": "<TOOLCALL>[get_current(team=\"Liverpool Football Club\", league=\"Premier League\")]</TOOLCALL>", "model_result_decoded": [{"get_current": {"team": "Liverpool Football Club", "league": "Premier League"}}], "possible_answer": [{"sports_ranking.get_current": {"team": ["Liverpool Football Club", "Liverpool", "LFC"], "league": ["Premier League", "EPL", "English Premier League"], "season": ["", "2023-2024"]}}]}
{"id": "simple_323", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'sports_ranking.get_top_player' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_323", "question": [[{"role": "user", "content": "Who is ranked as the top player in woman tennis?"}]], "function": [{"name": "sports_ranking.get_top_player", "description": "Get the top player in a specific sport.", "parameters": {"type": "dict", "properties": {"sport": {"type": "string", "description": "The type of sport."}, "gender": {"type": "string", "description": "The gender of the sport category. Optional.", "default": "men"}}, "required": ["sport"]}}]}, "model_result_raw": "<TOOLCALL>[get_top_player(sport='tennis', gender='woman')]</TOOLCALL>", "model_result_decoded": [{"get_top_player": {"sport": "tennis", "gender": "woman"}}], "possible_answer": [{"sports_ranking.get_top_player": {"sport": ["tennis"], "gender": ["women"]}}]}
{"id": "simple_324", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'team_score.get_latest' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_324", "question": [[{"role": "user", "content": "Find the score of last game for Los Angeles Lakers including its opponent name."}]], "function": [{"name": "team_score.get_latest", "description": "Retrieve the score of the most recent game for a specified sports team.", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "Name of the sports team."}, "include_opponent": {"type": "boolean", "description": "Include the name of the opponent team in the return.", "default": false}}, "required": ["team"]}}]}, "model_result_raw": "<TOOLCALL>[get_latest(team=\"Los Angeles Lakers\", include_opponent=True)]</TOOLCALL>", "model_result_decoded": [{"get_latest": {"team": "Los Angeles Lakers", "include_opponent": true}}], "possible_answer": [{"team_score.get_latest": {"team": ["Los Angeles Lakers", "Lakers"], "include_opponent": [true]}}]}
{"id": "simple_325", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'sports.match_results' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_325", "question": [[{"role": "user", "content": "Who won the last match between Chicago Bulls and Los Angeles Lakers?"}]], "function": [{"name": "sports.match_results", "description": "Returns the results of a given match between two teams.", "parameters": {"type": "dict", "properties": {"team1": {"type": "string", "description": "The name of the first team."}, "team2": {"type": "string", "description": "The name of the second team."}, "season": {"type": "string", "description": "The season when the match happened. Default is the current season."}}, "required": ["team1", "team2"]}}]}, "model_result_raw": "<TOOLCALL>[match_results(team1='Chicago Bulls', team2='Los Angeles Lakers')]</TOOLCALL>", "model_result_decoded": [{"match_results": {"team1": "Chicago Bulls", "team2": "Los Angeles Lakers"}}], "possible_answer": [{"sports.match_results": {"team1": ["Chicago Bulls"], "team2": ["Los Angeles Lakers"], "season": [""]}}]}
{"id": "simple_327", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'sports_team.get_schedule' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_327", "question": [[{"role": "user", "content": "Give me the schedule of Manchester United for the next 6 games in Premier League."}]], "function": [{"name": "sports_team.get_schedule", "description": "Fetches the schedule of the specified sports team for the specified number of games in the given league.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the sports team."}, "num_of_games": {"type": "integer", "description": "Number of games for which to fetch the schedule."}, "league": {"type": "string", "description": "The name of the sports league. If not provided, the function will fetch the schedule for all games, regardless of the league."}, "location": {"type": "string", "description": "Optional. The city or venue where games are to be held. If not provided, default that all venues will be considered."}}, "required": ["team_name", "num_of_games", "league"]}}]}, "model_result_raw": "<TOOLCALL>[get_schedule(team_name=\"Manchester United\", num_of_games=6, league=\"Premier League\")]</TOOLCALL>", "model_result_decoded": [{"get_schedule": {"team_name": "Manchester United", "num_of_games": 6, "league": "Premier League"}}], "possible_answer": [{"sports_team.get_schedule": {"team_name": ["Manchester United", "Man United", "Man U", "MUFC"], "num_of_games": [6], "league": ["Premier League"], "location": [""]}}]}
{"id": "simple_328", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'boardgame.get_info' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_328", "question": [[{"role": "user", "content": "Find the rating and player count of the board game 'Ticket to Ride'."}]], "function": [{"name": "boardgame.get_info", "description": "Retrieve detailed information of a board game.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "Name of the board game."}, "parameters": {"type": "array", "items": {"type": "string", "enum": ["player count", "playing time", "age", "mechanics", "rating"]}, "description": "Game characteristics interested."}, "language": {"type": "string", "description": "The preferred language for the game information, default is English"}}, "required": ["name", "parameters"]}}]}, "model_result_raw": "<TOOLCALL>[get_info(name='Ticket to Ride', parameters=['rating', 'player count'])]</TOOLCALL>", "model_result_decoded": [{"get_info": {"name": "Ticket to Ride", "parameters": ["rating", "player count"]}}], "possible_answer": [{"boardgame.get_info": {"name": ["Ticket to Ride"], "parameters": [["rating", "player count"], ["player count", "rating"]], "language": ["", "English"]}}]}
{"id": "simple_330", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'info_required': ['average_rating', 'age_range']. Expected one of [['average_review_rating', 'age_range']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_330", "question": [[{"role": "user", "content": "What's the average review rating and the age range for the board game 'Catan'?"}]], "function": [{"name": "board_game_info", "description": "Get the information about a board game from a database. ", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "Name of the board game."}, "info_required": {"type": "array", "items": {"type": "string", "enum": ["average_review_rating", "age_range", "number_of_players", "playing_time", "genre"]}, "description": "Array of information requested for the game."}}, "required": ["game_name", "info_required"]}}]}, "model_result_raw": "<TOOLCALL>[board_game_info(game_name='Catan', info_required=['average_rating', 'age_range'])]</TOOLCALL>", "model_result_decoded": [{"board_game_info": {"game_name": "Catan", "info_required": ["average_rating", "age_range"]}}], "possible_answer": [{"board_game_info": {"game_name": ["Catan"], "info_required": [["average_review_rating", "age_range"]]}}]}
{"id": "simple_331", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'board_game.chess.get_top_players' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_331", "question": [[{"role": "user", "content": "Find the top chess players in New York with a rating above 2300."}]], "function": [{"name": "board_game.chess.get_top_players", "description": "Find top chess players in a location based on rating.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city you want to find the players from."}, "minimum_rating": {"type": "integer", "description": "Minimum rating to filter the players."}, "number_of_players": {"type": "integer", "default": 10, "description": "Number of players you want to retrieve, default value is 10"}}, "required": ["location", "minimum_rating"]}}]}, "model_result_raw": "<TOOLCALL>[chess.get_top_players(location=\"New York\", minimum_rating=2300)]</TOOLCALL>", "model_result_decoded": [{"chess.get_top_players": {"location": "New York", "minimum_rating": 2300}}], "possible_answer": [{"board_game.chess.get_top_players": {"location": ["New York", "New York City", "New York City, NY", "NYC"], "minimum_rating": [2300], "number_of_players": ["", 10]}}]}
{"id": "simple_333", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'details': ['high temperature', 'low temperature', 'humidity', 'precipitation']. Expected one of [['high_low_temperature', 'humidity', 'precipitation']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_333", "question": [[{"role": "user", "content": "Find the high and low temperatures, humidity, and precipitation for London, United Kingdom for the next 3 days."}]], "function": [{"name": "detailed_weather_forecast", "description": "Retrieve a detailed weather forecast for a specific location and time frame, including high/low temperatures, humidity, and precipitation.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the weather for."}, "days": {"type": "integer", "description": "Number of days for the forecast."}, "details": {"type": "array", "items": {"type": "string", "enum": ["high_low_temperature", "humidity", "precipitation"]}, "description": "Specific weather details required in the forecast."}}, "required": ["location", "days", "details"]}}]}, "model_result_raw": "<TOOLCALL>[detailed_weather_forecast(location=\"London, United Kingdom\", days=3, details=[\"high temperature\", \"low temperature\", \"humidity\", \"precipitation\"])]</TOOLCALL>", "model_result_decoded": [{"detailed_weather_forecast": {"location": "London, United Kingdom", "days": 3, "details": ["high temperature", "low temperature", "humidity", "precipitation"]}}], "possible_answer": [{"detailed_weather_forecast": {"location": ["London, United Kingdom", "London"], "days": [3], "details": [["high_low_temperature", "humidity", "precipitation"]]}}]}
{"id": "simple_334", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'blackjack.check_winner' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_334", "question": [[{"role": "user", "content": "Check who is the winner in a game of blackjack given player having A and 10, dealer having 10 and 9. The Ace is considered 1."}]], "function": [{"name": "blackjack.check_winner", "description": "Checks and determines the winner in a game of blackjack.", "parameters": {"type": "dict", "properties": {"player_cards": {"type": "array", "items": {"type": "string"}, "description": "Cards held by the player."}, "dealer_cards": {"type": "array", "items": {"type": "string"}, "description": "Cards held by the dealer."}, "ace_value": {"type": "integer", "description": "The value considered for the ace card, can be either 1 or 11.", "default": 11}}, "required": ["player_cards", "dealer_cards"]}}]}, "model_result_raw": "<TOOLCALL>[check_winner(player_cards=['A', '10'], dealer_cards=['10', '9'], ace_value=1)]</TOOLCALL>", "model_result_decoded": [{"check_winner": {"player_cards": ["A", "10"], "dealer_cards": ["10", "9"], "ace_value": 1}}], "possible_answer": [{"blackjack.check_winner": {"player_cards": [["A", "10"]], "dealer_cards": [["10", "9"]], "ace_value": [1]}}]}
{"id": "simple_338", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'card_game_probability.calculate' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_338", "question": [[{"role": "user", "content": "What is the probability of drawing a heart card from a deck of 52 cards?"}]], "function": [{"name": "card_game_probability.calculate", "description": "Calculate the probability of drawing a certain card or suit from a deck of cards.", "parameters": {"type": "dict", "properties": {"total_cards": {"type": "integer", "description": "Total number of cards in the deck."}, "desired_cards": {"type": "integer", "description": "Number of cards in the deck that satisfy the conditions."}, "cards_drawn": {"type": "integer", "default": 1, "description": "Number of cards drawn from the deck."}}, "required": ["total_cards", "desired_cards"]}}]}, "model_result_raw": "<TOOLCALL>[calculate(total_cards=52, desired_cards=13)]</TOOLCALL>", "model_result_decoded": [{"calculate": {"total_cards": 52, "desired_cards": 13}}], "possible_answer": [{"card_game_probability.calculate": {"total_cards": [52], "desired_cards": [13], "cards_drawn": ["", 1]}}]}
{"id": "simple_342", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'game_list.get_games' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_342", "question": [[{"role": "user", "content": "Find all multi-player games released in 2019 with an ESRB rating of 'Everyone'"}]], "function": [{"name": "game_list.get_games", "description": "Get a list of video games based on release year, multiplayer functionality and ESRB rating", "parameters": {"type": "dict", "properties": {"release_year": {"type": "integer", "description": "The year the game was released."}, "multiplayer": {"type": "boolean", "description": "Whether the game has multiplayer functionality."}, "ESRB_rating": {"type": "string", "description": "The ESRB rating of the game."}}, "required": ["release_year", "multiplayer", "ESRB_rating"]}}]}, "model_result_raw": "<TOOLCALL>[get_games(release_year=2019, multiplayer=True, ESRB_rating='Everyone')]</TOOLCALL>", "model_result_decoded": [{"get_games": {"release_year": 2019, "multiplayer": true, "ESRB_rating": "Everyone"}}], "possible_answer": [{"game_list.get_games": {"release_year": [2019], "multiplayer": [true], "ESRB_rating": ["Everyone"]}}]}
{"id": "simple_343", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'game_stats.fetch_player_statistics' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_343", "question": [[{"role": "user", "content": "Fetch player statistics of 'Zelda' on Switch for user 'Sam'."}]], "function": [{"name": "game_stats.fetch_player_statistics", "description": "Fetch player statistics for a specific video game for a given user.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the video game."}, "username": {"type": "string", "description": "The username of the player."}, "platform": {"type": "string", "description": "The platform user is playing on.", "default": "PC"}}, "required": ["game", "username"]}}]}, "model_result_raw": "<TOOLCALL>[fetch_player_statistics(game='Zelda', username='Sam', platform='Switch')]</TOOLCALL>", "model_result_decoded": [{"fetch_player_statistics": {"game": "Zelda", "username": "Sam", "platform": "Switch"}}], "possible_answer": [{"game_stats.fetch_player_statistics": {"game": ["Zelda"], "username": ["Sam"], "platform": ["Switch"]}}]}
{"id": "simple_347", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'soccer.get_last_match' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_347", "question": [[{"role": "user", "content": "Get me the details of the last game played by Liverpool F.C. Include its statistics."}]], "function": [{"name": "soccer.get_last_match", "description": "Retrieve the details of the last match played by a specified soccer club.", "parameters": {"type": "dict", "properties": {"team_name": {"type": "string", "description": "The name of the soccer club."}, "include_stats": {"type": "boolean", "description": "If true, include match statistics like possession, shots on target etc. Default is false."}}, "required": ["team_name"]}}]}, "model_result_raw": "<TOOLCALL>[get_last_match(team_name=\"Liverpool F.C.\", include_stats=True)]</TOOLCALL>", "model_result_decoded": [{"get_last_match": {"team_name": "Liverpool F.C.", "include_stats": true}}], "possible_answer": [{"soccer.get_last_match": {"team_name": ["Liverpool F.C.", "Liverpool"], "include_stats": [true]}}]}
{"id": "simple_349", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'game_score.highest' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_349", "question": [[{"role": "user", "content": "Find the highest score achieved by any player in the online game 'Overwatch' on PC globally."}]], "function": [{"name": "game_score.highest", "description": "Retrieve the highest score achieved by any player in a specific game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the online game."}, "platform": {"type": "string", "description": "The platform where the game is played, e.g. PC, Xbox, Playstation"}, "region": {"type": "string", "description": "The geographic region of the player. Defaults to 'Global'"}}, "required": ["game", "platform"]}}]}, "model_result_raw": "<TOOLCALL>[highest(game='Overwatch', platform='PC')]</TOOLCALL>", "model_result_decoded": [{"highest": {"game": "Overwatch", "platform": "PC"}}], "possible_answer": [{"game_score.highest": {"game": ["Overwatch"], "platform": ["PC"], "region": ["Global", ""]}}]}
{"id": "simple_352", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'platform'. Expected type string, got NoneType. Parameter value: None."], "error_type": "type_error:simple", "prompt": {"id": "simple_352", "question": [[{"role": "user", "content": "Get the average user score for the game 'The Legend of Zelda: Breath of the Wild' from GameSpot."}]], "function": [{"name": "gamespot.getAverageUserScore", "description": "Retrieve the average user score of a game from GameSpot.", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The platform the game was released on (e.g., Nintendo Switch, PS5, etc.)", "default": "all platforms"}}, "required": ["game_name", "platform"]}}]}, "model_result_raw": "<TOOLCALL>gamespot.getAverageUserScore(game_name=\"The Legend of Zelda: Breath of the Wild\", platform=None)</TOOLCALL>", "model_result_decoded": [{"gamespot.getAverageUserScore": {"game_name": "The Legend of Zelda: Breath of the Wild", "platform": null}}], "possible_answer": [{"gamespot.getAverageUserScore": {"game_name": ["The Legend of Zelda: Breath of the Wild"], "platform": ["Nintendo Switch", "all platforms"]}}]}
{"id": "simple_355", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'recipe_info.get_calories' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_355", "question": [[{"role": "user", "content": "How many calories in the Beef Lasagna Recipe from Foodnetwork.com?"}]], "function": [{"name": "recipe_info.get_calories", "description": "Retrieve the amount of calories from a specific recipe in a food website.", "parameters": {"type": "dict", "properties": {"website": {"type": "string", "description": "The food website that has the recipe."}, "recipe": {"type": "string", "description": "Name of the recipe."}, "optional_meal_time": {"type": "string", "description": "Specific meal time of the day for the recipe (optional, could be 'Breakfast', 'Lunch', 'Dinner'). Default is all if not specified."}}, "required": ["website", "recipe"]}}]}, "model_result_raw": "<TOOLCALL>get_calories(website=\"Foodnetwork.com\", recipe=\"Beef Lasagna\")</TOOLCALL>", "model_result_decoded": [{"get_calories": {"website": "Foodnetwork.com", "recipe": "Beef Lasagna"}}], "possible_answer": [{"recipe_info.get_calories": {"website": ["Foodnetwork.com"], "recipe": ["Beef Lasagna"], "optional_meal_time": [""]}}]}
{"id": "simple_369", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'grocery_store.find_nearby' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_369", "question": [[{"role": "user", "content": "Find a grocery store near me with organic fruits and vegetables in Houston."}]], "function": [{"name": "grocery_store.find_nearby", "description": "Locate nearby grocery stores based on specific criteria like organic fruits and vegetables.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Houston, TX"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["Organic", "Vegetables", "Fruits", "Dairy", "Seafood", "Bakery"]}, "description": "Categories of items to be found in the grocery store. Default is all if not specified."}}, "required": ["location"]}}]}, "model_result_raw": "<TOOLCALL>[find_nearby(location=\"Houston, TX\", categories=[\"organic fruits\", \"organic vegetables\"])]</TOOLCALL>", "model_result_decoded": [{"find_nearby": {"location": "Houston, TX", "categories": ["organic fruits", "organic vegetables"]}}], "possible_answer": [{"grocery_store.find_nearby": {"location": ["Houston", "Houston, TX"], "categories": [["Organic", "Vegetables", "Fruits"], ["Organic", "Fruits", "Vegetables"], ["Vegetables", "Fruits", "Organic"], ["Fruits", "Vegetables", "Organic"], ["Fruits", "Organic", "Vegetables"], ["Vegetables", "Organic", "Fruits"]]}}]}
{"id": "simple_371", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'whole_foods.check_price' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_371", "question": [[{"role": "user", "content": "Check the price of tomatoes and lettuce at the Whole Foods in Los Angeles."}]], "function": [{"name": "whole_foods.check_price", "description": "Check the price of items at a specific Whole Foods location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Location of the Whole Foods store."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items for which the price needs to be checked."}}, "required": ["location", "items"]}}]}, "model_result_raw": "<TOOLCALL>[check_price(location=\"Los Angeles\", items=[\"tomatoes\", \"lettuce\"])]</TOOLCALL>", "model_result_decoded": [{"check_price": {"location": "Los Angeles", "items": ["tomatoes", "lettuce"]}}], "possible_answer": [{"whole_foods.check_price": {"location": ["Los Angeles", "LA"], "items": [["tomatoes", "lettuce"]]}}]}
{"id": "simple_372", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'whole_foods.find_top_brands' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_372", "question": [[{"role": "user", "content": "Find the top five organic bananas brands on the basis of rating from Whole Foods store."}]], "function": [{"name": "whole_foods.find_top_brands", "description": "Get top brands based on a specific product from Whole Foods", "parameters": {"type": "dict", "properties": {"product": {"type": "string", "description": "The product for which the top brands should be fetched."}, "number": {"type": "integer", "description": "Number of top brands to be fetched. Default is 5"}, "organic": {"type": "boolean", "description": "If the product should be organic. Default is false"}}, "required": ["product"]}}]}, "model_result_raw": "<TOOLCALL>[find_top_brands(product='bananas', number=5, organic=True)]</TOOLCALL>", "model_result_decoded": [{"find_top_brands": {"product": "bananas", "number": 5, "organic": true}}], "possible_answer": [{"whole_foods.find_top_brands": {"product": ["bananas"], "number": [5, ""], "organic": [true]}}]}
{"id": "simple_373", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'pack_size'. Expected outer type array with inner type <class 'int'>. Parameter value: ['', '', '12 pack']."], "error_type": "type_error:nested", "prompt": {"id": "simple_373", "question": [[{"role": "user", "content": "I want to buy apples, rice, and 12 pack of bottled water from a Walmart near San Jose. Show me the product information and stock availability."}]], "function": [{"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified."}}, "required": ["loc", "product_list"]}}]}, "model_result_raw": "<TOOLCALL>[walmart.purchase(loc='San Jose', product_list=['apples', 'rice', 'bottled water'], pack_size=['', '', '12 pack'])]</TOOLCALL>", "model_result_decoded": [{"walmart.purchase": {"loc": "San Jose", "product_list": ["apples", "rice", "bottled water"], "pack_size": ["", "", "12 pack"]}}], "possible_answer": [{"walmart.purchase": {"loc": ["San Jose", "San Jose, CA"], "product_list": [["apples", "rice", "bottled water"], ["apples", "rice", "water"]], "pack_size": [[1, 1, 12]]}}]}
{"id": "simple_374", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'information': ['protein', 'calories', 'carbs']. Expected one of [['Protein', 'Calories', 'Carbohydrates']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_374", "question": [[{"role": "user", "content": "Check the amount of protein, calories and carbs in an avocado from Walmart."}]], "function": [{"name": "grocery_info.nutritional_info", "description": "Retrieve nutritional information for a given food item from a particular store", "parameters": {"type": "dict", "properties": {"store": {"type": "string", "description": "The store where the item is available"}, "food": {"type": "string", "description": "Food item for which information is needed."}, "information": {"type": "array", "items": {"type": "string", "enum": ["Protein", "Calories", "Carbohydrates", "Fat", "Fiber"]}, "description": "Nutritional details required."}}, "required": ["store", "food", "information"]}}]}, "model_result_raw": "<TOOLCALL>[grocery_info.nutritional_info(store=\"Walmart\", food=\"avocado\", information=[\"protein\", \"calories\", \"carbs\"])]</TOOLCALL>", "model_result_decoded": [{"grocery_info.nutritional_info": {"store": "Walmart", "food": "avocado", "information": ["protein", "calories", "carbs"]}}], "possible_answer": [{"grocery_info.nutritional_info": {"store": ["Walmart"], "food": ["avocado", "Avocado"], "information": [["Protein", "Calories", "Carbohydrates"]]}}]}
{"id": "simple_375", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'walmart.check_price' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_375", "question": [[{"role": "user", "content": "Check the total price for three pumpkins and two dozen eggs at Walmart."}]], "function": [{"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "dict", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional). Default to all if not specified."}}, "required": ["items", "quantities"]}}]}, "model_result_raw": "<TOOLCALL>[check_price(items=['pumpkin', 'eggs'], quantities=[3, 2], store_location='')]</TOOLCALL>", "model_result_decoded": [{"check_price": {"items": ["pumpkin", "eggs"], "quantities": [3, 2], "store_location": ""}}], "possible_answer": [{"walmart.check_price": {"items": [["pumpkins", "eggs"], ["pumpkin", "dozen eggs"]], "quantities": [[3, 24], [3, 2]], "store_location": [""]}}]}
{"id": "simple_382", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'start_date': '10th December 2022'. Expected one of ['2022-12-10', '10/12/2022', 'Dec 10, 2022', 'December 10, 2022']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_382", "question": [[{"role": "user", "content": "Book a single room for two nights at the Hilton Hotel in Chicago, starting from 10th December 2022."}]], "function": [{"name": "book_hotel", "description": "Book a room of specified type for a particular number of nights at a specific hotel, starting from a specified date.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city in which the hotel is located."}, "room_type": {"type": "string", "description": "The type of room to be booked."}, "start_date": {"type": "string", "description": "The start date for the booking."}, "nights": {"type": "integer", "description": "The number of nights for which the booking is to be made."}}, "required": ["hotel_name", "location", "room_type", "start_date", "nights"]}}]}, "model_result_raw": "<TOOLCALL>[book_hotel(hotel_name=\"Hilton Hotel\", location=\"Chicago\", room_type=\"single\", start_date=\"10th December 2022\", nights=2)]</TOOLCALL>", "model_result_decoded": [{"book_hotel": {"hotel_name": "Hilton Hotel", "location": "Chicago", "room_type": "single", "start_date": "10th December 2022", "nights": 2}}], "possible_answer": [{"book_hotel": {"hotel_name": ["Hilton Hotel", "Hilton"], "location": ["Chicago"], "room_type": ["single"], "start_date": ["2022-12-10", "10/12/2022", "Dec 10, 2022", "December 10, 2022"], "nights": [2]}}]}
{"id": "simple_385", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'hotel_bookings.book_room' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_385", "question": [[{"role": "user", "content": "Book a hotel room with king size bed in Los Angeles for 2 nights starting from 15th October,2023."}]], "function": [{"name": "hotel_bookings.book_room", "description": "Book a hotel room based on specific criteria like location, room type, and check-in and check-out dates.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state where you want to book the hotel, e.g. Los Angeles, CA"}, "room_type": {"type": "string", "description": "Preferred type of room in the hotel, e.g. king size, queen size, deluxe, suite etc."}, "check_in_date": {"type": "string", "description": "Check-in date for the hotel. Format - DD-MM-YYYY."}, "no_of_nights": {"type": "integer", "description": "Number of nights for the stay."}, "no_of_rooms": {"type": "integer", "description": "Number of rooms to book. Default is 1.", "default": 1}}, "required": ["location", "room_type", "check_in_date", "no_of_nights"]}}]}, "model_result_raw": "<TOOLCALL>[book_room(location='Los Angeles, CA', room_type='king size', check_in_date='15-10-2023', no_of_nights=2)]</TOOLCALL>", "model_result_decoded": [{"book_room": {"location": "Los Angeles, CA", "room_type": "king size", "check_in_date": "15-10-2023", "no_of_nights": 2}}], "possible_answer": [{"hotel_bookings.book_room": {"location": ["Los Angeles", "Los Angeles, CA", "LA"], "room_type": ["King Size", "king size"], "check_in_date": ["15-10-2023", "15th October", "2023-10-15", "10/15/2023", "Oct.15,2023"], "no_of_nights": [2], "no_of_rooms": ["", 1]}}]}
{"id": "simple_387", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'rooms'. Expected type integer, got str. Parameter value: '1'."], "error_type": "type_error:simple", "prompt": {"id": "simple_387", "question": [[{"role": "user", "content": "Book a hotel room at the Plaza Hotel in New York for 3 nights starting from 1st June 2022"}]], "function": [{"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}]}, "model_result_raw": "<TOOLCALL>[hotel_booking(hotel_name='Plaza Hotel', location='New York, NY', start_date='2022-06-01', end_date='2022-06-04', rooms='1')]</TOOLCALL>", "model_result_decoded": [{"hotel_booking": {"hotel_name": "Plaza Hotel", "location": "New York, NY", "start_date": "2022-06-01", "end_date": "2022-06-04", "rooms": "1"}}], "possible_answer": [{"hotel_booking": {"hotel_name": ["Plaza Hotel"], "location": ["New York City, NY", "New York, NY"], "start_date": ["2022-06-01", "06/01/2022", "Jun.1,2022"], "end_date": ["2022-06-04", "06/04/2022", "Jun.4,2022"], "rooms": [1, ""]}}]}
{"id": "simple_395", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'parking_lot.find_nearest' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_395", "question": [[{"role": "user", "content": "Find the nearest parking lot within 2 miles of Central Park in New York."}]], "function": [{"name": "parking_lot.find_nearest", "description": "Locate the nearest parking lot based on a specific location and radius.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The reference location e.g. Central Park, NY"}, "radius": {"type": "integer", "description": "The maximum distance from the location in miles. Default is 5 miles"}, "type": {"type": "string", "description": "The type of parking lot. Default is 'public'."}}, "required": ["location", "radius"]}}]}, "model_result_raw": "<TOOLCALL>[find_nearest(location=\"Central Park, NY\", radius=2)]</TOOLCALL>", "model_result_decoded": [{"find_nearest": {"location": "Central Park, NY", "radius": 2}}], "possible_answer": [{"parking_lot.find_nearest": {"location": ["Central Park, NY"], "radius": [2], "type": ["public", ""]}}]}
{"id": "simple_396", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'hospital.locate' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_396", "question": [[{"role": "user", "content": "Find a hospital within 5 km radius around Denver, Colorado with pediatrics department."}]], "function": [{"name": "hospital.locate", "description": "Locate nearby hospitals based on location and radius. Options to include specific departments are available.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Denver, CO"}, "radius": {"type": "integer", "description": "The radius within which you want to find the hospital in kms."}, "department": {"type": "string", "description": "Specific department within the hospital. Default is 'General Medicine'.", "enum": ["General Medicine", "Emergency", "Pediatrics", "Cardiology", "Orthopedics"]}}, "required": ["location", "radius"]}}]}, "model_result_raw": "<TOOLCALL>[locate(location=\"Denver, CO\", radius=5, department=\"Pediatrics\")]</TOOLCALL>", "model_result_decoded": [{"locate": {"location": "Denver, CO", "radius": 5, "department": "Pediatrics"}}], "possible_answer": [{"hospital.locate": {"location": ["Denver, Colorado", "Denver, CO"], "radius": [5], "department": ["Pediatrics"]}}]}
{"id": "simple_397", "model_name": "claude-3-opus-20240229", "test_category": "simple", "valid": false, "error": ["Function name 'distance_calculator.calculate' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_397", "question": [[{"role": "user", "content": "Find the distance between New York and Boston, accounting for terrain."}]], "function": [{"name": "distance_calculator.calculate", "description": "Calculate the distance between two locations, considering terrain.", "parameters": {"type": "dict", "properties": {"origin": {"type": "string", "description": "Starting location of the distance measurement."}, "destination": {"type": "string", "description": "Destination location of the distance measurement."}, "consider_terrain": {"type": "boolean", "description": "Whether to account for terrain in distance calculation, defaults to false."}}, "required": ["origin", "destination"]}}]}, "model_result_raw": "<TOOLCALL>[calculate(origin='New York', destination='Boston', consider_terrain=True)]</TOOLCALL>", "model_result_decoded": [{"calculate": {"origin": "New York", "destination": "Boston", "consider_terrain": true}}], "possible_answer": [{"distance_calculator.calculate": {"origin": ["New York", "New York City", "New York City, NY", "New York, NY", "NYC"], "destination": ["Boston"], "consider_terrain": [true]}}]}