{"accuracy": 0.91, "correct_count": 364, "total_count": 400}
{"id": "simple_5", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Optional parameter 'root_type' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_5", "question": [[{"role": "user", "content": "Find all the roots of a quadratic equation given coefficients a = 3, b = -11, and c = -4."}]], "function": [{"name": "solve_quadratic", "description": "Solve a quadratic equation given coefficients a, b, and c. If optional 'root_type' is 'real', the function will only return real roots. If not specified, function may return complex roots.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "The coefficient of the squared term in the quadratic equation."}, "b": {"type": "integer", "description": "The coefficient of the linear term in the quadratic equation."}, "c": {"type": "integer", "description": "The constant term in the quadratic equation."}, "root_type": {"type": "string", "description": "The type of roots to return: 'real' for real roots, 'all' for both real and complex roots. Default value is 'real'."}}, "required": ["a", "b", "c"]}}]}, "model_result_raw": "```json\n<functions>\n  <function name=\"solve_quadratic\">\n    <param name=\"a\" type=\"integer\">3</param>\n    <param name=\"b\" type=\"integer\">-11</param>\n    <param name=\"c\" type=\"integer\">-4</param>\n  </function>\n</functions>\n```", "model_result_decoded": [{"solve_quadratic": {"a": 3, "b": -11, "c": -4}}], "possible_answer": [{"solve_quadratic": {"a": [3], "b": [-11], "c": [-4], "root_type": ["all"]}}]}
{"id": "simple_17", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'formatted': False. Expected one of [True, '']."], "error_type": "value_error:others", "prompt": {"id": "simple_17", "question": [[{"role": "user", "content": "Find the prime factors of 450"}]], "function": [{"name": "get_prime_factors", "description": "Function to retrieve prime factors of a number.", "parameters": {"type": "dict", "properties": {"number": {"type": "integer", "description": "Number for which prime factors need to be calculated"}, "formatted": {"type": "boolean", "description": "Return formatted string if true, array if false. Default is true."}}, "required": ["number", "formatted"]}}]}, "model_result_raw": "```json\n<functions><function name=\"get_prime_factors\"><param name=\"number\" type=\"integer\">450</param><param name=\"formatted\" type=\"boolean\">false</param></function></functions>\n```", "model_result_decoded": [{"get_prime_factors": {"number": 450, "formatted": false}}], "possible_answer": [{"get_prime_factors": {"number": [450], "formatted": [true, ""]}}]}
{"id": "simple_55", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'cell_type': 'human cell'. Expected one of ['human']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_55", "question": [[{"role": "user", "content": "Find me detailed information about the structure of human cell"}]], "function": [{"name": "biology.get_cell_info", "description": "Retrieve information about the structure and functioning of a specified type of cell", "parameters": {"type": "dict", "properties": {"cell_type": {"type": "string", "description": "Type of cell you want information about"}, "detailed": {"type": "boolean", "description": "Indicate if you want a detailed description of the cell", "default": "false"}}, "required": ["cell_type"]}}]}, "model_result_raw": "```json\n<functions>\n  <function name=\"biology.get_cell_info\">\n    <param name=\"cell_type\" type=\"string\">human cell</param>\n    <param name=\"detailed\" type=\"boolean\">true</param>\n  </function>\n</functions>\n```", "model_result_decoded": [{"biology.get_cell_info": {"cell_type": "human cell", "detailed": true}}], "possible_answer": [{"biology.get_cell_info": {"cell_type": ["human"], "detailed": [true]}}]}
{"id": "simple_72", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 0)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_72", "question": [[{"role": "user", "content": "Calculate the expected evolutionary fitness of a creature, with trait A contributing to 40% of the fitness and trait B contributing 60%, if trait A has a value of 0.8 and trait B a value of 0.7."}]], "function": [{"name": "calculate_fitness", "description": "Calculate the expected evolutionary fitness of a creature based on the individual values and contributions of its traits.", "parameters": {"type": "dict", "properties": {"trait_values": {"type": "array", "items": {"type": "float"}, "description": "List of trait values, which are decimal numbers between 0 and 1, where 1 represents the trait maximally contributing to fitness."}, "trait_contributions": {"type": "array", "items": {"type": "float"}, "description": "List of the percentage contributions of each trait to the overall fitness, which must sum to 1."}}, "required": ["trait_values", "trait_contributions"]}}]}, "model_result_raw": "```json\n<functions>\n  <function name=\"calculate_fitness\">\n    <param name=\"trait_values\" type=\"array\">\n      <value>[0.8, 0.7]</value>\n    </param>\n    <param name=\"trait_contributions\" type=\"array\">\n      <value>[0.4, 0.6]</value>\n    </param>\n  </function>\n</functions>\n```", "possible_answer": [{"calculate_fitness": {"trait_values": [[0.8, 0.7]], "trait_contributions": [[0.4, 0.6]]}}]}
{"id": "simple_77", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 0)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_77", "question": [[{"role": "user", "content": "Find a nearby restaurant that serves vegan food in Los Angeles."}]], "function": [{"name": "restaurant.find_nearby", "description": "Locate nearby restaurants based on specific dietary preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Los Angeles, CA"}, "dietary_preference": {"type": "array", "items": {"type": "string", "enum": ["Vegan", "Vegetarian", "Gluten-free", "Dairy-free", "Nut-free"]}, "description": "Dietary preference. Default is empty list."}}, "required": ["location"]}}]}, "model_result_raw": "```json\n<functions>\n  <function name=\"restaurant.find_nearby\">\n    <param name=\"location\" type=\"string\">Los Angeles, CA</param>\n    <param name=\"dietary_preference\" type=\"array\">\n      <value>Vegan</value>\n    </param>\n  </function>\n</functions>\n```", "possible_answer": [{"restaurant.find_nearby": {"location": ["Los Angeles, CA"], "dietary_preference": [["Vegan"]]}}]}
{"id": "simple_90", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 0)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_90", "question": [[{"role": "user", "content": "Retrieve Personal Info and Job History data of a specific employee whose ID is 345 in company 'ABC Ltd.'"}]], "function": [{"name": "employee.fetch_data", "description": "Fetches the detailed data for a specific employee in a given company.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "employee_id": {"type": "integer", "description": "The unique ID of the employee."}, "data_field": {"type": "array", "items": {"type": "string", "enum": ["Personal Info", "Job History", "Payroll", "Attendance"]}, "description": "Fields of data to be fetched for the employee (Optional). Default is ['Personal Info']"}}, "required": ["company_name", "employee_id"]}}]}, "model_result_raw": "```json\n<functions>\n  <function name=\"employee.fetch_data\">\n    <param name=\"company_name\" type=\"string\">ABC Ltd.</param>\n    <param name=\"employee_id\" type=\"integer\">345</param>\n    <param name=\"data_field\" type=\"array\">\n      <value>Personal Info</value>\n      <value>Job History</value>\n    </param>\n  </function>\n</functions>\n```", "possible_answer": [{"employee.fetch_data": {"company_name": ["ABC Ltd."], "employee_id": [345], "data_field": [["Personal Info", "Job History"]]}}]}
{"id": "simple_96", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 0)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_96", "question": [[{"role": "user", "content": "Find records in database in user table where age is greater than 25 and job is 'engineer'."}]], "function": [{"name": "database.query", "description": "Query the database based on certain conditions.", "parameters": {"type": "dict", "properties": {"table": {"type": "string", "description": "Name of the table to query."}, "conditions": {"type": "array", "items": {"type": "dict", "properties": {"field": {"type": "string", "description": "The field to apply the condition."}, "operation": {"type": "string", "description": "The operation to be performed.", "enum": ["<", ">", "=", ">=", "<="]}, "value": {"type": "string", "description": "The value to be compared."}}, "required": ["field", "operation", "value"]}, "description": "Conditions for the query."}}, "required": ["table", "conditions"]}}]}, "model_result_raw": "```json\n<functions>\n  <function name=\"database.query\">\n    <param name=\"table\" type=\"string\">user</param>\n    <param name=\"conditions\" type=\"array\">\n      <value>\n        [\n          {\n            \"field\": \"age\",\n            \"operation\": \">\",\n            \"value\": \"25\"\n          },\n          {\n            \"field\": \"job\",\n            \"operation\": \"=\",\n            \"value\": \"engineer\"\n          }\n        ]\n      </value>\n    </param>\n  </function>\n</functions>\n```", "possible_answer": [{"database.query": {"table": ["user"], "conditions": [[{"field": ["age"], "operation": [">"], "value": ["25"]}, {"field": ["job"], "operation": ["="], "value": ["engineer"]}]]}}]}
{"id": "simple_98", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'hours': 18. Expected one of [6]."], "error_type": "value_error:others", "prompt": {"id": "simple_98", "question": [[{"role": "user", "content": "What will be the angle between the hour and minute hands of a clock at 6:30 PM?"}]], "function": [{"name": "calculate_clock_angle", "description": "Calculate the angle between the hour and minute hands of a clock at a given time.", "parameters": {"type": "dict", "properties": {"hours": {"type": "integer", "description": "The hour on the clock face."}, "minutes": {"type": "integer", "description": "The minutes on the clock face."}, "round_to": {"type": "integer", "description": "The number of decimal places to round the result to, default is 2."}}, "required": ["hours", "minutes"]}}]}, "model_result_raw": "```tool_code\n<functions><function name=\"calculate_clock_angle\"><param name=\"hours\" type=\"integer\">18</param><param name=\"minutes\" type=\"integer\">30</param></function></functions>\n```", "model_result_decoded": [{"calculate_clock_angle": {"hours": 18, "minutes": 30}}], "possible_answer": [{"calculate_clock_angle": {"hours": [6], "minutes": [30], "round_to": ["", 2]}}]}
{"id": "simple_103", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'polynomial': [-4.0, 2.0, 3.0]. Expected one of [[3.0, 2.0, -4.0]]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_103", "question": [[{"role": "user", "content": "Calculate the area under the curve y=3x^2 + 2x - 4, between x = -1 and x = 2."}]], "function": [{"name": "mathematics.calculate_area_under_curve", "description": "Calculate the area under the curve for a given polynomial function within a specified interval.", "parameters": {"type": "dict", "properties": {"polynomial": {"type": "array", "items": {"type": "float"}, "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."}, "limits": {"type": "array", "items": {"type": "float"}, "description": "A list of two numbers specifying the lower and upper limit for the integration interval."}}, "required": ["polynomial", "limits"]}}]}, "model_result_raw": "```tool_code\n<functions><function name=\"mathematics.calculate_area_under_curve\"><param name=\"polynomial\" type=\"array\">[-4.0, 2.0, 3.0]</param><param name=\"limits\" type=\"array\">[-1.0, 2.0]</param></function></functions>\n```", "model_result_decoded": [{"mathematics.calculate_area_under_curve": {"polynomial": [-4.0, 2.0, 3.0], "limits": [-1.0, 2.0]}}], "possible_answer": [{"mathematics.calculate_area_under_curve": {"polynomial": [[3.0, 2.0, -4.0]], "limits": [[-1.0, 2.0]]}}]}
{"id": "simple_123", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'group1'. Expected type array, got tuple. Parameter value: (12.4, 15.6, 11.2, 18.9)."], "error_type": "type_error:simple", "prompt": {"id": "simple_123", "question": [[{"role": "user", "content": "Perform a two-sample t-test to determine if there is a significant difference between the mean of group1 (e.g., 12.4, 15.6, 11.2, 18.9) and group2 (e.g., 10.5, 9.8, 15.2, 13.8) at the significance level 0.05."}]], "function": [{"name": "hypothesis_testing.two_sample_t_test", "description": "Perform a two-sample t-test to determine if there is a significant difference between the means of two independent samples.", "parameters": {"type": "dict", "properties": {"group1": {"type": "array", "items": {"type": "float"}, "description": "Sample observations from group 1."}, "group2": {"type": "array", "items": {"type": "float"}, "description": "Sample observations from group 2."}, "alpha": {"type": "float", "description": "Significance level for the t-test. Default is 0.05."}}, "required": ["group1", "group2"]}}]}, "model_result_raw": "```xml\n<functions>\n<function name=\"hypothesis_testing.two_sample_t_test\">\n<param name=\"group1\" type=\"array\">12.4, 15.6, 11.2, 18.9</param>\n<param name=\"group2\" type=\"array\">10.5, 9.8, 15.2, 13.8</param>\n<param name=\"alpha\" type=\"float\">0.05</param>\n</function>\n</functions>\n```", "model_result_decoded": [{"hypothesis_testing.two_sample_t_test": {"group1": [12.4, 15.6, 11.2, 18.9], "group2": [10.5, 9.8, 15.2, 13.8], "alpha": 0.05}}], "possible_answer": [{"hypothesis_testing.two_sample_t_test": {"group1": [[12.4, 15.6, 11.2, 18.9]], "group2": [[10.5, 9.8, 15.2, 13.8]], "alpha": [0.05, ""]}}]}
{"id": "simple_144", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. not well-formed (invalid token): line 1, column 96"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_144", "question": [[{"role": "user", "content": "Find the market performance of the S&P 500 and the Dow Jones over the past 5 days."}]], "function": [{"name": "market_performance.get_data", "description": "Retrieve the market performance data for specified indexes over a specified time period.", "parameters": {"type": "dict", "properties": {"indexes": {"type": "array", "items": {"type": "string"}, "description": "Array of stock market indexes. Supported indexes are 'S&P 500', 'Dow Jones', 'NASDAQ', 'FTSE 100', 'DAX' etc."}, "days": {"type": "integer", "description": "Number of days in the past for which the performance data is required."}, "detailed": {"type": "boolean", "description": "Whether to return detailed performance data. If set to true, returns high, low, opening, and closing prices. If false, returns only closing prices. Default is false."}}, "required": ["indexes", "days"]}}]}, "model_result_raw": "```json\n<functions><function name=\"market_performance.get_data\"><param name=\"indexes\" type=\"array\">[\"S&P 500\", \"Dow Jones\"]</param><param name=\"days\" type=\"integer\">5</param></function></functions>\n```", "possible_answer": [{"market_performance.get_data": {"indexes": [["S&P 500", "Dow Jones"]], "days": [5], "detailed": ["", true, false]}}]}
{"id": "simple_172", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_172", "question": [[{"role": "user", "content": "How to obtain the detailed case information of the 'R vs Adams' legal case?"}]], "function": [{"name": "legal_case.fetch", "description": "Fetch detailed legal case information from database.", "parameters": {"type": "dict", "properties": {"case_id": {"type": "string", "description": "The ID of the legal case."}, "details": {"type": "boolean", "description": "True if need the detail info. "}}, "required": ["case_id", "details"]}}]}, "model_result_raw": "I need the case ID to fetch the case information. Could you please provide the case ID?\n", "model_result_decoded": [], "possible_answer": [{"legal_case.fetch": {"case_id": ["R vs Adams"], "details": [true]}}]}
{"id": "simple_177", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_177", "question": [[{"role": "user", "content": "Find all Patent lawsuit cases of Facebook in 2018."}]], "function": [{"name": "get_lawsuit_cases", "description": "Retrieve all lawsuit cases related to a specific company during a particular year.", "parameters": {"type": "dict", "properties": {"company_name": {"type": "string", "description": "The name of the company."}, "year": {"type": "integer", "description": "The specific year to search for lawsuit cases."}, "status": {"type": "string", "enum": ["open", "closed", "all"], "description": "The status of the lawsuit cases to retrieve. If not specified, defaults to 'all'."}}, "required": ["company_name", "year"]}}]}, "model_result_raw": "The available function `get_lawsuit_cases` does not allow filtering by lawsuit type (Patent). It only allows filtering by company name, year, and status. Therefore, I cannot fulfill the request directly with the available tool.\n", "model_result_decoded": [], "possible_answer": [{"get_lawsuit_cases": {"company_name": ["Facebook"], "year": [2018], "status": ["all", ""]}}]}
{"id": "simple_190", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 0)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_190", "question": [[{"role": "user", "content": "What's the elevation and area of Yellowstone National Park?"}]], "function": [{"name": "park_information", "description": "Retrieve the basic information such as elevation and area of a national park.", "parameters": {"type": "dict", "properties": {"park_name": {"type": "string", "description": "The name of the national park."}, "information": {"type": "array", "items": {"type": "string", "enum": ["Elevation", "Area", "Location", "Established Year"]}, "description": "The type of information you want about the park."}}, "required": ["park_name", "information"]}}]}, "model_result_raw": "```json\n<functions>\n  <function name=\"park_information\">\n    <param name=\"park_name\" type=\"string\">Yellowstone National Park</param>\n    <param name=\"information\" type=\"array\">\n      <value>Elevation</value>\n      <value>Area</value>\n    </param>\n  </function>\n</functions>\n```", "possible_answer": [{"park_information": {"park_name": ["Yellowstone", "Yellowstone National Park"], "information": [["Elevation", "Area"], ["Area", "Elevation"]]}}]}
{"id": "simple_192", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'point1'. Expected type array, got tuple. Parameter value: (40.7128, -74.006)."], "error_type": "type_error:simple", "prompt": {"id": "simple_192", "question": [[{"role": "user", "content": "Calculate the slope gradient in degree between two points on a landscape with coordinates (40.7128, -74.0060) and (34.0522, -118.2437)."}]], "function": [{"name": "calculate_slope_gradient", "description": "Calculate the slope gradient between two geographical coordinates.", "parameters": {"type": "dict", "properties": {"point1": {"type": "array", "items": {"type": "float"}, "description": "The geographic coordinates for the first point [Latitude, Longitude]."}, "point2": {"type": "array", "items": {"type": "float"}, "description": "The geographic coordinates for the second point [Latitude, Longitude]."}, "unit": {"type": "string", "enum": ["degree", "percent", "ratio"], "description": "The unit for the slope gradient. Default is 'degree'."}}, "required": ["point1", "point2"]}}]}, "model_result_raw": "```json\n<functions>\n  <function name=\"calculate_slope_gradient\">\n    <param name=\"point1\" type=\"array\">40.7128, -74.0060</param>\n    <param name=\"point2\" type=\"array\">34.0522, -118.2437</param>\n    <param name=\"unit\" type=\"string\">degree</param>\n  </function>\n</functions>\n```", "model_result_decoded": [{"calculate_slope_gradient": {"point1": [40.7128, -74.006], "point2": [34.0522, -118.2437], "unit": "degree"}}], "possible_answer": [{"calculate_slope_gradient": {"point1": [[40.7128, -74.006]], "point2": [[34.0522, -118.2437]], "unit": ["degree", ""]}}]}
{"id": "simple_193", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 0)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_193", "question": [[{"role": "user", "content": "Find the best local nurseries in Toronto with a good variety of annual plants."}]], "function": [{"name": "local_nursery.find", "description": "Locate local nurseries based on location and plant types availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city or locality where the nursery needs to be located."}, "plant_types": {"type": "array", "items": {"type": "string", "enum": ["Annual", "Perennial", "Shrub", "Tree", "Herbs", "Fruits"]}, "description": "Type of plants the nursery should provide."}}, "required": ["location", "plant_types"]}}]}, "model_result_raw": "```json\n<functions>\n  <function name=\"local_nursery.find\">\n    <param name=\"location\" type=\"string\">Toronto</param>\n    <param name=\"plant_types\" type=\"array\">\n      <value>Annual</value>\n    </param>\n  </function>\n</functions>\n```", "possible_answer": [{"local_nursery.find": {"location": ["Toronto"], "plant_types": [["Annual"]]}}]}
{"id": "simple_202", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'energy_type': 'solar'. Expected one of ['renewable']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_202", "question": [[{"role": "user", "content": "How many greenhouse gas emissions would I save if I switched to renewable energy sources for 3 months in California?"}]], "function": [{"name": "calculate_emission_savings", "description": "Calculate potential greenhouse gas emissions saved by switching to renewable energy sources.", "parameters": {"type": "dict", "properties": {"energy_type": {"type": "string", "description": "Type of the renewable energy source."}, "usage_duration": {"type": "integer", "description": "Usage duration in months."}, "region": {"type": "string", "description": "The region where you use energy. Default is 'Texas'."}}, "required": ["energy_type", "usage_duration"]}}]}, "model_result_raw": "<functions><function name=\"calculate_emission_savings\"><param name=\"energy_type\" type=\"string\">solar</param><param name=\"usage_duration\" type=\"integer\">3</param><param name=\"region\" type=\"string\">California</param></function></functions>", "model_result_decoded": [{"calculate_emission_savings": {"energy_type": "solar", "usage_duration": 3, "region": "California"}}], "possible_answer": [{"calculate_emission_savings": {"energy_type": ["renewable"], "usage_duration": [3], "region": ["California", "CA"]}}]}
{"id": "simple_208", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 0)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_208", "question": [[{"role": "user", "content": "Get me the directions from New York to Los Angeles avoiding highways and toll roads."}]], "function": [{"name": "map_service.get_directions", "description": "Retrieve directions from a starting location to an ending location, including options for route preferences.", "parameters": {"type": "dict", "properties": {"start": {"type": "string", "description": "Starting location for the route."}, "end": {"type": "string", "description": "Ending location for the route."}, "avoid": {"type": "array", "items": {"type": "string", "enum": ["tolls", "highways", "ferries"]}, "description": "Route features to avoid. Default is ['highways', 'ferries']"}}, "required": ["start", "end"]}}]}, "model_result_raw": "```json\n<functions>\n  <function name=\"map_service.get_directions\">\n    <param name=\"start\" type=\"string\">New York</param>\n    <param name=\"end\" type=\"string\">Los Angeles</param>\n    <param name=\"avoid\" type=\"array\">\n      <value>tolls</value>\n      <value>highways</value>\n    </param>\n  </function>\n</functions>\n```", "possible_answer": [{"map_service.get_directions": {"start": ["New York", "NYC"], "end": ["Los Angeles", "LA"], "avoid": [["highways", "tolls"], ["tolls", "highways"]]}}]}
{"id": "simple_224", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 0)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_224", "question": [[{"role": "user", "content": "Find the most followed person on twitter who tweets about psychology related to behaviour and group dynamics."}]], "function": [{"name": "social_media_analytics.most_followed", "description": "Find the most followed Twitter user related to certain topics.", "parameters": {"type": "dict", "properties": {"topic": {"type": "string", "description": "The main topic of interest."}, "sub_topics": {"type": "array", "items": {"type": "string"}, "description": "Sub-topics related to main topic. Default is empty."}, "region": {"type": "string", "description": "Region of interest for twitter search. Default is 'all'."}}, "required": ["topic"]}}]}, "model_result_raw": "```json\n<functions>\n  <function name=\"social_media_analytics.most_followed\">\n    <param name=\"topic\" type=\"string\">psychology</param>\n    <param name=\"sub_topics\" type=\"array\">\n      <value>behaviour</value>\n      <value>group dynamics</value>\n    </param>\n  </function>\n</functions>\n```", "possible_answer": [{"social_media_analytics.most_followed": {"topic": ["psychology"], "sub_topics": [["behaviour", "group dynamics"]], "region": ["", "all"]}}]}
{"id": "simple_231", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 0)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_231", "question": [[{"role": "user", "content": "Provide key war events in German history from 1871 to 1945."}]], "function": [{"name": "history.get_key_events", "description": "Retrieve key historical events within a specific period for a certain country.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The name of the country for which history is queried."}, "start_year": {"type": "integer", "description": "Start year of the period for which history is queried."}, "end_year": {"type": "integer", "description": "End year of the period for which history is queried."}, "event_type": {"type": "array", "items": {"type": "string", "enum": ["War", "Revolutions", "Diplomacy", "Economy"]}, "description": "Types of event. Default to 'all', which all types will be considered."}}, "required": ["country", "start_year", "end_year"]}}]}, "model_result_raw": "```json\n<functions>\n  <function name=\"history.get_key_events\">\n    <param name=\"country\" type=\"string\">Germany</param>\n    <param name=\"start_year\" type=\"integer\">1871</param>\n    <param name=\"end_year\" type=\"integer\">1945</param>\n    <param name=\"event_type\" type=\"array\">\n      <value>War</value>\n    </param>\n  </function>\n</functions>\n```", "possible_answer": [{"history.get_key_events": {"country": ["Germany", "DE"], "start_year": [1871], "end_year": [1945], "event_type": [["War"]]}}]}
{"id": "simple_234", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_234", "question": [[{"role": "user", "content": "Find important Wars in European history during the 19th century."}]], "function": [{"name": "history_eu.fetch_events", "description": "Fetches significant historical events within a specific time period in European history.", "parameters": {"type": "dict", "properties": {"century": {"type": "integer", "description": "The century you are interested in."}, "region": {"type": "string", "description": "The region of Europe you are interested in.", "enum": ["Northern", "Southern", "Eastern", "Western"]}, "category": {"type": "string", "description": "Category of the historical events. Default is 'Culture'.", "enum": ["Wars", "Culture", "Politics", "Scientific", "Others"]}}, "required": ["century", "region"]}}]}, "model_result_raw": "Which region of Europe are you interested in? (Northern, Southern, Eastern, or Western)\n", "model_result_decoded": [], "possible_answer": [{"history_eu.fetch_events": {"century": [19], "region": ["Northern", "Southern", "Eastern", "Western"], "category": ["Wars"]}}]}
{"id": "simple_235", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'event': 'Treaty of Lisbon signing'. Expected one of ['Treaty of Lisbon', 'Signing of the Treaty of Lisbon', 'The signing of the Treaty of Lisbon']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_235", "question": [[{"role": "user", "content": "When was the signing of the Treaty of Lisbon?"}]], "function": [{"name": "get_event_date", "description": "Retrieve the date of a historical event.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The name of the historical event."}, "location": {"type": "string", "description": "Location where the event took place. Default to global if not specified."}}, "required": ["event"]}}]}, "model_result_raw": "```json\n<functions>\n  <function name=\"get_event_date\">\n    <param name=\"event\" type=\"string\">Treaty of Lisbon signing</param>\n  </function>\n</functions>\n```", "model_result_decoded": [{"get_event_date": {"event": "Treaty of Lisbon signing"}}], "possible_answer": [{"get_event_date": {"event": ["Treaty of Lisbon", "Signing of the Treaty of Lisbon", "The signing of the Treaty of Lisbon"], "location": ["", "Lisbon", "Lisbon, Portugal"]}}]}
{"id": "simple_238", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_238", "question": [[{"role": "user", "content": "Who was the president of the United States during the American Civil War?"}]], "function": [{"name": "us_history.get_president", "description": "Retrieve the U.S. president during a specific event in American history.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The event in U.S. history."}, "year": {"type": "integer", "description": "The specific year of the event."}}, "required": ["event", "year"]}}]}, "model_result_raw": "To answer this question, I need to know the year of the American Civil War. Could you please provide the year?\n", "model_result_decoded": [], "possible_answer": [{"us_history.get_president": {"event": ["American Civil War"], "year": [1861, 1862, 1863, 1864, 1865]}}]}
{"id": "simple_271", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 0)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_271", "question": [[{"role": "user", "content": "What is the structural dynamic analysis of the building with building Id B1004 for 2nd, 3rd and 4th floors?"}]], "function": [{"name": "analyze_structure", "description": "Analyze a structure of a building based on its Id and floor numbers.", "parameters": {"type": "dict", "properties": {"building_id": {"type": "string", "description": "The unique identification number of the building."}, "floors": {"type": "array", "items": {"type": "integer"}, "description": "Floor numbers to be analyzed."}, "mode": {"type": "string", "description": "Mode of analysis, e.g. 'static' or 'dynamic'. Default is 'static'."}}, "required": ["building_id", "floors"]}}]}, "model_result_raw": "```json\n<functions>\n  <function name=\"analyze_structure\">\n    <param name=\"building_id\" type=\"string\">B1004</param>\n    <param name=\"floors\" type=\"array\">\n      <value>2</value>\n      <value>3</value>\n      <value>4</value>\n    </param>\n    <param name=\"mode\" type=\"string\">dynamic</param>\n  </function>\n</functions>\n```", "possible_answer": [{"analyze_structure": {"building_id": ["B1004"], "floors": [[2, 3, 4]], "mode": ["dynamic"]}}]}
{"id": "simple_277", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 0)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_277", "question": [[{"role": "user", "content": "Find the working hours and ticket price of The British Museum for this weekend, Jun.20,2023."}]], "function": [{"name": "museum_info", "description": "Get information about a museum including its opening hours and ticket prices for a specific date range.", "parameters": {"type": "dict", "properties": {"museum": {"type": "string", "description": "The name of the museum."}, "date": {"type": "string", "description": "The specific date for which information is needed, in the format of YYYY-MM-DD such as '2022-12-01'."}, "information": {"type": "array", "items": {"type": "string", "enum": ["opening_hours", "ticket_price", "address"]}, "description": "The type of information needed from the museum. This is optional and defaults to 'all' if not specified.", "default": "all"}}, "required": ["museum", "date"]}}]}, "model_result_raw": "```tool_code\n<functions>\n  <function name=\"museum_info\">\n    <param name=\"museum\" type=\"string\">The British Museum</param>\n    <param name=\"date\" type=\"string\">2023-06-20</param>\n    <param name=\"information\" type=\"array\">\n      <value>opening_hours</value>\n      <value>ticket_price</value>\n    </param>\n  </function>\n</functions>\n```", "possible_answer": [{"museum_info": {"museum": ["The British Museum"], "date": ["2023-06-20"], "information": [["opening_hours", "ticket_price"], ["ticket_price", "opening_hours"]]}}]}
{"id": "simple_282", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 0)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_282", "question": [[{"role": "user", "content": "Find a Yamaha flute with the specifications of open hole, C foot, and silver headjoint available for sale."}]], "function": [{"name": "find_flute", "description": "Locate a flute for sale based on specific requirements.", "parameters": {"type": "dict", "properties": {"brand": {"type": "string", "description": "The brand of the flute. Example, 'Yamaha'"}, "specs": {"type": "array", "items": {"type": "string", "enum": ["open hole", "C foot", "silver headjoint"]}, "description": "The specifications of the flute desired."}}, "required": ["brand", "specs"]}}]}, "model_result_raw": "```json\n<functions>\n  <function name=\"find_flute\">\n    <param name=\"brand\" type=\"string\">Yamaha</param>\n    <param name=\"specs\" type=\"array\">\n      <value>open hole</value>\n      <value>C foot</value>\n      <value>silver headjoint</value>\n    </param>\n  </function>\n</functions>\n```", "possible_answer": [{"find_flute": {"brand": ["Yamaha"], "specs": [["open hole", "C foot", "silver headjoint"]]}}]}
{"id": "simple_284", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Wrong number of functions."], "error_type": "simple_function_checker:wrong_count", "prompt": {"id": "simple_284", "question": [[{"role": "user", "content": "Get information about the pop concerts in New York for next month."}]], "function": [{"name": "concert_info.get", "description": "Retrieve information about concerts based on specific genre, location and date.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the concert will take place."}, "date": {"type": "string", "description": "Time frame to get the concert for."}, "genre": {"type": "string", "description": "Genre of the concert.", "enum": ["Pop", "Rock", "Country", "Classical", "Electronic", "Hip-Hop"]}}, "required": ["location", "date", "genre"]}}]}, "model_result_raw": "I need to know the exact date for next month to use the concert_info.get function. Could you please provide the date?\n", "model_result_decoded": [], "possible_answer": [{"concert_info.get": {"location": ["New York City, NY", "New York"], "date": ["next month", "2023-06-01", "06/01/2023", "Jun.1,2023", "June 2023"], "genre": ["Pop"]}}]}
{"id": "simple_305", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 0)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_305", "question": [[{"role": "user", "content": "Calculate the overall goal and assist of soccer player Messi in La Liga 2020-2021 season"}]], "function": [{"name": "sports_stats.get_performance", "description": "Compute the performance score of a soccer player given his game stats for a specific tournament in a season.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "Name of the player."}, "tournament": {"type": "string", "description": "Name of the soccer tournament."}, "season": {"type": "string", "description": "Specific season in format 'YYYY-YYYY'."}, "performance_indicator": {"type": "array", "items": {"type": "string", "enum": ["Goals Scored", "Assists Made", "Saves Made", "Cards Received"]}, "description": "Array of performance indicators. Use as much as possible. Default to use all if not specified."}}, "required": ["player_name", "tournament", "season"]}}]}, "model_result_raw": "```tool_code\n<functions>\n  <function name=\"sports_stats.get_performance\">\n    <param name=\"player_name\" type=\"string\">Messi</param>\n    <param name=\"tournament\" type=\"string\">La Liga</param>\n    <param name=\"season\" type=\"string\">2020-2021</param>\n    <param name=\"performance_indicator\" type=\"array\">\n      <value>Goals Scored</value>\n      <value>Assists Made</value>\n    </param>\n  </function>\n</functions>\n```", "possible_answer": [{"sports_stats.get_performance": {"player_name": ["Messi", "Lionel Messi"], "tournament": ["La Liga"], "season": ["2020-2021"], "performance_indicator": [["Goals Scored", "Assists Made"]]}}]}
{"id": "simple_328", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 0)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_328", "question": [[{"role": "user", "content": "Find the rating and player count of the board game 'Ticket to Ride'."}]], "function": [{"name": "boardgame.get_info", "description": "Retrieve detailed information of a board game.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "Name of the board game."}, "parameters": {"type": "array", "items": {"type": "string", "enum": ["player count", "playing time", "age", "mechanics", "rating"]}, "description": "Game characteristics interested."}, "language": {"type": "string", "description": "The preferred language for the game information, default is English"}}, "required": ["name", "parameters"]}}]}, "model_result_raw": "```json\n<functions>\n  <function name=\"boardgame.get_info\">\n    <param name=\"name\" type=\"string\">Ticket to Ride</param>\n    <param name=\"parameters\" type=\"array\">\n      <value>player count</value>\n      <value>rating</value>\n    </param>\n  </function>\n</functions>\n```", "possible_answer": [{"boardgame.get_info": {"name": ["Ticket to Ride"], "parameters": [["rating", "player count"], ["player count", "rating"]], "language": ["", "English"]}}]}
{"id": "simple_340", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 0)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_340", "question": [[{"role": "user", "content": "Determine the winner in a Poker game with John having a Hand of 8\u2665, 10\u2665, J\u2665, Q\u2665, K\u2665 and Mike having 9\u2660, J\u2660, 10\u2660, Q\u2660, K\u2660."}]], "function": [{"name": "card_games.poker_determine_winner", "description": "Determines the winner in a game of Poker based on the cards in each players' hands.", "parameters": {"type": "dict", "properties": {"player1": {"type": "string", "description": "The first player's name."}, "hand1": {"type": "array", "items": {"type": "string"}, "description": "The list of cards (as strings) in first player's hand. E.g ['10\u2660', 'J\u2660']"}, "player2": {"type": "string", "description": "The second player's name."}, "hand2": {"type": "array", "items": {"type": "string"}, "description": "The list of cards (as strings) in second player's hand. E.g ['9\u2665', '10\u2665']"}}, "required": ["player1", "hand1", "player2", "hand2"]}}]}, "model_result_raw": "```xml\n<functions>\n  <function name=\"card_games.poker_determine_winner\">\n    <param name=\"player1\" type=\"string\">John</param>\n    <param name=\"hand1\" type=\"array\">\n      <value>8\u2665</value>\n      <value>10\u2665</value>\n      <value>J\u2665</value>\n      <value>Q\u2665</value>\n      <value>K\u2665</value>\n    </param>\n    <param name=\"player2\" type=\"string\">Mike</param>\n    <param name=\"hand2\" type=\"array\">\n      <value>9\u2660</value>\n      <value>J\u2660</value>\n      <value>10\u2660</value>\n      <value>Q\u2660</value>\n      <value>K\u2660</value>\n    </param>\n  </function>\n</functions>\n```", "possible_answer": [{"card_games.poker_determine_winner": {"player1": ["John"], "hand1": [["8\u2665", "10\u2665", "J\u2665", "Q\u2665", "K\u2665"]], "player2": ["Mike"], "hand2": [["9\u2660", "J\u2660", "10\u2660", "Q\u2660", "K\u2660"]]}}]}
{"id": "simple_370", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'quantity': [3, 5]. Expected one of [[3, 1]]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_370", "question": [[{"role": "user", "content": "Order three bottles of olive oil and a five pound bag of rice from Safeway in Palo Alto."}]], "function": [{"name": "safeway.order", "description": "Order specified items from a Safeway location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location of the Safeway store, e.g. Palo Alto, CA."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order."}, "quantity": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item in the order list."}}, "required": ["location", "items", "quantity"]}}]}, "model_result_raw": "```json\n<functions>\n  <function name=\"safeway.order\">\n    <param name=\"location\" type=\"string\">Palo Alto, CA</param>\n    <param name=\"items\" type=\"array\">[\"olive oil\", \"rice\"]</param>\n    <param name=\"quantity\" type=\"array\">[3, 5]</param>\n  </function>\n</functions>\n```", "model_result_decoded": [{"safeway.order": {"location": "Palo Alto, CA", "items": ["olive oil", "rice"], "quantity": [3, 5]}}], "possible_answer": [{"safeway.order": {"location": ["Palo Alto", "Palo Alto, CA"], "items": [["olive oil", "rice"], ["olive oil", "bag of rice"]], "quantity": [[3, 1]]}}]}
{"id": "simple_371", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 0)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_371", "question": [[{"role": "user", "content": "Check the price of tomatoes and lettuce at the Whole Foods in Los Angeles."}]], "function": [{"name": "whole_foods.check_price", "description": "Check the price of items at a specific Whole Foods location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "Location of the Whole Foods store."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items for which the price needs to be checked."}}, "required": ["location", "items"]}}]}, "model_result_raw": "```json\n<functions>\n  <function name=\"whole_foods.check_price\">\n    <param name=\"location\" type=\"string\">Los Angeles</param>\n    <param name=\"items\" type=\"array\">\n      <value>tomatoes</value>\n      <value>lettuce</value>\n    </param>\n  </function>\n</functions>\n```", "possible_answer": [{"whole_foods.check_price": {"location": ["Los Angeles", "LA"], "items": [["tomatoes", "lettuce"]]}}]}
{"id": "simple_373", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 0)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_373", "question": [[{"role": "user", "content": "I want to buy apples, rice, and 12 pack of bottled water from a Walmart near San Jose. Show me the product information and stock availability."}]], "function": [{"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified."}}, "required": ["loc", "product_list"]}}]}, "model_result_raw": "```json\n<functions>\n  <function name=\"walmart.purchase\">\n    <param name=\"loc\" type=\"string\">San Jose</param>\n    <param name=\"product_list\" type=\"array\">\n      <value>apples</value>\n      <value>rice</value>\n      <value>bottled water</value>\n    </param>\n    <param name=\"pack_size\" type=\"array\">\n      <value>1</value>\n      <value>1</value>\n      <value>12</value>\n    </param>\n  </function>\n</functions>\n```", "possible_answer": [{"walmart.purchase": {"loc": ["San Jose", "San Jose, CA"], "product_list": [["apples", "rice", "bottled water"], ["apples", "rice", "water"]], "pack_size": [[1, 1, 12]]}}]}
{"id": "simple_375", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'items': ['pumpkin', 'eggs']. Expected one of [['pumpkins', 'eggs'], ['pumpkin', 'dozen eggs']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_375", "question": [[{"role": "user", "content": "Check the total price for three pumpkins and two dozen eggs at Walmart."}]], "function": [{"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "dict", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional). Default to all if not specified."}}, "required": ["items", "quantities"]}}]}, "model_result_raw": "```json\n<functions>\n  <function name=\"walmart.check_price\">\n    <param name=\"items\" type=\"array\">[\"pumpkin\", \"eggs\"]</param>\n    <param name=\"quantities\" type=\"array\">[3, 24]</param>\n  </function>\n</functions>\n```", "model_result_decoded": [{"walmart.check_price": {"items": ["pumpkin", "eggs"], "quantities": [3, 24]}}], "possible_answer": [{"walmart.check_price": {"items": [["pumpkins", "eggs"], ["pumpkin", "dozen eggs"]], "quantities": [[3, 24], [3, 2]], "store_location": [""]}}]}
{"id": "simple_380", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid syntax (<unknown>, line 0)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_380", "question": [[{"role": "user", "content": "Book a single room at a pet friendly hotel near Manhattan, New York for 3 nights starting from March 10th, 2023."}]], "function": [{"name": "hotel_booking", "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you want to book the hotel."}, "room_type": {"type": "string", "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."}, "duration": {"type": "integer", "description": "The number of nights you want to book the hotel for."}, "start_date": {"type": "string", "description": "The date when your stay begins."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["pet_friendly", "gym", "swimming_pool", "free_breakfast", "parking"]}, "description": "Optional preferences of stay at the hotel. Default to use all if not specified."}}, "required": ["location", "room_type", "duration", "start_date"]}}]}, "model_result_raw": "```xml\n<functions>\n<function name=\"hotel_booking\">\n<param name=\"location\" type=\"string\">Manhattan, New York</param>\n<param name=\"room_type\" type=\"string\">single</param>\n<param name=\"duration\" type=\"integer\">3</param>\n<param name=\"start_date\" type=\"string\">March 10th, 2023</param>\n<param name=\"preferences\" type=\"array\">\n<value>pet_friendly</value>\n</param>\n</function>\n</functions>\n```", "possible_answer": [{"hotel_booking": {"location": ["Manhattan, New York", "Manhattan, NY", "NYC", "New York City"], "room_type": ["single"], "duration": [3], "start_date": ["2023-03-10", "03/10/2023", "Mar.10,2023", "March 10th, 2023", "March 10th,2023", "March10th, 2023", "March10th,2023"], "preferences": [["pet_friendly"]]}}]}
{"id": "simple_382", "model_name": "gemini-2.0-flash-001", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'start_date': '10th December 2022'. Expected one of ['2022-12-10', '10/12/2022', 'Dec 10, 2022', 'December 10, 2022']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_382", "question": [[{"role": "user", "content": "Book a single room for two nights at the Hilton Hotel in Chicago, starting from 10th December 2022."}]], "function": [{"name": "book_hotel", "description": "Book a room of specified type for a particular number of nights at a specific hotel, starting from a specified date.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city in which the hotel is located."}, "room_type": {"type": "string", "description": "The type of room to be booked."}, "start_date": {"type": "string", "description": "The start date for the booking."}, "nights": {"type": "integer", "description": "The number of nights for which the booking is to be made."}}, "required": ["hotel_name", "location", "room_type", "start_date", "nights"]}}]}, "model_result_raw": "<functions><function name=\"book_hotel\"><param name=\"hotel_name\" type=\"string\">Hilton Hotel</param><param name=\"location\" type=\"string\">Chicago</param><param name=\"room_type\" type=\"string\">single</param><param name=\"start_date\" type=\"string\">10th December 2022</param><param name=\"nights\" type=\"integer\">2</param></function></functions>", "model_result_decoded": [{"book_hotel": {"hotel_name": "Hilton Hotel", "location": "Chicago", "room_type": "single", "start_date": "10th December 2022", "nights": 2}}], "possible_answer": [{"book_hotel": {"hotel_name": ["Hilton Hotel", "Hilton"], "location": ["Chicago"], "room_type": ["single"], "start_date": ["2022-12-10", "10/12/2022", "Dec 10, 2022", "December 10, 2022"], "nights": [2]}}]}